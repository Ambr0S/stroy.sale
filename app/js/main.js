(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'app',
	props: ['rootPropCartList'],
	data: function data() {
		return {};
	},
	mounted: function mounted() {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{attrs:{"id":"app"}},[_c('router-view',{attrs:{"propCartList":_vm.rootPropCartList}})],1)}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-bdefd94e", __vue__options__)
  } else {
    hotAPI.reload("data-v-bdefd94e", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFwcC52dWU/NjczMmZlYmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQVlBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQVZBOzs7OztBQVhBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGUgbGFuZz1cImphZGVcIj5cclxuXHQjYXBwXHJcblx0XHQvLyAtIFJPVVRFUlxyXG5cdFx0cm91dGVyLXZpZXcoOnByb3BDYXJ0TGlzdD1cInJvb3RQcm9wQ2FydExpc3RcIilcclxuXHRcdC8vIC0gRU5EIFJPVVRFUlxyXG5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcblxyXG5cclxuXHRleHBvcnQgZGVmYXVsdCB7XHJcblx0XHRuYW1lOiAnYXBwJyxcclxuXHRcdHByb3BzOiBbXHJcblx0XHRcdCdyb290UHJvcENhcnRMaXN0J1xyXG5cdFx0XSxcclxuXHRcdGRhdGE6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRtb3VudGVkOiBmdW5jdGlvbiAoKSB7XHJcblxyXG5cclxuXHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD5cclxuIl19
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _vue = require('../../../libs/vue');

var _vue2 = _interopRequireDefault(_vue);

var _vueRouter = require('vue-router');

var _vueRouter2 = _interopRequireDefault(_vueRouter);

var _Catalog = require('../../pages/CatalogPage/Catalog.vue');

var _Catalog2 = _interopRequireDefault(_Catalog);

var _Cart = require('../../pages/CartPage/Cart.vue');

var _Cart2 = _interopRequireDefault(_Cart);

var _Order = require('../../pages/OrderPage/Order.vue');

var _Order2 = _interopRequireDefault(_Order);

var _index = require('../../pages/DeliveryPage/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../pages/PurchaseReturnsPage/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../pages/ServicePage/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../pages/ContactsPage/index.vue');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_vue2.default.use(_vueRouter2.default);

exports.default = new _vueRouter2.default({

	//mode: 'history',
	routes: [{
		path: '/catalog/:idCategory/',
		name: 'Category',
		component: _Catalog2.default,
		children: [{
			path: '/catalog/:idCategory/:idSubCategory',
			name: 'subCategory',
			component: _Catalog2.default
		}]
	}, {
		path: '/cart',
		name: 'Cart',
		component: _Cart2.default
	}, {
		path: '/order',
		name: 'Order',
		component: _Order2.default
	}, {
		path: '/delivery',
		name: 'DeliveryPage',
		component: _index2.default
	}, {
		path: '/purchase-returns',
		name: 'PurchaseReturnsPage',
		component: _index4.default
	}, {
		path: '/service',
		name: 'ServicePage',
		component: _index6.default
	}, {
		path: '/contacts',
		name: 'ContactsPage',
		component: _index8.default
	}]
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInVzZSIsInJvdXRlcyIsInBhdGgiLCJuYW1lIiwiY29tcG9uZW50IiwiY2hpbGRyZW4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUEsY0FBSUEsR0FBSjs7a0JBRWUsd0JBQVc7O0FBRXpCO0FBQ0FDLFNBQVEsQ0FDUDtBQUNDQyxRQUFNLHVCQURQO0FBRUNDLFFBQU0sVUFGUDtBQUdDQyw4QkFIRDtBQUlDQyxZQUFVLENBQ1Q7QUFDQ0gsU0FBTSxxQ0FEUDtBQUVDQyxTQUFNLGFBRlA7QUFHQ0M7QUFIRCxHQURTO0FBSlgsRUFETyxFQWFQO0FBQ0NGLFFBQU0sT0FEUDtBQUVDQyxRQUFNLE1BRlA7QUFHQ0M7QUFIRCxFQWJPLEVBa0JQO0FBQ0NGLFFBQU0sUUFEUDtBQUVDQyxRQUFNLE9BRlA7QUFHQ0M7QUFIRCxFQWxCTyxFQXVCUDtBQUNDRixRQUFNLFdBRFA7QUFFQ0MsUUFBTSxjQUZQO0FBR0NDO0FBSEQsRUF2Qk8sRUE0QlA7QUFDQ0YsUUFBTSxtQkFEUDtBQUVDQyxRQUFNLHFCQUZQO0FBR0NDO0FBSEQsRUE1Qk8sRUFpQ1A7QUFDQ0YsUUFBTSxVQURQO0FBRUNDLFFBQU0sYUFGUDtBQUdDQztBQUhELEVBakNPLEVBc0NQO0FBQ0NGLFFBQU0sV0FEUDtBQUVDQyxRQUFNLGNBRlA7QUFHQ0M7QUFIRCxFQXRDTztBQUhpQixDQUFYLEMiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVnVlICAgICAgICAgICAgICAgICAgIGZyb20gJy4uLy4uLy4uL2xpYnMvdnVlJ1xyXG5pbXBvcnQgUm91dGVyICAgICAgICAgICAgICAgIGZyb20gJ3Z1ZS1yb3V0ZXInXHJcbmltcG9ydCBDYXRhbG9nICAgICAgICAgICAgICAgZnJvbSAnLi4vLi4vcGFnZXMvQ2F0YWxvZ1BhZ2UvQ2F0YWxvZy52dWUnXHJcbmltcG9ydCBDYXJ0ICAgICAgICAgICAgICAgICAgZnJvbSAnLi4vLi4vcGFnZXMvQ2FydFBhZ2UvQ2FydC52dWUnXHJcbmltcG9ydCBPcmRlciAgICAgICAgICAgICAgICAgZnJvbSAnLi4vLi4vcGFnZXMvT3JkZXJQYWdlL09yZGVyLnZ1ZSdcclxuaW1wb3J0IERlbGl2ZXJ5UGFnZSAgICAgICAgICBmcm9tICcuLi8uLi9wYWdlcy9EZWxpdmVyeVBhZ2UvaW5kZXgudnVlJ1xyXG5pbXBvcnQgUHVyY2hhc2VSZXR1cm5zUGFnZSAgIGZyb20gJy4uLy4uL3BhZ2VzL1B1cmNoYXNlUmV0dXJuc1BhZ2UvaW5kZXgudnVlJ1xyXG5pbXBvcnQgU2VydmljZVBhZ2UgICAgICAgICAgIGZyb20gJy4uLy4uL3BhZ2VzL1NlcnZpY2VQYWdlL2luZGV4LnZ1ZSdcclxuaW1wb3J0IENvbnRhY3RzUGFnZSAgICAgICAgICBmcm9tICcuLi8uLi9wYWdlcy9Db250YWN0c1BhZ2UvaW5kZXgudnVlJ1xyXG5cclxuVnVlLnVzZShSb3V0ZXIpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgbmV3IFJvdXRlcih7XHJcblxyXG5cdC8vbW9kZTogJ2hpc3RvcnknLFxyXG5cdHJvdXRlczogW1xyXG5cdFx0e1xyXG5cdFx0XHRwYXRoOiAnL2NhdGFsb2cvOmlkQ2F0ZWdvcnkvJyxcclxuXHRcdFx0bmFtZTogJ0NhdGVnb3J5JyxcclxuXHRcdFx0Y29tcG9uZW50OiBDYXRhbG9nLFxyXG5cdFx0XHRjaGlsZHJlbjogW1xyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdHBhdGg6ICcvY2F0YWxvZy86aWRDYXRlZ29yeS86aWRTdWJDYXRlZ29yeScsXHJcblx0XHRcdFx0XHRuYW1lOiAnc3ViQ2F0ZWdvcnknLFxyXG5cdFx0XHRcdFx0Y29tcG9uZW50OiBDYXRhbG9nXHJcblx0XHRcdFx0fVxyXG5cdFx0XHRdLFxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0cGF0aDogJy9jYXJ0JyxcclxuXHRcdFx0bmFtZTogJ0NhcnQnLFxyXG5cdFx0XHRjb21wb25lbnQ6IENhcnRcclxuXHRcdH0sXHJcblx0XHR7XHJcblx0XHRcdHBhdGg6ICcvb3JkZXInLFxyXG5cdFx0XHRuYW1lOiAnT3JkZXInLFxyXG5cdFx0XHRjb21wb25lbnQ6IE9yZGVyXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRwYXRoOiAnL2RlbGl2ZXJ5JyxcclxuXHRcdFx0bmFtZTogJ0RlbGl2ZXJ5UGFnZScsXHJcblx0XHRcdGNvbXBvbmVudDogRGVsaXZlcnlQYWdlXHJcblx0XHR9LFxyXG5cdFx0e1xyXG5cdFx0XHRwYXRoOiAnL3B1cmNoYXNlLXJldHVybnMnLFxyXG5cdFx0XHRuYW1lOiAnUHVyY2hhc2VSZXR1cm5zUGFnZScsXHJcblx0XHRcdGNvbXBvbmVudDogUHVyY2hhc2VSZXR1cm5zUGFnZVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0cGF0aDogJy9zZXJ2aWNlJyxcclxuXHRcdFx0bmFtZTogJ1NlcnZpY2VQYWdlJyxcclxuXHRcdFx0Y29tcG9uZW50OiBTZXJ2aWNlUGFnZVxyXG5cdFx0fSxcclxuXHRcdHtcclxuXHRcdFx0cGF0aDogJy9jb250YWN0cycsXHJcblx0XHRcdG5hbWU6ICdDb250YWN0c1BhZ2UnLFxyXG5cdFx0XHRjb21wb25lbnQ6IENvbnRhY3RzUGFnZVxyXG5cdFx0fVxyXG5cdF1cclxufSk7Il19
},{"../../../libs/vue":20,"../../pages/CartPage/Cart.vue":13,"../../pages/CatalogPage/Catalog.vue":14,"../../pages/ContactsPage/index.vue":15,"../../pages/DeliveryPage/index.vue":16,"../../pages/OrderPage/Order.vue":17,"../../pages/PurchaseReturnsPage/index.vue":18,"../../pages/ServicePage/index.vue":19,"vue-router":49}],3:[function(require,module,exports){
"use strict";

var _vue = require("../libs/vue");

var _vue2 = _interopRequireDefault(_vue);

var _index = require("./config/router/index.js");

var _index2 = _interopRequireDefault(_index);

var _vueMaterial = require("vue-material");

var _vueMaterial2 = _interopRequireDefault(_vueMaterial);

var _App = require("./config/App.vue");

var _App2 = _interopRequireDefault(_App);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var eventHub = new _vue2.default();
_vue2.default.use(_vueMaterial2.default);

eventHub.$on('carter', function (msg) {
	vm.cartList = msg;
});

var vm = new _vue2.default({
	el: "#app",
	template: "<App :rootPropCartList='cartList'></App>",
	router: _index2.default,
	components: {
		App: _App2.default
	},
	data: function data() {
		return {
			eventHub: eventHub,
			cartList: null
		};
	},
	mounted: function mounted() {

		// добавляем в корзину товар из Local Storage, если он там есть
		if (localStorage.hasOwnProperty('cartList')) {
			this.cartList = JSON.parse(localStorage.cartList) || [];
		}
	}
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfZjc4NGMzMjguanMiXSwibmFtZXMiOlsiZXZlbnRIdWIiLCJ1c2UiLCIkb24iLCJtc2ciLCJ2bSIsImNhcnRMaXN0IiwiZWwiLCJ0ZW1wbGF0ZSIsInJvdXRlciIsImNvbXBvbmVudHMiLCJBcHAiLCJkYXRhIiwibW91bnRlZCIsImxvY2FsU3RvcmFnZSIsImhhc093blByb3BlcnR5IiwiSlNPTiIsInBhcnNlIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFJQSxXQUFXLG1CQUFmO0FBQ0EsY0FBSUMsR0FBSjs7QUFFQUQsU0FBU0UsR0FBVCxDQUFhLFFBQWIsRUFBdUIsVUFBQ0MsR0FBRCxFQUFTO0FBQy9CQyxJQUFHQyxRQUFILEdBQWNGLEdBQWQ7QUFDQSxDQUZEOztBQUlBLElBQUlDLEtBQUssa0JBQVE7QUFDaEJFLEtBQUksTUFEWTtBQUVoQkMsV0FBVSwwQ0FGTTtBQUdoQkMsd0JBSGdCO0FBSWhCQyxhQUFZO0FBQ1hDO0FBRFcsRUFKSTtBQU9oQkMsT0FBTSxnQkFBWTtBQUNqQixTQUFPO0FBQ05YLGFBQVVBLFFBREo7QUFFTkssYUFBVTtBQUZKLEdBQVA7QUFJQSxFQVplO0FBYWhCTyxRQWJnQixxQkFhTjs7QUFFVDtBQUNBLE1BQUlDLGFBQWFDLGNBQWIsQ0FBNEIsVUFBNUIsQ0FBSixFQUE2QztBQUM1QyxRQUFLVCxRQUFMLEdBQWdCVSxLQUFLQyxLQUFMLENBQVdILGFBQWFSLFFBQXhCLEtBQXFDLEVBQXJEO0FBQ0E7QUFFRDtBQXBCZSxDQUFSLENBQVQiLCJmaWxlIjoiZmFrZV9mNzg0YzMyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgICAgICAgICBmcm9tIFwiLi4vbGlicy92dWVcIlxyXG5pbXBvcnQgcm91dGVyICAgICAgZnJvbSBcIi4vY29uZmlnL3JvdXRlci9pbmRleC5qc1wiXHJcbmltcG9ydCBWdWVNYXRlcmlhbCBmcm9tIFwidnVlLW1hdGVyaWFsXCJcclxuaW1wb3J0IEFwcCAgICAgICAgIGZyb20gXCIuL2NvbmZpZy9BcHAudnVlXCJcclxuXHJcbmxldCBldmVudEh1YiA9IG5ldyBWdWUoKTtcclxuVnVlLnVzZShWdWVNYXRlcmlhbCk7XHJcblxyXG5ldmVudEh1Yi4kb24oJ2NhcnRlcicsIChtc2cpID0+IHtcclxuXHR2bS5jYXJ0TGlzdCA9IG1zZztcclxufSk7XHJcblxyXG5sZXQgdm0gPSBuZXcgVnVlKHtcclxuXHRlbDogXCIjYXBwXCIsXHJcblx0dGVtcGxhdGU6IFwiPEFwcCA6cm9vdFByb3BDYXJ0TGlzdD0nY2FydExpc3QnPjwvQXBwPlwiLFxyXG5cdHJvdXRlcixcclxuXHRjb21wb25lbnRzOiB7XHJcblx0XHRBcHBcclxuXHR9LFxyXG5cdGRhdGE6IGZ1bmN0aW9uICgpIHtcclxuXHRcdHJldHVybiB7XHJcblx0XHRcdGV2ZW50SHViOiBldmVudEh1YixcclxuXHRcdFx0Y2FydExpc3Q6IG51bGxcclxuXHRcdH1cclxuXHR9LFxyXG5cdG1vdW50ZWQoKSB7XHJcblxyXG5cdFx0Ly8g0LTQvtCx0LDQstC70Y/QtdC8INCyINC60L7RgNC30LjQvdGDINGC0L7QstCw0YAg0LjQtyBMb2NhbCBTdG9yYWdlLCDQtdGB0LvQuCDQvtC9INGC0LDQvCDQtdGB0YLRjFxyXG5cdFx0aWYgKGxvY2FsU3RvcmFnZS5oYXNPd25Qcm9wZXJ0eSgnY2FydExpc3QnKSkge1xyXG5cdFx0XHR0aGlzLmNhcnRMaXN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuY2FydExpc3QpIHx8IFtdO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcbn0pOyJdfQ==
},{"../libs/vue":20,"./config/App.vue":1,"./config/router/index.js":2,"vue-material":48}],4:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'CartListComponent',
	props: ['propCartList'],
	components: {},
	data: function data() {
		return {};
	},
	methods: {
		cartListCounterChange: function cartListCounterChange(index, symb) {
			if (symb == 'plus') {
				this.propCartList[index].count++;
			} else if (symb == 'minus' && this.propCartList[index].count > 1) {
				this.propCartList[index].count--;
			}
		},
		deleteProduct: function deleteProduct(index, number) {
			this.propCartList.splice(index, 1);

			localStorage.cartList = JSON.stringify(this.propCartList);
		}
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"cart-list"},_vm._l((_vm.propCartList),function(item,index){return _c('div',{staticClass:"cart-list__item"},[_c('div',{staticClass:"cart-list__img"},[_c('img',{attrs:{"src":item.image,"alt":""}})]),_c('div',{staticClass:"cart-list__description"},[_c('div',{staticClass:"cart-list__name"},[_vm._v(_vm._s(item.name))]),_c('div',{staticClass:"cart-list__price"},[_vm._v("Цена за шт. "+_vm._s(item.price)+".00 руб.")]),_c('div',{staticClass:"cart-list__counter"},[_c('span',[_vm._v("Количество:")]),_c('button',{staticClass:"counter--minus",on:{"click":function($event){_vm.cartListCounterChange(index,'minus')}}},[_vm._v("-")]),_c('input',{domProps:{"value":item.count}}),_c('button',{staticClass:"counter--plus",on:{"click":function($event){_vm.cartListCounterChange(index,'plus')}}},[_vm._v("+")])]),_c('div',{staticClass:"cart-list__price--sum"},[_vm._v("Стоимость: "),_c('span',[_vm._v(_vm._s(item.price * item.count))]),_vm._v(". 00 руб.")])]),_c('button',{staticClass:"cart-list__button--delete",on:{"click":function($event){_vm.deleteProduct(index)}}})])}))}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-54077fc8", __vue__options__)
  } else {
    hotAPI.reload("data-v-54077fc8", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT84MjU5NWQ4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBb0JBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBOztBQUdBO0FBQ0E7QUFqQkE7QUFiQTs7Ozs7QUFuQkE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZSBsYW5nPVwiamFkZVwiPlxyXG5cdC5jYXJ0LWxpc3RcclxuXHRcdC5jYXJ0LWxpc3RfX2l0ZW0odi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gcHJvcENhcnRMaXN0XCIpXHJcblx0XHRcdC5jYXJ0LWxpc3RfX2ltZ1xyXG5cdFx0XHRcdGltZyg6c3JjPSdpdGVtLmltYWdlJywgYWx0PScnKVxyXG5cdFx0XHQuY2FydC1saXN0X19kZXNjcmlwdGlvblxyXG5cdFx0XHRcdC5jYXJ0LWxpc3RfX25hbWUge3sgaXRlbS5uYW1lIH19XHJcblx0XHRcdFx0LmNhcnQtbGlzdF9fcHJpY2Ug0KbQtdC90LAg0LfQsCDRiNGCLiB7eyBpdGVtLnByaWNlIH19LjAwINGA0YPQsS5cclxuXHRcdFx0XHQuY2FydC1saXN0X19jb3VudGVyXHJcblx0XHRcdFx0XHRzcGFuINCa0L7Qu9C40YfQtdGB0YLQstC+OlxyXG5cdFx0XHRcdFx0YnV0dG9uLmNvdW50ZXItLW1pbnVzKEBjbGljaz1cImNhcnRMaXN0Q291bnRlckNoYW5nZShpbmRleCwnbWludXMnKVwiKSAtXHJcblx0XHRcdFx0XHRpbnB1dCg6dmFsdWU9XCJpdGVtLmNvdW50XCIpXHJcblx0XHRcdFx0XHRidXR0b24uY291bnRlci0tcGx1cyhAY2xpY2s9XCJjYXJ0TGlzdENvdW50ZXJDaGFuZ2UoaW5kZXgsJ3BsdXMnKVwiKSArXHJcblx0XHRcdFx0LmNhcnQtbGlzdF9fcHJpY2UtLXN1bSDQodGC0L7QuNC80L7RgdGC0Yw6IDxzcGFuPnt7IGl0ZW0ucHJpY2UgKiBpdGVtLmNvdW50IH19PC9zcGFuPi4gMDAg0YDRg9CxLlxyXG5cdFx0XHRidXR0b24uY2FydC1saXN0X19idXR0b24tLWRlbGV0ZShAY2xpY2s9XCJkZWxldGVQcm9kdWN0KGluZGV4KVwiKVxyXG5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcblx0ZXhwb3J0IGRlZmF1bHQge1xyXG5cdFx0bmFtZTogJ0NhcnRMaXN0Q29tcG9uZW50JyxcclxuXHRcdHByb3BzOiBbXHJcblx0XHRcdCdwcm9wQ2FydExpc3QnXHJcblx0XHRdLFxyXG5cdFx0Y29tcG9uZW50czoge1xyXG5cclxuXHRcdH0sXHJcblx0XHRkYXRhIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcclxuXHRcdFx0fVxyXG5cdFx0fSxcclxuXHRcdG1ldGhvZHM6IHtcclxuXHRcdFx0XHJcblx0XHRcdC8vINC80LXRgtC+0LQg0LTQvtCx0LDQstC70LXQvdC40Y8g0Lgg0YPQtNCw0LvQtdC90LjRjyDQtdC00LjQvdC40YbRiyDRgtC+0LLQsNGA0LBcclxuXHRcdFx0Y2FydExpc3RDb3VudGVyQ2hhbmdlKGluZGV4LCBzeW1iKSB7XHJcblx0XHRcdFx0aWYgKHN5bWIgPT0gJ3BsdXMnKSB7XHJcblx0XHRcdFx0XHR0aGlzLnByb3BDYXJ0TGlzdFtpbmRleF0uY291bnQrK1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoc3ltYiA9PSAnbWludXMnICYmIHRoaXMucHJvcENhcnRMaXN0W2luZGV4XS5jb3VudCA+IDEpIHtcclxuXHRcdFx0XHRcdHRoaXMucHJvcENhcnRMaXN0W2luZGV4XS5jb3VudC0tXHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9LFxyXG5cdFx0XHRcclxuXHRcdFx0Ly8g0LzQtdGC0L7QtCDRg9C00LDQu9C10L3QuNGPINGC0L7QstCw0YDQsCDQuNC3INC60L7RgNC30LjQvdGLINC4IExvY2FsIFN0b3JhZ2VcclxuXHRcdFx0ZGVsZXRlUHJvZHVjdChpbmRleCwgbnVtYmVyKSB7XHJcblx0XHRcdFx0dGhpcy5wcm9wQ2FydExpc3Quc3BsaWNlKGluZGV4LDEpO1xyXG5cdFx0XHRcclxuXHRcdFx0XHRcclxuXHRcdFx0XHRsb2NhbFN0b3JhZ2UuY2FydExpc3QgPSBKU09OLnN0cmluZ2lmeSh0aGlzLnByb3BDYXJ0TGlzdCk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbjwvc2NyaXB0PlxyXG4iXX0=
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],5:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'CatalogListComponent',
	props: ['propCatalogList', 'propIdCategory', 'propIdSubCategory'],
	data: function data() {
		return {
			catalogUploaded: [],

			catalogRender: [],

			countProductRender: 18,

			cartList: []

		};
	},
	mounted: function mounted() {
		this.loadCatalog();
	},

	watch: {
		propIdCategory: function propIdCategory() {
			this.countProductRender = 18;
			this.loadCatalog();
		},
		propIdSubCategory: function propIdSubCategory() {
			this.countProductRender = 18;
			this.loadCatalog();
		}

	},
	computed: {
		sortCatalog: function sortCatalog() {
			var _this = this;

			var result = [],
			    catalog = this.catalogUploaded,
			    count = this.countProductRender;

			var storage = localStorage.cartList,
			    storageArr = [];

			catalog.sort(function (a, b) {
				if (a.sale > b.sale) {
					return -1;
				}
				if (a.sale < b.sale) {
					return 1;
				}
				return 0;
			});

			catalog.forEach(function (i, index) {
				if (index < count) {
					_this.addPropToCardProduct(false, i);

					if (storage) {
						storageArr = JSON.parse(storage);
						storageArr.forEach(function (y) {
							if (i.number === y.number) {
								_this.addPropToCardProduct(true, i);
							}
						});
					}
					result.push(i);
				}
			});

			return result;
		}
	},
	methods: {
		loadCatalog: function loadCatalog() {
			var _this2 = this;

			var countProductRender = this.countProductRender;

			var jsonFile = this.propIdSubCategory ? this.propCatalogList[this.propIdCategory].category[this.propIdSubCategory].jsonFile : this.propCatalogList[this.propIdCategory].jsonFile;

			_axios2.default.get(jsonFile).then(function (response) {
				_this2.catalogUploaded = response.data;
				_this2.canAddRendersProducts(response.data, countProductRender);
			}, function (err) {
				console.log(err);
			});
		},

		addPropToCardProduct: function addPropToCardProduct(isStorage, i) {
			if (isStorage) {
				i.canAdd = 'noCanAdd';
				i.canAddText = 'Товар в корзине';
			} else {
				i.canAdd = 'canAdd';
				i.canAddText = 'Добавить в корзину';

				i['sizeWrapProduct'] = i.hasOwnProperty('main') ? 'col-xs-12' : 'col-md-4 col-sm-6';
			}
		},

		addCountProductRender: function addCountProductRender() {
			this.countProductRender += 18;
		},

		canAddRendersProducts: function canAddRendersProducts(jsonFile, validCount) {
			if (jsonFile.length < validCount) {
				var button = document.querySelector('.product__add');
				button.classList.add('hidden');
			} else {
				var _button = document.querySelector('.product__add');
				_button.classList.remove('hidden');
			}
		},

		addToCart: function addToCart(e) {
			var target = e.target;

			if (target.classList.contains('noCanAdd')) return;

			target.classList.add('noCanAdd');
			target.textContent = 'Товар в корзине';

			this.cartList.push(this.sortCatalog[e.target.dataset.id]);

			this.cartList.forEach(function (i) {
				return i.count = 1;
			});

			this.$root.eventHub.$emit('carter', this.cartList);

			if (localStorage.hasOwnProperty('cartList')) {
				var _localStorage = JSON.parse(localStorage.cartList) || [];

				var cartList = this.cartList;

				var fullCartList = _localStorage.concat(cartList);

				var wrapFullCartList = fullCartList.sort(function (a, b) {
					return a.number > b.number ? 1 : -1;
				}).filter(function (i, index) {
					if (index + 1 >= fullCartList.length) return true;
					var a = i.number;
					var b = fullCartList[index + 1].number || '';
					return a !== b;
				});

				this.cartList = wrapFullCartList;

				localStorage.setItem('cartList', JSON.stringify(wrapFullCartList));
			} else {
				localStorage.setItem('cartList', JSON.stringify(this.cartList));
			}
		}

	},
	filters: {
		withImage: function withImage(val) {
			if (val.includes('no_photo')) {
				return 'img/no_image.png';
			}
			return val;
		},
		setSale: function setSale(val) {
			return (val * 100).toFixed(0);
		},
		setOldPrice: function setOldPrice(val, k) {
			return k !== undefined ? (val * (1 - k)).toFixed(2) : val;
		}
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"row"},[_vm._l((_vm.sortCatalog),function(item,index){return (item.main)?_c('div',{key:item.id,class:item.sizeWrapProduct},[_c('div',{staticClass:"product product--main"},[_c('div',{staticClass:"product__item product__item--left"},[_c('div',{staticClass:"product__img product__img--main"},[_c('img',{attrs:{"src":_vm._f("withImage")(item.image),"alt":""}})])]),_c('div',{staticClass:"product__item product__item--right"},[_c('div',{staticClass:"product__name product__name--main"},[_vm._v(_vm._s(item.name))]),_c('div',{staticClass:"product__description--main"},[_c('strong',[_vm._v("Описание")]),_vm._v(": "),_c('br'),_vm._v(" "+_vm._s(item.description))]),_c('div',{staticClass:"product__price--main"},[_c('strong',[_vm._v(" "+_vm._s(item.price)+".00 "+_vm._s(item.amount))])]),_c('div',{staticClass:"product__sale product__sale--main"},[_vm._v(_vm._s(_vm._f("setSale")(item.sale))+"%")]),_c('div',{staticClass:"product__compare"},[_vm._m(0,true),(item.price__lerua)?_c('div',{staticClass:"product-compare__item"},[_c('img',{attrs:{"src":"img/ico__lerua.jpg","alt":""}}),_vm._v(" "),_c('i',[_vm._v("Леруа:")]),_vm._v(" "+_vm._s(item.price__lerua)+" "+_vm._s(item.amount))]):_vm._e(),(item.price__obi)?_c('div',{staticClass:"product-compare__item"},[_c('img',{attrs:{"src":"img/ico__obi.jpg","alt":""}}),_vm._v(" "),_c('i',[_vm._v("Оби:")]),_vm._v(" "+_vm._s(item.price__obi)+" "+_vm._s(item.amount))]):_vm._e(),(item.price__krauta)?_c('div',{staticClass:"product-compare__item"},[_c('img',{attrs:{"src":"img/ico__krauta.jpg","alt":""}}),_vm._v(" "),_c('i',[_vm._v("К-раута:")]),_vm._v(" "+_vm._s(item.price__krauta)+" "+_vm._s(item.amount))]):_vm._e(),(item.price__kastorama)?_c('div',{staticClass:"product-compare__item"},[_c('img',{attrs:{"src":"img/ico__kastorama.jpg","alt":""}}),_vm._v(" "),_c('i',[_vm._v("Касторама:")]),_vm._v(" "+_vm._s(item.price__kastorama)+" "+_vm._s(item.amount))]):_vm._e(),(item.price__middle)?_c('div',{staticClass:"product-compare__item"},[_c('i',[_vm._v("Средняя цена:")]),_vm._v(" "+_vm._s(item.price__middle)+" "+_vm._s(item.amount))]):_vm._e()]),_c('button',{staticClass:"product__button",class:item.canAdd,attrs:{"data-id":index},on:{"click":_vm.addToCart}},[_vm._v(_vm._s(item.canAddText))]),_vm._m(1,true)])])]):_c('div',{key:item.id,class:item.sizeWrapProduct},[_c('div',{staticClass:"product"},[_c('div',{staticClass:"product__item"},[(item.sale > 0)?_c('div',{staticClass:"product__sale"},[_vm._v("Скидка "+_vm._s(_vm._f("setSale")(item.sale))+"%")]):_vm._e(),_c('div',{staticClass:"product__name"},[_vm._v(_vm._s(item.name))]),_c('div',{staticClass:"product__img"},[_c('img',{attrs:{"src":_vm._f("withImage")(item.image),"alt":""}})]),_c('div',{staticClass:"product__number"},[_vm._v(_vm._s(item.number))]),_c('div',{staticClass:"product__price"},[_c('div',{staticClass:"product__price--old"},[_vm._v(_vm._s(item.price)+".00 руб.")]),_c('div',{staticClass:"product__price--new"},[_vm._v(_vm._s(item.price)+".00 руб.")]),_c('div',{staticClass:"product__price--costm"},[_vm._v(_vm._s(item.costm))])]),_c('button',{staticClass:"product__button text-center",class:item.canAdd,attrs:{"data-id":index},on:{"click":_vm.addToCart}},[_c('i',{staticClass:"shop icon"}),_vm._v(" "+_vm._s(item.canAddText))])])])])}),_c('div',{staticClass:"col-sm-12"},[_c('div',{staticClass:"product__add"},[_c('button',{staticClass:"button--orange ui",on:{"click":_vm.addCountProductRender}},[_c('i',{staticClass:"arrow down icon"}),_vm._v(" Показать ещё...")])])])],2)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"product-compare__header"},[_c('i',{staticClass:"search icon"}),_c('b',[_vm._v("Цены в других магазинах")])])},function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"product__benefits"},[_c('img',{attrs:{"src":"img/benefit.jpg","alt":""}})])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-66ff6f6d", __vue__options__)
  } else {
    hotAPI.reload("data-v-66ff6f6d", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"axios":21,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],6:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'ControllersComponent',
	props: ['propCatalogList', 'propIdCategory', 'propIdSubCategory'],
	data: function data() {
		return {};
	},
	mounted: function mounted() {
		if (this.idSubCategory) {
			this.isSubCategory = this.propCatalogList[this.idSubCategory].hasOwnProperty('category');
		}
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"controllers"},[_c('div',{staticClass:"controllers__category"},_vm._l((_vm.propCatalogList),function(item,index){return _c('router-link',{key:item.id,staticClass:"controllers__item controllers__item--category",attrs:{"to":{name: 'Category', params: {idCategory: index}}}},[_vm._v(_vm._s(item.name))])})),(_vm.propCatalogList[_vm.propIdCategory].category)?_c('div',{staticClass:"controllers__subCategory"},_vm._l((_vm.propCatalogList[_vm.propIdCategory].category),function(item,index){return _c('router-link',{key:item.id,staticClass:"controllers__item controllers__item--subCategory",attrs:{"to":{name: 'subCategory', params: {idSubCategory: index}}}},[_vm._v(_vm._s(item.name))])})):_vm._e()])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-38ed2f6d", __vue__options__)
  } else {
    hotAPI.reload("data-v-38ed2f6d", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT83YzcyZWJjNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7QUFDQTtBQUtBO0FBQ0E7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFsQkE7Ozs7O0FBVEE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZSBsYW5nPVwiamFkZVwiPlxyXG5cdC5jb250cm9sbGVyc1xyXG5cdFx0LmNvbnRyb2xsZXJzX19jYXRlZ29yeVxyXG5cdFx0XHRyb3V0ZXItbGluay5jb250cm9sbGVyc19faXRlbS5jb250cm9sbGVyc19faXRlbS0tY2F0ZWdvcnkoOnRvPVwie25hbWU6ICdDYXRlZ29yeScsIHBhcmFtczoge2lkQ2F0ZWdvcnk6IGluZGV4fX1cIiwgdi1mb3I9XCIoaXRlbSxpbmRleCkgaW4gcHJvcENhdGFsb2dMaXN0XCIsIDprZXk9XCJpdGVtLmlkXCIpIHt7IGl0ZW0ubmFtZSB9fVxyXG5cdFx0LmNvbnRyb2xsZXJzX19zdWJDYXRlZ29yeSh2LWlmPSdwcm9wQ2F0YWxvZ0xpc3RbcHJvcElkQ2F0ZWdvcnldLmNhdGVnb3J5JylcclxuXHRcdFx0cm91dGVyLWxpbmsuY29udHJvbGxlcnNfX2l0ZW0uY29udHJvbGxlcnNfX2l0ZW0tLXN1YkNhdGVnb3J5KDp0bz1cIntuYW1lOiAnc3ViQ2F0ZWdvcnknLCBwYXJhbXM6IHtpZFN1YkNhdGVnb3J5OiBpbmRleH19XCIsIHYtZm9yPVwiKGl0ZW0saW5kZXgpIGluICBwcm9wQ2F0YWxvZ0xpc3RbcHJvcElkQ2F0ZWdvcnldLmNhdGVnb3J5XCIsIDprZXk9XCJpdGVtLmlkXCIpIHt7IGl0ZW0ubmFtZSB9fVxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHRleHBvcnQgZGVmYXVsdCB7XHJcblx0XHRuYW1lICAgIDogJ0NvbnRyb2xsZXJzQ29tcG9uZW50JyxcclxuXHRcdHByb3BzICAgOiBbXHJcblx0XHRcdCdwcm9wQ2F0YWxvZ0xpc3QnLFxyXG5cdFx0XHQncHJvcElkQ2F0ZWdvcnknLFxyXG5cdFx0XHQncHJvcElkU3ViQ2F0ZWdvcnknXHJcblx0XHRdLFxyXG5cdFx0ZGF0YSAgICA6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHJcblx0XHRcdH1cclxuXHRcdH0sXHJcblx0XHRtb3VudGVkIDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHRcdFx0Ly8g0L/RgNC+0LLQtdGA0LrQsCDQvdCw0LvQuNGH0LjRjyDQv9C+0LTQutCw0YLQtdCz0L7RgNC40LguINC10YHQu9C4IHRydWUsINGC0L4g0L/QvtC60LDQt9Cw0YLRjCDQutC+0L3RgtGA0L7Qu9C70LXRgNGLINC00LvRjyDQv9C+0LTQutCw0YLQtdCz0L7RgNC40LlcclxuXHRcdFx0aWYgKHRoaXMuaWRTdWJDYXRlZ29yeSkge1xyXG5cdFx0XHRcdHRoaXMuaXNTdWJDYXRlZ29yeSA9IHRoaXMucHJvcENhdGFsb2dMaXN0W3RoaXMuaWRTdWJDYXRlZ29yeV0uaGFzT3duUHJvcGVydHkoJ2NhdGVnb3J5JylcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuPC9zY3JpcHQ+XHJcbiJdfQ==
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],7:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../SocialApiModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../MenuModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'FooterComponent',
	components: {
		SocialApi: _index2.default,
		MenuComponent: _index4.default
	},
	data: function data() {
		return {};
	},
	methods: {}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container-fluid footer"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('social-api')],1),_vm._m(0),_c('div',{staticClass:"col-sm-12"},[_c('menu-component',{staticClass:"menu--column text-center"})],1),_vm._m(1)])])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"col-sm-12"},[_c('div',{staticClass:"logo footer__logo text-center"},[_c('img',{staticClass:"logo__img",attrs:{"src":"img/logo--footer.png","alt":""}})])])},function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"col-sm-12"},[_c('div',{staticClass:"footer__copyright menu menu--column text-center"},[_c('ul',{staticClass:"menu__list"},[_c('li',{staticClass:"menu__item"},[_c('a',{staticClass:"menu__link",attrs:{"href":"#"}},[_vm._v("Пользовательское соглашение")])]),_c('li',{staticClass:"menu__item"},[_vm._v("©STROY.SALE | 2013-2017 | Все права защищены")])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-f85ab82a", __vue__options__)
  } else {
    hotAPI.reload("data-v-f85ab82a", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT82ZjNmN2UyOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBb0JBOzs7O0FBQ0E7Ozs7Ozs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFUQTs7Ozs7QUF2QkE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZSBsYW5nPVwiamFkZVwiPlxyXG5cdC5jb250YWluZXItZmx1aWQuZm9vdGVyXHJcblx0XHQucm93XHJcblx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHRzb2NpYWwtYXBpXHJcblx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHQubG9nby5mb290ZXJfX2xvZ28udGV4dC1jZW50ZXJcclxuXHRcdFx0XHRcdGltZy5sb2dvX19pbWcoc3JjPVwiaW1nL2xvZ28tLWZvb3Rlci5wbmdcIiwgYWx0PVwiXCIpXHJcblx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHRtZW51LWNvbXBvbmVudC5tZW51LS1jb2x1bW4udGV4dC1jZW50ZXJcclxuXHRcdFx0LmNvbC1zbS0xMlxyXG5cdFx0XHRcdC5mb290ZXJfX2NvcHlyaWdodC5tZW51Lm1lbnUtLWNvbHVtbi50ZXh0LWNlbnRlclxyXG5cdFx0XHRcdFx0dWwubWVudV9fbGlzdFxyXG5cdFx0XHRcdFx0XHRsaS5tZW51X19pdGVtXHJcblx0XHRcdFx0XHRcdFx0YS5tZW51X19saW5rKGhyZWY9XCIjXCIpINCf0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQvtC1INGB0L7Qs9C70LDRiNC10L3QuNC1XHJcblx0XHRcdFx0XHRcdGxpLm1lbnVfX2l0ZW0gwqlTVFJPWS5TQUxFIHwgMjAxMy0yMDE3IHwg0JLRgdC1INC/0YDQsNCy0LAg0LfQsNGJ0LjRidC10L3Ri1xyXG5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcblx0aW1wb3J0IFNvY2lhbEFwaSAgICAgZnJvbSAnLi4vU29jaWFsQXBpTW9kdWxlcy9pbmRleC52dWUnXHJcblx0aW1wb3J0IE1lbnVDb21wb25lbnQgZnJvbSAnLi4vTWVudU1vZHVsZXMvaW5kZXgudnVlJ1xyXG5cclxuXHRleHBvcnQgZGVmYXVsdCB7XHJcblx0XHRuYW1lOiAnRm9vdGVyQ29tcG9uZW50JyxcclxuXHRcdGNvbXBvbmVudHM6IHtcclxuXHRcdFx0U29jaWFsQXBpLFxyXG5cdFx0XHRNZW51Q29tcG9uZW50XHJcblx0XHR9LFxyXG5cdFx0ZGF0YTogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4ge31cclxuXHRcdH0sXHJcblx0XHRtZXRob2RzOiB7XHJcblxyXG5cdFx0fVxyXG5cdH1cclxuPC9zY3JpcHQ+XHJcbiJdfQ==
},{"../MenuModules/index.vue":10,"../SocialApiModules/index.vue":11,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],8:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'FormOrderComponent',
	props: ['propTemplate', 'propButtonStyle'],
	data: function data() {
		return {
			orderNumber: null
		};
	},
	methods: {
		sendOrder: function sendOrder() {
			$("#form--subscribe").validate({
				rules: {
					form__email: { required: true, email: true },
					form__name: 'required'
				},
				messages: {
					form__email: '',
					form__name: ''
				}
			});

			$("#form--order").validate({
				rules: {
					form__email: 'required',
					form__phone: 'required',
					form__delivery: 'required',
					form__address: 'required',
					form__payment: 'required'
				},
				messages: {
					form__email: '',
					form__phone: '',
					form__delivery: '',
					form__address: '',
					form__payment: ''
				}
			});

			$(".form-order").on('submit', function () {
				if ($(this).valid()) {
					var formID = $(this).attr('id');
					var formNm = $('#' + formID);
					var message = $(formNm).find(".form-order__msgs");
					$.ajax({
						type: "POST",
						url: 'action.php',
						data: formNm.serialize(),

						success: function success(data) {
							this.orderNumber = randomInteger(1500, 9999);

							var messageData = ['Благодарим за доверие! Мы вышлем Вам информацию о наличии товара, как только он появится в сервисе. Пожалуйста, ожидайте оповещение', 'Благодарим за заказ! Номер заказа m-' + this.orderNumber + '. В скором времени с Вами свяжется наш менеджер. Пожалуйста, ожидайте!'];

							message.text($(this).hasClass('form--subscribe') ? messageData[0] : messageData[1]);
							message.addClass('active');
							setTimeout(function () {
								message.removeClass('active');
								message.css({ 'background': 'none' });
								message.html('');
								$('input').not(':input[type=submit], :input[type=hidden]').val('');
							}, 30000);

							function randomInteger(min, max) {
								return Math.random() * (max - min + 1) + min - 0.5;
							}
						},

						error: function error(jqXHR, text, _error) {
							message.html('Упс...Письмо не отправилось');
							message.css({ 'background': 'red' });
							setTimeout(function () {
								message.html('');
								message.css({ 'background': 'none' });
								$('input').not(':input[type=submit], :input[type=hidden]').val('');
							}, 3000);
						}

					});
					return false;
				}
			});
		}
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('form',{staticClass:"form-order"},[_c('div',{staticClass:"form-order__msgs"}),(_vm.propTemplate=='subscribe')?_c('input',{staticClass:"form-order__input",attrs:{"name":"form__name","placeholder":"Укажите товар"}}):_vm._e(),(_vm.propTemplate=='subscribe')?_c('input',{staticClass:"form-order__input",attrs:{"name":"form__email","placeholder":"Введите email"}}):_vm._e(),(_vm.propTemplate=='subscribe')?_c('input',{staticClass:"form-order__input",class:'button--' + _vm.propButtonStyle,attrs:{"type":"submit","value":"Отправить"},on:{"click":_vm.sendOrder}}):_vm._e(),(_vm.propTemplate=='order')?_c('fieldset',[_c('h3',[_vm._v("Контакты:")]),_c('label',[_vm._v("Введите email")]),_c('input',{attrs:{"name":"form__email","id":"form__email"}}),_c('label',[_vm._v("Введите номер телефона")]),_c('input',{attrs:{"name":"form__phone","id":"form__phone"}})]):_vm._e(),(_vm.propTemplate=='order')?_c('fieldset',[_c('h3',[_vm._v("Доставка:")]),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.deliveryKind),expression:"deliveryKind"}],staticClass:"ui selection dropdown",attrs:{"name":"form__delivery","id":"form__delivery"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.deliveryKind=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{"value":"","disabled":"disabled","selected":"selected"}},[_vm._v("- Выберите способ -")]),_c('option',{attrs:{"value":"1"}},[_vm._v("Самовывоз -- бесплатно")]),_c('option',{attrs:{"value":"2"}},[_vm._v("Доставка курьерской службой")])]),_c('br'),_c('label',[_vm._v("Адрес")]),_c('input',{attrs:{"name":"form__address","id":"form__address","disabled":"disabled","placeholder":_vm.address}})]):_vm._e(),(_vm.propTemplate=='order')?_c('fieldset',[_c('h3',[_vm._v("Оплата:")]),_c('select',{directives:[{name:"model",rawName:"v-model",value:(_vm.paymentKind),expression:"paymentKind"}],staticClass:"ui selection dropdown",attrs:{"name":"form__payment","id":"form__payment"},on:{"change":function($event){var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return val}); _vm.paymentKind=$event.target.multiple ? $$selectedVal : $$selectedVal[0]}}},[_c('option',{attrs:{"value":"","disabled":"disabled","selected":"selected"}},[_vm._v("- Выберите способ -")]),_c('option',{attrs:{"value":"1"}},[_vm._v("Онлайн --- бесплатно")]),_c('option',{attrs:{"value":"2"}},[_vm._v("Банковский счёт --- бесплатно")]),_c('option',{attrs:{"value":"3"}},[_vm._v("Наличными в офисе --- бесплатно")]),_c('option',{attrs:{"value":"4"}},[_vm._v("При получении --- 1 500р за выезд курьера")])])]):_vm._e(),(_vm.propTemplate=='order')?_c('fieldset',{staticClass:"order-form__b-cost"},[_c('h2',[_vm._v("Стоимость - "),_c('strong',[_vm._v(_vm._s(_vm.fullcost))]),_vm._v(" руб.")]),_c('button',{staticClass:"button ui button--orange order-form__button-submit",attrs:{"type":"submit"},on:{"click":_vm.sendOrder}},[_vm._v("ЗАКАЗАТЬ")]),_vm._m(0)]):_vm._e(),(_vm.propTemplate=='order')?_c('fieldset',{staticClass:"hidden"},[_c('input',{attrs:{"name":"form__cost"},domProps:{"value":_vm.fullcost}}),_c('input',{attrs:{"name":"form__order"},domProps:{"value":_vm.ordernumber}}),_c('input',{attrs:{"name":"form__address"},domProps:{"value":_vm.address}})]):_vm._e()])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('strong',[_vm._v("Условия акции действительны только"),_c('br'),_vm._v("при покупке на сумму от 5 000 рублей")])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-130192fa", __vue__options__)
  } else {
    hotAPI.reload("data-v-130192fa", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],9:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'HeaderComponent',
	data: function data() {
		return {};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"header"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12 text-left"},[_c('div',{staticClass:"logo header__logo"},[_c('img',{staticClass:"logo__img",attrs:{"src":"img/logo.png","alt":""}})])])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-a6fc8d8e", __vue__options__)
  } else {
    hotAPI.reload("data-v-a6fc8d8e", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT80ZjIwOTlkYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTs7Ozs7QUFWQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlIGxhbmc9XCJqYWRlXCI+XHJcblx0LmhlYWRlclxyXG5cdFx0LmNvbnRhaW5lclxyXG5cdFx0XHQucm93XHJcblx0XHRcdFx0LmNvbC1zbS0xMi50ZXh0LWxlZnRcclxuXHRcdFx0XHRcdC5sb2dvLmhlYWRlcl9fbG9nb1xyXG5cdFx0XHRcdFx0XHRpbWcubG9nb19faW1nKHNyYz1cImltZy9sb2dvLnBuZ1wiLCBhbHQ9XCJcIilcclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcblx0ZXhwb3J0IGRlZmF1bHQge1xyXG5cdFx0bmFtZTogJ0hlYWRlckNvbXBvbmVudCcsXHJcblx0XHRkYXRhOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiB7fVxyXG5cdFx0fVxyXG5cdH1cclxuPC9zY3JpcHQ+XHJcbiJdfQ==
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],10:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'MenuComponent',
	props: ['propClassList'],
	data: function data() {
		return {
			openModal: null,

			classList: this.propClassList
		};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"menu",class:_vm.classList},[_c('ul',{staticClass:"menu__list"},[_c('li',{staticClass:"menu__item"},[_c('router-link',{staticClass:"menu__link",attrs:{"to":"/catalog/0"}},[_vm._v("Каталог")])],1),_c('li',{staticClass:"menu__item"},[_c('router-link',{staticClass:"menu__link",attrs:{"to":"/delivery"}},[_vm._v("Доставка и оплата")])],1),_c('li',{staticClass:"menu__item"},[_c('router-link',{staticClass:"menu__link",attrs:{"to":"/purchase-returns"}},[_vm._v("Возврат товара")])],1),_c('li',{staticClass:"menu__item"},[_c('router-link',{staticClass:"menu__link",attrs:{"to":"/blog"}},[_vm._v("Блог")])],1),_c('li',{staticClass:"menu__item"},[_c('router-link',{staticClass:"menu__link",attrs:{"to":"/contacts"}},[_vm._v("Контакты")])],1)])])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-00bce632", __vue__options__)
  } else {
    hotAPI.reload("data-v-00bce632", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT81NDI1NzNkZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBaUJBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7O0FBR0E7QUFKQTtBQU1BO0FBWkE7Ozs7O0FBaEJBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGUgbGFuZz1cImphZGVcIj5cclxuXHQubWVudSg6Y2xhc3M9XCJjbGFzc0xpc3RcIilcclxuXHRcdHVsLm1lbnVfX2xpc3RcclxuXHRcdFx0bGkubWVudV9faXRlbVxyXG5cdFx0XHRcdHJvdXRlci1saW5rKHRvPVwiL2NhdGFsb2cvMFwiKS5tZW51X19saW5rINCa0LDRgtCw0LvQvtCzXHJcblx0XHRcdGxpLm1lbnVfX2l0ZW1cclxuXHRcdFx0XHRyb3V0ZXItbGluayh0bz1cIi9kZWxpdmVyeVwiKS5tZW51X19saW5rINCU0L7RgdGC0LDQstC60LAg0Lgg0L7Qv9C70LDRgtCwXHJcblx0XHRcdGxpLm1lbnVfX2l0ZW1cclxuXHRcdFx0XHRyb3V0ZXItbGluayh0bz1cIi9wdXJjaGFzZS1yZXR1cm5zXCIpLm1lbnVfX2xpbmsg0JLQvtC30LLRgNCw0YIg0YLQvtCy0LDRgNCwXHJcblx0XHRcdGxpLm1lbnVfX2l0ZW1cclxuXHRcdFx0XHRyb3V0ZXItbGluayh0bz1cIi9ibG9nXCIpLm1lbnVfX2xpbmsg0JHQu9C+0LNcclxuXHRcdFx0bGkubWVudV9faXRlbVxyXG5cdFx0XHRcdHJvdXRlci1saW5rKHRvPVwiL2NvbnRhY3RzXCIpLm1lbnVfX2xpbmsg0JrQvtC90YLQsNC60YLRi1xyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHRleHBvcnQgZGVmYXVsdCB7XHJcblx0XHRuYW1lOiAnTWVudUNvbXBvbmVudCcsXHJcblx0XHRwcm9wczogW1xyXG5cdFx0XHQncHJvcENsYXNzTGlzdCdcclxuXHRcdF0sXHJcblx0XHRkYXRhOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0b3Blbk1vZGFsOiBudWxsLFxyXG5cdFx0XHRcdFxyXG5cdFx0XHRcdC8vINGB0L/QuNGB0L7QuiDQutC70LDRgdGB0L7QsiDQuNC3INGA0L7QtNC40YLQtdC70Y9cclxuXHRcdFx0XHRjbGFzc0xpc3Q6IHRoaXMucHJvcENsYXNzTGlzdFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD5cclxuIl19
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],11:[function(require,module,exports){
;(function(){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = {
	name: 'SocialApiComponent',
	data: function data() {
		return {};
	},
	mounted: function mounted() {
		VK.Widgets.Group("vk_groups", {
			mode: 4,
			width: "350",
			height: "450"
		}, 60332047);
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"socialApi"},[_c('div',{staticClass:"socialApi__block socialApi__group--vk"},[_c('div',{attrs:{"id":"vk_groups"}})]),_c('div',{staticClass:"socialApi__block socialApi__group--fb"},[_c('iframe',{staticStyle:{"border":"none","overflow":"hidden"},attrs:{"src":"https://www.facebook.com/plugins/page.php?href=https%3A%2F%2Fwww.facebook.com%2F%D0%A1%D1%82%D1%80%D0%BE%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9-%D0%B4%D0%B8%D1%81%D0%BA%D0%B0%D1%83%D0%BD%D1%82%D0%B5%D1%80-stroysale-798981756933631%2F&tabs=timeline&width=350&height=450&small_header=false&adapt_container_width=false&hide_cover=false&show_facepile=false&appId","width":"350","height":"450","scrolling":"no","frameborder":"0","allowTransparency":"true"}})])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-abe15252", __vue__options__)
  } else {
    hotAPI.reload("data-v-abe15252", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT8wODc2N2I5MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBR0E7QUFDQTtBQUNBO0FBSEE7QUFRQTtBQWxCQTs7Ozs7QUFUQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlIGxhbmc9XCJqYWRlXCI+XHJcbiAgICAuc29jaWFsQXBpXHJcbiAgICAgICAgLnNvY2lhbEFwaV9fYmxvY2suc29jaWFsQXBpX19ncm91cC0tdmtcclxuICAgICAgICAgICAgI3ZrX2dyb3Vwc1xyXG4gICAgICAgIC5zb2NpYWxBcGlfX2Jsb2NrLnNvY2lhbEFwaV9fZ3JvdXAtLWZiXHJcbiAgICAgICAgICAgIDxpZnJhbWUgc3JjPVwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3BsdWdpbnMvcGFnZS5waHA/aHJlZj1odHRwcyUzQSUyRiUyRnd3dy5mYWNlYm9vay5jb20lMkYlRDAlQTElRDElODIlRDElODAlRDAlQkUlRDAlQjglRDElODIlRDAlQjUlRDAlQkIlRDElOEMlRDAlQkQlRDElOEIlRDAlQjktJUQwJUI0JUQwJUI4JUQxJTgxJUQwJUJBJUQwJUIwJUQxJTgzJUQwJUJEJUQxJTgyJUQwJUI1JUQxJTgwLXN0cm95c2FsZS03OTg5ODE3NTY5MzM2MzElMkYmdGFicz10aW1lbGluZSZ3aWR0aD0zNTAmaGVpZ2h0PTQ1MCZzbWFsbF9oZWFkZXI9ZmFsc2UmYWRhcHRfY29udGFpbmVyX3dpZHRoPWZhbHNlJmhpZGVfY292ZXI9ZmFsc2Umc2hvd19mYWNlcGlsZT1mYWxzZSZhcHBJZFwiIHdpZHRoPVwiMzUwXCIgaGVpZ2h0PVwiNDUwXCIgc3R5bGU9XCJib3JkZXI6bm9uZTtvdmVyZmxvdzpoaWRkZW5cIiBzY3JvbGxpbmc9XCJub1wiIGZyYW1lYm9yZGVyPVwiMFwiIGFsbG93VHJhbnNwYXJlbmN5PVwidHJ1ZVwiPjwvaWZyYW1lPlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHRleHBvcnQgZGVmYXVsdCB7XHJcblx0XHRuYW1lIDogJ1NvY2lhbEFwaUNvbXBvbmVudCcsXHJcblx0XHRkYXRhIDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdHJldHVybiB7fVxyXG5cdFx0fSxcclxuXHRcdG1vdW50ZWQoKSB7XHJcblx0XHRcdFxyXG5cdFx0XHQvLyDQt9Cw0L/Rg9GB0LrQsNC10Lwg0LLQuNC00LbQtdGCINCS0JpcclxuXHRcdFx0VksuV2lkZ2V0cy5Hcm91cChcclxuXHRcdFx0XHRcInZrX2dyb3Vwc1wiLFxyXG5cdFx0XHRcdHtcclxuXHRcdFx0XHRcdG1vZGU6IDQsXHJcblx0XHRcdFx0XHR3aWR0aDogXCIzNTBcIixcclxuXHRcdFx0XHRcdGhlaWdodDogXCI0NTBcIlxyXG5cdFx0XHRcdH0sXHJcblx0XHRcdFx0NjAzMzIwNDdcclxuXHRcdFx0KTtcclxuXHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD4iXX0=
},{"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],12:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _index = require('../FormOrderModules/index.vue');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    name: 'SubscribeComponent',
    data: function data() {
        return {};
    },
    components: {
        FormOrder: _index2.default
    }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container-fluid subscribe"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('div',{staticClass:"subscribe__header text-center"},[_vm._v("Не нашли нужный товар?")]),_vm._m(0),_c('form-order',{attrs:{"propTemplate":'subscribe',"propButtonStyle":'green'}})],1)])])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"subscribe__description text-center"},[_vm._v("Оставьте заявку и мы уведомим вас о поступлении и"),_c('br'),_vm._v("подарим 500 рублей на покупку!")])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-351d32cc", __vue__options__)
  } else {
    hotAPI.reload("data-v-351d32cc", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT80ZGQ1MGI2ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBVUE7Ozs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFEQTtBQUxBOzs7OztBQVhBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGUgbGFuZz1cImphZGVcIj5cclxuICAgIC5jb250YWluZXItZmx1aWQuc3Vic2NyaWJlXHJcbiAgICAgICAgLnJvd1xyXG4gICAgICAgICAgICAuY29sLXNtLTEyXHJcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlX19oZWFkZXIudGV4dC1jZW50ZXIg0J3QtSDQvdCw0YjQu9C4INC90YPQttC90YvQuSDRgtC+0LLQsNGAP1xyXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZV9fZGVzY3JpcHRpb24udGV4dC1jZW50ZXIg0J7RgdGC0LDQstGM0YLQtSDQt9Cw0Y/QstC60YMg0Lgg0LzRiyDRg9Cy0LXQtNC+0LzQuNC8INCy0LDRgSDQviDQv9C+0YHRgtGD0L/Qu9C10L3QuNC4INC4PGJyPtC/0L7QtNCw0YDQuNC8IDUwMCDRgNGD0LHQu9C10Lkg0L3QsCDQv9C+0LrRg9C/0LrRgyFcclxuICAgICAgICAgICAgICAgIGZvcm0tb3JkZXIoOnByb3BUZW1wbGF0ZT1cIidzdWJzY3JpYmUnXCIsIDpwcm9wQnV0dG9uU3R5bGU9XCInZ3JlZW4nXCIpXHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IEZvcm1PcmRlciBmcm9tICcuLi9Gb3JtT3JkZXJNb2R1bGVzL2luZGV4LnZ1ZSdcclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lIDogJ1N1YnNjcmliZUNvbXBvbmVudCcsXHJcbiAgICAgICAgZGF0YSA6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge31cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICBcdEZvcm1PcmRlclxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+Il19
},{"../FormOrderModules/index.vue":8,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],13:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../../modules/MenuModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/HeaderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../modules/SubscribeModules/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../modules/FooterModules/index.vue');

var _index8 = _interopRequireDefault(_index7);

var _index9 = require('../../modules/CartListModules/index.vue');

var _index10 = _interopRequireDefault(_index9);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'CartComponent',
	props: ['propCartList'],
	components: {
		MenuComponent: _index2.default,
		HeaderComponent: _index4.default,
		Subscribe: _index6.default,
		FooterComponent: _index8.default,
		CartList: _index10.default
	},
	data: function data() {
		return {};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-menu"},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12 text-left"},[_c('menu-component',{staticClass:"menu--inline"})],1)])])]),_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_c('main',[_vm._m(0),_c('div',{staticClass:"wrap-cart-list cart"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('cart-list',{staticClass:"col-sm-8",attrs:{"propCartList":_vm.propCartList}}),_c('div',{staticClass:"col-sm-4"},[_c('div',{staticClass:"cart-status"},[_c('div',{staticClass:"cart-status__header"},[_vm._v("В корзине "+_vm._s(_vm.propCartList.length)+" тов.")]),_vm._m(1),_c('router-link',{attrs:{"to":"/order"}},[_vm._v("Оформить заказ")])],1)])],1)])])]),_c('div',{staticClass:"wrap-subscribe"},[_c('Subscribe')],1),_c('div',{staticClass:"wrap-foooter"},[_c('footer-component')],1)])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('h1',[_vm._v("Корзина")])])])])},function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"cart-status__description"},[_vm._v("Стоимость заказа:"),_c('br'),_c('span',{staticClass:"cart-status__price"},[_vm._v("40000")]),_vm._v(" руб."),_c('br')])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-2cd1931a", __vue__options__)
  } else {
    hotAPI.reload("data-v-2cd1931a", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcnQudnVlPzA0Y2VlNjRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUEwQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7OztBQUdBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFHQTtBQWhCQTs7Ozs7QUFoREE7QUFBQSIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZSBsYW5nPVwiamFkZVwiPlxyXG5cdGRpdlxyXG5cdFx0Ly8gTUVOVVxyXG5cdFx0LndyYXAtbWVudVxyXG5cdFx0XHQuY29udGFpbmVyLWZsdWlkXHJcblx0XHRcdFx0LnJvd1xyXG5cdFx0XHRcdFx0LmNvbC1zbS0xMi50ZXh0LWxlZnRcclxuXHRcdFx0XHRcdFx0bWVudS1jb21wb25lbnQubWVudS0taW5saW5lXHJcblx0XHQvLyAtIEVORCBNRU5VXHJcblx0XHRcclxuXHRcdC8vIC0gSEVBREVSXHJcblx0XHQud3JhcC1oZWFkZXJcclxuXHRcdFx0aGVhZGVyLWNvbXBvbmVudFxyXG5cdFx0Ly8gLSBFTkQgSEVBREVSXHJcblx0XHRcclxuXHRcdG1haW5cclxuXHRcdFx0LmNvbnRhaW5lclxyXG5cdFx0XHRcdC5yb3dcclxuXHRcdFx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHRcdFx0aDEg0JrQvtGA0LfQuNC90LBcclxuXHRcdFx0LndyYXAtY2FydC1saXN0LmNhcnRcclxuXHRcdFx0XHQuY29udGFpbmVyXHJcblx0XHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHRcdGNhcnQtbGlzdC5jb2wtc20tOCg6cHJvcENhcnRMaXN0PVwicHJvcENhcnRMaXN0XCIpXHJcblx0XHRcdFx0XHRcdC5jb2wtc20tNFxyXG5cdFx0XHRcdFx0XHRcdC5jYXJ0LXN0YXR1c1xyXG5cdFx0XHRcdFx0XHRcdFx0LmNhcnQtc3RhdHVzX19oZWFkZXIg0JIg0LrQvtGA0LfQuNC90LUge3sgcHJvcENhcnRMaXN0Lmxlbmd0aCB9fSDRgtC+0LIuXHJcblx0XHRcdFx0XHRcdFx0XHQuY2FydC1zdGF0dXNfX2Rlc2NyaXB0aW9uINCh0YLQvtC40LzQvtGB0YLRjCDQt9Cw0LrQsNC30LA6PGJyPjxzcGFuIGNsYXNzPVwiY2FydC1zdGF0dXNfX3ByaWNlXCI+NDAwMDA8L3NwYW4+INGA0YPQsS48YnI+XHJcblx0XHRcdFx0XHRcdFx0XHRyb3V0ZXItbGluayh0bz1cIi9vcmRlclwiKSDQntGE0L7RgNC80LjRgtGMINC30LDQutCw0LdcclxuXHRcdFxyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly8gU1VCU0NSSUJFXHJcblx0XHQud3JhcC1zdWJzY3JpYmVcclxuXHRcdFx0U3Vic2NyaWJlXHJcblx0XHQvLyBGT09URVJcclxuXHRcdC53cmFwLWZvb290ZXJcclxuXHRcdFx0Zm9vdGVyLWNvbXBvbmVudFxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuXHRpbXBvcnQgTWVudUNvbXBvbmVudCBmcm9tICcuLi8uLi9tb2R1bGVzL01lbnVNb2R1bGVzL2luZGV4LnZ1ZSdcclxuXHRpbXBvcnQgSGVhZGVyQ29tcG9uZW50IGZyb20gJy4uLy4uL21vZHVsZXMvSGVhZGVyTW9kdWxlcy9pbmRleC52dWUnXHJcblx0aW1wb3J0IFN1YnNjcmliZSBmcm9tICcuLi8uLi9tb2R1bGVzL1N1YnNjcmliZU1vZHVsZXMvaW5kZXgudnVlJ1xyXG5cdGltcG9ydCBGb290ZXJDb21wb25lbnQgZnJvbSAnLi4vLi4vbW9kdWxlcy9Gb290ZXJNb2R1bGVzL2luZGV4LnZ1ZSdcclxuXHRpbXBvcnQgQ2FydExpc3QgZnJvbSAnLi4vLi4vbW9kdWxlcy9DYXJ0TGlzdE1vZHVsZXMvaW5kZXgudnVlJ1xyXG5cdFxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG5hbWU6ICdDYXJ0Q29tcG9uZW50JyxcclxuXHRcdHByb3BzOiBbXHJcblx0XHRcdCdwcm9wQ2FydExpc3QnXHJcblx0XHRdLFxyXG5cdFx0Y29tcG9uZW50czoge1xyXG5cdFx0XHRNZW51Q29tcG9uZW50LFxyXG5cdFx0XHRIZWFkZXJDb21wb25lbnQsXHJcblx0XHRcdFN1YnNjcmliZSxcclxuXHRcdFx0Rm9vdGVyQ29tcG9uZW50LFxyXG5cdFx0XHRDYXJ0TGlzdFxyXG5cdFx0fSxcclxuXHRcdGRhdGEgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD5cclxuIl19
},{"../../modules/CartListModules/index.vue":4,"../../modules/FooterModules/index.vue":7,"../../modules/HeaderModules/index.vue":9,"../../modules/MenuModules/index.vue":10,"../../modules/SubscribeModules/index.vue":12,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],14:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _index = require('../../modules/MenuModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/HeaderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../modules/ControllersModules/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../modules/SubscribeModules/index.vue');

var _index8 = _interopRequireDefault(_index7);

var _index9 = require('../../modules/FooterModules/index.vue');

var _index10 = _interopRequireDefault(_index9);

var _index11 = require('../../modules/CatalogListModules/index.vue');

var _index12 = _interopRequireDefault(_index11);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
    name: 'Catalog',
    props: ['propCartList'],
    components: {
        MenuComponent: _index2.default,
        HeaderComponent: _index4.default,
        Controllers: _index6.default,
        Subscribe: _index8.default,
        FooterComponent: _index10.default,
        CatalogList: _index12.default
    },
    data: function data() {
        return {
            cartList: [],

            catalogList: [{
                id: 0,
                name: 'Все товары',
                jsonFile: 'json/all.json'
            }, {
                id: 1,
                name: 'Материалы на штукатурные работы',
                jsonFile: 'json/vetonitRotband.json',
                category: [{
                    id: 0,
                    name: 'Штукатурка',
                    jsonFile: 'json/shtukaturka.json'
                }, {
                    id: 1,
                    name: 'Шпаклёвка',
                    jsonFile: 'json/vetonit.json'
                }]

            }, {
                id: 2,
                name: 'Общестроительные материалы',
                jsonFile: 'json/0.json',
                category: [{
                    id: 0,
                    name: 'Кирпич/Газобетон/Блоки',
                    jsonFile: 'json/00.json'
                }, {
                    id: 1,
                    name: 'Арматура',
                    jsonFile: 'json/01.json'
                }, {
                    id: 2,
                    name: 'Поликарбонат',
                    jsonFile: 'json/02.json'
                }, {
                    id: 3,
                    name: 'Тротуарная плитка / Бордюрный камень',
                    jsonFile: 'json/03.json'
                }, {
                    id: 4,
                    name: 'Пены, герметики, клеи',
                    jsonFile: 'json/04.json'
                }]
            }, {
                id: 3,
                name: 'Фасадные и кровельные материалы',
                jsonFile: 'json/4.json',
                category: [{
                    id: 0,
                    name: 'Листовая кровля',
                    jsonFile: 'json/40.json'
                }, {
                    id: 1,
                    name: 'Рулонная кровля',
                    jsonFile: 'json/41.json'
                }, {
                    id: 2,
                    name: 'Мастика / Битум',
                    jsonFile: 'json/42.json'
                }, {
                    id: 3,
                    name: 'Сайдинг',
                    jsonFile: 'json/43.json'
                }]
            }, {
                id: 4,
                name: 'Электрика',
                jsonFile: 'json/7.json',
                category: [{
                    id: 0,
                    name: 'Кабель',
                    jsonFile: 'json/70.json'
                }, {
                    id: 1,
                    name: 'Каналы кабельные',
                    jsonFile: 'json/71.json'
                }, {
                    id: 2,
                    name: 'Розетки',
                    jsonFile: 'json/72.json'
                }, {
                    id: 3,
                    name: 'Выключатели',
                    jsonFile: 'json/73.json'
                }]
            }, {
                id: 5,
                name: 'Материалы б/у, некондиция, неликвид',
                jsonFile: 'json/80.json'
            }]

        };
    },
    computed: {
        idCategory: function idCategory() {
            var routeParams = this.$route.params;
            return routeParams.hasOwnProperty('idCategory') ? routeParams['idCategory'] : null;
        },
        idSubCategory: function idSubCategory() {
            var routeParams = this.$route.params;
            return routeParams.hasOwnProperty('idSubCategory') ? routeParams['idSubCategory'] : null;
        }
    }
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-menu"},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-8 text-left"},[_c('menu-component',{staticClass:"menu--inline"})],1),_c('div',{staticClass:"col-sm-4 text-right"},[_c('div',{staticClass:"wrap-menu__content menu"},[_c('ul',{staticClass:"menu__list"},[_c('li',{staticClass:"menu__item"},[_c('router-link',{staticClass:"menu__link menu__link--cart",attrs:{"to":"/cart"}},[_c('i',{staticClass:"big in cart icon"}),_vm._v(" В корзине "+_vm._s(_vm.propCartList.length)+" тов.")])],1)])])])])])]),_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_c('main',[_c('div',{staticClass:"wrap-controllers"},[_c('Controllers',{attrs:{"propCatalogList":_vm.catalogList,"propIdCategory":_vm.idCategory,"propIdSubCategory":_vm.idSubCategory}})],1),_c('div',{staticClass:"wrap-catalog"},[_c('div',{staticClass:"container"},[_c('catalog-list',{attrs:{"propCatalogList":_vm.catalogList,"propIdCategory":_vm.idCategory,"propIdSubCategory":_vm.idSubCategory}})],1)])]),_c('div',{staticClass:"wrap-subscribe"},[_c('Subscribe')],1),_c('div',{staticClass:"wrap-foooter"},[_c('footer-component')],1)])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-74e7adaa", __vue__options__)
  } else {
    hotAPI.reload("data-v-74e7adaa", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../modules/CatalogListModules/index.vue":5,"../../modules/ControllersModules/index.vue":6,"../../modules/FooterModules/index.vue":7,"../../modules/HeaderModules/index.vue":9,"../../modules/MenuModules/index.vue":10,"../../modules/SubscribeModules/index.vue":12,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],15:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../../modules/MenuModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/HeaderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../modules/SubscribeModules/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../modules/FooterModules/index.vue');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'ContactsPage',
	props: [],
	components: {
		MenuComponent: _index2.default,
		HeaderComponent: _index4.default,
		Subscribe: _index6.default,
		FooterComponent: _index8.default
	},
	data: function data() {
		return {};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-menu"},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12 text-left"},[_c('menu-component',{staticClass:"menu--inline"})],1)])])]),_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_vm._m(0),_c('div',{staticClass:"wrap-foooter"},[_c('footer-component')],1)])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('h1',[_vm._v("Контакты")])])])]),_c('section',{staticClass:"wrap-pages"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('p',[_vm._v("Телефон: "),_c('b',[_vm._v("+7 977 880-60-14, +7 904 600-80-20")])]),_c('p',[_vm._v("Email: "),_c('b',[_vm._v("info@stroy.sale")])]),_c('p',[_vm._v("Адрес: "),_c('b',[_vm._v("г. Москва: Очаковское шоссе, д.5, стр.28")])]),_c('img',{attrs:{"src":"img/map.png","alt":""}})])])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-0abd3822", __vue__options__)
  } else {
    hotAPI.reload("data-v-0abd3822", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT8xZTQ5NDY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBd0NBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFHQTtBQWRBOzs7OztBQTdDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlIGxhbmc9XCJqYWRlXCI+XHJcblx0ZGl2XHJcblx0XHQvLyBNRU5VXHJcblx0XHQud3JhcC1tZW51XHJcblx0XHRcdC5jb250YWluZXItZmx1aWRcclxuXHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHQuY29sLXNtLTEyLnRleHQtbGVmdFxyXG5cdFx0XHRcdFx0XHRtZW51LWNvbXBvbmVudC5tZW51LS1pbmxpbmVcclxuXHRcdC8vIC0gRU5EIE1FTlVcclxuXHRcdFxyXG5cdFx0Ly8gLSBIRUFERVJcclxuXHRcdC53cmFwLWhlYWRlclxyXG5cdFx0XHRoZWFkZXItY29tcG9uZW50XHJcblx0XHQvLyAtIEVORCBIRUFERVJcclxuXHRcdFxyXG5cdFx0bWFpblxyXG5cdFx0XHQuY29udGFpbmVyXHJcblx0XHRcdFx0LnJvd1xyXG5cdFx0XHRcdFx0LmNvbC1zbS0xMlxyXG5cdFx0XHRcdFx0XHRoMSDQmtC+0L3RgtCw0LrRgtGLXHJcblx0XHRcdHNlY3Rpb24ud3JhcC1wYWdlc1xyXG5cdFx0XHRcdC5jb250YWluZXJcclxuXHRcdFx0XHRcdC5yb3dcclxuXHRcdFx0XHRcdFx0LmNvbC1zbS0xMlxyXG5cdFx0XHRcdFx0XHRcdHAg0KLQtdC70LXRhNC+0L06IDxiPis3IDk3NyA4ODAtNjAtMTQsICs3IDkwNCA2MDAtODAtMjA8L2I+XHJcblx0XHRcdFx0XHRcdFx0cCBFbWFpbDogPGI+aW5mb0BzdHJveS5zYWxlPC9iPlxyXG5cdFx0XHRcdFx0XHRcdHAg0JDQtNGA0LXRgTogPGI+0LMuINCc0L7RgdC60LLQsDog0J7Rh9Cw0LrQvtCy0YHQutC+0LUg0YjQvtGB0YHQtSwg0LQuNSwg0YHRgtGALjI4PC9iPlxyXG5cdFx0XHRcdFx0XHRcdGltZyhzcmM9XCJpbWcvbWFwLnBuZ1wiIGFsdD1cIlwiKVxyXG5cdFx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly8gU1VCU0NSSUJFXHJcblx0XHQvLy53cmFwLXN1YnNjcmliZVxyXG5cdFx0XHRTdWJzY3JpYmVcclxuXHRcdC8vIEZPT1RFUlxyXG5cdFx0LndyYXAtZm9vb3RlclxyXG5cdFx0XHRmb290ZXItY29tcG9uZW50XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5cdGltcG9ydCBNZW51Q29tcG9uZW50ICAgZnJvbSAnLi4vLi4vbW9kdWxlcy9NZW51TW9kdWxlcy9pbmRleC52dWUnXHJcblx0aW1wb3J0IEhlYWRlckNvbXBvbmVudCBmcm9tICcuLi8uLi9tb2R1bGVzL0hlYWRlck1vZHVsZXMvaW5kZXgudnVlJ1xyXG5cdGltcG9ydCBTdWJzY3JpYmUgICAgICAgZnJvbSAnLi4vLi4vbW9kdWxlcy9TdWJzY3JpYmVNb2R1bGVzL2luZGV4LnZ1ZSdcclxuXHRpbXBvcnQgRm9vdGVyQ29tcG9uZW50IGZyb20gJy4uLy4uL21vZHVsZXMvRm9vdGVyTW9kdWxlcy9pbmRleC52dWUnXHJcblxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG5hbWU6ICdDb250YWN0c1BhZ2UnLFxyXG5cdFx0cHJvcHM6IFtcclxuXHRcdF0sXHJcblx0XHRjb21wb25lbnRzOiB7XHJcblx0XHRcdE1lbnVDb21wb25lbnQsXHJcblx0XHRcdEhlYWRlckNvbXBvbmVudCxcclxuXHRcdFx0U3Vic2NyaWJlLFxyXG5cdFx0XHRGb290ZXJDb21wb25lbnQsXHJcblx0XHR9LFxyXG5cdFx0ZGF0YSA6IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0cmV0dXJuIHtcclxuXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9XHJcbjwvc2NyaXB0PlxyXG4iXX0=
},{"../../modules/FooterModules/index.vue":7,"../../modules/HeaderModules/index.vue":9,"../../modules/MenuModules/index.vue":10,"../../modules/SubscribeModules/index.vue":12,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],16:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../../modules/MenuModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/HeaderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../modules/SubscribeModules/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../modules/FooterModules/index.vue');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'DeliveryPage',
	props: [],
	components: {
		MenuComponent: _index2.default,
		HeaderComponent: _index4.default,
		Subscribe: _index6.default,
		FooterComponent: _index8.default
	},
	data: function data() {
		return {};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-menu"},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12 text-left"},[_c('menu-component',{staticClass:"menu--inline"})],1)])])]),_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_vm._m(0),_c('div',{staticClass:"wrap-foooter"},[_c('footer-component')],1)])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('h1',[_vm._v("Условия доставки и оплаты")])])])]),_c('section',{staticClass:"wrap-pages"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('article',[_c('p',[_vm._v("Story.sale – интернет магазин качественных строительных материалов по доступным ценам. С доставкой по Москве и области.")]),_c('h3',[_vm._v("Способы оплаты товара:")]),_c('p',[_vm._v("- "),_c('b',[_c('i',[_vm._v("Онлайн оплата.")])]),_vm._v(" Оплата заказа с помощью банковских карт VISA/MASTERCARD или электронных денег на сайте. После оформления заказа Вам на почту придет ссылка на защищенную страницу оплаты процессинговой системы, которая прошла международную сертификацию. Это значит, что Ваши конфиденциальные данные (реквизиты карты, регистрационные данные и др.) не поступают в интернет-магазин, их обработка полностью защищена. "),_c('br'),_vm._v(" - "),_c('b',[_c('i',[_vm._v("Банковским переводом.")])]),_vm._v(" Оплата производится в отделении банка по выписанному счёту, либо через личный кабинет Вашего интернет банка. Счет придет Вам на почту после оформления заказа. Рекомендуемый способ при больших суммах."),_c('br'),_vm._v(" - "),_c('b',[_c('i',[_vm._v("Наличными при получении.")])]),_vm._v(" Оплата за наличный расчет при получении заказа на складе самовывоза или при доставке. При данном способе оплаты, карты не принимаются."),_c('br'),_vm._v(" - "),_c('b',[_c('i',[_vm._v("Безналичная оплата по выставленному счету.")])]),_vm._v("Рекомендуемый способ оплаты для юридических лиц."),_c('br')]),_c('h3',[_vm._v("Способы получения товара:")]),_c('p',[_vm._v("-"),_c('b',[_c('i',[_vm._v("доставка до дома/офиса/дачи")])]),_vm._v(".Товары готовы к доставке через один рабочий день после оформления заказа. Заказать доставку можно на любой день, без выходных, с 8-00 до 00-00."),_c('br'),_vm._v(" - "),_c('b',[_c('i',[_vm._v("самовывоз со склада магазина")])]),_vm._v(".Товары готовы к  отгрузке через один рабочий день после оформления заказа. Отгрузки осуществляются в любой день, без выходных, с 8-00 до 22-00. Адрес склада указан в разделе контакты.")]),_c('p',[_vm._v("Стоимость доставки рассчитывается курьерской службой исходя из базовых тарифов и озвучивается по телефону менеджером. Оплата доставки осуществляется при получении товара.")]),_c('h3',[_vm._v("Правила и стоимость доставки")]),_c('p',[_vm._v("Доставка приобретенного товара производится до подъезда, дачи, коттеджа при наличии подъездных путей для грузовых автомобилей, в пределах Москвы и Московской области.")]),_c('p',[_vm._v("Доставка товара осуществляется с 08:00 до 00:00 ежедневно, без выходных. Совершая заказ, Вы можете выбрать удобную для Вас дату.  Если Вы отсутствуете в назначенное время доставки, то экспедиторы ждут Вас в течение 20 минут, после чего уезжают, оставляя уведомление об отсутствии покупателя. Разгрузка, а также транспортировка груза до квартиры оплачивается дополнительно.")]),_c('p',[_vm._v("При оформлении доставки необходимо корректно предоставить следующую информацию: номер дома(а также строение и корпус); подъезд; номер квартиры; код в подъездную дверь; этаж; лицо, ответственное за прием товара.")]),_c('h3',[_vm._v("Тарифы на доставку")]),_c('table',[_c('tr',[_c('td',[_c('strong',[_vm._v("Весовой товар")])]),_c('td',[_c('strong',[_vm._v("До 200кг")])]),_c('td',[_c('strong',[_vm._v("До 1000кг")])]),_c('td',[_c('strong',[_vm._v("До 1500кг")])]),_c('td',[_c('strong',[_vm._v("До 3500кг")])])]),_c('tr',[_c('td',[_vm._v("По Москве в пределах МКАД, руб.")]),_c('td',[_vm._v("700 руб.")]),_c('td',[_vm._v("1900 руб.")]),_c('td',[_vm._v("2500 руб.")]),_c('td',[_vm._v("3800 руб.")])])]),_c('p',[_vm._v("На все товары из интернет магазина story.sale действуют гарантийные обязательства, предусмотренные заводами-производителями стройматериалов.")])])])])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-f200f3fa", __vue__options__)
  } else {
    hotAPI.reload("data-v-f200f3fa", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../modules/FooterModules/index.vue":7,"../../modules/HeaderModules/index.vue":9,"../../modules/MenuModules/index.vue":10,"../../modules/SubscribeModules/index.vue":12,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],17:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../../modules/HeaderModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/FormOrderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'CartComponent',
	props: ['propCartList'],
	components: {
		HeaderComponent: _index2.default,
		FormOrder: _index4.default
	},
	data: function data() {
		return {
			formTemplate: 'order'
		};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_c('main',[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('h1',[_vm._v("Оформление заказа")]),_c('router-link',{staticClass:"menu__link menu__link--cart",attrs:{"to":"/cart"}},[_vm._v("Назад в корзину")])],1)]),_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('form-order',{attrs:{"propTemplate":'order'}})],1)])])])])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-12b9be55", __vue__options__)
  } else {
    hotAPI.reload("data-v-12b9be55", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk9yZGVyLnZ1ZT9iNzA5ZmEzYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBd0JBOzs7O0FBQ0E7Ozs7Ozs7QUFHQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBYkE7Ozs7O0FBM0JBO0FBQUEiLCJzb3VyY2VzQ29udGVudCI6WyI8dGVtcGxhdGUgbGFuZz1cImphZGVcIj5cclxuXHRkaXZcclxuXHRcdC8vIC0gSEVBREVSXHJcblx0XHQud3JhcC1oZWFkZXJcclxuXHRcdFx0aGVhZGVyLWNvbXBvbmVudFxyXG5cdFx0Ly8gLSBFTkQgSEVBREVSXHJcblx0XHRcclxuXHRcdG1haW5cclxuXHRcdFx0LmNvbnRhaW5lclxyXG5cdFx0XHRcdC5yb3dcclxuXHRcdFx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHRcdFx0aDEg0J7RhNC+0YDQvNC70LXQvdC40LUg0LfQsNC60LDQt9CwXHJcblx0XHRcdFx0XHRcdHJvdXRlci1saW5rLm1lbnVfX2xpbmsubWVudV9fbGluay0tY2FydCh0bz1cIi9jYXJ0XCIpINCd0LDQt9Cw0LQg0LIg0LrQvtGA0LfQuNC90YNcclxuXHRcdFx0XHRcclxuXHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHQuY29sLXNtLTEyXHJcblx0XHRcdFx0XHRcdGZvcm0tb3JkZXIoOnByb3BUZW1wbGF0ZT1cIidvcmRlcidcIilcclxuXHRcclxuXHRcdFx0XHRcdFxyXG5cclxuXHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5cdGltcG9ydCBIZWFkZXJDb21wb25lbnQgZnJvbSAnLi4vLi4vbW9kdWxlcy9IZWFkZXJNb2R1bGVzL2luZGV4LnZ1ZSdcclxuXHRpbXBvcnQgRm9ybU9yZGVyIGZyb20gJy4uLy4uL21vZHVsZXMvRm9ybU9yZGVyTW9kdWxlcy9pbmRleC52dWUnXHJcblxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG5hbWU6ICdDYXJ0Q29tcG9uZW50JyxcclxuXHRcdHByb3BzOiBbXHJcblx0XHRcdCdwcm9wQ2FydExpc3QnLFxyXG5cdFx0XSxcclxuXHRcdGNvbXBvbmVudHM6IHtcclxuXHRcdFx0SGVhZGVyQ29tcG9uZW50LFxyXG5cdFx0XHRGb3JtT3JkZXJcclxuXHRcdH0sXHJcblx0XHRkYXRhIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdGZvcm1UZW1wbGF0ZTogJ29yZGVyJ1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD5cclxuIl19
},{"../../modules/FormOrderModules/index.vue":8,"../../modules/HeaderModules/index.vue":9,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],18:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../../modules/MenuModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/HeaderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../modules/SubscribeModules/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../modules/FooterModules/index.vue');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'PurchaseReturnsPage',
	props: [],
	components: {
		MenuComponent: _index2.default,
		HeaderComponent: _index4.default,
		Subscribe: _index6.default,
		FooterComponent: _index8.default
	},
	data: function data() {
		return {};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-menu"},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12 text-left"},[_c('menu-component',{staticClass:"menu--inline"})],1)])])]),_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_vm._m(0),_c('div',{staticClass:"wrap-foooter"},[_c('footer-component')],1)])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('h1',[_vm._v("Гарантии и возврат товара")])])])]),_c('section',{staticClass:"wrap-pages"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('p',[_vm._v("На все товары из интернет магазина story.sale действуют гарантийные обязательства, предусмотренные заводами-производителями стройматериалов.")]),_c('p',[_vm._v("На товары надлежащего качества действуют условия возврата согласно действующему законодательству РФ в течении 14 дней с момента покупки, за исключением материалов, отпускаемых на метраж (согласно Постановлениям № 1222, №55). Обмен товара надлежащего качества проводится, если указанный товар не был в употреблении, сохранены его товарный вид, потребительские свойства, пломбы, фабричные ярлыки, а также имеется товарный чек.")])])])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-4e5e132d", __vue__options__)
  } else {
    hotAPI.reload("data-v-4e5e132d", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT8wNTlmNjBiNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBd0NBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFHQTtBQWRBOzs7OztBQTdDQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlIGxhbmc9XCJqYWRlXCI+XHJcblx0ZGl2XHJcblx0XHQvLyBNRU5VXHJcblx0XHQud3JhcC1tZW51XHJcblx0XHRcdC5jb250YWluZXItZmx1aWRcclxuXHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHQuY29sLXNtLTEyLnRleHQtbGVmdFxyXG5cdFx0XHRcdFx0XHRtZW51LWNvbXBvbmVudC5tZW51LS1pbmxpbmVcclxuXHRcdC8vIC0gRU5EIE1FTlVcclxuXHRcdFxyXG5cdFx0Ly8gLSBIRUFERVJcclxuXHRcdC53cmFwLWhlYWRlclxyXG5cdFx0XHRoZWFkZXItY29tcG9uZW50XHJcblx0XHQvLyAtIEVORCBIRUFERVJcclxuXHRcdFxyXG5cdFx0bWFpblxyXG5cdFx0XHQuY29udGFpbmVyXHJcblx0XHRcdFx0LnJvd1xyXG5cdFx0XHRcdFx0LmNvbC1zbS0xMlxyXG5cdFx0XHRcdFx0XHRoMSDQk9Cw0YDQsNC90YLQuNC4INC4INCy0L7Qt9Cy0YDQsNGCINGC0L7QstCw0YDQsFxyXG5cdFx0XHRzZWN0aW9uLndyYXAtcGFnZXNcclxuXHRcdFx0XHQuY29udGFpbmVyXHJcblx0XHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHRcdFx0XHRwINCd0LAg0LLRgdC1INGC0L7QstCw0YDRiyDQuNC3INC40L3RgtC10YDQvdC10YIg0LzQsNCz0LDQt9C40L3QsCBzdG9yeS5zYWxlINC00LXQudGB0YLQstGD0Y7RgiDQs9Cw0YDQsNC90YLQuNC50L3Ri9C1INC+0LHRj9C30LDRgtC10LvRjNGB0YLQstCwLCDQv9GA0LXQtNGD0YHQvNC+0YLRgNC10L3QvdGL0LUg0LfQsNCy0L7QtNCw0LzQuC3Qv9GA0L7QuNC30LLQvtC00LjRgtC10LvRj9C80Lgg0YHRgtGA0L7QudC80LDRgtC10YDQuNCw0LvQvtCyLlxyXG5cdFx0XHRcdFx0XHRcdHAg0J3QsCDRgtC+0LLQsNGA0Ysg0L3QsNC00LvQtdC20LDRidC10LPQviDQutCw0YfQtdGB0YLQstCwINC00LXQudGB0YLQstGD0Y7RgiDRg9GB0LvQvtCy0LjRjyDQstC+0LfQstGA0LDRgtCwINGB0L7Qs9C70LDRgdC90L4g0LTQtdC50YHRgtCy0YPRjtGJ0LXQvNGDINC30LDQutC+0L3QvtC00LDRgtC10LvRjNGB0YLQstGDINCg0KQg0LIg0YLQtdGH0LXQvdC40LggMTQg0LTQvdC10Lkg0YEg0LzQvtC80LXQvdGC0LAg0L/QvtC60YPQv9C60LgsINC30LAg0LjRgdC60LvRjtGH0LXQvdC40LXQvCDQvNCw0YLQtdGA0LjQsNC70L7Qsiwg0L7RgtC/0YPRgdC60LDQtdC80YvRhSDQvdCwINC80LXRgtGA0LDQtiAo0YHQvtCz0LvQsNGB0L3QviDQn9C+0YHRgtCw0L3QvtCy0LvQtdC90LjRj9C8IOKEliAxMjIyLCDihJY1NSkuINCe0LHQvNC10L0g0YLQvtCy0LDRgNCwINC90LDQtNC70LXQttCw0YnQtdCz0L4g0LrQsNGH0LXRgdGC0LLQsCDQv9GA0L7QstC+0LTQuNGC0YHRjywg0LXRgdC70Lgg0YPQutCw0LfQsNC90L3Ri9C5INGC0L7QstCw0YAg0L3QtSDQsdGL0Lsg0LIg0YPQv9C+0YLRgNC10LHQu9C10L3QuNC4LCDRgdC+0YXRgNCw0L3QtdC90Ysg0LXQs9C+INGC0L7QstCw0YDQvdGL0Lkg0LLQuNC0LCDQv9C+0YLRgNC10LHQuNGC0LXQu9GM0YHQutC40LUg0YHQstC+0LnRgdGC0LLQsCwg0L/Qu9C+0LzQsdGLLCDRhNCw0LHRgNC40YfQvdGL0LUg0Y/RgNC70YvQutC4LCDQsCDRgtCw0LrQttC1INC40LzQtdC10YLRgdGPINGC0L7QstCw0YDQvdGL0Lkg0YfQtdC6LlxyXG5cclxuXHRcdFx0XHRcdFx0XHJcblx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly8gU1VCU0NSSUJFXHJcblx0XHQvLy53cmFwLXN1YnNjcmliZVxyXG5cdFx0XHRTdWJzY3JpYmVcclxuXHRcdC8vIEZPT1RFUlxyXG5cdFx0LndyYXAtZm9vb3RlclxyXG5cdFx0XHRmb290ZXItY29tcG9uZW50XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5cdGltcG9ydCBNZW51Q29tcG9uZW50ICAgZnJvbSAnLi4vLi4vbW9kdWxlcy9NZW51TW9kdWxlcy9pbmRleC52dWUnXHJcblx0aW1wb3J0IEhlYWRlckNvbXBvbmVudCBmcm9tICcuLi8uLi9tb2R1bGVzL0hlYWRlck1vZHVsZXMvaW5kZXgudnVlJ1xyXG5cdGltcG9ydCBTdWJzY3JpYmUgICAgICAgZnJvbSAnLi4vLi4vbW9kdWxlcy9TdWJzY3JpYmVNb2R1bGVzL2luZGV4LnZ1ZSdcclxuXHRpbXBvcnQgRm9vdGVyQ29tcG9uZW50IGZyb20gJy4uLy4uL21vZHVsZXMvRm9vdGVyTW9kdWxlcy9pbmRleC52dWUnXHJcblxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG5hbWU6ICdQdXJjaGFzZVJldHVybnNQYWdlJyxcclxuXHRcdHByb3BzOiBbXHJcblx0XHRdLFxyXG5cdFx0Y29tcG9uZW50czoge1xyXG5cdFx0XHRNZW51Q29tcG9uZW50LFxyXG5cdFx0XHRIZWFkZXJDb21wb25lbnQsXHJcblx0XHRcdFN1YnNjcmliZSxcclxuXHRcdFx0Rm9vdGVyQ29tcG9uZW50LFxyXG5cdFx0fSxcclxuXHRcdGRhdGEgOiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiB7XHJcblxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fVxyXG48L3NjcmlwdD5cclxuIl19
},{"../../modules/FooterModules/index.vue":7,"../../modules/HeaderModules/index.vue":9,"../../modules/MenuModules/index.vue":10,"../../modules/SubscribeModules/index.vue":12,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],19:[function(require,module,exports){
;(function(){
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _index = require('../../modules/MenuModules/index.vue');

var _index2 = _interopRequireDefault(_index);

var _index3 = require('../../modules/HeaderModules/index.vue');

var _index4 = _interopRequireDefault(_index3);

var _index5 = require('../../modules/SubscribeModules/index.vue');

var _index6 = _interopRequireDefault(_index5);

var _index7 = require('../../modules/FooterModules/index.vue');

var _index8 = _interopRequireDefault(_index7);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
	name: 'ServicePage',
	props: [],
	components: {
		MenuComponent: _index2.default,
		HeaderComponent: _index4.default,
		Subscribe: _index6.default,
		FooterComponent: _index8.default
	},
	data: function data() {
		return {};
	}
};
})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:"wrap-menu"},[_c('div',{staticClass:"container-fluid"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12 text-left"},[_c('menu-component',{staticClass:"menu--inline"})],1)])])]),_c('div',{staticClass:"wrap-header"},[_c('header-component')],1),_vm._m(0),_c('div',{staticClass:"wrap-foooter"},[_c('footer-component')],1)])}
__vue__options__.staticRenderFns = [function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('h1',[_vm._v("О сервисе")])])])]),_c('section',{staticClass:"wrap-pages"},[_c('div',{staticClass:"container"},[_c('div',{staticClass:"row"},[_c('div',{staticClass:"col-sm-12"},[_c('p',[_vm._v("Stroy.sale – онлайн сервис по продаже строительных материалов со значительными скидками. За счет реализации складских остатков и неликвидов строительных, торговых и производственных компаний.")]),_c('br'),_c('h4',[_vm._v("Как работать с сервисом?")]),_c('p',[_vm._v("Для покупки товара через сервис, достаточно оформить и оплатить заказ на сайте онлайн. В течении 3-х часов с Вами свяжется менеджер и согласует условия доставки. Для получения дополнительных скидок, необходимо зарегистрироваться на сайте и оформлять заказы через личный кабинет.")]),_c('p',[_vm._v("Обратите внимание, что способ оплаты «при получении» (в том числе на складе), предусматривает дополнительную комиссию за выезд курьера с кассой на склад или к клиенту.")]),_c('p',[_vm._v("Чтобы договориться о просмотре товара на складе, нужно позвонить по телефону из раздела контакты. Так как часть товаров находятся на складских комплексах с пропускным режимом, для просмотра товара необходимо зарегистрироваться и корректно заполнить анкету в личном кабинете.")]),_c('br'),_c('h4',[_vm._v("Как устроен сервис?")]),_c('img',{attrs:{"src":"img/service.jpg","alt":""}})])])])])])}]
if (module.hot) {(function () {  var hotAPI = require("vueify/node_modules/vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7939e9a0", __vue__options__)
  } else {
    hotAPI.reload("data-v-7939e9a0", __vue__options__)
  }
})()}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LnZ1ZT82ZjE2OTM0YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBOENBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7O0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFHQTtBQWRBOzs7OztBQW5EQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlIGxhbmc9XCJqYWRlXCI+XHJcblx0ZGl2XHJcblx0XHQvLyBNRU5VXHJcblx0XHQud3JhcC1tZW51XHJcblx0XHRcdC5jb250YWluZXItZmx1aWRcclxuXHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHQuY29sLXNtLTEyLnRleHQtbGVmdFxyXG5cdFx0XHRcdFx0XHRtZW51LWNvbXBvbmVudC5tZW51LS1pbmxpbmVcclxuXHRcdC8vIC0gRU5EIE1FTlVcclxuXHRcdFxyXG5cdFx0Ly8gLSBIRUFERVJcclxuXHRcdC53cmFwLWhlYWRlclxyXG5cdFx0XHRoZWFkZXItY29tcG9uZW50XHJcblx0XHQvLyAtIEVORCBIRUFERVJcclxuXHRcdFxyXG5cdFx0bWFpblxyXG5cdFx0XHQuY29udGFpbmVyXHJcblx0XHRcdFx0LnJvd1xyXG5cdFx0XHRcdFx0LmNvbC1zbS0xMlxyXG5cdFx0XHRcdFx0XHRoMSDQniDRgdC10YDQstC40YHQtVxyXG5cdFx0XHRzZWN0aW9uLndyYXAtcGFnZXNcclxuXHRcdFx0XHQuY29udGFpbmVyXHJcblx0XHRcdFx0XHQucm93XHJcblx0XHRcdFx0XHRcdC5jb2wtc20tMTJcclxuXHRcdFx0XHRcdFx0XHRwIFN0cm95LnNhbGUg4oCTINC+0L3Qu9Cw0LnQvSDRgdC10YDQstC40YEg0L/QviDQv9GA0L7QtNCw0LbQtSDRgdGC0YDQvtC40YLQtdC70YzQvdGL0YUg0LzQsNGC0LXRgNC40LDQu9C+0LIg0YHQviDQt9C90LDRh9C40YLQtdC70YzQvdGL0LzQuCDRgdC60LjQtNC60LDQvNC4LiDQl9CwINGB0YfQtdGCINGA0LXQsNC70LjQt9Cw0YbQuNC4INGB0LrQu9Cw0LTRgdC60LjRhSDQvtGB0YLQsNGC0LrQvtCyINC4INC90LXQu9C40LrQstC40LTQvtCyINGB0YLRgNC+0LjRgtC10LvRjNC90YvRhSwg0YLQvtGA0LPQvtCy0YvRhSDQuCDQv9GA0L7QuNC30LLQvtC00YHRgtCy0LXQvdC90YvRhSDQutC+0LzQv9Cw0L3QuNC5LlxyXG5cdFx0XHRcdFx0XHRcdGJyXHJcblx0XHRcdFx0XHRcdFx0aDQg0JrQsNC6INGA0LDQsdC+0YLQsNGC0Ywg0YEg0YHQtdGA0LLQuNGB0L7QvD9cclxuXHRcdFx0XHRcdFx0XHRwINCU0LvRjyDQv9C+0LrRg9C/0LrQuCDRgtC+0LLQsNGA0LAg0YfQtdGA0LXQtyDRgdC10YDQstC40YEsINC00L7RgdGC0LDRgtC+0YfQvdC+INC+0YTQvtGA0LzQuNGC0Ywg0Lgg0L7Qv9C70LDRgtC40YLRjCDQt9Cw0LrQsNC3INC90LAg0YHQsNC50YLQtSDQvtC90LvQsNC50L0uINCSINGC0LXRh9C10L3QuNC4IDMt0YUg0YfQsNGB0L7QsiDRgSDQktCw0LzQuCDRgdCy0Y/QttC10YLRgdGPINC80LXQvdC10LTQttC10YAg0Lgg0YHQvtCz0LvQsNGB0YPQtdGCINGD0YHQu9C+0LLQuNGPINC00L7RgdGC0LDQstC60LguINCU0LvRjyDQv9C+0LvRg9GH0LXQvdC40Y8g0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSDRgdC60LjQtNC+0LosINC90LXQvtCx0YXQvtC00LjQvNC+INC30LDRgNC10LPQuNGB0YLRgNC40YDQvtCy0LDRgtGM0YHRjyDQvdCwINGB0LDQudGC0LUg0Lgg0L7RhNC+0YDQvNC70Y/RgtGMINC30LDQutCw0LfRiyDRh9C10YDQtdC3INC70LjRh9C90YvQuSDQutCw0LHQuNC90LXRgi5cclxuXHRcdFx0XHRcdFx0XHRwINCe0LHRgNCw0YLQuNGC0LUg0LLQvdC40LzQsNC90LjQtSwg0YfRgtC+INGB0L/QvtGB0L7QsSDQvtC/0LvQsNGC0YsgwqvQv9GA0Lgg0L/QvtC70YPRh9C10L3QuNC4wrsgKNCyINGC0L7QvCDRh9C40YHQu9C1INC90LAg0YHQutC70LDQtNC1KSwg0L/RgNC10LTRg9GB0LzQsNGC0YDQuNCy0LDQtdGCINC00L7Qv9C+0LvQvdC40YLQtdC70YzQvdGD0Y4g0LrQvtC80LjRgdGB0LjRjiDQt9CwINCy0YvQtdC30LQg0LrRg9GA0YzQtdGA0LAg0YEg0LrQsNGB0YHQvtC5INC90LAg0YHQutC70LDQtCDQuNC70Lgg0Log0LrQu9C40LXQvdGC0YMuXHJcblx0XHRcdFx0XHRcdFx0cCDQp9GC0L7QsdGLINC00L7Qs9C+0LLQvtGA0LjRgtGM0YHRjyDQviDQv9GA0L7RgdC80L7RgtGA0LUg0YLQvtCy0LDRgNCwINC90LAg0YHQutC70LDQtNC1LCDQvdGD0LbQvdC+INC/0L7Qt9Cy0L7QvdC40YLRjCDQv9C+INGC0LXQu9C10YTQvtC90YMg0LjQtyDRgNCw0LfQtNC10LvQsCDQutC+0L3RgtCw0LrRgtGLLiDQotCw0Log0LrQsNC6INGH0LDRgdGC0Ywg0YLQvtCy0LDRgNC+0LIg0L3QsNGF0L7QtNGP0YLRgdGPINC90LAg0YHQutC70LDQtNGB0LrQuNGFINC60L7QvNC/0LvQtdC60YHQsNGFINGBINC/0YDQvtC/0YPRgdC60L3Ri9C8INGA0LXQttC40LzQvtC8LCDQtNC70Y8g0L/RgNC+0YHQvNC+0YLRgNCwINGC0L7QstCw0YDQsCDQvdC10L7QsdGF0L7QtNC40LzQviDQt9Cw0YDQtdCz0LjRgdGC0YDQuNGA0L7QstCw0YLRjNGB0Y8g0Lgg0LrQvtGA0YDQtdC60YLQvdC+INC30LDQv9C+0LvQvdC40YLRjCDQsNC90LrQtdGC0YMg0LIg0LvQuNGH0L3QvtC8INC60LDQsdC40L3QtdGC0LUuXHJcblx0XHRcdFx0XHRcdFx0YnJcclxuXHRcdFx0XHRcdFx0XHRoNCDQmtCw0Log0YPRgdGC0YDQvtC10L0g0YHQtdGA0LLQuNGBP1xyXG5cdFx0XHRcdFx0XHRcdGltZyhzcmM9XCJpbWcvc2VydmljZS5qcGdcIiBhbHQ9XCJcIilcclxuXHRcdFx0XHRcdFx0XHJcblx0XHJcblx0XHRcclxuXHRcdFxyXG5cdFx0Ly8gU1VCU0NSSUJFXHJcblx0XHQvLy53cmFwLXN1YnNjcmliZVxyXG5cdFx0XHRTdWJzY3JpYmVcclxuXHRcdC8vIEZPT1RFUlxyXG5cdFx0LndyYXAtZm9vb3RlclxyXG5cdFx0XHRmb290ZXItY29tcG9uZW50XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG5cdGltcG9ydCBNZW51Q29tcG9uZW50ICAgZnJvbSAnLi4vLi4vbW9kdWxlcy9NZW51TW9kdWxlcy9pbmRleC52dWUnXHJcblx0aW1wb3J0IEhlYWRlckNvbXBvbmVudCBmcm9tICcuLi8uLi9tb2R1bGVzL0hlYWRlck1vZHVsZXMvaW5kZXgudnVlJ1xyXG5cdGltcG9ydCBTdWJzY3JpYmUgICAgICAgZnJvbSAnLi4vLi4vbW9kdWxlcy9TdWJzY3JpYmVNb2R1bGVzL2luZGV4LnZ1ZSdcclxuXHRpbXBvcnQgRm9vdGVyQ29tcG9uZW50IGZyb20gJy4uLy4uL21vZHVsZXMvRm9vdGVyTW9kdWxlcy9pbmRleC52dWUnXHJcblxyXG5cdGV4cG9ydCBkZWZhdWx0IHtcclxuXHRcdG5hbWU6ICdTZXJ2aWNlUGFnZScsXHJcblx0XHRwcm9wczogW1xyXG5cdFx0XSxcclxuXHRcdGNvbXBvbmVudHM6IHtcclxuXHRcdFx0TWVudUNvbXBvbmVudCxcclxuXHRcdFx0SGVhZGVyQ29tcG9uZW50LFxyXG5cdFx0XHRTdWJzY3JpYmUsXHJcblx0XHRcdEZvb3RlckNvbXBvbmVudCxcclxuXHRcdH0sXHJcblx0XHRkYXRhIDogZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRyZXR1cm4ge1xyXG5cclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH1cclxuPC9zY3JpcHQ+XHJcbiJdfQ==
},{"../../modules/FooterModules/index.vue":7,"../../modules/HeaderModules/index.vue":9,"../../modules/MenuModules/index.vue":10,"../../modules/SubscribeModules/index.vue":12,"vue":50,"vueify/node_modules/vue-hot-reload-api":51}],20:[function(require,module,exports){
(function (global){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * Vue.js v2.3.4
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
(function (global, factory) {
  (typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Vue = factory();
})(undefined, function () {
  'use strict';

  /*  */

  // these helpers produces better vm code in JS engines due to their
  // explicitness and function inlining

  function isUndef(v) {
    return v === undefined || v === null;
  }

  function isDef(v) {
    return v !== undefined && v !== null;
  }

  function isTrue(v) {
    return v === true;
  }

  function isFalse(v) {
    return v === false;
  }
  /**
   * Check if value is primitive
   */
  function isPrimitive(value) {
    return typeof value === 'string' || typeof value === 'number';
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */
  function isObject(obj) {
    return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
  }

  var _toString = Object.prototype.toString;

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */
  function isPlainObject(obj) {
    return _toString.call(obj) === '[object Object]';
  }

  function isRegExp(v) {
    return _toString.call(v) === '[object RegExp]';
  }

  /**
   * Convert a value to a string that is actually rendered.
   */
  function toString(val) {
    return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);
  }

  /**
   * Convert a input value to a number for persistence.
   * If the conversion fails, return original string.
   */
  function toNumber(val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n;
  }

  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */
  function makeMap(str, expectsLowerCase) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase ? function (val) {
      return map[val.toLowerCase()];
    } : function (val) {
      return map[val];
    };
  }

  /**
   * Check if a tag is a built-in tag.
   */
  var isBuiltInTag = makeMap('slot,component', true);

  /**
   * Remove an item from an array
   */
  function remove(arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);
      if (index > -1) {
        return arr.splice(index, 1);
      }
    }
  }

  /**
   * Check whether the object has the property.
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn(obj, key) {
    return hasOwnProperty.call(obj, key);
  }

  /**
   * Create a cached version of a pure function.
   */
  function cached(fn) {
    var cache = Object.create(null);
    return function cachedFn(str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str));
    };
  }

  /**
   * Camelize a hyphen-delimited string.
   */
  var camelizeRE = /-(\w)/g;
  var camelize = cached(function (str) {
    return str.replace(camelizeRE, function (_, c) {
      return c ? c.toUpperCase() : '';
    });
  });

  /**
   * Capitalize a string.
   */
  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  });

  /**
   * Hyphenate a camelCase string.
   */
  var hyphenateRE = /([^-])([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
  });

  /**
   * Simple bind, faster than native
   */
  function bind(fn, ctx) {
    function boundFn(a) {
      var l = arguments.length;
      return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
    }
    // record original fn length
    boundFn._length = fn.length;
    return boundFn;
  }

  /**
   * Convert an Array-like object to a real Array.
   */
  function toArray(list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret;
  }

  /**
   * Mix properties into target object.
   */
  function extend(to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to;
  }

  /**
   * Merge an Array of Objects into a single Object.
   */
  function toObject(arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend(res, arr[i]);
      }
    }
    return res;
  }

  /**
   * Perform no operation.
   */
  function noop() {}

  /**
   * Always return false.
   */
  var no = function no() {
    return false;
  };

  /**
   * Return same value
   */
  var identity = function identity(_) {
    return _;
  };

  /**
   * Generate a static keys string from compiler modules.
   */
  function genStaticKeys(modules) {
    return modules.reduce(function (keys, m) {
      return keys.concat(m.staticKeys || []);
    }, []).join(',');
  }

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */
  function looseEqual(a, b) {
    var isObjectA = isObject(a);
    var isObjectB = isObject(b);
    if (isObjectA && isObjectB) {
      try {
        return JSON.stringify(a) === JSON.stringify(b);
      } catch (e) {
        // possible circular reference
        return a === b;
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b);
    } else {
      return false;
    }
  }

  function looseIndexOf(arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) {
        return i;
      }
    }
    return -1;
  }

  /**
   * Ensure a function is called only once.
   */
  function once(fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    };
  }

  var SSR_ATTR = 'data-server-rendered';

  var ASSET_TYPES = ['component', 'directive', 'filter'];

  var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'];

  /*  */

  var config = {
    /**
     * Option merge strategies (used in core/util/options)
     */
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: "development" !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: "development" !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  };

  /*  */

  var emptyObject = Object.freeze({});

  /**
   * Check if a string starts with $ or _
   */
  function isReserved(str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F;
  }

  /**
   * Define a property.
   */
  function def(obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Parse simple path.
   */
  var bailRE = /[^\w.$]/;
  function parsePath(path) {
    if (bailRE.test(path)) {
      return;
    }
    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) {
          return;
        }
        obj = obj[segments[i]];
      }
      return obj;
    };
  }

  /*  */

  var warn = noop;
  var tip = noop;
  var formatComponentName = null; // work around flow check

  {
    var hasConsole = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;
    var classify = function classify(str) {
      return str.replace(classifyRE, function (c) {
        return c.toUpperCase();
      }).replace(/[-_]/g, '');
    };

    warn = function warn(msg, vm) {
      if (hasConsole && !config.silent) {
        console.error("[Vue warn]: " + msg + (vm ? generateComponentTrace(vm) : ''));
      }
    };

    tip = function tip(msg, vm) {
      if (hasConsole && !config.silent) {
        console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
      }
    };

    formatComponentName = function formatComponentName(vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>';
      }
      var name = typeof vm === 'string' ? vm : typeof vm === 'function' && vm.options ? vm.options.name : vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;

      var file = vm._isVue && vm.$options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
    };

    var repeat = function repeat(str, n) {
      var res = '';
      while (n) {
        if (n % 2 === 1) {
          res += str;
        }
        if (n > 1) {
          str += str;
        }
        n >>= 1;
      }
      return res;
    };

    var generateComponentTrace = function generateComponentTrace(vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];
            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue;
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return '\n\nfound in\n\n' + tree.map(function (vm, i) {
          return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
        }).join('\n');
      } else {
        return "\n\n(found in " + formatComponentName(vm) + ")";
      }
    };
  }

  /*  */

  function handleError(err, vm, info) {
    if (config.errorHandler) {
      config.errorHandler.call(null, err, vm, info);
    } else {
      {
        warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
      }
      /* istanbul ignore else */
      if (inBrowser && typeof console !== 'undefined') {
        console.error(err);
      } else {
        throw err;
      }
    }
  }

  /*  */
  /* globals MutationObserver */

  // can we use __proto__?
  var hasProto = '__proto__' in {};

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined';
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = UA && UA.indexOf('android') > 0;
  var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

  var supportsPassive = false;
  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', {
        get: function get() {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      }); // https://github.com/facebook/flow/issues/285
      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  }

  // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV
  var _isServer;
  var isServerRendering = function isServerRendering() {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }
    return _isServer;
  };

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  /* istanbul ignore next */
  function isNative(Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
  }

  var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  /**
   * Defer a task to execute it asynchronously.
   */
  var nextTick = function () {
    var callbacks = [];
    var pending = false;
    var timerFunc;

    function nextTickHandler() {
      pending = false;
      var copies = callbacks.slice(0);
      callbacks.length = 0;
      for (var i = 0; i < copies.length; i++) {
        copies[i]();
      }
    }

    // the nextTick behavior leverages the microtask queue, which can be accessed
    // via either native Promise.then or MutationObserver.
    // MutationObserver has wider support, however it is seriously bugged in
    // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
    // completely stops working after triggering a few times... so, if native
    // Promise is available, we will use it:
    /* istanbul ignore if */
    if (typeof Promise !== 'undefined' && isNative(Promise)) {
      var p = Promise.resolve();
      var logError = function logError(err) {
        console.error(err);
      };
      timerFunc = function timerFunc() {
        p.then(nextTickHandler).catch(logError);
        // in problematic UIWebViews, Promise.then doesn't completely break, but
        // it can get stuck in a weird state where callbacks are pushed into the
        // microtask queue but the queue isn't being flushed, until the browser
        // needs to do some other work, e.g. handle a timer. Therefore we can
        // "force" the microtask queue to be flushed by adding an empty timer.
        if (isIOS) {
          setTimeout(noop);
        }
      };
    } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]')) {
      // use MutationObserver where native Promise is not available,
      // e.g. PhantomJS IE11, iOS7, Android 4.4
      var counter = 1;
      var observer = new MutationObserver(nextTickHandler);
      var textNode = document.createTextNode(String(counter));
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function timerFunc() {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
      };
    } else {
      // fallback to setTimeout
      /* istanbul ignore next */
      timerFunc = function timerFunc() {
        setTimeout(nextTickHandler, 0);
      };
    }

    return function queueNextTick(cb, ctx) {
      var _resolve;
      callbacks.push(function () {
        if (cb) {
          try {
            cb.call(ctx);
          } catch (e) {
            handleError(e, ctx, 'nextTick');
          }
        } else if (_resolve) {
          _resolve(ctx);
        }
      });
      if (!pending) {
        pending = true;
        timerFunc();
      }
      if (!cb && typeof Promise !== 'undefined') {
        return new Promise(function (resolve, reject) {
          _resolve = resolve;
        });
      }
    };
  }();

  var _Set;
  /* istanbul ignore if */
  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = function () {
      function Set() {
        this.set = Object.create(null);
      }
      Set.prototype.has = function has(key) {
        return this.set[key] === true;
      };
      Set.prototype.add = function add(key) {
        this.set[key] = true;
      };
      Set.prototype.clear = function clear() {
        this.set = Object.create(null);
      };

      return Set;
    }();
  }

  /*  */

  var uid = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */
  var Dep = function Dep() {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub(sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub(sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend() {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify() {
    // stabilize the subscriber list first
    var subs = this.subs.slice();
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  // the current target watcher being evaluated.
  // this is globally unique because there could be only one
  // watcher being evaluated at any time.
  Dep.target = null;
  var targetStack = [];

  function pushTarget(_target) {
    if (Dep.target) {
      targetStack.push(Dep.target);
    }
    Dep.target = _target;
  }

  function popTarget() {
    Dep.target = targetStack.pop();
  }

  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator() {
      var arguments$1 = arguments;

      // avoid leaking arguments:
      // http://jsperf.com/closure-with-arguments
      var i = arguments.length;
      var args = new Array(i);
      while (i--) {
        args[i] = arguments$1[i];
      }
      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
          inserted = args;
          break;
        case 'unshift':
          inserted = args;
          break;
        case 'splice':
          inserted = args.slice(2);
          break;
      }
      if (inserted) {
        ob.observeArray(inserted);
      }
      // notify change
      ob.dep.notify();
      return result;
    });
  });

  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * By default, when a reactive property is set, the new value is
   * also converted to become reactive. However when passing down props,
   * we don't want to force conversion because the value may be a nested value
   * under a frozen data structure. Converting it would defeat the optimization.
   */
  var observerState = {
    shouldConvert: true,
    isSettingProps: false
  };

  /**
   * Observer class that are attached to each observed
   * object. Once attached, the observer converts target
   * object's property keys into getter/setters that
   * collect dependencies and dispatches updates.
   */
  var Observer = function Observer(value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, '__ob__', this);
    if (Array.isArray(value)) {
      var augment = hasProto ? protoAugment : copyAugment;
      augment(value, arrayMethods, arrayKeys);
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };

  /**
   * Walk through each property and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  Observer.prototype.walk = function walk(obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i], obj[keys[i]]);
    }
  };

  /**
   * Observe a list of Array items.
   */
  Observer.prototype.observeArray = function observeArray(items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  // helpers

  /**
   * Augment an target Object or Array by intercepting
   * the prototype chain using __proto__
   */
  function protoAugment(target, src) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment an target Object or Array by defining
   * hidden properties.
   */
  /* istanbul ignore next */
  function copyAugment(target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */
  function observe(value, asRootData) {
    if (!isObject(value)) {
      return;
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
      ob = new Observer(value);
    }
    if (asRootData && ob) {
      ob.vmCount++;
    }
    return ob;
  }

  /**
   * Define a reactive property on an Object.
   */
  function defineReactive$$1(obj, key, val, customSetter) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return;
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;

    var childOb = observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter() {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
          }
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
        return value;
      },
      set: function reactiveSetter(newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */
        if (newVal === value || newVal !== newVal && value !== value) {
          return;
        }
        /* eslint-enable no-self-compare */
        if ("development" !== 'production' && customSetter) {
          customSetter();
        }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = observe(newVal);
        dep.notify();
      }
    });
  }

  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */
  function set(target, key, val) {
    if (Array.isArray(target) && typeof key === 'number') {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val;
    }
    if (hasOwn(target, key)) {
      target[key] = val;
      return val;
    }
    var ob = target.__ob__;
    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
      return val;
    }
    if (!ob) {
      target[key] = val;
      return val;
    }
    defineReactive$$1(ob.value, key, val);
    ob.dep.notify();
    return val;
  }

  /**
   * Delete a property and trigger change if necessary.
   */
  function del(target, key) {
    if (Array.isArray(target) && typeof key === 'number') {
      target.splice(key, 1);
      return;
    }
    var ob = target.__ob__;
    if (target._isVue || ob && ob.vmCount) {
      "development" !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
      return;
    }
    if (!hasOwn(target, key)) {
      return;
    }
    delete target[key];
    if (!ob) {
      return;
    }
    ob.dep.notify();
  }

  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */
  function dependArray(value) {
    for (var e = void 0, i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();
      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }

  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */
  var strats = config.optionMergeStrategies;

  /**
   * Options with restrictions
   */
  {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
      }
      return defaultStrat(parent, child);
    };
  }

  /**
   * Helper that recursively merges two data objects together.
   */
  function mergeData(to, from) {
    if (!from) {
      return to;
    }
    var key, toVal, fromVal;
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
        mergeData(toVal, fromVal);
      }
    }
    return to;
  }

  /**
   * Data
   */
  strats.data = function (parentVal, childVal, vm) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal;
      }
      if (typeof childVal !== 'function') {
        "development" !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
        return parentVal;
      }
      if (!parentVal) {
        return childVal;
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn() {
        return mergeData(childVal.call(this), parentVal.call(this));
      };
    } else if (parentVal || childVal) {
      return function mergedInstanceDataFn() {
        // instance merge
        var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
        var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
        if (instanceData) {
          return mergeData(instanceData, defaultData);
        } else {
          return defaultData;
        }
      };
    }
  };

  /**
   * Hooks and props are merged as arrays.
   */
  function mergeHook(parentVal, childVal) {
    return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */
  function mergeAssets(parentVal, childVal) {
    var res = Object.create(parentVal || null);
    return childVal ? extend(res, childVal) : res;
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */
  strats.watch = function (parentVal, childVal) {
    /* istanbul ignore if */
    if (!childVal) {
      return Object.create(parentVal || null);
    }
    if (!parentVal) {
      return childVal;
    }
    var ret = {};
    extend(ret, parentVal);
    for (var key in childVal) {
      var parent = ret[key];
      var child = childVal[key];
      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }
      ret[key] = parent ? parent.concat(child) : [child];
    }
    return ret;
  };

  /**
   * Other object hashes.
   */
  strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
    if (!childVal) {
      return Object.create(parentVal || null);
    }
    if (!parentVal) {
      return childVal;
    }
    var ret = Object.create(null);
    extend(ret, parentVal);
    extend(ret, childVal);
    return ret;
  };

  /**
   * Default strategy.
   */
  var defaultStrat = function defaultStrat(parentVal, childVal) {
    return childVal === undefined ? parentVal : childVal;
  };

  /**
   * Validate component names
   */
  function checkComponents(options) {
    for (var key in options.components) {
      var lower = key.toLowerCase();
      if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
        warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
      }
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */
  function normalizeProps(options) {
    var props = options.props;
    if (!props) {
      return;
    }
    var res = {};
    var i, val, name;
    if (Array.isArray(props)) {
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          name = camelize(val);
          res[name] = { type: null };
        } else {
          warn('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize(key);
        res[name] = isPlainObject(val) ? val : { type: val };
      }
    }
    options.props = res;
  }

  /**
   * Normalize raw function directives into object format.
   */
  function normalizeDirectives(options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def = dirs[key];
        if (typeof def === 'function') {
          dirs[key] = { bind: def, update: def };
        }
      }
    }
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */
  function mergeOptions(parent, child, vm) {
    {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child);
    normalizeDirectives(child);
    var extendsFrom = child.extends;
    if (extendsFrom) {
      parent = mergeOptions(parent, extendsFrom, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField(key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options;
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */
  function resolveAsset(options, type, id, warnMissing) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return;
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn(assets, id)) {
      return assets[id];
    }
    var camelizedId = camelize(id);
    if (hasOwn(assets, camelizedId)) {
      return assets[camelizedId];
    }
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn(assets, PascalCaseId)) {
      return assets[PascalCaseId];
    }
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if ("development" !== 'production' && warnMissing && !res) {
      warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
    }
    return res;
  }

  /*  */

  function validateProp(key, propOptions, propsData, vm) {
    var prop = propOptions[key];
    var absent = !hasOwn(propsData, key);
    var value = propsData[key];
    // handle boolean props
    if (isType(Boolean, prop.type)) {
      if (absent && !hasOwn(prop, 'default')) {
        value = false;
      } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
        value = true;
      }
    }
    // check default value
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key);
      // since the default value is a fresh copy,
      // make sure to observe it.
      var prevShouldConvert = observerState.shouldConvert;
      observerState.shouldConvert = true;
      observe(value);
      observerState.shouldConvert = prevShouldConvert;
    }
    {
      assertProp(prop, key, value, vm, absent);
    }
    return value;
  }

  /**
   * Get the default value of a prop.
   */
  function getPropDefaultValue(vm, prop, key) {
    // no default, return undefined
    if (!hasOwn(prop, 'default')) {
      return undefined;
    }
    var def = prop.default;
    // warn against non-factory defaults for Object & Array
    if ("development" !== 'production' && isObject(def)) {
      warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
    }
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
      return vm._props[key];
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
  }

  /**
   * Assert whether a prop is valid.
   */
  function assertProp(prop, name, value, vm, absent) {
    if (prop.required && absent) {
      warn('Missing required prop: "' + name + '"', vm);
      return;
    }
    if (value == null && !prop.required) {
      return;
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }
    if (!valid) {
      warn('Invalid prop: type check failed for prop "' + name + '".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);
      return;
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType(value, type) {
    var valid;
    var expectedType = getType(type);
    if (simpleCheckRE.test(expectedType)) {
      valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === expectedType.toLowerCase();
    } else if (expectedType === 'Object') {
      valid = isPlainObject(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    };
  }

  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */
  function getType(fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : '';
  }

  function isType(type, fn) {
    if (!Array.isArray(fn)) {
      return getType(fn) === getType(type);
    }
    for (var i = 0, len = fn.length; i < len; i++) {
      if (getType(fn[i]) === getType(type)) {
        return true;
      }
    }
    /* istanbul ignore next */
    return false;
  }

  /*  */

  var mark;
  var measure;

  {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */
    if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
      mark = function mark(tag) {
        return perf.mark(tag);
      };
      measure = function measure(name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        perf.clearMeasures(name);
      };
    }
  }

  /* not type checking this file because flow doesn't play well with Proxy */

  var initProxy;

  {
    var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
    );

    var warnNonPresent = function warnNonPresent(target, key) {
      warn("Property or method \"" + key + "\" is not defined on the instance but " + "referenced during render. Make sure to declare reactive data " + "properties in the data option.", target);
    };

    var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function set(target, key, value) {
          if (isBuiltInModifier(key)) {
            warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
            return false;
          } else {
            target[key] = value;
            return true;
          }
        }
      });
    }

    var hasHandler = {
      has: function has(target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
        if (!has && !isAllowed) {
          warnNonPresent(target, key);
        }
        return has || !isAllowed;
      }
    };

    var getHandler = {
      get: function get(target, key) {
        if (typeof key === 'string' && !(key in target)) {
          warnNonPresent(target, key);
        }
        return target[key];
      }
    };

    initProxy = function initProxy(vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }

  /*  */

  var VNode = function VNode(tag, data, children, text, elm, context, componentOptions) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.functionalContext = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
  };

  var prototypeAccessors = { child: {} };

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  prototypeAccessors.child.get = function () {
    return this.componentInstance;
  };

  Object.defineProperties(VNode.prototype, prototypeAccessors);

  var createEmptyVNode = function createEmptyVNode() {
    var node = new VNode();
    node.text = '';
    node.isComment = true;
    return node;
  };

  function createTextVNode(val) {
    return new VNode(undefined, undefined, undefined, String(val));
  }

  // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.
  function cloneVNode(vnode) {
    var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions);
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.isCloned = true;
    return cloned;
  }

  function cloneVNodes(vnodes) {
    var len = vnodes.length;
    var res = new Array(len);
    for (var i = 0; i < len; i++) {
      res[i] = cloneVNode(vnodes[i]);
    }
    return res;
  }

  /*  */

  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
      name: name,
      once: once$$1,
      capture: capture,
      passive: passive
    };
  });

  function createFnInvoker(fns) {
    function invoker() {
      var arguments$1 = arguments;

      var fns = invoker.fns;
      if (Array.isArray(fns)) {
        for (var i = 0; i < fns.length; i++) {
          fns[i].apply(null, arguments$1);
        }
      } else {
        // return handler return value for single handlers
        return fns.apply(null, arguments);
      }
    }
    invoker.fns = fns;
    return invoker;
  }

  function updateListeners(on, oldOn, add, remove$$1, vm) {
    var name, cur, old, event;
    for (name in on) {
      cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      if (isUndef(cur)) {
        "development" !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur);
        }
        add(event.name, cur, event.once, event.capture, event.passive);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }

  /*  */

  function mergeVNodeHook(def, hookKey, hook) {
    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook() {
      hook.apply(this, arguments);
      // important: remove merged hook to ensure it's called only once
      // and prevent memory leak
      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }

  /*  */

  function extractPropsFromVNodeData(data, Ctor, tag) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return;
    }
    var res = {};
    var attrs = data.attrs;
    var props = data.props;
    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        {
          var keyInLowerCase = key.toLowerCase();
          if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
            tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
          }
        }
        checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
      }
    }
    return res;
  }

  function checkProp(res, hash, key, altKey, preserve) {
    if (isDef(hash)) {
      if (hasOwn(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true;
      } else if (hasOwn(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true;
      }
    }
    return false;
  }

  /*  */

  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:

  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.
  function simpleNormalizeChildren(children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children);
      }
    }
    return children;
  }

  // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.
  function normalizeChildren(children) {
    return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
  }

  function isTextNode(node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment);
  }

  function normalizeArrayChildren(children, nestedIndex) {
    var res = [];
    var i, c, last;
    for (i = 0; i < children.length; i++) {
      c = children[i];
      if (isUndef(c) || typeof c === 'boolean') {
        continue;
      }
      last = res[res.length - 1];
      //  nested
      if (Array.isArray(c)) {
        res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + "_" + i));
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          last.text += String(c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[res.length - 1] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }
          res.push(c);
        }
      }
    }
    return res;
  }

  /*  */

  function ensureCtor(comp, base) {
    return isObject(comp) ? base.extend(comp) : comp;
  }

  function resolveAsyncComponent(factory, baseCtor, context) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp;
    }

    if (isDef(factory.resolved)) {
      return factory.resolved;
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp;
    }

    if (isDef(factory.contexts)) {
      // already pending
      factory.contexts.push(context);
    } else {
      var contexts = factory.contexts = [context];
      var sync = true;

      var forceRender = function forceRender() {
        for (var i = 0, l = contexts.length; i < l; i++) {
          contexts[i].$forceUpdate();
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor);
        // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)
        if (!sync) {
          forceRender();
        }
      });

      var reject = once(function (reason) {
        "development" !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender();
        }
      });

      var res = factory(resolve, reject);

      if (isObject(res)) {
        if (typeof res.then === 'function') {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isDef(res.component) && typeof res.component.then === 'function') {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);
            if (res.delay === 0) {
              factory.loading = true;
            } else {
              setTimeout(function () {
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender();
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            setTimeout(function () {
              if (isUndef(factory.resolved)) {
                reject("timeout (" + res.timeout + "ms)");
              }
            }, res.timeout);
          }
        }
      }

      sync = false;
      // return in case resolved synchronously
      return factory.loading ? factory.loadingComp : factory.resolved;
    }
  }

  /*  */

  function getFirstComponentChild(children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        if (isDef(c) && isDef(c.componentOptions)) {
          return c;
        }
      }
    }
  }

  /*  */

  /*  */

  function initEvents(vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target;

  function add(event, fn, once$$1) {
    if (once$$1) {
      target.$once(event, fn);
    } else {
      target.$on(event, fn);
    }
  }

  function remove$1(event, fn) {
    target.$off(event, fn);
  }

  function updateComponentListeners(vm, listeners, oldListeners) {
    target = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
  }

  function eventsMixin(Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
      var this$1 = this;

      var vm = this;
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          this$1.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm;
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;
      function on() {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm;
    };

    Vue.prototype.$off = function (event, fn) {
      var this$1 = this;

      var vm = this;
      // all
      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm;
      }
      // array of events
      if (Array.isArray(event)) {
        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
          this$1.$off(event[i$1], fn);
        }
        return vm;
      }
      // specific event
      var cbs = vm._events[event];
      if (!cbs) {
        return vm;
      }
      if (arguments.length === 1) {
        vm._events[event] = null;
        return vm;
      }
      // specific handler
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1);
          break;
        }
      }
      return vm;
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;
      {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        for (var i = 0, l = cbs.length; i < l; i++) {
          cbs[i].apply(vm, args);
        }
      }
      return vm;
    };
  }

  /*  */

  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */
  function resolveSlots(children, context) {
    var slots = {};
    if (!children) {
      return slots;
    }
    var defaultSlot = [];
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      // named slots should only be respected if the vnode was rendered in the
      // same context.
      if ((child.context === context || child.functionalContext === context) && child.data && child.data.slot != null) {
        var name = child.data.slot;
        var slot = slots[name] || (slots[name] = []);
        if (child.tag === 'template') {
          slot.push.apply(slot, child.children);
        } else {
          slot.push(child);
        }
      } else {
        defaultSlot.push(child);
      }
    }
    // ignore whitespace
    if (!defaultSlot.every(isWhitespace)) {
      slots.default = defaultSlot;
    }
    return slots;
  }

  function isWhitespace(node) {
    return node.isComment || node.text === ' ';
  }

  function resolveScopedSlots(fns, // see flow/vnode
  res) {
    res = res || {};
    for (var i = 0; i < fns.length; i++) {
      if (Array.isArray(fns[i])) {
        resolveScopedSlots(fns[i], res);
      } else {
        res[fns[i].key] = fns[i].fn;
      }
    }
    return res;
  }

  /*  */

  var activeInstance = null;

  function initLifecycle(vm) {
    var options = vm.$options;

    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;

    vm.$children = [];
    vm.$refs = {};

    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin(Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      if (vm._isMounted) {
        callHook(vm, 'beforeUpdate');
      }
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var prevActiveInstance = activeInstance;
      activeInstance = vm;
      vm._vnode = vnode;
      // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.
      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */
        , vm.$options._parentElm, vm.$options._refElm);
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      activeInstance = prevActiveInstance;
      // update __vue__ reference
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      // if parent is an HOC, update its $el as well
      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      }
      // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.
    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return;
      }
      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true;
      // remove self from parent
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      // teardown watchers
      if (vm._watcher) {
        vm._watcher.teardown();
      }
      var i = vm._watchers.length;
      while (i--) {
        vm._watchers[i].teardown();
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      // call the last hook...
      vm._isDestroyed = true;
      // invoke destroy hooks on current rendered tree
      vm.__patch__(vm._vnode, null);
      // fire destroyed hook
      callHook(vm, 'destroyed');
      // turn off all instance listeners.
      vm.$off();
      // remove __vue__ reference
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
      // remove reference to DOM nodes (prevents leak)
      vm.$options._parentElm = vm.$options._refElm = null;
    };
  }

  function mountComponent(vm, el, hydrating) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      {
        /* istanbul ignore if */
        if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
          warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
        } else {
          warn('Failed to mount component: template or render function not defined.', vm);
        }
      }
    }
    callHook(vm, 'beforeMount');

    var updateComponent;
    /* istanbul ignore if */
    if ("development" !== 'production' && config.performance && mark) {
      updateComponent = function updateComponent() {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;

        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure(name + " render", startTag, endTag);

        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure(name + " patch", startTag, endTag);
      };
    } else {
      updateComponent = function updateComponent() {
        vm._update(vm._render(), hydrating);
      };
    }

    vm._watcher = new Watcher(vm, updateComponent, noop);
    hydrating = false;

    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }
    return vm;
  }

  function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren
    var hasChildren = !!(renderChildren || // has new static slots
    vm.$options._renderChildren || // has old static slots
    parentVnode.data.scopedSlots || // has new scoped slots
    vm.$scopedSlots !== emptyObject // has old scoped slots
    );

    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render
    if (vm._vnode) {
      // update child tree's parent
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;

    // update props
    if (propsData && vm.$options.props) {
      observerState.shouldConvert = false;
      {
        observerState.isSettingProps = true;
      }
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        props[key] = validateProp(key, vm.$options.props, propsData, vm);
      }
      observerState.shouldConvert = true;
      {
        observerState.isSettingProps = false;
      }
      // keep a copy of raw propsData
      vm.$options.propsData = propsData;
    }
    // update listeners
    if (listeners) {
      var oldListeners = vm.$options._parentListeners;
      vm.$options._parentListeners = listeners;
      updateComponentListeners(vm, listeners, oldListeners);
    }
    // resolve slots + force update if has children
    if (hasChildren) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }
  }

  function isInInactiveTree(vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) {
        return true;
      }
    }
    return false;
  }

  function activateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return;
      }
    } else if (vm._directInactive) {
      return;
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent(vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return;
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'deactivated');
    }
  }

  function callHook(vm, hook) {
    var handlers = vm.$options[hook];
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        try {
          handlers[i].call(vm);
        } catch (e) {
          handleError(e, vm, hook + " hook");
        }
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }
  }

  /*  */

  var MAX_UPDATE_COUNT = 100;

  var queue = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index = 0;

  /**
   * Reset the scheduler's state.
   */
  function resetSchedulerState() {
    index = queue.length = activatedChildren.length = 0;
    has = {};
    {
      circular = {};
    }
    waiting = flushing = false;
  }

  /**
   * Flush both queues and run the watchers.
   */
  function flushSchedulerQueue() {
    flushing = true;
    var watcher, id;

    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue.sort(function (a, b) {
      return a.id - b.id;
    });

    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index = 0; index < queue.length; index++) {
      watcher = queue[index];
      id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if ("development" !== 'production' && has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
          break;
        }
      }
    }

    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();

    resetSchedulerState();

    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdateHooks(updatedQueue);

    // devtool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdateHooks(queue) {
    var i = queue.length;
    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;
      if (vm._watcher === watcher && vm._isMounted) {
        callHook(vm, 'updated');
      }
    }
  }

  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */
  function queueActivatedComponent(vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks(queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true /* true */);
    }
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */
  function queueWatcher(watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      has[id] = true;
      if (!flushing) {
        queue.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;
        while (i > index && queue[i].id > watcher.id) {
          i--;
        }
        queue.splice(i + 1, 0, watcher);
      }
      // queue the flush
      if (!waiting) {
        waiting = true;
        nextTick(flushSchedulerQueue);
      }
    }
  }

  /*  */

  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */
  var Watcher = function Watcher(vm, expOrFn, cb, options) {
    this.vm = vm;
    vm._watchers.push(this);
    // options
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = expOrFn.toString();
    // parse expression for getter
    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = function () {};
        "development" !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
      }
    }
    this.value = this.lazy ? undefined : this.get();
  };

  /**
   * Evaluate the getter, and re-collect dependencies.
   */
  Watcher.prototype.get = function get() {
    pushTarget(this);
    var value;
    var vm = this.vm;
    if (this.user) {
      try {
        value = this.getter.call(vm, vm);
      } catch (e) {
        handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
      }
    } else {
      value = this.getter.call(vm, vm);
    }
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
    return value;
  };

  /**
   * Add a dependency to this directive.
   */
  Watcher.prototype.addDep = function addDep(dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */
  Watcher.prototype.cleanupDeps = function cleanupDeps() {
    var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      var dep = this$1.deps[i];
      if (!this$1.newDepIds.has(dep.id)) {
        dep.removeSub(this$1);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  Watcher.prototype.update = function update() {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */
  Watcher.prototype.run = function run() {
    if (this.active) {
      var value = this.get();
      if (value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) || this.deep) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  Watcher.prototype.evaluate = function evaluate() {
    this.value = this.get();
    this.dirty = false;
  };

  /**
   * Depend on all deps collected by this watcher.
   */
  Watcher.prototype.depend = function depend() {
    var this$1 = this;

    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subscriber list.
   */
  Watcher.prototype.teardown = function teardown() {
    var this$1 = this;

    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      var i = this.deps.length;
      while (i--) {
        this$1.deps[i].removeSub(this$1);
      }
      this.active = false;
    }
  };

  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */
  var seenObjects = new _Set();
  function traverse(val) {
    seenObjects.clear();
    _traverse(val, seenObjects);
  }

  function _traverse(val, seen) {
    var i, keys;
    var isA = Array.isArray(val);
    if (!isA && !isObject(val) || !Object.isExtensible(val)) {
      return;
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return;
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--) {
        _traverse(val[i], seen);
      }
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) {
        _traverse(val[keys[i]], seen);
      }
    }
  }

  /*  */

  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };

  function proxy(target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter() {
      return this[sourceKey][key];
    };
    sharedPropertyDefinition.set = function proxySetter(val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState(vm) {
    vm._watchers = [];
    var opts = vm.$options;
    if (opts.props) {
      initProps(vm, opts.props);
    }
    if (opts.methods) {
      initMethods(vm, opts.methods);
    }
    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true /* asRootData */);
    }
    if (opts.computed) {
      initComputed(vm, opts.computed);
    }
    if (opts.watch) {
      initWatch(vm, opts.watch);
    }
  }

  var isReservedProp = {
    key: 1,
    ref: 1,
    slot: 1
  };

  function initProps(vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {};
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    // root instance props should be converted
    observerState.shouldConvert = isRoot;
    var loop = function loop(key) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */
      {
        if (isReservedProp[key] || config.isReservedAttr(key)) {
          warn("\"" + key + "\" is a reserved attribute and cannot be used as component prop.", vm);
        }
        defineReactive$$1(props, key, value, function () {
          if (vm.$parent && !observerState.isSettingProps) {
            warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
          }
        });
      }
      // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.
      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) {
      loop(key);
    }observerState.shouldConvert = true;
  }

  function initData(vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};
    if (!isPlainObject(data)) {
      data = {};
      "development" !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    var i = keys.length;
    while (i--) {
      if (props && hasOwn(props, keys[i])) {
        "development" !== 'production' && warn("The data property \"" + keys[i] + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
      } else if (!isReserved(keys[i])) {
        proxy(vm, "_data", keys[i]);
      }
    }
    // observe data
    observe(data, true /* asRootData */);
  }

  function getData(data, vm) {
    try {
      return data.call(vm);
    } catch (e) {
      handleError(e, vm, "data()");
      return {};
    }
  }

  var computedWatcherOptions = { lazy: true };

  function initComputed(vm, computed) {
    var watchers = vm._computedWatchers = Object.create(null);

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;
      {
        if (getter === undefined) {
          warn("No getter function has been defined for computed property \"" + key + "\".", vm);
          getter = noop;
        }
      }
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter, noop, computedWatcherOptions);

      // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else {
        if (key in vm.$data) {
          warn("The computed property \"" + key + "\" is already defined in data.", vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
        }
      }
    }
  }

  function defineComputed(target, key, userDef) {
    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = createComputedGetter(key);
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get ? userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
      sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter(key) {
    return function computedGetter() {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value;
      }
    };
  }

  function initMethods(vm, methods) {
    var props = vm.$options.props;
    for (var key in methods) {
      vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
      {
        if (methods[key] == null) {
          warn("method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
        }
        if (props && hasOwn(props, key)) {
          warn("method \"" + key + "\" has already been defined as a prop.", vm);
        }
      }
    }
  }

  function initWatch(vm, watch) {
    for (var key in watch) {
      var handler = watch[key];
      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher(vm, key, handler) {
    var options;
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === 'string') {
      handler = vm[handler];
    }
    vm.$watch(key, handler, options);
  }

  function stateMixin(Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () {
      return this._data;
    };
    var propsDef = {};
    propsDef.get = function () {
      return this._props;
    };
    {
      dataDef.set = function (newData) {
        warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
      };
      propsDef.set = function () {
        warn("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);

    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (expOrFn, cb, options) {
      var vm = this;
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        cb.call(vm, watcher.value);
      }
      return function unwatchFn() {
        watcher.teardown();
      };
    };
  }

  /*  */

  function initProvide(vm) {
    var provide = vm.$options.provide;
    if (provide) {
      vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
    }
  }

  function initInjections(vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        {
          defineReactive$$1(vm, key, result[key], function () {
            warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
          });
        }
      });
    }
  }

  function resolveInject(inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      // isArray here
      var isArray = Array.isArray(inject);
      var result = Object.create(null);
      var keys = isArray ? inject : hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        var provideKey = isArray ? key : inject[key];
        var source = vm;
        while (source) {
          if (source._provided && provideKey in source._provided) {
            result[key] = source._provided[provideKey];
            break;
          }
          source = source.$parent;
        }
      }
      return result;
    }
  }

  /*  */

  function createFunctionalComponent(Ctor, propsData, data, context, children) {
    var props = {};
    var propOptions = Ctor.options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || {});
      }
    } else {
      if (isDef(data.attrs)) {
        mergeProps(props, data.attrs);
      }
      if (isDef(data.props)) {
        mergeProps(props, data.props);
      }
    }
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var _context = Object.create(context);
    var h = function h(a, b, c, d) {
      return createElement(_context, a, b, c, d, true);
    };
    var vnode = Ctor.options.render.call(null, h, {
      data: data,
      props: props,
      children: children,
      parent: context,
      listeners: data.on || {},
      injections: resolveInject(Ctor.options.inject, context),
      slots: function slots() {
        return resolveSlots(children, context);
      }
    });
    if (vnode instanceof VNode) {
      vnode.functionalContext = context;
      vnode.functionalOptions = Ctor.options;
      if (data.slot) {
        (vnode.data || (vnode.data = {})).slot = data.slot;
      }
    }
    return vnode;
  }

  function mergeProps(to, from) {
    for (var key in from) {
      to[camelize(key)] = from[key];
    }
  }

  /*  */

  // hooks to be invoked on component VNodes during patch
  var componentVNodeHooks = {
    init: function init(vnode, hydrating, parentElm, refElm) {
      if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
        var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      } else if (vnode.data.keepAlive) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      }
    },

    prepatch: function prepatch(oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(child, options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
      );
    },

    insert: function insert(vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true /* direct */);
        }
      }
    },

    destroy: function destroy(vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true /* direct */);
        }
      }
    }
  };

  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent(Ctor, data, context, children, tag) {
    if (isUndef(Ctor)) {
      return;
    }

    var baseCtor = context.$options._base;

    // plain options object: turn it into a constructor
    if (isObject(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }

    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
      {
        warn("Invalid Component definition: " + String(Ctor), context);
      }
      return;
    }

    // async component
    if (isUndef(Ctor.cid)) {
      Ctor = resolveAsyncComponent(Ctor, baseCtor, context);
      if (Ctor === undefined) {
        // return nothing if this is indeed an async component
        // wait for the callback to trigger parent update.
        return;
      }
    }

    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);

    data = data || {};

    // transform component v-model data into props & events
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }

    // extract props
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);

    // functional component
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children);
    }

    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners
      data = {};
    }

    // merge component management hooks onto the placeholder node
    mergeHooks(data);

    // return a placeholder vnode
    var name = Ctor.options.name || tag;
    var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children });
    return vnode;
  }

  function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
  parent, // activeInstance in lifecycle state
  parentElm, refElm) {
    var vnodeComponentOptions = vnode.componentOptions;
    var options = {
      _isComponent: true,
      parent: parent,
      propsData: vnodeComponentOptions.propsData,
      _componentTag: vnodeComponentOptions.tag,
      _parentVnode: vnode,
      _parentListeners: vnodeComponentOptions.listeners,
      _renderChildren: vnodeComponentOptions.children,
      _parentElm: parentElm || null,
      _refElm: refElm || null
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnodeComponentOptions.Ctor(options);
  }

  function mergeHooks(data) {
    if (!data.hook) {
      data.hook = {};
    }
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var fromParent = data.hook[key];
      var ours = componentVNodeHooks[key];
      data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
    }
  }

  function mergeHook$1(one, two) {
    return function (a, b, c, d) {
      one(a, b, c, d);
      two(a, b, c, d);
    };
  }

  // transform component v-model info (value and callback) into
  // prop and event handler respectively.
  function transformModel(options, data) {
    var prop = options.model && options.model.prop || 'value';
    var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    if (isDef(on[event])) {
      on[event] = [data.model.callback].concat(on[event]);
    } else {
      on[event] = data.model.callback;
    }
  }

  /*  */

  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;

  // wrapper function for providing a more flexible interface
  // without getting yelled at by flow
  function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType);
  }

  function _createElement(context, tag, data, children, normalizationType) {
    if (isDef(data) && isDef(data.__ob__)) {
      "development" !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
      return createEmptyVNode();
    }
    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode();
    }
    // support single function children as default scoped slot
    if (Array.isArray(children) && typeof children[0] === 'function') {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
      var Ctor;
      ns = config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        // platform built-in elements
        vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
      } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(tag, data, children, undefined, undefined, context);
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }
    if (isDef(vnode)) {
      if (ns) {
        applyNS(vnode, ns);
      }
      return vnode;
    } else {
      return createEmptyVNode();
    }
  }

  function applyNS(vnode, ns) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      return;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && isUndef(child.ns)) {
          applyNS(child, ns);
        }
      }
    }
  }

  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */
  function renderList(val, render) {
    var ret, i, l, keys, key;
    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject(val)) {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
    if (isDef(ret)) {
      ret._isVList = true;
    }
    return ret;
  }

  /*  */

  /**
   * Runtime helper for rendering <slot>
   */
  function renderSlot(name, fallback, props, bindObject) {
    var scopedSlotFn = this.$scopedSlots[name];
    if (scopedSlotFn) {
      // scoped slot
      props = props || {};
      if (bindObject) {
        extend(props, bindObject);
      }
      return scopedSlotFn(props) || fallback;
    } else {
      var slotNodes = this.$slots[name];
      // warn duplicate slot usage
      if (slotNodes && "development" !== 'production') {
        slotNodes._rendered && warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
        slotNodes._rendered = true;
      }
      return slotNodes || fallback;
    }
  }

  /*  */

  /**
   * Runtime helper for resolving filters
   */
  function resolveFilter(id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity;
  }

  /*  */

  /**
   * Runtime helper for checking keyCodes from config.
   */
  function checkKeyCodes(eventKeyCode, key, builtInAlias) {
    var keyCodes = config.keyCodes[key] || builtInAlias;
    if (Array.isArray(keyCodes)) {
      return keyCodes.indexOf(eventKeyCode) === -1;
    } else {
      return keyCodes !== eventKeyCode;
    }
  }

  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */
  function bindObjectProps(data, tag, value, asProp) {
    if (value) {
      if (!isObject(value)) {
        "development" !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }
        var hash;
        for (var key in value) {
          if (key === 'class' || key === 'style') {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
          }
          if (!(key in hash)) {
            hash[key] = value[key];
          }
        }
      }
    }
    return data;
  }

  /*  */

  /**
   * Runtime helper for rendering static trees.
   */
  function renderStatic(index, isInFor) {
    var tree = this._staticTrees[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree by doing a shallow clone.
    if (tree && !isInFor) {
      return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);
    }
    // otherwise, render a fresh tree.
    tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);
    markStatic(tree, "__static__" + index, false);
    return tree;
  }

  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */
  function markOnce(tree, index, key) {
    markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
    return tree;
  }

  function markStatic(tree, key, isOnce) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], key + "_" + i, isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode(node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }

  /*  */

  function initRender(vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null;
    var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    vm._c = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, false);
    };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = function (a, b, c, d) {
      return createElement(vm, a, b, c, d, true);
    };
  }

  function renderMixin(Vue) {
    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this);
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      var _parentVnode = ref._parentVnode;

      if (vm._isMounted) {
        // clone slot nodes on re-renders
        for (var key in vm.$slots) {
          vm.$slots[key] = cloneVNodes(vm.$slots[key]);
        }
      }

      vm.$scopedSlots = _parentVnode && _parentVnode.data.scopedSlots || emptyObject;

      if (staticRenderFns && !vm._staticTrees) {
        vm._staticTrees = [];
      }
      // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.
      vm.$vnode = _parentVnode;
      // render self
      var vnode;
      try {
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render function");
        // return error render result,
        // or previous vnode to prevent render error causing blank component
        /* istanbul ignore else */
        {
          vnode = vm.$options.renderError ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) : vm._vnode;
        }
      }
      // return empty vnode in case the render function errored out
      if (!(vnode instanceof VNode)) {
        if ("development" !== 'production' && Array.isArray(vnode)) {
          warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
        }
        vnode = createEmptyVNode();
      }
      // set parent
      vnode.parent = _parentVnode;
      return vnode;
    };

    // internal render helpers.
    // these are exposed on the instance prototype to reduce generated render
    // code size.
    Vue.prototype._o = markOnce;
    Vue.prototype._n = toNumber;
    Vue.prototype._s = toString;
    Vue.prototype._l = renderList;
    Vue.prototype._t = renderSlot;
    Vue.prototype._q = looseEqual;
    Vue.prototype._i = looseIndexOf;
    Vue.prototype._m = renderStatic;
    Vue.prototype._f = resolveFilter;
    Vue.prototype._k = checkKeyCodes;
    Vue.prototype._b = bindObjectProps;
    Vue.prototype._v = createTextVNode;
    Vue.prototype._e = createEmptyVNode;
    Vue.prototype._u = resolveScopedSlots;
  }

  /*  */

  var uid$1 = 0;

  function initMixin(Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      // a uid
      vm._uid = uid$1++;

      var startTag, endTag;
      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        startTag = "vue-perf-init:" + vm._uid;
        endTag = "vue-perf-end:" + vm._uid;
        mark(startTag);
      }

      // a flag to avoid this being observed
      vm._isVue = true;
      // merge options
      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
      }
      /* istanbul ignore else */
      {
        initProxy(vm);
      }
      // expose real self
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props
      initState(vm);
      initProvide(vm); // resolve provide after data/props
      callHook(vm, 'created');

      /* istanbul ignore if */
      if ("development" !== 'production' && config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure(vm._name + " init", startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent(vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    // doing this because it's faster than dynamic enumeration.
    opts.parent = options.parent;
    opts.propsData = options.propsData;
    opts._parentVnode = options._parentVnode;
    opts._parentListeners = options._parentListeners;
    opts._renderChildren = options._renderChildren;
    opts._componentTag = options._componentTag;
    opts._parentElm = options._parentElm;
    opts._refElm = options._refElm;
    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions(Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions;
        // check if there are any late-modified/attached options (#4976)
        var modifiedOptions = resolveModifiedOptions(Ctor);
        // update base extend options
        if (modifiedOptions) {
          extend(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options;
  }

  function resolveModifiedOptions(Ctor) {
    var modified;
    var latest = Ctor.options;
    var extended = Ctor.extendOptions;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) {
          modified = {};
        }
        modified[key] = dedupe(latest[key], extended[key], sealed[key]);
      }
    }
    return modified;
  }

  function dedupe(latest, extended, sealed) {
    // compare latest and sealed to ensure lifecycle hooks won't be duplicated
    // between merges
    if (Array.isArray(latest)) {
      var res = [];
      sealed = Array.isArray(sealed) ? sealed : [sealed];
      extended = Array.isArray(extended) ? extended : [extended];
      for (var i = 0; i < latest.length; i++) {
        // push original options and not sealed options to exclude duplicated options
        if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
          res.push(latest[i]);
        }
      }
      return res;
    } else {
      return latest;
    }
  }

  function Vue$3(options) {
    if ("development" !== 'production' && !(this instanceof Vue$3)) {
      warn('Vue is a constructor and should be called with the `new` keyword');
    }
    this._init(options);
  }

  initMixin(Vue$3);
  stateMixin(Vue$3);
  eventsMixin(Vue$3);
  lifecycleMixin(Vue$3);
  renderMixin(Vue$3);

  /*  */

  function initUse(Vue) {
    Vue.use = function (plugin) {
      /* istanbul ignore if */
      if (plugin.installed) {
        return this;
      }
      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }
      plugin.installed = true;
      return this;
    };
  }

  /*  */

  function initMixin$1(Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this;
    };
  }

  /*  */

  function initExtend(Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId];
      }

      var name = extendOptions.name || Super.options.name;
      {
        if (!/^[a-zA-Z][\w-]*$/.test(name)) {
          warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
        }
      }

      var Sub = function VueComponent(options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(Super.options, extendOptions);
      Sub['super'] = Super;

      // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.
      if (Sub.options.props) {
        initProps$1(Sub);
      }
      if (Sub.options.computed) {
        initComputed$1(Sub);
      }

      // allow further extension/mixin/plugin usage
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;

      // create asset registers, so extended classes
      // can have their private assets too.
      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }

      // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend({}, Sub.options);

      // cache constructor
      cachedCtors[SuperId] = Sub;
      return Sub;
    };
  }

  function initProps$1(Comp) {
    var props = Comp.options.props;
    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1(Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }

  /*  */

  function initAssetRegisters(Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (id, definition) {
        if (!definition) {
          return this.options[type + 's'][id];
        } else {
          /* istanbul ignore if */
          {
            if (type === 'component' && config.isReservedTag(id)) {
              warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
            }
          }
          if (type === 'component' && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === 'directive' && typeof definition === 'function') {
            definition = { bind: definition, update: definition };
          }
          this.options[type + 's'][id] = definition;
          return definition;
        }
      };
    });
  }

  /*  */

  var patternTypes = [String, RegExp];

  function getComponentName(opts) {
    return opts && (opts.Ctor.options.name || opts.tag);
  }

  function matches(pattern, name) {
    if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1;
    } else if (isRegExp(pattern)) {
      return pattern.test(name);
    }
    /* istanbul ignore next */
    return false;
  }

  function pruneCache(cache, current, filter) {
    for (var key in cache) {
      var cachedNode = cache[key];
      if (cachedNode) {
        var name = getComponentName(cachedNode.componentOptions);
        if (name && !filter(name)) {
          if (cachedNode !== current) {
            pruneCacheEntry(cachedNode);
          }
          cache[key] = null;
        }
      }
    }
  }

  function pruneCacheEntry(vnode) {
    if (vnode) {
      vnode.componentInstance.$destroy();
    }
  }

  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,

    props: {
      include: patternTypes,
      exclude: patternTypes
    },

    created: function created() {
      this.cache = Object.create(null);
    },

    destroyed: function destroyed() {
      var this$1 = this;

      for (var key in this$1.cache) {
        pruneCacheEntry(this$1.cache[key]);
      }
    },

    watch: {
      include: function include(val) {
        pruneCache(this.cache, this._vnode, function (name) {
          return matches(val, name);
        });
      },
      exclude: function exclude(val) {
        pruneCache(this.cache, this._vnode, function (name) {
          return !matches(val, name);
        });
      }
    },

    render: function render() {
      var vnode = getFirstComponentChild(this.$slots.default);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        // check pattern
        var name = getComponentName(componentOptions);
        if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {
          return vnode;
        }
        var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;
        if (this.cache[key]) {
          vnode.componentInstance = this.cache[key].componentInstance;
        } else {
          this.cache[key] = vnode;
        }
        vnode.data.keepAlive = true;
      }
      return vnode;
    }
  };

  var builtInComponents = {
    KeepAlive: KeepAlive
  };

  /*  */

  function initGlobalAPI(Vue) {
    // config
    var configDef = {};
    configDef.get = function () {
      return config;
    };
    {
      configDef.set = function () {
        warn('Do not replace the Vue.config object, set individual fields instead.');
      };
    }
    Object.defineProperty(Vue, 'config', configDef);

    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
      warn: warn,
      extend: extend,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive$$1
    };

    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick;

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    });

    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;

    extend(Vue.options.components, builtInComponents);

    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue$3);

  Object.defineProperty(Vue$3.prototype, '$isServer', {
    get: isServerRendering
  });

  Object.defineProperty(Vue$3.prototype, '$ssrContext', {
    get: function get() {
      /* istanbul ignore next */
      return this.$vnode.ssrContext;
    }
  });

  Vue$3.version = '2.3.4';

  /*  */

  // these are reserved for web because they are directly compiled away
  // during template compilation
  var isReservedAttr = makeMap('style,class');

  // attributes that should be using props for binding
  var acceptValue = makeMap('input,textarea,option,select');
  var mustUseProp = function mustUseProp(tag, type, attr) {
    return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

  var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');

  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function isXlink(name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
  };

  var getXlinkProp = function getXlinkProp(name) {
    return isXlink(name) ? name.slice(6, name.length) : '';
  };

  var isFalsyAttrValue = function isFalsyAttrValue(val) {
    return val == null || val === false;
  };

  /*  */

  function genClassForVnode(vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }
    return genClassFromData(data);
  }

  function mergeClassData(child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class) ? [child.class, parent.class] : parent.class
    };
  }

  function genClassFromData(data) {
    var dynamicClass = data.class;
    var staticClass = data.staticClass;
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass));
    }
    /* istanbul ignore next */
    return '';
  }

  function concat(a, b) {
    return a ? b ? a + ' ' + b : a : b || '';
  }

  function stringifyClass(value) {
    if (isUndef(value)) {
      return '';
    }
    if (typeof value === 'string') {
      return value;
    }
    var res = '';
    if (Array.isArray(value)) {
      var stringified;
      for (var i = 0, l = value.length; i < l; i++) {
        if (isDef(value[i])) {
          if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
            res += stringified + ' ';
          }
        }
      }
      return res.slice(0, -1);
    }
    if (isObject(value)) {
      for (var key in value) {
        if (value[key]) {
          res += key + ' ';
        }
      }
      return res.slice(0, -1);
    }
    /* istanbul ignore next */
    return res;
  }

  /*  */

  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };

  var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template');

  // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.
  var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

  var isPreTag = function isPreTag(tag) {
    return tag === 'pre';
  };

  var isReservedTag = function isReservedTag(tag) {
    return isHTMLTag(tag) || isSVG(tag);
  };

  function getTagNamespace(tag) {
    if (isSVG(tag)) {
      return 'svg';
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
      return 'math';
    }
  }

  var unknownElementCache = Object.create(null);
  function isUnknownElement(tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true;
    }
    if (isReservedTag(tag)) {
      return false;
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag];
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
    } else {
      return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
    }
  }

  /*  */

  /**
   * Query an element selector if it's not an element already.
   */
  function query(el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);
      if (!selected) {
        "development" !== 'production' && warn('Cannot find element: ' + el);
        return document.createElement('div');
      }
      return selected;
    } else {
      return el;
    }
  }

  /*  */

  function createElement$1(tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
      return elm;
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }
    return elm;
  }

  function createElementNS(namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName);
  }

  function createTextNode(text) {
    return document.createTextNode(text);
  }

  function createComment(text) {
    return document.createComment(text);
  }

  function insertBefore(parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild(node, child) {
    node.removeChild(child);
  }

  function appendChild(node, child) {
    node.appendChild(child);
  }

  function parentNode(node) {
    return node.parentNode;
  }

  function nextSibling(node) {
    return node.nextSibling;
  }

  function tagName(node) {
    return node.tagName;
  }

  function setTextContent(node, text) {
    node.textContent = text;
  }

  function setAttribute(node, key, val) {
    node.setAttribute(key, val);
  }

  var nodeOps = Object.freeze({
    createElement: createElement$1,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    setAttribute: setAttribute
  });

  /*  */

  var ref = {
    create: function create(_, vnode) {
      registerRef(vnode);
    },
    update: function update(oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy(vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef(vnode, isRemoval) {
    var key = vnode.data.ref;
    if (!key) {
      return;
    }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;
    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (Array.isArray(refs[key]) && refs[key].indexOf(ref) < 0) {
          refs[key].push(ref);
        } else {
          refs[key] = [ref];
        }
      } else {
        refs[key] = ref;
      }
    }
  }

  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
  
  /*
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

  var emptyNode = new VNode('', {}, []);

  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode(a, b) {
    return a.key === b.key && a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b);
  }

  // Some browsers do not support dynamically changing type for <input>
  // so they need to be treated as different nodes
  function sameInputType(a, b) {
    if (a.tag !== 'input') {
      return true;
    }
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB;
  }

  function createKeyToOldIdx(children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key)) {
        map[key] = i;
      }
    }
    return map;
  }

  function createPatchFunction(backend) {
    var i, j;
    var cbs = {};

    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt(elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
    }

    function createRmCb(childElm, listeners) {
      function remove$$1() {
        if (--remove$$1.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove$$1.listeners = listeners;
      return remove$$1;
    }

    function removeNode(el) {
      var parent = nodeOps.parentNode(el);
      // element may have already been removed due to v-html / v-text
      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    var inPre = 0;
    function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {
      vnode.isRootInsert = !nested; // for transition enter check
      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return;
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        {
          if (data && data.pre) {
            inPre++;
          }
          if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {
            warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
          }
        }
        vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
        setScope(vnode);

        /* istanbul ignore if */
        {
          createChildren(vnode, children, insertedVnodeQueue);
          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }
          insert(parentElm, vnode.elm, refElm);
        }

        if ("development" !== 'production' && data && data.pre) {
          inPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;
      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false /* hydrating */, parentElm, refElm);
        }
        // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true;
        }
      }
    }

    function initComponent(vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode);
        // make sure to invoke the insert hook
        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
      var i;
      // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break;
        }
      }
      // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself
      insert(parentElm, vnode.elm, refElm);
    }

    function insert(parent, elm, ref) {
      if (isDef(parent)) {
        if (isDef(ref)) {
          if (ref.parentNode === parent) {
            nodeOps.insertBefore(parent, elm, ref);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren(vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
      }
    }

    function isPatchable(vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag);
    }

    function invokeCreateHooks(vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (isDef(i.create)) {
          i.create(emptyNode, vnode);
        }
        if (isDef(i.insert)) {
          insertedVnodeQueue.push(vnode);
        }
      }
    }

    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope(vnode) {
      var i;
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setAttribute(vnode.elm, i, '');
        }
        ancestor = ancestor.parent;
      }
      // for slot content they should also get the scopeId from the host instance.
      if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
    }

    function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
      }
    }

    function invokeDestroyHook(vnode) {
      var i, j;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) {
          i(vnode);
        }
        for (i = 0; i < cbs.destroy.length; ++i) {
          cbs.destroy[i](vnode);
        }
      }
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else {
            // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook(vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        }
        // recursively invoke hooks on child component root node
        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }
        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }
        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, elmToMove, refElm;

      // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions
      var canMove = !removeOnly;

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) {
          // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) {
          // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) {
            oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
          }
          idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
          if (isUndef(idxInOld)) {
            // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            elmToMove = oldCh[idxInOld];
            /* istanbul ignore if */
            if ("development" !== 'production' && !elmToMove) {
              warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');
            }
            if (sameVnode(elmToMove, newStartVnode)) {
              patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, newStartVnode.elm, oldStartVnode.elm);
              newStartVnode = newCh[++newStartIdx];
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
              newStartVnode = newCh[++newStartIdx];
            }
          }
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
      if (oldVnode === vnode) {
        return;
      }
      // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.
      if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
        vnode.elm = oldVnode.elm;
        vnode.componentInstance = oldVnode.componentInstance;
        return;
      }
      var i;
      var data = vnode.data;
      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }
      var elm = vnode.elm = oldVnode.elm;
      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) {
          cbs.update[i](oldVnode, vnode);
        }
        if (isDef(i = data.hook) && isDef(i = i.update)) {
          i(oldVnode, vnode);
        }
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) {
            updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
          }
        } else if (isDef(ch)) {
          if (isDef(oldVnode.text)) {
            nodeOps.setTextContent(elm, '');
          }
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(elm, oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
          i(oldVnode, vnode);
        }
      }
    }

    function invokeInsertHook(vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var bailed = false;
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate(elm, vnode, insertedVnodeQueue) {
      {
        if (!assertNodeMatch(elm, vnode)) {
          return false;
        }
      }
      vnode.elm = elm;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) {
          i(vnode, true /* hydrating */);
        }
        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true;
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              if ("development" !== 'production' && typeof console !== 'undefined' && !bailed) {
                bailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false;
            }
          }
        }
        if (isDef(data)) {
          for (var key in data) {
            if (!isRenderedModule(key)) {
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break;
            }
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true;
    }

    function assertNodeMatch(node, vnode) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3);
      }
    }

    return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) {
          invokeDestroyHook(oldVnode);
        }
        return;
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue, parentElm, refElm);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode;
              } else {
                warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
              }
            }
            // either not server-rendered, or hydration failed.
            // create an empty node and replace it
            oldVnode = emptyNodeAt(oldVnode);
          }
          // replacing existing element
          var oldElm = oldVnode.elm;
          var parentElm$1 = nodeOps.parentNode(oldElm);
          createElm(vnode, insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));

          if (isDef(vnode.parent)) {
            // component root element replaced.
            // update parent placeholder node element, recursively
            var ancestor = vnode.parent;
            while (ancestor) {
              ancestor.elm = vnode.elm;
              ancestor = ancestor.parent;
            }
            if (isPatchable(vnode)) {
              for (var i = 0; i < cbs.create.length; ++i) {
                cbs.create[i](emptyNode, vnode.parent);
              }
            }
          }

          if (isDef(parentElm$1)) {
            removeVnodes(parentElm$1, [oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm;
    };
  }

  /*  */

  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives(vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives(oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update(oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

    var dirsWithInsert = [];
    var dirsWithPostpatch = [];

    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        callHook$1(dir, 'update', vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function callInsert() {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1(dirs, vm) {
    var res = Object.create(null);
    if (!dirs) {
      return res;
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    }
    return res;
  }

  function getRawDirName(dir) {
    return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
  }

  function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
      }
    }
  }

  var baseModules = [ref, directives];

  /*  */

  function updateAttrs(oldVnode, vnode) {
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return;
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    /* istanbul ignore if */
    if (isIE9 && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr(el, key, value) {
    if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        el.setAttribute(key, key);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        el.setAttribute(key, value);
      }
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };

  /*  */

  function updateClass(oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
      return;
    }

    var cls = genClassForVnode(vnode);

    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }

    // set the class
    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };

  /*  */

  var validDivisionCharRE = /[\w).+\-_$\]]/;

  function parseFilters(exp) {
    var inSingle = false;
    var inDouble = false;
    var inTemplateString = false;
    var inRegex = false;
    var curly = 0;
    var square = 0;
    var paren = 0;
    var lastFilterIndex = 0;
    var c, prev, i, expression, filters;

    for (i = 0; i < exp.length; i++) {
      prev = c;
      c = exp.charCodeAt(i);
      if (inSingle) {
        if (c === 0x27 && prev !== 0x5C) {
          inSingle = false;
        }
      } else if (inDouble) {
        if (c === 0x22 && prev !== 0x5C) {
          inDouble = false;
        }
      } else if (inTemplateString) {
        if (c === 0x60 && prev !== 0x5C) {
          inTemplateString = false;
        }
      } else if (inRegex) {
        if (c === 0x2f && prev !== 0x5C) {
          inRegex = false;
        }
      } else if (c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C && exp.charCodeAt(i - 1) !== 0x7C && !curly && !square && !paren) {
        if (expression === undefined) {
          // first filter, end of expression
          lastFilterIndex = i + 1;
          expression = exp.slice(0, i).trim();
        } else {
          pushFilter();
        }
      } else {
        switch (c) {
          case 0x22:
            inDouble = true;break; // "
          case 0x27:
            inSingle = true;break; // '
          case 0x60:
            inTemplateString = true;break; // `
          case 0x28:
            paren++;break; // (
          case 0x29:
            paren--;break; // )
          case 0x5B:
            square++;break; // [
          case 0x5D:
            square--;break; // ]
          case 0x7B:
            curly++;break; // {
          case 0x7D:
            curly--;break; // }
        }
        if (c === 0x2f) {
          // /
          var j = i - 1;
          var p = void 0;
          // find first non-whitespace prev char
          for (; j >= 0; j--) {
            p = exp.charAt(j);
            if (p !== ' ') {
              break;
            }
          }
          if (!p || !validDivisionCharRE.test(p)) {
            inRegex = true;
          }
        }
      }
    }

    if (expression === undefined) {
      expression = exp.slice(0, i).trim();
    } else if (lastFilterIndex !== 0) {
      pushFilter();
    }

    function pushFilter() {
      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
      lastFilterIndex = i + 1;
    }

    if (filters) {
      for (i = 0; i < filters.length; i++) {
        expression = wrapFilter(expression, filters[i]);
      }
    }

    return expression;
  }

  function wrapFilter(exp, filter) {
    var i = filter.indexOf('(');
    if (i < 0) {
      // _f: resolveFilter
      return "_f(\"" + filter + "\")(" + exp + ")";
    } else {
      var name = filter.slice(0, i);
      var args = filter.slice(i + 1);
      return "_f(\"" + name + "\")(" + exp + "," + args;
    }
  }

  /*  */

  function baseWarn(msg) {
    console.error("[Vue compiler]: " + msg);
  }

  function pluckModuleFunction(modules, key) {
    return modules ? modules.map(function (m) {
      return m[key];
    }).filter(function (_) {
      return _;
    }) : [];
  }

  function addProp(el, name, value) {
    (el.props || (el.props = [])).push({ name: name, value: value });
  }

  function addAttr(el, name, value) {
    (el.attrs || (el.attrs = [])).push({ name: name, value: value });
  }

  function addDirective(el, name, rawName, value, arg, modifiers) {
    (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });
  }

  function addHandler(el, name, value, modifiers, important, warn) {
    // warn prevent and passive modifier
    /* istanbul ignore if */
    if ("development" !== 'production' && warn && modifiers && modifiers.prevent && modifiers.passive) {
      warn('passive and prevent can\'t be used together. ' + 'Passive handler can\'t prevent default event.');
    }
    // check capture modifier
    if (modifiers && modifiers.capture) {
      delete modifiers.capture;
      name = '!' + name; // mark the event as captured
    }
    if (modifiers && modifiers.once) {
      delete modifiers.once;
      name = '~' + name; // mark the event as once
    }
    /* istanbul ignore if */
    if (modifiers && modifiers.passive) {
      delete modifiers.passive;
      name = '&' + name; // mark the event as passive
    }
    var events;
    if (modifiers && modifiers.native) {
      delete modifiers.native;
      events = el.nativeEvents || (el.nativeEvents = {});
    } else {
      events = el.events || (el.events = {});
    }
    var newHandler = { value: value, modifiers: modifiers };
    var handlers = events[name];
    /* istanbul ignore if */
    if (Array.isArray(handlers)) {
      important ? handlers.unshift(newHandler) : handlers.push(newHandler);
    } else if (handlers) {
      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
    } else {
      events[name] = newHandler;
    }
  }

  function getBindingAttr(el, name, getStatic) {
    var dynamicValue = getAndRemoveAttr(el, ':' + name) || getAndRemoveAttr(el, 'v-bind:' + name);
    if (dynamicValue != null) {
      return parseFilters(dynamicValue);
    } else if (getStatic !== false) {
      var staticValue = getAndRemoveAttr(el, name);
      if (staticValue != null) {
        return JSON.stringify(staticValue);
      }
    }
  }

  function getAndRemoveAttr(el, name) {
    var val;
    if ((val = el.attrsMap[name]) != null) {
      var list = el.attrsList;
      for (var i = 0, l = list.length; i < l; i++) {
        if (list[i].name === name) {
          list.splice(i, 1);
          break;
        }
      }
    }
    return val;
  }

  /*  */

  /**
   * Cross-platform code generation for component v-model
   */
  function genComponentModel(el, value, modifiers) {
    var ref = modifiers || {};
    var number = ref.number;
    var trim = ref.trim;

    var baseValueExpression = '$$v';
    var valueExpression = baseValueExpression;
    if (trim) {
      valueExpression = "(typeof " + baseValueExpression + " === 'string'" + "? " + baseValueExpression + ".trim()" + ": " + baseValueExpression + ")";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }
    var assignment = genAssignmentCode(value, valueExpression);

    el.model = {
      value: "(" + value + ")",
      expression: "\"" + value + "\"",
      callback: "function (" + baseValueExpression + ") {" + assignment + "}"
    };
  }

  /**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */
  function genAssignmentCode(value, assignment) {
    var modelRs = parseModel(value);
    if (modelRs.idx === null) {
      return value + "=" + assignment;
    } else {
      return "var $$exp = " + modelRs.exp + ", $$idx = " + modelRs.idx + ";" + "if (!Array.isArray($$exp)){" + value + "=" + assignment + "}" + "else{$$exp.splice($$idx, 1, " + assignment + ")}";
    }
  }

  /**
   * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
   *
   * for loop possible cases:
   *
   * - test
   * - test[idx]
   * - test[test1[idx]]
   * - test["a"][idx]
   * - xxx.test[a[a].test1[idx]]
   * - test.xxx.a["asa"][test1[idx]]
   *
   */

  var len;
  var str;
  var chr;
  var index$1;
  var expressionPos;
  var expressionEndPos;

  function parseModel(val) {
    str = val;
    len = str.length;
    index$1 = expressionPos = expressionEndPos = 0;

    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
      return {
        exp: val,
        idx: null
      };
    }

    while (!eof()) {
      chr = next();
      /* istanbul ignore if */
      if (isStringStart(chr)) {
        parseString(chr);
      } else if (chr === 0x5B) {
        parseBracket(chr);
      }
    }

    return {
      exp: val.substring(0, expressionPos),
      idx: val.substring(expressionPos + 1, expressionEndPos)
    };
  }

  function next() {
    return str.charCodeAt(++index$1);
  }

  function eof() {
    return index$1 >= len;
  }

  function isStringStart(chr) {
    return chr === 0x22 || chr === 0x27;
  }

  function parseBracket(chr) {
    var inBracket = 1;
    expressionPos = index$1;
    while (!eof()) {
      chr = next();
      if (isStringStart(chr)) {
        parseString(chr);
        continue;
      }
      if (chr === 0x5B) {
        inBracket++;
      }
      if (chr === 0x5D) {
        inBracket--;
      }
      if (inBracket === 0) {
        expressionEndPos = index$1;
        break;
      }
    }
  }

  function parseString(chr) {
    var stringQuote = chr;
    while (!eof()) {
      chr = next();
      if (chr === stringQuote) {
        break;
      }
    }
  }

  /*  */

  var warn$1;

  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.
  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';

  function model(el, dir, _warn) {
    warn$1 = _warn;
    var value = dir.value;
    var modifiers = dir.modifiers;
    var tag = el.tag;
    var type = el.attrsMap.type;

    {
      var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
      if (tag === 'input' && dynamicType) {
        warn$1("<input :type=\"" + dynamicType + "\" v-model=\"" + value + "\">:\n" + "v-model does not support dynamic input types. Use v-if branches instead.");
      }
      // inputs with type="file" are read only and setting the input's
      // value will throw an error.
      if (tag === 'input' && type === 'file') {
        warn$1("<" + el.tag + " v-model=\"" + value + "\" type=\"file\">:\n" + "File inputs are read only. Use a v-on:change listener instead.");
      }
    }

    if (tag === 'select') {
      genSelect(el, value, modifiers);
    } else if (tag === 'input' && type === 'checkbox') {
      genCheckboxModel(el, value, modifiers);
    } else if (tag === 'input' && type === 'radio') {
      genRadioModel(el, value, modifiers);
    } else if (tag === 'input' || tag === 'textarea') {
      genDefaultModel(el, value, modifiers);
    } else if (!config.isReservedTag(tag)) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false;
    } else {
      warn$1("<" + el.tag + " v-model=\"" + value + "\">: " + "v-model is not supported on this element type. " + 'If you are working with contenteditable, it\'s recommended to ' + 'wrap a library dedicated for that purpose inside a custom component.');
    }

    // ensure runtime directive metadata
    return true;
  }

  function genCheckboxModel(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
    addProp(el, 'checked', "Array.isArray(" + value + ")" + "?_i(" + value + "," + valueBinding + ")>-1" + (trueValueBinding === 'true' ? ":(" + value + ")" : ":_q(" + value + "," + trueValueBinding + ")"));
    addHandler(el, CHECKBOX_RADIO_TOKEN, "var $$a=" + value + "," + '$$el=$event.target,' + "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" + 'if(Array.isArray($$a)){' + "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," + '$$i=_i($$a,$$v);' + "if($$c){$$i<0&&(" + value + "=$$a.concat($$v))}" + "else{$$i>-1&&(" + value + "=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}" + "}else{" + genAssignmentCode(value, '$$c') + "}", null, true);
  }

  function genRadioModel(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    valueBinding = number ? "_n(" + valueBinding + ")" : valueBinding;
    addProp(el, 'checked', "_q(" + value + "," + valueBinding + ")");
    addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);
  }

  function genSelect(el, value, modifiers) {
    var number = modifiers && modifiers.number;
    var selectedVal = "Array.prototype.filter" + ".call($event.target.options,function(o){return o.selected})" + ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" + "return " + (number ? '_n(val)' : 'val') + "})";

    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
    var code = "var $$selectedVal = " + selectedVal + ";";
    code = code + " " + genAssignmentCode(value, assignment);
    addHandler(el, 'change', code, null, true);
  }

  function genDefaultModel(el, value, modifiers) {
    var type = el.attrsMap.type;
    var ref = modifiers || {};
    var lazy = ref.lazy;
    var number = ref.number;
    var trim = ref.trim;
    var needCompositionGuard = !lazy && type !== 'range';
    var event = lazy ? 'change' : type === 'range' ? RANGE_TOKEN : 'input';

    var valueExpression = '$event.target.value';
    if (trim) {
      valueExpression = "$event.target.value.trim()";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }

    var code = genAssignmentCode(value, valueExpression);
    if (needCompositionGuard) {
      code = "if($event.target.composing)return;" + code;
    }

    addProp(el, 'value', "(" + value + ")");
    addHandler(el, event, code, null, true);
    if (trim || number || type === 'number') {
      addHandler(el, 'blur', '$forceUpdate()');
    }
  }

  /*  */

  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.
  function normalizeEvents(on) {
    var event;
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    }
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      // Chrome fires microtasks in between click/change, leads to #4521
      event = isChrome ? 'click' : 'change';
      on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1;

  function add$1(event, _handler, once$$1, capture, passive) {
    if (once$$1) {
      var oldHandler = _handler;
      var _target = target$1; // save current target element in closure
      _handler = function handler(ev) {
        var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);
        if (res !== null) {
          remove$2(event, _handler, capture, _target);
        }
      };
    }
    target$1.addEventListener(event, _handler, supportsPassive ? { capture: capture, passive: passive } : capture);
  }

  function remove$2(event, handler, capture, _target) {
    (_target || target$1).removeEventListener(event, handler, capture);
  }

  function updateDOMListeners(oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return;
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, vnode.context);
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };

  /*  */

  function updateDOMProps(oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return;
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend({}, props);
    }

    for (key in oldProps) {
      if (isUndef(props[key])) {
        elm[key] = '';
      }
    }
    for (key in props) {
      cur = props[key];
      // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)
      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) {
          vnode.children.length = 0;
        }
        if (cur === oldProps[key]) {
          continue;
        }
      }

      if (key === 'value') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur;
        // avoid resetting cursor position when value is the same
        var strCur = isUndef(cur) ? '' : String(cur);
        if (shouldUpdateValue(elm, vnode, strCur)) {
          elm.value = strCur;
        }
      } else {
        elm[key] = cur;
      }
    }
  }

  // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue(elm, vnode, checkVal) {
    return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(elm, checkVal));
  }

  function isDirty(elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is not equal to the updated value
    return document.activeElement !== elm && elm.value !== checkVal;
  }

  function isInputChanged(elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers) && modifiers.number || elm.type === 'number') {
      return toNumber(value) !== toNumber(newVal);
    }
    if (isDef(modifiers) && modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
    return value !== newVal;
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };

  /*  */

  var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res;
  });

  // merge static and dynamic style data on the same vnode
  function normalizeStyleData(data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle ? extend(data.staticStyle, style) : style;
  }

  // normalize possible array / string values into Object
  function normalizeStyleBinding(bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle);
    }
    if (typeof bindingStyle === 'string') {
      return parseStyleText(bindingStyle);
    }
    return bindingStyle;
  }

  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */
  function getStyle(vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
          extend(res, styleData);
        }
      }
    }

    if (styleData = normalizeStyleData(vnode.data)) {
      extend(res, styleData);
    }

    var parentNode = vnode;
    while (parentNode = parentNode.parent) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend(res, styleData);
      }
    }
    return res;
  }

  /*  */

  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function setProp(el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(name, val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var prefixes = ['Webkit', 'Moz', 'ms'];

  var testEl;
  var normalize = cached(function (prop) {
    testEl = testEl || document.createElement('div');
    prop = camelize(prop);
    if (prop !== 'filter' && prop in testEl.style) {
      return prop;
    }
    var upper = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < prefixes.length; i++) {
      var prefixed = prefixes[i] + upper;
      if (prefixed in testEl.style) {
        return prefixed;
      }
    }
  });

  function updateStyle(oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
      return;
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;

    var style = normalizeStyleBinding(vnode.data.style) || {};

    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likley wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;

    var newStyle = getStyle(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };

  /*  */

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function addClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) {
          return el.classList.add(c);
        });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function removeClass(el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return;
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(/\s+/).forEach(function (c) {
          return el.classList.remove(c);
        });
      } else {
        el.classList.remove(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      el.setAttribute('class', cur.trim());
    }
  }

  /*  */

  function resolveTransition(def$$1) {
    if (!def$$1) {
      return;
    }
    /* istanbul ignore else */
    if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {
      var res = {};
      if (def$$1.css !== false) {
        extend(res, autoCssTransition(def$$1.name || 'v'));
      }
      extend(res, def$$1);
      return res;
    } else if (typeof def$$1 === 'string') {
      return autoCssTransition(def$$1);
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: name + "-enter",
      enterToClass: name + "-enter-to",
      enterActiveClass: name + "-enter-active",
      leaveClass: name + "-leave",
      leaveToClass: name + "-leave-to",
      leaveActiveClass: name + "-leave-active"
    };
  });

  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation';

  // Transition property/event sniffing
  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';
  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  }

  // binding to window is necessary to make hot reload work in IE in strict mode
  var raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;

  function nextFrame(fn) {
    raf(function () {
      raf(fn);
    });
  }

  function addTransitionClass(el, cls) {
    (el._transitionClasses || (el._transitionClasses = [])).push(cls);
    addClass(el, cls);
  }

  function removeTransitionClass(el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }

  function whenTransitionEnds(el, expectedType, cb) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;
    if (!type) {
      return cb();
    }
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function end() {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function onEnd(e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo(el, expectedType) {
    var styles = window.getComputedStyle(el);
    var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
    var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = styles[animationProp + 'Delay'].split(', ');
    var animationDurations = styles[animationProp + 'Duration'].split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);

    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
      propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
    }
    var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    };
  }

  function getTimeout(delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i]);
    }));
  }

  function toMs(s) {
    return Number(s.slice(0, -1)) * 1000;
  }

  /*  */

  function enter(vnode, toggleDisplay) {
    var el = vnode.elm;

    // call leave callback now
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return;
    }

    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration;

    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      transitionNode = transitionNode.parent;
      context = transitionNode.context;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return;
    }

    var startClass = isAppear && appearClass ? appearClass : enterClass;
    var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
    var toClass = isAppear && appearToClass ? appearToClass : enterToClass;

    var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
    var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
    var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
    var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;

    var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

    if ("development" !== 'production' && explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);

    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }

    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        addTransitionClass(el, toClass);
        removeTransitionClass(el, startClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave(vnode, rm) {
    var el = vnode.elm;

    // call enter callback now
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return rm();
    }

    /* istanbul ignore if */
    if (isDef(el._leaveCb) || el.nodeType !== 1) {
      return;
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);

    var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

    if ("development" !== 'production' && isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave() {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return;
      }
      // record leaving element
      if (!vnode.data.show) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          addTransitionClass(el, leaveToClass);
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled && !userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        });
      }
      leave && leave(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }

  // only used in dev mode
  function checkDuration(val, name, vnode) {
    if (typeof val !== 'number') {
      warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
    } else if (isNaN(val)) {
      warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
    }
  }

  function isValidDuration(val) {
    return typeof val === 'number' && !isNaN(val);
  }

  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */
  function getHookArgumentsLength(fn) {
    if (isUndef(fn)) {
      return false;
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
    } else {
      return (fn._length || fn.length) > 1;
    }
  }

  function _enter(_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove$$1(vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};

  var platformModules = [attrs, klass, events, domProps, style, transition];

  /*  */

  // the directive module should be applied last, after all
  // built-in modules have been applied.
  var modules = platformModules.concat(baseModules);

  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  /* istanbul ignore if */
  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var model$1 = {
    inserted: function inserted(el, binding, vnode) {
      if (vnode.tag === 'select') {
        var cb = function cb() {
          setSelected(el, binding, vnode.context);
        };
        cb();
        /* istanbul ignore if */
        if (isIE || isEdge) {
          setTimeout(cb, 0);
        }
      } else if (vnode.tag === 'textarea' || el.type === 'text' || el.type === 'password') {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.
          el.addEventListener('change', onCompositionEnd);
          if (!isAndroid) {
            el.addEventListener('compositionstart', onCompositionStart);
            el.addEventListener('compositionend', onCompositionEnd);
          }
          /* istanbul ignore if */
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },
    componentUpdated: function componentUpdated(el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, el.options);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, el.options);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  };

  function setSelected(el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      "development" !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
      return;
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return;
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function hasNoMatchingOption(value, options) {
    for (var i = 0, l = options.length; i < l; i++) {
      if (looseEqual(getValue(options[i]), value)) {
        return false;
      }
    }
    return true;
  }

  function getValue(option) {
    return '_value' in option ? option._value : option.value;
  }

  function onCompositionStart(e) {
    e.target.composing = true;
  }

  function onCompositionEnd(e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) {
      return;
    }
    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger(el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /*  */

  // recursively search for possible transition defined inside the component root
  function locateNode(vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
  }

  var show = {
    bind: function bind(el, ref, vnode) {
      var value = ref.value;

      vnode = locateNode(vnode);
      var transition = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;
      if (value && transition && !isIE9) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },

    update: function update(el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;

      /* istanbul ignore if */
      if (value === oldValue) {
        return;
      }
      vnode = locateNode(vnode);
      var transition = vnode.data && vnode.data.transition;
      if (transition && !isIE9) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },

    unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };

  var platformDirectives = {
    model: model$1,
    show: show
  };

  /*  */

  // Provides transition support for a single element/component.
  // supports transition mode (out-in / in-out)

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };

  // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered
  function getRealChild(vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children));
    } else {
      return vnode;
    }
  }

  function extractTransitionData(comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key$1 in listeners) {
      data[camelize(key$1)] = listeners[key$1];
    }
    return data;
  }

  function placeholder(h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      });
    }
  }

  function hasParentTransition(vnode) {
    while (vnode = vnode.parent) {
      if (vnode.data.transition) {
        return true;
      }
    }
  }

  function isSameChild(child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag;
  }

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,

    render: function render(h) {
      var this$1 = this;

      var children = this.$slots.default;
      if (!children) {
        return;
      }

      // filter out text nodes (possible whitespaces)
      children = children.filter(function (c) {
        return c.tag;
      });
      /* istanbul ignore if */
      if (!children.length) {
        return;
      }

      // warn multiple elements
      if ("development" !== 'production' && children.length > 1) {
        warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
      }

      var mode = this.mode;

      // warn invalid mode
      if ("development" !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
        warn('invalid <transition> mode: ' + mode, this.$parent);
      }

      var rawChild = children[0];

      // if this is a component root node and the component's
      // parent container node also has transition, skip.
      if (hasParentTransition(this.$vnode)) {
        return rawChild;
      }

      // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive
      var child = getRealChild(rawChild);
      /* istanbul ignore if */
      if (!child) {
        return rawChild;
      }

      if (this._leaving) {
        return placeholder(h, rawChild);
      }

      // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.
      var id = "__transition-" + this._uid + "-";
      child.key = child.key == null ? id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;

      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);

      // mark v-show
      // so that the transition module can hand over the control to the directive
      if (child.data.directives && child.data.directives.some(function (d) {
        return d.name === 'show';
      })) {
        child.data.show = true;
      }

      if (oldChild && oldChild.data && !isSameChild(child, oldChild)) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild && (oldChild.data.transition = extend({}, data));
        // handle transition mode
        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild);
        } else if (mode === 'in-out') {
          var delayedLeave;
          var performLeave = function performLeave() {
            delayedLeave();
          };
          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) {
            delayedLeave = leave;
          });
        }
      }

      return rawChild;
    }
  };

  /*  */

  // Provides transition support for list items.
  // supports move transitions using the FLIP technique.

  // Because the vdom's children update algorithm is "unstable" - i.e.
  // it doesn't guarantee the relative positioning of removed elements,
  // we force transition-group to update its children into two passes:
  // in the first pass, we remove all nodes that need to be removed,
  // triggering their leaving transition; in the second pass, we insert/move
  // into the final desired state. This way in the second pass removed
  // nodes will remain where they should be.

  var props = extend({
    tag: String,
    moveClass: String
  }, transitionProps);

  delete props.mode;

  var TransitionGroup = {
    props: props,

    render: function render(h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];
        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;
          } else {
            var opts = c.componentOptions;
            var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
            warn("<transition-group> children must be keyed: <" + name + ">");
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();
          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children);
    },

    beforeUpdate: function beforeUpdate() {
      // force removing pass
      this.__patch__(this._vnode, this.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );
      this._vnode = this.kept;
    },

    updated: function updated() {
      var children = this.prevChildren;
      var moveClass = this.moveClass || (this.name || 'v') + '-move';
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return;
      }

      // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);

      // force reflow to put everything in position
      var body = document.body;
      var f = body.offsetHeight; // eslint-disable-line

      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },

    methods: {
      hasMove: function hasMove(el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false;
        }
        if (this._hasMove != null) {
          return this._hasMove;
        }
        // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) {
            removeClass(clone, cls);
          });
        }
        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return this._hasMove = info.hasTransform;
      }
    }
  };

  function callPendingCbs(c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition(c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation(c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };

  /*  */

  // install platform specific utils
  Vue$3.config.mustUseProp = mustUseProp;
  Vue$3.config.isReservedTag = isReservedTag;
  Vue$3.config.isReservedAttr = isReservedAttr;
  Vue$3.config.getTagNamespace = getTagNamespace;
  Vue$3.config.isUnknownElement = isUnknownElement;

  // install platform runtime directives & components
  extend(Vue$3.options.directives, platformDirectives);
  extend(Vue$3.options.components, platformComponents);

  // install platform patch function
  Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

  // public mount method
  Vue$3.prototype.$mount = function (el, hydrating) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating);
  };

  // devtools global hook
  /* istanbul ignore next */
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue$3);
      } else if ("development" !== 'production' && isChrome) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }
    if ("development" !== 'production' && config.productionTip !== false && inBrowser && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);

  /*  */

  // check whether current browser encodes a char inside attribute values
  function shouldDecode(content, encoded) {
    var div = document.createElement('div');
    div.innerHTML = "<div a=\"" + content + "\">";
    return div.innerHTML.indexOf(encoded) > 0;
  }

  // #3663
  // IE encodes newlines inside attribute values while other browsers don't
  var shouldDecodeNewlines = inBrowser ? shouldDecode('\n', '&#10;') : false;

  /*  */

  var isUnaryTag = makeMap('area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' + 'link,meta,param,source,track,wbr');

  // Elements that you can, intentionally, leave open
  // (and which close themselves)
  var canBeLeftOpenTag = makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source');

  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
  var isNonPhrasingTag = makeMap('address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' + 'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' + 'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' + 'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' + 'title,tr,track');

  /*  */

  var decoder;

  function decode(html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent;
  }

  /**
   * Not type-checking this file because it's mostly vendor code.
   */

  /*!
   * HTML Parser By John Resig (ejohn.org)
   * Modified by Juriy "kangax" Zaytsev
   * Original code by Erik Arvidsson, Mozilla Public License
   * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
   */

  // Regular Expressions for parsing tags and attributes
  var singleAttrIdentifier = /([^\s"'<>/=]+)/;
  var singleAttrAssign = /(?:=)/;
  var singleAttrValues = [
  // attr value double quotes
  /"([^"]*)"+/.source,
  // attr value, single quotes
  /'([^']*)'+/.source,
  // attr value, no quotes
  /([^\s"'=<>`]+)/.source];
  var attribute = new RegExp('^\\s*' + singleAttrIdentifier.source + '(?:\\s*(' + singleAttrAssign.source + ')' + '\\s*(?:' + singleAttrValues.join('|') + '))?');

  // could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName
  // but for Vue templates we can enforce a simple charset
  var ncname = '[a-zA-Z_][\\w\\-\\.]*';
  var qnameCapture = '((?:' + ncname + '\\:)?' + ncname + ')';
  var startTagOpen = new RegExp('^<' + qnameCapture);
  var startTagClose = /^\s*(\/?)>/;
  var endTag = new RegExp('^<\\/' + qnameCapture + '[^>]*>');
  var doctype = /^<!DOCTYPE [^>]+>/i;
  var comment = /^<!--/;
  var conditionalComment = /^<!\[/;

  var IS_REGEX_CAPTURING_BROKEN = false;
  'x'.replace(/x(.)?/g, function (m, g) {
    IS_REGEX_CAPTURING_BROKEN = g === '';
  });

  // Special Elements (can contain anything)
  var isPlainTextElement = makeMap('script,style,textarea', true);
  var reCache = {};

  var decodingMap = {
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&amp;': '&',
    '&#10;': '\n'
  };
  var encodedAttr = /&(?:lt|gt|quot|amp);/g;
  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;

  function decodeAttr(value, shouldDecodeNewlines) {
    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
    return value.replace(re, function (match) {
      return decodingMap[match];
    });
  }

  function parseHTML(html, options) {
    var stack = [];
    var expectHTML = options.expectHTML;
    var isUnaryTag$$1 = options.isUnaryTag || no;
    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
    var index = 0;
    var last, lastTag;
    while (html) {
      last = html;
      // Make sure we're not in a plaintext content element like script/style
      if (!lastTag || !isPlainTextElement(lastTag)) {
        var textEnd = html.indexOf('<');
        if (textEnd === 0) {
          // Comment:
          if (comment.test(html)) {
            var commentEnd = html.indexOf('-->');

            if (commentEnd >= 0) {
              advance(commentEnd + 3);
              continue;
            }
          }

          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
          if (conditionalComment.test(html)) {
            var conditionalEnd = html.indexOf(']>');

            if (conditionalEnd >= 0) {
              advance(conditionalEnd + 2);
              continue;
            }
          }

          // Doctype:
          var doctypeMatch = html.match(doctype);
          if (doctypeMatch) {
            advance(doctypeMatch[0].length);
            continue;
          }

          // End tag:
          var endTagMatch = html.match(endTag);
          if (endTagMatch) {
            var curIndex = index;
            advance(endTagMatch[0].length);
            parseEndTag(endTagMatch[1], curIndex, index);
            continue;
          }

          // Start tag:
          var startTagMatch = parseStartTag();
          if (startTagMatch) {
            handleStartTag(startTagMatch);
            continue;
          }
        }

        var text = void 0,
            rest$1 = void 0,
            next = void 0;
        if (textEnd >= 0) {
          rest$1 = html.slice(textEnd);
          while (!endTag.test(rest$1) && !startTagOpen.test(rest$1) && !comment.test(rest$1) && !conditionalComment.test(rest$1)) {
            // < in plain text, be forgiving and treat it as text
            next = rest$1.indexOf('<', 1);
            if (next < 0) {
              break;
            }
            textEnd += next;
            rest$1 = html.slice(textEnd);
          }
          text = html.substring(0, textEnd);
          advance(textEnd);
        }

        if (textEnd < 0) {
          text = html;
          html = '';
        }

        if (options.chars && text) {
          options.chars(text);
        }
      } else {
        var stackedTag = lastTag.toLowerCase();
        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
        var endTagLength = 0;
        var rest = html.replace(reStackedTag, function (all, text, endTag) {
          endTagLength = endTag.length;
          if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
            text = text.replace(/<!--([\s\S]*?)-->/g, '$1').replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
          }
          if (options.chars) {
            options.chars(text);
          }
          return '';
        });
        index += html.length - rest.length;
        html = rest;
        parseEndTag(stackedTag, index - endTagLength, index);
      }

      if (html === last) {
        options.chars && options.chars(html);
        if ("development" !== 'production' && !stack.length && options.warn) {
          options.warn("Mal-formatted tag at end of template: \"" + html + "\"");
        }
        break;
      }
    }

    // Clean up any remaining tags
    parseEndTag();

    function advance(n) {
      index += n;
      html = html.substring(n);
    }

    function parseStartTag() {
      var start = html.match(startTagOpen);
      if (start) {
        var match = {
          tagName: start[1],
          attrs: [],
          start: index
        };
        advance(start[0].length);
        var end, attr;
        while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {
          advance(attr[0].length);
          match.attrs.push(attr);
        }
        if (end) {
          match.unarySlash = end[1];
          advance(end[0].length);
          match.end = index;
          return match;
        }
      }
    }

    function handleStartTag(match) {
      var tagName = match.tagName;
      var unarySlash = match.unarySlash;

      if (expectHTML) {
        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
          parseEndTag(lastTag);
        }
        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
          parseEndTag(tagName);
        }
      }

      var unary = isUnaryTag$$1(tagName) || tagName === 'html' && lastTag === 'head' || !!unarySlash;

      var l = match.attrs.length;
      var attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        var args = match.attrs[i];
        // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778
        if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('""') === -1) {
          if (args[3] === '') {
            delete args[3];
          }
          if (args[4] === '') {
            delete args[4];
          }
          if (args[5] === '') {
            delete args[5];
          }
        }
        var value = args[3] || args[4] || args[5] || '';
        attrs[i] = {
          name: args[1],
          value: decodeAttr(value, options.shouldDecodeNewlines)
        };
      }

      if (!unary) {
        stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });
        lastTag = tagName;
      }

      if (options.start) {
        options.start(tagName, attrs, unary, match.start, match.end);
      }
    }

    function parseEndTag(tagName, start, end) {
      var pos, lowerCasedTagName;
      if (start == null) {
        start = index;
      }
      if (end == null) {
        end = index;
      }

      if (tagName) {
        lowerCasedTagName = tagName.toLowerCase();
      }

      // Find the closest opened tag of the same type
      if (tagName) {
        for (pos = stack.length - 1; pos >= 0; pos--) {
          if (stack[pos].lowerCasedTag === lowerCasedTagName) {
            break;
          }
        }
      } else {
        // If no tag name is provided, clean shop
        pos = 0;
      }

      if (pos >= 0) {
        // Close all the open elements, up the stack
        for (var i = stack.length - 1; i >= pos; i--) {
          if ("development" !== 'production' && (i > pos || !tagName) && options.warn) {
            options.warn("tag <" + stack[i].tag + "> has no matching end tag.");
          }
          if (options.end) {
            options.end(stack[i].tag, start, end);
          }
        }

        // Remove the open elements from the stack
        stack.length = pos;
        lastTag = pos && stack[pos - 1].tag;
      } else if (lowerCasedTagName === 'br') {
        if (options.start) {
          options.start(tagName, [], true, start, end);
        }
      } else if (lowerCasedTagName === 'p') {
        if (options.start) {
          options.start(tagName, [], false, start, end);
        }
        if (options.end) {
          options.end(tagName, start, end);
        }
      }
    }
  }

  /*  */

  var defaultTagRE = /\{\{((?:.|\n)+?)\}\}/g;
  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

  var buildRegex = cached(function (delimiters) {
    var open = delimiters[0].replace(regexEscapeRE, '\\$&');
    var close = delimiters[1].replace(regexEscapeRE, '\\$&');
    return new RegExp(open + '((?:.|\\n)+?)' + close, 'g');
  });

  function parseText(text, delimiters) {
    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
    if (!tagRE.test(text)) {
      return;
    }
    var tokens = [];
    var lastIndex = tagRE.lastIndex = 0;
    var match, index;
    while (match = tagRE.exec(text)) {
      index = match.index;
      // push text token
      if (index > lastIndex) {
        tokens.push(JSON.stringify(text.slice(lastIndex, index)));
      }
      // tag token
      var exp = parseFilters(match[1].trim());
      tokens.push("_s(" + exp + ")");
      lastIndex = index + match[0].length;
    }
    if (lastIndex < text.length) {
      tokens.push(JSON.stringify(text.slice(lastIndex)));
    }
    return tokens.join('+');
  }

  /*  */

  var onRE = /^@|^v-on:/;
  var dirRE = /^v-|^@|^:/;
  var forAliasRE = /(.*?)\s+(?:in|of)\s+(.*)/;
  var forIteratorRE = /\((\{[^}]*\}|[^,]*),([^,]*)(?:,([^,]*))?\)/;

  var argRE = /:(.*)$/;
  var bindRE = /^:|^v-bind:/;
  var modifierRE = /\.[^.]+/g;

  var decodeHTMLCached = cached(decode);

  // configurable state
  var warn$2;
  var delimiters;
  var transforms;
  var preTransforms;
  var postTransforms;
  var platformIsPreTag;
  var platformMustUseProp;
  var platformGetTagNamespace;

  /**
   * Convert HTML string to AST.
   */
  function parse(template, options) {
    warn$2 = options.warn || baseWarn;
    platformGetTagNamespace = options.getTagNamespace || no;
    platformMustUseProp = options.mustUseProp || no;
    platformIsPreTag = options.isPreTag || no;
    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
    transforms = pluckModuleFunction(options.modules, 'transformNode');
    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');
    delimiters = options.delimiters;

    var stack = [];
    var preserveWhitespace = options.preserveWhitespace !== false;
    var root;
    var currentParent;
    var inVPre = false;
    var inPre = false;
    var warned = false;

    function warnOnce(msg) {
      if (!warned) {
        warned = true;
        warn$2(msg);
      }
    }

    function endPre(element) {
      // check pre state
      if (element.pre) {
        inVPre = false;
      }
      if (platformIsPreTag(element.tag)) {
        inPre = false;
      }
    }

    parseHTML(template, {
      warn: warn$2,
      expectHTML: options.expectHTML,
      isUnaryTag: options.isUnaryTag,
      canBeLeftOpenTag: options.canBeLeftOpenTag,
      shouldDecodeNewlines: options.shouldDecodeNewlines,
      start: function start(tag, attrs, unary) {
        // check namespace.
        // inherit parent ns if there is one
        var ns = currentParent && currentParent.ns || platformGetTagNamespace(tag);

        // handle IE svg bug
        /* istanbul ignore if */
        if (isIE && ns === 'svg') {
          attrs = guardIESVGBug(attrs);
        }

        var element = {
          type: 1,
          tag: tag,
          attrsList: attrs,
          attrsMap: makeAttrsMap(attrs),
          parent: currentParent,
          children: []
        };
        if (ns) {
          element.ns = ns;
        }

        if (isForbiddenTag(element) && !isServerRendering()) {
          element.forbidden = true;
          "development" !== 'production' && warn$2('Templates should only be responsible for mapping the state to the ' + 'UI. Avoid placing tags with side-effects in your templates, such as ' + "<" + tag + ">" + ', as they will not be parsed.');
        }

        // apply pre-transforms
        for (var i = 0; i < preTransforms.length; i++) {
          preTransforms[i](element, options);
        }

        if (!inVPre) {
          processPre(element);
          if (element.pre) {
            inVPre = true;
          }
        }
        if (platformIsPreTag(element.tag)) {
          inPre = true;
        }
        if (inVPre) {
          processRawAttrs(element);
        } else {
          processFor(element);
          processIf(element);
          processOnce(element);
          processKey(element);

          // determine whether this is a plain element after
          // removing structural attributes
          element.plain = !element.key && !attrs.length;

          processRef(element);
          processSlot(element);
          processComponent(element);
          for (var i$1 = 0; i$1 < transforms.length; i$1++) {
            transforms[i$1](element, options);
          }
          processAttrs(element);
        }

        function checkRootConstraints(el) {
          {
            if (el.tag === 'slot' || el.tag === 'template') {
              warnOnce("Cannot use <" + el.tag + "> as component root element because it may " + 'contain multiple nodes.');
            }
            if (el.attrsMap.hasOwnProperty('v-for')) {
              warnOnce('Cannot use v-for on stateful component root element because ' + 'it renders multiple elements.');
            }
          }
        }

        // tree management
        if (!root) {
          root = element;
          checkRootConstraints(root);
        } else if (!stack.length) {
          // allow root elements with v-if, v-else-if and v-else
          if (root.if && (element.elseif || element.else)) {
            checkRootConstraints(element);
            addIfCondition(root, {
              exp: element.elseif,
              block: element
            });
          } else {
            warnOnce("Component template should contain exactly one root element. " + "If you are using v-if on multiple elements, " + "use v-else-if to chain them instead.");
          }
        }
        if (currentParent && !element.forbidden) {
          if (element.elseif || element.else) {
            processIfConditions(element, currentParent);
          } else if (element.slotScope) {
            // scoped slot
            currentParent.plain = false;
            var name = element.slotTarget || '"default"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
          } else {
            currentParent.children.push(element);
            element.parent = currentParent;
          }
        }
        if (!unary) {
          currentParent = element;
          stack.push(element);
        } else {
          endPre(element);
        }
        // apply post-transforms
        for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {
          postTransforms[i$2](element, options);
        }
      },

      end: function end() {
        // remove trailing whitespace
        var element = stack[stack.length - 1];
        var lastNode = element.children[element.children.length - 1];
        if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {
          element.children.pop();
        }
        // pop stack
        stack.length -= 1;
        currentParent = stack[stack.length - 1];
        endPre(element);
      },

      chars: function chars(text) {
        if (!currentParent) {
          {
            if (text === template) {
              warnOnce('Component template requires a root element, rather than just text.');
            } else if (text = text.trim()) {
              warnOnce("text \"" + text + "\" outside root element will be ignored.");
            }
          }
          return;
        }
        // IE textarea placeholder bug
        /* istanbul ignore if */
        if (isIE && currentParent.tag === 'textarea' && currentParent.attrsMap.placeholder === text) {
          return;
        }
        var children = currentParent.children;
        text = inPre || text.trim() ? isTextTag(currentParent) ? text : decodeHTMLCached(text)
        // only preserve whitespace if its not right after a starting tag
        : preserveWhitespace && children.length ? ' ' : '';
        if (text) {
          var expression;
          if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {
            children.push({
              type: 2,
              expression: expression,
              text: text
            });
          } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
            children.push({
              type: 3,
              text: text
            });
          }
        }
      }
    });
    return root;
  }

  function processPre(el) {
    if (getAndRemoveAttr(el, 'v-pre') != null) {
      el.pre = true;
    }
  }

  function processRawAttrs(el) {
    var l = el.attrsList.length;
    if (l) {
      var attrs = el.attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        attrs[i] = {
          name: el.attrsList[i].name,
          value: JSON.stringify(el.attrsList[i].value)
        };
      }
    } else if (!el.pre) {
      // non root node in pre blocks with no attributes
      el.plain = true;
    }
  }

  function processKey(el) {
    var exp = getBindingAttr(el, 'key');
    if (exp) {
      if ("development" !== 'production' && el.tag === 'template') {
        warn$2("<template> cannot be keyed. Place the key on real elements instead.");
      }
      el.key = exp;
    }
  }

  function processRef(el) {
    var ref = getBindingAttr(el, 'ref');
    if (ref) {
      el.ref = ref;
      el.refInFor = checkInFor(el);
    }
  }

  function processFor(el) {
    var exp;
    if (exp = getAndRemoveAttr(el, 'v-for')) {
      var inMatch = exp.match(forAliasRE);
      if (!inMatch) {
        "development" !== 'production' && warn$2("Invalid v-for expression: " + exp);
        return;
      }
      el.for = inMatch[2].trim();
      var alias = inMatch[1].trim();
      var iteratorMatch = alias.match(forIteratorRE);
      if (iteratorMatch) {
        el.alias = iteratorMatch[1].trim();
        el.iterator1 = iteratorMatch[2].trim();
        if (iteratorMatch[3]) {
          el.iterator2 = iteratorMatch[3].trim();
        }
      } else {
        el.alias = alias;
      }
    }
  }

  function processIf(el) {
    var exp = getAndRemoveAttr(el, 'v-if');
    if (exp) {
      el.if = exp;
      addIfCondition(el, {
        exp: exp,
        block: el
      });
    } else {
      if (getAndRemoveAttr(el, 'v-else') != null) {
        el.else = true;
      }
      var elseif = getAndRemoveAttr(el, 'v-else-if');
      if (elseif) {
        el.elseif = elseif;
      }
    }
  }

  function processIfConditions(el, parent) {
    var prev = findPrevElement(parent.children);
    if (prev && prev.if) {
      addIfCondition(prev, {
        exp: el.elseif,
        block: el
      });
    } else {
      warn$2("v-" + (el.elseif ? 'else-if="' + el.elseif + '"' : 'else') + " " + "used on element <" + el.tag + "> without corresponding v-if.");
    }
  }

  function findPrevElement(children) {
    var i = children.length;
    while (i--) {
      if (children[i].type === 1) {
        return children[i];
      } else {
        if ("development" !== 'production' && children[i].text !== ' ') {
          warn$2("text \"" + children[i].text.trim() + "\" between v-if and v-else(-if) " + "will be ignored.");
        }
        children.pop();
      }
    }
  }

  function addIfCondition(el, condition) {
    if (!el.ifConditions) {
      el.ifConditions = [];
    }
    el.ifConditions.push(condition);
  }

  function processOnce(el) {
    var once$$1 = getAndRemoveAttr(el, 'v-once');
    if (once$$1 != null) {
      el.once = true;
    }
  }

  function processSlot(el) {
    if (el.tag === 'slot') {
      el.slotName = getBindingAttr(el, 'name');
      if ("development" !== 'production' && el.key) {
        warn$2("`key` does not work on <slot> because slots are abstract outlets " + "and can possibly expand into multiple elements. " + "Use the key on a wrapping element instead.");
      }
    } else {
      var slotTarget = getBindingAttr(el, 'slot');
      if (slotTarget) {
        el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
      }
      if (el.tag === 'template') {
        el.slotScope = getAndRemoveAttr(el, 'scope');
      }
    }
  }

  function processComponent(el) {
    var binding;
    if (binding = getBindingAttr(el, 'is')) {
      el.component = binding;
    }
    if (getAndRemoveAttr(el, 'inline-template') != null) {
      el.inlineTemplate = true;
    }
  }

  function processAttrs(el) {
    var list = el.attrsList;
    var i, l, name, rawName, value, modifiers, isProp;
    for (i = 0, l = list.length; i < l; i++) {
      name = rawName = list[i].name;
      value = list[i].value;
      if (dirRE.test(name)) {
        // mark element as dynamic
        el.hasBindings = true;
        // modifiers
        modifiers = parseModifiers(name);
        if (modifiers) {
          name = name.replace(modifierRE, '');
        }
        if (bindRE.test(name)) {
          // v-bind
          name = name.replace(bindRE, '');
          value = parseFilters(value);
          isProp = false;
          if (modifiers) {
            if (modifiers.prop) {
              isProp = true;
              name = camelize(name);
              if (name === 'innerHtml') {
                name = 'innerHTML';
              }
            }
            if (modifiers.camel) {
              name = camelize(name);
            }
            if (modifiers.sync) {
              addHandler(el, "update:" + camelize(name), genAssignmentCode(value, "$event"));
            }
          }
          if (isProp || platformMustUseProp(el.tag, el.attrsMap.type, name)) {
            addProp(el, name, value);
          } else {
            addAttr(el, name, value);
          }
        } else if (onRE.test(name)) {
          // v-on
          name = name.replace(onRE, '');
          addHandler(el, name, value, modifiers, false, warn$2);
        } else {
          // normal directives
          name = name.replace(dirRE, '');
          // parse arg
          var argMatch = name.match(argRE);
          var arg = argMatch && argMatch[1];
          if (arg) {
            name = name.slice(0, -(arg.length + 1));
          }
          addDirective(el, name, rawName, value, arg, modifiers);
          if ("development" !== 'production' && name === 'model') {
            checkForAliasModel(el, value);
          }
        }
      } else {
        // literal attribute
        {
          var expression = parseText(value, delimiters);
          if (expression) {
            warn$2(name + "=\"" + value + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div id="{{ val }}">, use <div :id="val">.');
          }
        }
        addAttr(el, name, JSON.stringify(value));
      }
    }
  }

  function checkInFor(el) {
    var parent = el;
    while (parent) {
      if (parent.for !== undefined) {
        return true;
      }
      parent = parent.parent;
    }
    return false;
  }

  function parseModifiers(name) {
    var match = name.match(modifierRE);
    if (match) {
      var ret = {};
      match.forEach(function (m) {
        ret[m.slice(1)] = true;
      });
      return ret;
    }
  }

  function makeAttrsMap(attrs) {
    var map = {};
    for (var i = 0, l = attrs.length; i < l; i++) {
      if ("development" !== 'production' && map[attrs[i].name] && !isIE && !isEdge) {
        warn$2('duplicate attribute: ' + attrs[i].name);
      }
      map[attrs[i].name] = attrs[i].value;
    }
    return map;
  }

  // for script (e.g. type="x/template") or style, do not decode content
  function isTextTag(el) {
    return el.tag === 'script' || el.tag === 'style';
  }

  function isForbiddenTag(el) {
    return el.tag === 'style' || el.tag === 'script' && (!el.attrsMap.type || el.attrsMap.type === 'text/javascript');
  }

  var ieNSBug = /^xmlns:NS\d+/;
  var ieNSPrefix = /^NS\d+:/;

  /* istanbul ignore next */
  function guardIESVGBug(attrs) {
    var res = [];
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      if (!ieNSBug.test(attr.name)) {
        attr.name = attr.name.replace(ieNSPrefix, '');
        res.push(attr);
      }
    }
    return res;
  }

  function checkForAliasModel(el, value) {
    var _el = el;
    while (_el) {
      if (_el.for && _el.alias === value) {
        warn$2("<" + el.tag + " v-model=\"" + value + "\">: " + "You are binding v-model directly to a v-for iteration alias. " + "This will not be able to modify the v-for source array because " + "writing to the alias is like modifying a function local variable. " + "Consider using an array of objects and use v-model on an object property instead.");
      }
      _el = _el.parent;
    }
  }

  /*  */

  var isStaticKey;
  var isPlatformReservedTag;

  var genStaticKeysCached = cached(genStaticKeys$1);

  /**
   * Goal of the optimizer: walk the generated template AST tree
   * and detect sub-trees that are purely static, i.e. parts of
   * the DOM that never needs to change.
   *
   * Once we detect these sub-trees, we can:
   *
   * 1. Hoist them into constants, so that we no longer need to
   *    create fresh nodes for them on each re-render;
   * 2. Completely skip them in the patching process.
   */
  function optimize(root, options) {
    if (!root) {
      return;
    }
    isStaticKey = genStaticKeysCached(options.staticKeys || '');
    isPlatformReservedTag = options.isReservedTag || no;
    // first pass: mark all non-static nodes.
    markStatic$1(root);
    // second pass: mark static roots.
    markStaticRoots(root, false);
  }

  function genStaticKeys$1(keys) {
    return makeMap('type,tag,attrsList,attrsMap,plain,parent,children,attrs' + (keys ? ',' + keys : ''));
  }

  function markStatic$1(node) {
    node.static = isStatic(node);
    if (node.type === 1) {
      // do not make component slot content static. this avoids
      // 1. components not able to mutate slot nodes
      // 2. static slot content fails for hot-reloading
      if (!isPlatformReservedTag(node.tag) && node.tag !== 'slot' && node.attrsMap['inline-template'] == null) {
        return;
      }
      for (var i = 0, l = node.children.length; i < l; i++) {
        var child = node.children[i];
        markStatic$1(child);
        if (!child.static) {
          node.static = false;
        }
      }
    }
  }

  function markStaticRoots(node, isInFor) {
    if (node.type === 1) {
      if (node.static || node.once) {
        node.staticInFor = isInFor;
      }
      // For a node to qualify as a static root, it should have children that
      // are not just static text. Otherwise the cost of hoisting out will
      // outweigh the benefits and it's better off to just always render it fresh.
      if (node.static && node.children.length && !(node.children.length === 1 && node.children[0].type === 3)) {
        node.staticRoot = true;
        return;
      } else {
        node.staticRoot = false;
      }
      if (node.children) {
        for (var i = 0, l = node.children.length; i < l; i++) {
          markStaticRoots(node.children[i], isInFor || !!node.for);
        }
      }
      if (node.ifConditions) {
        walkThroughConditionsBlocks(node.ifConditions, isInFor);
      }
    }
  }

  function walkThroughConditionsBlocks(conditionBlocks, isInFor) {
    for (var i = 1, len = conditionBlocks.length; i < len; i++) {
      markStaticRoots(conditionBlocks[i].block, isInFor);
    }
  }

  function isStatic(node) {
    if (node.type === 2) {
      // expression
      return false;
    }
    if (node.type === 3) {
      // text
      return true;
    }
    return !!(node.pre || !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) && Object.keys(node).every(isStaticKey));
  }

  function isDirectChildOfTemplateFor(node) {
    while (node.parent) {
      node = node.parent;
      if (node.tag !== 'template') {
        return false;
      }
      if (node.for) {
        return true;
      }
    }
    return false;
  }

  /*  */

  var fnExpRE = /^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/;
  var simplePathRE = /^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/;

  // keyCode aliases
  var keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    up: 38,
    left: 37,
    right: 39,
    down: 40,
    'delete': [8, 46]
  };

  // #4868: modifiers that prevent the execution of the listener
  // need to explicitly return null so that we can determine whether to remove
  // the listener for .once
  var genGuard = function genGuard(condition) {
    return "if(" + condition + ")return null;";
  };

  var modifierCode = {
    stop: '$event.stopPropagation();',
    prevent: '$event.preventDefault();',
    self: genGuard("$event.target !== $event.currentTarget"),
    ctrl: genGuard("!$event.ctrlKey"),
    shift: genGuard("!$event.shiftKey"),
    alt: genGuard("!$event.altKey"),
    meta: genGuard("!$event.metaKey"),
    left: genGuard("'button' in $event && $event.button !== 0"),
    middle: genGuard("'button' in $event && $event.button !== 1"),
    right: genGuard("'button' in $event && $event.button !== 2")
  };

  function genHandlers(events, isNative, warn) {
    var res = isNative ? 'nativeOn:{' : 'on:{';
    for (var name in events) {
      var handler = events[name];
      // #5330: warn click.right, since right clicks do not actually fire click events.
      if ("development" !== 'production' && name === 'click' && handler && handler.modifiers && handler.modifiers.right) {
        warn("Use \"contextmenu\" instead of \"click.right\" since right clicks " + "do not actually fire \"click\" events.");
      }
      res += "\"" + name + "\":" + genHandler(name, handler) + ",";
    }
    return res.slice(0, -1) + '}';
  }

  function genHandler(name, handler) {
    if (!handler) {
      return 'function(){}';
    }

    if (Array.isArray(handler)) {
      return "[" + handler.map(function (handler) {
        return genHandler(name, handler);
      }).join(',') + "]";
    }

    var isMethodPath = simplePathRE.test(handler.value);
    var isFunctionExpression = fnExpRE.test(handler.value);

    if (!handler.modifiers) {
      return isMethodPath || isFunctionExpression ? handler.value : "function($event){" + handler.value + "}"; // inline statement
    } else {
      var code = '';
      var genModifierCode = '';
      var keys = [];
      for (var key in handler.modifiers) {
        if (modifierCode[key]) {
          genModifierCode += modifierCode[key];
          // left/right
          if (keyCodes[key]) {
            keys.push(key);
          }
        } else {
          keys.push(key);
        }
      }
      if (keys.length) {
        code += genKeyFilter(keys);
      }
      // Make sure modifiers like prevent and stop get executed after key filtering
      if (genModifierCode) {
        code += genModifierCode;
      }
      var handlerCode = isMethodPath ? handler.value + '($event)' : isFunctionExpression ? "(" + handler.value + ")($event)" : handler.value;
      return "function($event){" + code + handlerCode + "}";
    }
  }

  function genKeyFilter(keys) {
    return "if(!('button' in $event)&&" + keys.map(genFilterCode).join('&&') + ")return null;";
  }

  function genFilterCode(key) {
    var keyVal = parseInt(key, 10);
    if (keyVal) {
      return "$event.keyCode!==" + keyVal;
    }
    var alias = keyCodes[key];
    return "_k($event.keyCode," + JSON.stringify(key) + (alias ? ',' + JSON.stringify(alias) : '') + ")";
  }

  /*  */

  function bind$1(el, dir) {
    el.wrapData = function (code) {
      return "_b(" + code + ",'" + el.tag + "'," + dir.value + (dir.modifiers && dir.modifiers.prop ? ',true' : '') + ")";
    };
  }

  /*  */

  var baseDirectives = {
    bind: bind$1,
    cloak: noop
  };

  /*  */

  // configurable state
  var warn$3;
  var transforms$1;
  var dataGenFns;
  var platformDirectives$1;
  var isPlatformReservedTag$1;
  var staticRenderFns;
  var onceCount;
  var currentOptions;

  function generate(ast, options) {
    // save previous staticRenderFns so generate calls can be nested
    var prevStaticRenderFns = staticRenderFns;
    var currentStaticRenderFns = staticRenderFns = [];
    var prevOnceCount = onceCount;
    onceCount = 0;
    currentOptions = options;
    warn$3 = options.warn || baseWarn;
    transforms$1 = pluckModuleFunction(options.modules, 'transformCode');
    dataGenFns = pluckModuleFunction(options.modules, 'genData');
    platformDirectives$1 = options.directives || {};
    isPlatformReservedTag$1 = options.isReservedTag || no;
    var code = ast ? genElement(ast) : '_c("div")';
    staticRenderFns = prevStaticRenderFns;
    onceCount = prevOnceCount;
    return {
      render: "with(this){return " + code + "}",
      staticRenderFns: currentStaticRenderFns
    };
  }

  function genElement(el) {
    if (el.staticRoot && !el.staticProcessed) {
      return genStatic(el);
    } else if (el.once && !el.onceProcessed) {
      return genOnce(el);
    } else if (el.for && !el.forProcessed) {
      return genFor(el);
    } else if (el.if && !el.ifProcessed) {
      return genIf(el);
    } else if (el.tag === 'template' && !el.slotTarget) {
      return genChildren(el) || 'void 0';
    } else if (el.tag === 'slot') {
      return genSlot(el);
    } else {
      // component or element
      var code;
      if (el.component) {
        code = genComponent(el.component, el);
      } else {
        var data = el.plain ? undefined : genData(el);

        var children = el.inlineTemplate ? null : genChildren(el, true);
        code = "_c('" + el.tag + "'" + (data ? "," + data : '') + (children ? "," + children : '') + ")";
      }
      // module transforms
      for (var i = 0; i < transforms$1.length; i++) {
        code = transforms$1[i](el, code);
      }
      return code;
    }
  }

  // hoist static sub-trees out
  function genStatic(el) {
    el.staticProcessed = true;
    staticRenderFns.push("with(this){return " + genElement(el) + "}");
    return "_m(" + (staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")";
  }

  // v-once
  function genOnce(el) {
    el.onceProcessed = true;
    if (el.if && !el.ifProcessed) {
      return genIf(el);
    } else if (el.staticInFor) {
      var key = '';
      var parent = el.parent;
      while (parent) {
        if (parent.for) {
          key = parent.key;
          break;
        }
        parent = parent.parent;
      }
      if (!key) {
        "development" !== 'production' && warn$3("v-once can only be used inside v-for that is keyed. ");
        return genElement(el);
      }
      return "_o(" + genElement(el) + "," + onceCount++ + (key ? "," + key : "") + ")";
    } else {
      return genStatic(el);
    }
  }

  function genIf(el) {
    el.ifProcessed = true; // avoid recursion
    return genIfConditions(el.ifConditions.slice());
  }

  function genIfConditions(conditions) {
    if (!conditions.length) {
      return '_e()';
    }

    var condition = conditions.shift();
    if (condition.exp) {
      return "(" + condition.exp + ")?" + genTernaryExp(condition.block) + ":" + genIfConditions(conditions);
    } else {
      return "" + genTernaryExp(condition.block);
    }

    // v-if with v-once should generate code like (a)?_m(0):_m(1)
    function genTernaryExp(el) {
      return el.once ? genOnce(el) : genElement(el);
    }
  }

  function genFor(el) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
    var iterator2 = el.iterator2 ? "," + el.iterator2 : '';

    if ("development" !== 'production' && maybeComponent(el) && el.tag !== 'slot' && el.tag !== 'template' && !el.key) {
      warn$3("<" + el.tag + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " + "v-for should have explicit keys. " + "See https://vuejs.org/guide/list.html#key for more info.", true /* tip */
      );
    }

    el.forProcessed = true; // avoid recursion
    return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genElement(el) + '})';
  }

  function genData(el) {
    var data = '{';

    // directives first.
    // directives may mutate the el's other properties before they are generated.
    var dirs = genDirectives(el);
    if (dirs) {
      data += dirs + ',';
    }

    // key
    if (el.key) {
      data += "key:" + el.key + ",";
    }
    // ref
    if (el.ref) {
      data += "ref:" + el.ref + ",";
    }
    if (el.refInFor) {
      data += "refInFor:true,";
    }
    // pre
    if (el.pre) {
      data += "pre:true,";
    }
    // record original tag name for components using "is" attribute
    if (el.component) {
      data += "tag:\"" + el.tag + "\",";
    }
    // module data generation functions
    for (var i = 0; i < dataGenFns.length; i++) {
      data += dataGenFns[i](el);
    }
    // attributes
    if (el.attrs) {
      data += "attrs:{" + genProps(el.attrs) + "},";
    }
    // DOM props
    if (el.props) {
      data += "domProps:{" + genProps(el.props) + "},";
    }
    // event handlers
    if (el.events) {
      data += genHandlers(el.events, false, warn$3) + ",";
    }
    if (el.nativeEvents) {
      data += genHandlers(el.nativeEvents, true, warn$3) + ",";
    }
    // slot target
    if (el.slotTarget) {
      data += "slot:" + el.slotTarget + ",";
    }
    // scoped slots
    if (el.scopedSlots) {
      data += genScopedSlots(el.scopedSlots) + ",";
    }
    // component v-model
    if (el.model) {
      data += "model:{value:" + el.model.value + ",callback:" + el.model.callback + ",expression:" + el.model.expression + "},";
    }
    // inline-template
    if (el.inlineTemplate) {
      var inlineTemplate = genInlineTemplate(el);
      if (inlineTemplate) {
        data += inlineTemplate + ",";
      }
    }
    data = data.replace(/,$/, '') + '}';
    // v-bind data wrap
    if (el.wrapData) {
      data = el.wrapData(data);
    }
    return data;
  }

  function genDirectives(el) {
    var dirs = el.directives;
    if (!dirs) {
      return;
    }
    var res = 'directives:[';
    var hasRuntime = false;
    var i, l, dir, needRuntime;
    for (i = 0, l = dirs.length; i < l; i++) {
      dir = dirs[i];
      needRuntime = true;
      var gen = platformDirectives$1[dir.name] || baseDirectives[dir.name];
      if (gen) {
        // compile-time directive that manipulates AST.
        // returns true if it also needs a runtime counterpart.
        needRuntime = !!gen(el, dir, warn$3);
      }
      if (needRuntime) {
        hasRuntime = true;
        res += "{name:\"" + dir.name + "\",rawName:\"" + dir.rawName + "\"" + (dir.value ? ",value:(" + dir.value + "),expression:" + JSON.stringify(dir.value) : '') + (dir.arg ? ",arg:\"" + dir.arg + "\"" : '') + (dir.modifiers ? ",modifiers:" + JSON.stringify(dir.modifiers) : '') + "},";
      }
    }
    if (hasRuntime) {
      return res.slice(0, -1) + ']';
    }
  }

  function genInlineTemplate(el) {
    var ast = el.children[0];
    if ("development" !== 'production' && (el.children.length > 1 || ast.type !== 1)) {
      warn$3('Inline-template components must have exactly one child element.');
    }
    if (ast.type === 1) {
      var inlineRenderFns = generate(ast, currentOptions);
      return "inlineTemplate:{render:function(){" + inlineRenderFns.render + "},staticRenderFns:[" + inlineRenderFns.staticRenderFns.map(function (code) {
        return "function(){" + code + "}";
      }).join(',') + "]}";
    }
  }

  function genScopedSlots(slots) {
    return "scopedSlots:_u([" + Object.keys(slots).map(function (key) {
      return genScopedSlot(key, slots[key]);
    }).join(',') + "])";
  }

  function genScopedSlot(key, el) {
    if (el.for && !el.forProcessed) {
      return genForScopedSlot(key, el);
    }
    return "{key:" + key + ",fn:function(" + String(el.attrsMap.scope) + "){" + "return " + (el.tag === 'template' ? genChildren(el) || 'void 0' : genElement(el)) + "}}";
  }

  function genForScopedSlot(key, el) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? "," + el.iterator1 : '';
    var iterator2 = el.iterator2 ? "," + el.iterator2 : '';
    el.forProcessed = true; // avoid recursion
    return "_l((" + exp + ")," + "function(" + alias + iterator1 + iterator2 + "){" + "return " + genScopedSlot(key, el) + '})';
  }

  function genChildren(el, checkSkip) {
    var children = el.children;
    if (children.length) {
      var el$1 = children[0];
      // optimize single v-for
      if (children.length === 1 && el$1.for && el$1.tag !== 'template' && el$1.tag !== 'slot') {
        return genElement(el$1);
      }
      var normalizationType = checkSkip ? getNormalizationType(children) : 0;
      return "[" + children.map(genNode).join(',') + "]" + (normalizationType ? "," + normalizationType : '');
    }
  }

  // determine the normalization needed for the children array.
  // 0: no normalization needed
  // 1: simple normalization needed (possible 1-level deep nested array)
  // 2: full normalization needed
  function getNormalizationType(children) {
    var res = 0;
    for (var i = 0; i < children.length; i++) {
      var el = children[i];
      if (el.type !== 1) {
        continue;
      }
      if (needsNormalization(el) || el.ifConditions && el.ifConditions.some(function (c) {
        return needsNormalization(c.block);
      })) {
        res = 2;
        break;
      }
      if (maybeComponent(el) || el.ifConditions && el.ifConditions.some(function (c) {
        return maybeComponent(c.block);
      })) {
        res = 1;
      }
    }
    return res;
  }

  function needsNormalization(el) {
    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot';
  }

  function maybeComponent(el) {
    return !isPlatformReservedTag$1(el.tag);
  }

  function genNode(node) {
    if (node.type === 1) {
      return genElement(node);
    } else {
      return genText(node);
    }
  }

  function genText(text) {
    return "_v(" + (text.type === 2 ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")";
  }

  function genSlot(el) {
    var slotName = el.slotName || '"default"';
    var children = genChildren(el);
    var res = "_t(" + slotName + (children ? "," + children : '');
    var attrs = el.attrs && "{" + el.attrs.map(function (a) {
      return camelize(a.name) + ":" + a.value;
    }).join(',') + "}";
    var bind$$1 = el.attrsMap['v-bind'];
    if ((attrs || bind$$1) && !children) {
      res += ",null";
    }
    if (attrs) {
      res += "," + attrs;
    }
    if (bind$$1) {
      res += (attrs ? '' : ',null') + "," + bind$$1;
    }
    return res + ')';
  }

  // componentName is el.component, take it as argument to shun flow's pessimistic refinement
  function genComponent(componentName, el) {
    var children = el.inlineTemplate ? null : genChildren(el, true);
    return "_c(" + componentName + "," + genData(el) + (children ? "," + children : '') + ")";
  }

  function genProps(props) {
    var res = '';
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      res += "\"" + prop.name + "\":" + transformSpecialNewlines(prop.value) + ",";
    }
    return res.slice(0, -1);
  }

  // #3895, #4268
  function transformSpecialNewlines(text) {
    return text.replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
  }

  /*  */

  // these keywords should not appear inside expressions, but operators like
  // typeof, instanceof and in are allowed
  var prohibitedKeywordRE = new RegExp('\\b' + ('do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' + 'super,throw,while,yield,delete,export,import,return,switch,default,' + 'extends,finally,continue,debugger,function,arguments').split(',').join('\\b|\\b') + '\\b');

  // these unary operators should not be used as property/method names
  var unaryOperatorsRE = new RegExp('\\b' + 'delete,typeof,void'.split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

  // check valid identifier for v-for
  var identRE = /[A-Za-z_$][\w$]*/;

  // strip strings in expressions
  var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

  // detect problematic expressions in a template
  function detectErrors(ast) {
    var errors = [];
    if (ast) {
      checkNode(ast, errors);
    }
    return errors;
  }

  function checkNode(node, errors) {
    if (node.type === 1) {
      for (var name in node.attrsMap) {
        if (dirRE.test(name)) {
          var value = node.attrsMap[name];
          if (value) {
            if (name === 'v-for') {
              checkFor(node, "v-for=\"" + value + "\"", errors);
            } else if (onRE.test(name)) {
              checkEvent(value, name + "=\"" + value + "\"", errors);
            } else {
              checkExpression(value, name + "=\"" + value + "\"", errors);
            }
          }
        }
      }
      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          checkNode(node.children[i], errors);
        }
      }
    } else if (node.type === 2) {
      checkExpression(node.expression, node.text, errors);
    }
  }

  function checkEvent(exp, text, errors) {
    var stipped = exp.replace(stripStringRE, '');
    var keywordMatch = stipped.match(unaryOperatorsRE);
    if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
      errors.push("avoid using JavaScript unary operator as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
    }
    checkExpression(exp, text, errors);
  }

  function checkFor(node, text, errors) {
    checkExpression(node.for || '', text, errors);
    checkIdentifier(node.alias, 'v-for alias', text, errors);
    checkIdentifier(node.iterator1, 'v-for iterator', text, errors);
    checkIdentifier(node.iterator2, 'v-for iterator', text, errors);
  }

  function checkIdentifier(ident, type, text, errors) {
    if (typeof ident === 'string' && !identRE.test(ident)) {
      errors.push("invalid " + type + " \"" + ident + "\" in expression: " + text.trim());
    }
  }

  function checkExpression(exp, text, errors) {
    try {
      new Function("return " + exp);
    } catch (e) {
      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
      if (keywordMatch) {
        errors.push("avoid using JavaScript keyword as property name: " + "\"" + keywordMatch[0] + "\" in expression " + text.trim());
      } else {
        errors.push("invalid expression: " + text.trim());
      }
    }
  }

  /*  */

  function baseCompile(template, options) {
    var ast = parse(template.trim(), options);
    optimize(ast, options);
    var code = generate(ast, options);
    return {
      ast: ast,
      render: code.render,
      staticRenderFns: code.staticRenderFns
    };
  }

  function makeFunction(code, errors) {
    try {
      return new Function(code);
    } catch (err) {
      errors.push({ err: err, code: code });
      return noop;
    }
  }

  function createCompiler(baseOptions) {
    var functionCompileCache = Object.create(null);

    function compile(template, options) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];
      finalOptions.warn = function (msg, tip$$1) {
        (tip$$1 ? tips : errors).push(msg);
      };

      if (options) {
        // merge custom modules
        if (options.modules) {
          finalOptions.modules = (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(Object.create(baseOptions.directives), options.directives);
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      var compiled = baseCompile(template, finalOptions);
      {
        errors.push.apply(errors, detectErrors(compiled.ast));
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled;
    }

    function compileToFunctions(template, options, vm) {
      options = options || {};

      /* istanbul ignore if */
      {
        // detect possible CSP restriction
        try {
          new Function('return 1');
        } catch (e) {
          if (e.toString().match(/unsafe-eval|CSP/)) {
            warn('It seems you are using the standalone build of Vue.js in an ' + 'environment with Content Security Policy that prohibits unsafe-eval. ' + 'The template compiler cannot work in this environment. Consider ' + 'relaxing the policy to allow unsafe-eval or pre-compiling your ' + 'templates into render functions.');
          }
        }
      }

      // check cache
      var key = options.delimiters ? String(options.delimiters) + template : template;
      if (functionCompileCache[key]) {
        return functionCompileCache[key];
      }

      // compile
      var compiled = compile(template, options);

      // check compilation errors/tips
      {
        if (compiled.errors && compiled.errors.length) {
          warn("Error compiling template:\n\n" + template + "\n\n" + compiled.errors.map(function (e) {
            return "- " + e;
          }).join('\n') + '\n', vm);
        }
        if (compiled.tips && compiled.tips.length) {
          compiled.tips.forEach(function (msg) {
            return tip(msg, vm);
          });
        }
      }

      // turn code into functions
      var res = {};
      var fnGenErrors = [];
      res.render = makeFunction(compiled.render, fnGenErrors);
      var l = compiled.staticRenderFns.length;
      res.staticRenderFns = new Array(l);
      for (var i = 0; i < l; i++) {
        res.staticRenderFns[i] = makeFunction(compiled.staticRenderFns[i], fnGenErrors);
      }

      // check function generation errors.
      // this should only happen if there is a bug in the compiler itself.
      // mostly for codegen development use
      /* istanbul ignore if */
      {
        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
          warn("Failed to generate render function:\n\n" + fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return err.toString() + " in\n\n" + code + "\n";
          }).join('\n'), vm);
        }
      }

      return functionCompileCache[key] = res;
    }

    return {
      compile: compile,
      compileToFunctions: compileToFunctions
    };
  }

  /*  */

  function transformNode(el, options) {
    var warn = options.warn || baseWarn;
    var staticClass = getAndRemoveAttr(el, 'class');
    if ("development" !== 'production' && staticClass) {
      var expression = parseText(staticClass, options.delimiters);
      if (expression) {
        warn("class=\"" + staticClass + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div class="{{ val }}">, use <div :class="val">.');
      }
    }
    if (staticClass) {
      el.staticClass = JSON.stringify(staticClass);
    }
    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
    if (classBinding) {
      el.classBinding = classBinding;
    }
  }

  function genData$1(el) {
    var data = '';
    if (el.staticClass) {
      data += "staticClass:" + el.staticClass + ",";
    }
    if (el.classBinding) {
      data += "class:" + el.classBinding + ",";
    }
    return data;
  }

  var klass$1 = {
    staticKeys: ['staticClass'],
    transformNode: transformNode,
    genData: genData$1
  };

  /*  */

  function transformNode$1(el, options) {
    var warn = options.warn || baseWarn;
    var staticStyle = getAndRemoveAttr(el, 'style');
    if (staticStyle) {
      /* istanbul ignore if */
      {
        var expression = parseText(staticStyle, options.delimiters);
        if (expression) {
          warn("style=\"" + staticStyle + "\": " + 'Interpolation inside attributes has been removed. ' + 'Use v-bind or the colon shorthand instead. For example, ' + 'instead of <div style="{{ val }}">, use <div :style="val">.');
        }
      }
      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
    }

    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
    if (styleBinding) {
      el.styleBinding = styleBinding;
    }
  }

  function genData$2(el) {
    var data = '';
    if (el.staticStyle) {
      data += "staticStyle:" + el.staticStyle + ",";
    }
    if (el.styleBinding) {
      data += "style:(" + el.styleBinding + "),";
    }
    return data;
  }

  var style$1 = {
    staticKeys: ['staticStyle'],
    transformNode: transformNode$1,
    genData: genData$2
  };

  var modules$1 = [klass$1, style$1];

  /*  */

  function text(el, dir) {
    if (dir.value) {
      addProp(el, 'textContent', "_s(" + dir.value + ")");
    }
  }

  /*  */

  function html(el, dir) {
    if (dir.value) {
      addProp(el, 'innerHTML', "_s(" + dir.value + ")");
    }
  }

  var directives$1 = {
    model: model,
    text: text,
    html: html
  };

  /*  */

  var baseOptions = {
    expectHTML: true,
    modules: modules$1,
    directives: directives$1,
    isPreTag: isPreTag,
    isUnaryTag: isUnaryTag,
    mustUseProp: mustUseProp,
    canBeLeftOpenTag: canBeLeftOpenTag,
    isReservedTag: isReservedTag,
    getTagNamespace: getTagNamespace,
    staticKeys: genStaticKeys(modules$1)
  };

  var ref$1 = createCompiler(baseOptions);
  var compileToFunctions = ref$1.compileToFunctions;

  /*  */

  var idToTemplate = cached(function (id) {
    var el = query(id);
    return el && el.innerHTML;
  });

  var mount = Vue$3.prototype.$mount;
  Vue$3.prototype.$mount = function (el, hydrating) {
    el = el && query(el);

    /* istanbul ignore if */
    if (el === document.body || el === document.documentElement) {
      "development" !== 'production' && warn("Do not mount Vue to <html> or <body> - mount to normal elements instead.");
      return this;
    }

    var options = this.$options;
    // resolve template/el and convert to render function
    if (!options.render) {
      var template = options.template;
      if (template) {
        if (typeof template === 'string') {
          if (template.charAt(0) === '#') {
            template = idToTemplate(template);
            /* istanbul ignore if */
            if ("development" !== 'production' && !template) {
              warn("Template element not found or is empty: " + options.template, this);
            }
          }
        } else if (template.nodeType) {
          template = template.innerHTML;
        } else {
          {
            warn('invalid template option:' + template, this);
          }
          return this;
        }
      } else if (el) {
        template = getOuterHTML(el);
      }
      if (template) {
        /* istanbul ignore if */
        if ("development" !== 'production' && config.performance && mark) {
          mark('compile');
        }

        var ref = compileToFunctions(template, {
          shouldDecodeNewlines: shouldDecodeNewlines,
          delimiters: options.delimiters
        }, this);
        var render = ref.render;
        var staticRenderFns = ref.staticRenderFns;
        options.render = render;
        options.staticRenderFns = staticRenderFns;

        /* istanbul ignore if */
        if ("development" !== 'production' && config.performance && mark) {
          mark('compile end');
          measure(this._name + " compile", 'compile', 'compile end');
        }
      }
    }
    return mount.call(this, el, hydrating);
  };

  /**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   */
  function getOuterHTML(el) {
    if (el.outerHTML) {
      return el.outerHTML;
    } else {
      var container = document.createElement('div');
      container.appendChild(el.cloneNode(true));
      return container.innerHTML;
    }
  }

  Vue$3.compile = compileToFunctions;

  return Vue$3;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],21:[function(require,module,exports){
'use strict';

module.exports = require('./lib/axios');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCQyxRQUFRLGFBQVIsQ0FBakIiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbGliL2F4aW9zJyk7Il19
},{"./lib/axios":23}],22:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./../utils');
var settle = require('./../core/settle');
var buildURL = require('./../helpers/buildURL');
var parseHeaders = require('./../helpers/parseHeaders');
var isURLSameOrigin = require('./../helpers/isURLSameOrigin');
var createError = require('../core/createError');
var btoa = typeof window !== 'undefined' && window.btoa && window.btoa.bind(window) || require('./../helpers/btoa');

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();
    var loadEvent = 'onreadystatechange';
    var xDomain = false;

    // For IE 8/9 CORS support
    // Only supports POST and GET calls and doesn't returns the response headers.
    // DON'T do this for testing b/c XMLHttpRequest is mocked, not XDomainRequest.
    if (process.env.NODE_ENV !== 'test' && typeof window !== 'undefined' && window.XDomainRequest && !('withCredentials' in request) && !isURLSameOrigin(config.url)) {
      request = new window.XDomainRequest();
      loadEvent = 'onload';
      xDomain = true;
      request.onprogress = function handleProgress() {};
      request.ontimeout = function handleTimeout() {};
    }

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password || '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    request.open(config.method.toUpperCase(), buildURL(config.url, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    // Listen for ready state
    request[loadEvent] = function handleLoad() {
      if (!request || request.readyState !== 4 && !xDomain) {
        return;
      }

      // The request errored out and we didn't get a response, this will be
      // handled by onerror instead
      // With one exception: request that using file: protocol, most browsers
      // will return status as 0 even though it's a successful request
      if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
        return;
      }

      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !config.responseType || config.responseType === 'text' ? request.responseText : request.response;
      var response = {
        data: responseData,
        // IE sends 1223 instead of 204 (https://github.com/mzabriskie/axios/issues/201)
        status: request.status === 1223 ? 204 : request.status,
        statusText: request.status === 1223 ? 'No Content' : request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      reject(createError('timeout of ' + config.timeout + 'ms exceeded', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      var cookies = require('./../helpers/cookies');

      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(config.url)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (config.withCredentials) {
      request.withCredentials = true;
    }

    // Add responseType to request if needed
    if (config.responseType) {
      try {
        request.responseType = config.responseType;
      } catch (e) {
        // Expected DOMException thrown by browsers not compatible XMLHttpRequest Level 2.
        // But, this can be suppressed for 'json' type as it can be parsed by default 'transformResponse' function.
        if (config.responseType !== 'json') {
          throw e;
        }
      }
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (requestData === undefined) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("XJF/FV"))
},{"../core/createError":29,"./../core/settle":32,"./../helpers/btoa":36,"./../helpers/buildURL":37,"./../helpers/cookies":39,"./../helpers/isURLSameOrigin":41,"./../helpers/parseHeaders":43,"./../utils":45,"XJF/FV":46}],23:[function(require,module,exports){
'use strict';

var utils = require('./utils');
var bind = require('./helpers/bind');
var Axios = require('./core/Axios');
var defaults = require('./defaults');

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(utils.merge(defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = require('./cancel/Cancel');
axios.CancelToken = require('./cancel/CancelToken');
axios.isCancel = require('./cancel/isCancel');

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = require('./helpers/spread');

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports.default = axios;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF4aW9zLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImJpbmQiLCJBeGlvcyIsImRlZmF1bHRzIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiY29udGV4dCIsImluc3RhbmNlIiwicHJvdG90eXBlIiwicmVxdWVzdCIsImV4dGVuZCIsImF4aW9zIiwiY3JlYXRlIiwiaW5zdGFuY2VDb25maWciLCJtZXJnZSIsIkNhbmNlbCIsIkNhbmNlbFRva2VuIiwiaXNDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsIlByb21pc2UiLCJzcHJlYWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxTQUFSLENBQVo7QUFDQSxJQUFJQyxPQUFPRCxRQUFRLGdCQUFSLENBQVg7QUFDQSxJQUFJRSxRQUFRRixRQUFRLGNBQVIsQ0FBWjtBQUNBLElBQUlHLFdBQVdILFFBQVEsWUFBUixDQUFmOztBQUVBOzs7Ozs7QUFNQSxTQUFTSSxjQUFULENBQXdCQyxhQUF4QixFQUF1QztBQUNyQyxNQUFJQyxVQUFVLElBQUlKLEtBQUosQ0FBVUcsYUFBVixDQUFkO0FBQ0EsTUFBSUUsV0FBV04sS0FBS0MsTUFBTU0sU0FBTixDQUFnQkMsT0FBckIsRUFBOEJILE9BQTlCLENBQWY7O0FBRUE7QUFDQVAsUUFBTVcsTUFBTixDQUFhSCxRQUFiLEVBQXVCTCxNQUFNTSxTQUE3QixFQUF3Q0YsT0FBeEM7O0FBRUE7QUFDQVAsUUFBTVcsTUFBTixDQUFhSCxRQUFiLEVBQXVCRCxPQUF2Qjs7QUFFQSxTQUFPQyxRQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxJQUFJSSxRQUFRUCxlQUFlRCxRQUFmLENBQVo7O0FBRUE7QUFDQVEsTUFBTVQsS0FBTixHQUFjQSxLQUFkOztBQUVBO0FBQ0FTLE1BQU1DLE1BQU4sR0FBZSxTQUFTQSxNQUFULENBQWdCQyxjQUFoQixFQUFnQztBQUM3QyxTQUFPVCxlQUFlTCxNQUFNZSxLQUFOLENBQVlYLFFBQVosRUFBc0JVLGNBQXRCLENBQWYsQ0FBUDtBQUNELENBRkQ7O0FBSUE7QUFDQUYsTUFBTUksTUFBTixHQUFlZixRQUFRLGlCQUFSLENBQWY7QUFDQVcsTUFBTUssV0FBTixHQUFvQmhCLFFBQVEsc0JBQVIsQ0FBcEI7QUFDQVcsTUFBTU0sUUFBTixHQUFpQmpCLFFBQVEsbUJBQVIsQ0FBakI7O0FBRUE7QUFDQVcsTUFBTU8sR0FBTixHQUFZLFNBQVNBLEdBQVQsQ0FBYUMsUUFBYixFQUF1QjtBQUNqQyxTQUFPQyxRQUFRRixHQUFSLENBQVlDLFFBQVosQ0FBUDtBQUNELENBRkQ7QUFHQVIsTUFBTVUsTUFBTixHQUFlckIsUUFBUSxrQkFBUixDQUFmOztBQUVBc0IsT0FBT0MsT0FBUCxHQUFpQlosS0FBakI7O0FBRUE7QUFDQVcsT0FBT0MsT0FBUCxDQUFlQyxPQUFmLEdBQXlCYixLQUF6QiIsImZpbGUiOiJheGlvcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIEF4aW9zID0gcmVxdWlyZSgnLi9jb3JlL0F4aW9zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGRlZmF1bHRDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqIEByZXR1cm4ge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIHZhciBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICB2YXIgaW5zdGFuY2UgPSBiaW5kKEF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0LCBjb250ZXh0KTtcblxuICAvLyBDb3B5IGF4aW9zLnByb3RvdHlwZSB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIEF4aW9zLnByb3RvdHlwZSwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCk7XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG4vLyBDcmVhdGUgdGhlIGRlZmF1bHQgaW5zdGFuY2UgdG8gYmUgZXhwb3J0ZWRcbnZhciBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG5heGlvcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgcmV0dXJuIGNyZWF0ZUluc3RhbmNlKHV0aWxzLm1lcmdlKGRlZmF1bHRzLCBpbnN0YW5jZUNvbmZpZykpO1xufTtcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWwgPSByZXF1aXJlKCcuL2NhbmNlbC9DYW5jZWwnKTtcbmF4aW9zLkNhbmNlbFRva2VuID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsVG9rZW4nKTtcbmF4aW9zLmlzQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvaXNDYW5jZWwnKTtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcbmF4aW9zLnNwcmVhZCA9IHJlcXVpcmUoJy4vaGVscGVycy9zcHJlYWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBheGlvcztcblxuLy8gQWxsb3cgdXNlIG9mIGRlZmF1bHQgaW1wb3J0IHN5bnRheCBpbiBUeXBlU2NyaXB0XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYXhpb3M7XG4iXX0=
},{"./cancel/Cancel":24,"./cancel/CancelToken":25,"./cancel/isCancel":26,"./core/Axios":27,"./defaults":34,"./helpers/bind":35,"./helpers/spread":44,"./utils":45}],24:[function(require,module,exports){
'use strict';

/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */

function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbmNlbC5qcyJdLCJuYW1lcyI6WyJDYW5jZWwiLCJtZXNzYWdlIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJfX0NBTkNFTF9fIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7Ozs7Ozs7QUFNQSxTQUFTQSxNQUFULENBQWdCQyxPQUFoQixFQUF5QjtBQUN2QixPQUFLQSxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7QUFFREQsT0FBT0UsU0FBUCxDQUFpQkMsUUFBakIsR0FBNEIsU0FBU0EsUUFBVCxHQUFvQjtBQUM5QyxTQUFPLFlBQVksS0FBS0YsT0FBTCxHQUFlLE9BQU8sS0FBS0EsT0FBM0IsR0FBcUMsRUFBakQsQ0FBUDtBQUNELENBRkQ7O0FBSUFELE9BQU9FLFNBQVAsQ0FBaUJFLFVBQWpCLEdBQThCLElBQTlCOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCTixNQUFqQiIsImZpbGUiOiJDYW5jZWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQSBgQ2FuY2VsYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge3N0cmluZz19IG1lc3NhZ2UgVGhlIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbChtZXNzYWdlKSB7XG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG59XG5cbkNhbmNlbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdDYW5jZWwnICsgKHRoaXMubWVzc2FnZSA/ICc6ICcgKyB0aGlzLm1lc3NhZ2UgOiAnJyk7XG59O1xuXG5DYW5jZWwucHJvdG90eXBlLl9fQ0FOQ0VMX18gPSB0cnVlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbDtcbiJdfQ==
},{}],25:[function(require,module,exports){
'use strict';

var Cancel = require('./Cancel');

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhbmNlbFRva2VuLmpzIl0sIm5hbWVzIjpbIkNhbmNlbCIsInJlcXVpcmUiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwiVHlwZUVycm9yIiwicmVzb2x2ZVByb21pc2UiLCJwcm9taXNlIiwiUHJvbWlzZSIsInByb21pc2VFeGVjdXRvciIsInJlc29sdmUiLCJ0b2tlbiIsImNhbmNlbCIsIm1lc3NhZ2UiLCJyZWFzb24iLCJwcm90b3R5cGUiLCJ0aHJvd0lmUmVxdWVzdGVkIiwic291cmNlIiwiYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFNBQVNDLFFBQVEsVUFBUixDQUFiOztBQUVBOzs7Ozs7QUFNQSxTQUFTQyxXQUFULENBQXFCQyxRQUFyQixFQUErQjtBQUM3QixNQUFJLE9BQU9BLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbEMsVUFBTSxJQUFJQyxTQUFKLENBQWMsOEJBQWQsQ0FBTjtBQUNEOztBQUVELE1BQUlDLGNBQUo7QUFDQSxPQUFLQyxPQUFMLEdBQWUsSUFBSUMsT0FBSixDQUFZLFNBQVNDLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDO0FBQzNESixxQkFBaUJJLE9BQWpCO0FBQ0QsR0FGYyxDQUFmOztBQUlBLE1BQUlDLFFBQVEsSUFBWjtBQUNBUCxXQUFTLFNBQVNRLE1BQVQsQ0FBZ0JDLE9BQWhCLEVBQXlCO0FBQ2hDLFFBQUlGLE1BQU1HLE1BQVYsRUFBa0I7QUFDaEI7QUFDQTtBQUNEOztBQUVESCxVQUFNRyxNQUFOLEdBQWUsSUFBSWIsTUFBSixDQUFXWSxPQUFYLENBQWY7QUFDQVAsbUJBQWVLLE1BQU1HLE1BQXJCO0FBQ0QsR0FSRDtBQVNEOztBQUVEOzs7QUFHQVgsWUFBWVksU0FBWixDQUFzQkMsZ0JBQXRCLEdBQXlDLFNBQVNBLGdCQUFULEdBQTRCO0FBQ25FLE1BQUksS0FBS0YsTUFBVCxFQUFpQjtBQUNmLFVBQU0sS0FBS0EsTUFBWDtBQUNEO0FBQ0YsQ0FKRDs7QUFNQTs7OztBQUlBWCxZQUFZYyxNQUFaLEdBQXFCLFNBQVNBLE1BQVQsR0FBa0I7QUFDckMsTUFBSUwsTUFBSjtBQUNBLE1BQUlELFFBQVEsSUFBSVIsV0FBSixDQUFnQixTQUFTQyxRQUFULENBQWtCYyxDQUFsQixFQUFxQjtBQUMvQ04sYUFBU00sQ0FBVDtBQUNELEdBRlcsQ0FBWjtBQUdBLFNBQU87QUFDTFAsV0FBT0EsS0FERjtBQUVMQyxZQUFRQTtBQUZILEdBQVA7QUFJRCxDQVREOztBQVdBTyxPQUFPQyxPQUFQLEdBQWlCakIsV0FBakIiLCJmaWxlIjoiQ2FuY2VsVG9rZW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIl19
},{"./Cancel":24}],26:[function(require,module,exports){
'use strict';

module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQ2FuY2VsLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpc0NhbmNlbCIsInZhbHVlIiwiX19DQU5DRUxfXyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsS0FBbEIsRUFBeUI7QUFDeEMsU0FBTyxDQUFDLEVBQUVBLFNBQVNBLE1BQU1DLFVBQWpCLENBQVI7QUFDRCxDQUZEIiwiZmlsZSI6ImlzQ2FuY2VsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iXX0=
},{}],27:[function(require,module,exports){
'use strict';

var defaults = require('./../defaults');
var utils = require('./../utils');
var InterceptorManager = require('./InterceptorManager');
var dispatchRequest = require('./dispatchRequest');
var isAbsoluteURL = require('./../helpers/isAbsoluteURL');
var combineURLs = require('./../helpers/combineURLs');

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = utils.merge({
      url: arguments[0]
    }, arguments[1]);
  }

  config = utils.merge(defaults, this.defaults, { method: 'get' }, config);
  config.method = config.method.toLowerCase();

  // Support baseURL config
  if (config.baseURL && !isAbsoluteURL(config.url)) {
    config.url = combineURLs(config.baseURL, config.url);
  }

  // Hook up interceptors middleware
  var chain = [dispatchRequest, undefined];
  var promise = Promise.resolve(config);

  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    chain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    chain.push(interceptor.fulfilled, interceptor.rejected);
  });

  while (chain.length) {
    promise = promise.then(chain.shift(), chain.shift());
  }

  return promise;
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, data, config) {
    return this.request(utils.merge(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkF4aW9zLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRzIiwicmVxdWlyZSIsInV0aWxzIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsInJlcXVlc3QiLCJyZXNwb25zZSIsInByb3RvdHlwZSIsImNvbmZpZyIsIm1lcmdlIiwidXJsIiwiYXJndW1lbnRzIiwibWV0aG9kIiwidG9Mb3dlckNhc2UiLCJiYXNlVVJMIiwiY2hhaW4iLCJ1bmRlZmluZWQiLCJwcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmb3JFYWNoIiwidW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsInVuc2hpZnQiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInB1c2hSZXNwb25zZUludGVyY2VwdG9ycyIsInB1c2giLCJsZW5ndGgiLCJ0aGVuIiwic2hpZnQiLCJmb3JFYWNoTWV0aG9kTm9EYXRhIiwiZm9yRWFjaE1ldGhvZFdpdGhEYXRhIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFdBQVdDLFFBQVEsZUFBUixDQUFmO0FBQ0EsSUFBSUMsUUFBUUQsUUFBUSxZQUFSLENBQVo7QUFDQSxJQUFJRSxxQkFBcUJGLFFBQVEsc0JBQVIsQ0FBekI7QUFDQSxJQUFJRyxrQkFBa0JILFFBQVEsbUJBQVIsQ0FBdEI7QUFDQSxJQUFJSSxnQkFBZ0JKLFFBQVEsNEJBQVIsQ0FBcEI7QUFDQSxJQUFJSyxjQUFjTCxRQUFRLDBCQUFSLENBQWxCOztBQUVBOzs7OztBQUtBLFNBQVNNLEtBQVQsQ0FBZUMsY0FBZixFQUErQjtBQUM3QixPQUFLUixRQUFMLEdBQWdCUSxjQUFoQjtBQUNBLE9BQUtDLFlBQUwsR0FBb0I7QUFDbEJDLGFBQVMsSUFBSVAsa0JBQUosRUFEUztB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c0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLy4uL2RlZmF1bHRzJyk7XG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTCcpO1xudmFyIGNvbWJpbmVVUkxzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2NvbWJpbmVVUkxzJyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywgdGhpcy5kZWZhdWx0cywgeyBtZXRob2Q6ICdnZXQnIH0sIGNvbmZpZyk7XG4gIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG5cbiAgLy8gU3VwcG9ydCBiYXNlVVJMIGNvbmZpZ1xuICBpZiAoY29uZmlnLmJhc2VVUkwgJiYgIWlzQWJzb2x1dGVVUkwoY29uZmlnLnVybCkpIHtcbiAgICBjb25maWcudXJsID0gY29tYmluZVVSTHMoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICB9XG5cbiAgLy8gSG9vayB1cCBpbnRlcmNlcHRvcnMgbWlkZGxld2FyZVxuICB2YXIgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LCB1bmRlZmluZWRdO1xuICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShjb25maWcpO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHRoaXMuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLmZvckVhY2goZnVuY3Rpb24gcHVzaFJlc3BvbnNlSW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4ucHVzaChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgd2hpbGUgKGNoYWluLmxlbmd0aCkge1xuICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW4uc2hpZnQoKSwgY2hhaW4uc2hpZnQoKSk7XG4gIH1cblxuICByZXR1cm4gcHJvbWlzZTtcbn07XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybFxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmwsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gQXhpb3M7XG4iXX0=
},{"./../defaults":34,"./../helpers/combineURLs":38,"./../helpers/isAbsoluteURL":40,"./../utils":45,"./InterceptorManager":28,"./dispatchRequest":30}],28:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkludGVyY2VwdG9yTWFuYWdlci5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJoYW5kbGVycyIsInByb3RvdHlwZSIsInVzZSIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwicHVzaCIsImxlbmd0aCIsImVqZWN0IiwiaWQiLCJmb3JFYWNoIiwiZm4iLCJmb3JFYWNoSGFuZGxlciIsImgiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRQyxRQUFRLFlBQVIsQ0FBWjs7QUFFQSxTQUFTQyxrQkFBVCxHQUE4QjtBQUM1QixPQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7O0FBUUFELG1CQUFtQkUsU0FBbkIsQ0FBNkJDLEdBQTdCLEdBQW1DLFNBQVNBLEdBQVQsQ0FBYUMsU0FBYixFQUF3QkMsUUFBeEIsRUFBa0M7QUFDbkUsT0FBS0osUUFBTCxDQUFjSyxJQUFkLENBQW1CO0FBQ2pCRixlQUFXQSxTQURNO0FBRWpCQyxjQUFVQTtBQUZPLEdBQW5CO0FBSUEsU0FBTyxLQUFLSixRQUFMLENBQWNNLE1BQWQsR0FBdUIsQ0FBOUI7QUFDRCxDQU5EOztBQVFBOzs7OztBQUtBUCxtQkFBbUJFLFNBQW5CLENBQTZCTSxLQUE3QixHQUFxQyxTQUFTQSxLQUFULENBQWVDLEVBQWYsRUFBbUI7QUFDdEQsTUFBSSxLQUFLUixRQUFMLENBQWNRLEVBQWQsQ0FBSixFQUF1QjtBQUNyQixTQUFLUixRQUFMLENBQWNRLEVBQWQsSUFBb0IsSUFBcEI7QUFDRDtBQUNGLENBSkQ7O0FBTUE7Ozs7Ozs7O0FBUUFULG1CQUFtQkUsU0FBbkIsQ0FBNkJRLE9BQTdCLEdBQXVDLFNBQVNBLE9BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCO0FBQzFEYixRQUFNWSxPQUFOLENBQWMsS0FBS1QsUUFBbkIsRUFBNkIsU0FBU1csY0FBVCxDQUF3QkMsQ0FBeEIsRUFBMkI7QUFDdEQsUUFBSUEsTUFBTSxJQUFWLEVBQWdCO0FBQ2RGLFNBQUdFLENBQUg7QUFDRDtBQUNGLEdBSkQ7QUFLRCxDQU5EOztBQVFBQyxPQUFPQyxPQUFQLEdBQWlCZixrQkFBakIiLCJmaWxlIjoiSW50ZXJjZXB0b3JNYW5hZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIEludGVyY2VwdG9yTWFuYWdlcigpIHtcbiAgdGhpcy5oYW5kbGVycyA9IFtdO1xufVxuXG4vKipcbiAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICpcbiAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCkge1xuICB0aGlzLmhhbmRsZXJzLnB1c2goe1xuICAgIGZ1bGZpbGxlZDogZnVsZmlsbGVkLFxuICAgIHJlamVjdGVkOiByZWplY3RlZFxuICB9KTtcbiAgcmV0dXJuIHRoaXMuaGFuZGxlcnMubGVuZ3RoIC0gMTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IGlkIFRoZSBJRCB0aGF0IHdhcyByZXR1cm5lZCBieSBgdXNlYFxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmVqZWN0ID0gZnVuY3Rpb24gZWplY3QoaWQpIHtcbiAgaWYgKHRoaXMuaGFuZGxlcnNbaWRdKSB7XG4gICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICB9XG59O1xuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gKlxuICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcbiAgdXRpbHMuZm9yRWFjaCh0aGlzLmhhbmRsZXJzLCBmdW5jdGlvbiBmb3JFYWNoSGFuZGxlcihoKSB7XG4gICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgIGZuKGgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVyY2VwdG9yTWFuYWdlcjtcbiJdfQ==
},{"./../utils":45}],29:[function(require,module,exports){
'use strict';

var enhanceError = require('./enhanceError');

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUVycm9yLmpzIl0sIm5hbWVzIjpbImVuaGFuY2VFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlRXJyb3IiLCJtZXNzYWdlIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsImVycm9yIiwiRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLGVBQWVDLFFBQVEsZ0JBQVIsQ0FBbkI7O0FBRUE7Ozs7Ozs7Ozs7QUFVQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULENBQXFCQyxPQUFyQixFQUE4QkMsTUFBOUIsRUFBc0NDLElBQXRDLEVBQTRDQyxPQUE1QyxFQUFxREMsUUFBckQsRUFBK0Q7QUFDOUUsTUFBSUMsUUFBUSxJQUFJQyxLQUFKLENBQVVOLE9BQVYsQ0FBWjtBQUNBLFNBQU9MLGFBQWFVLEtBQWIsRUFBb0JKLE1BQXBCLEVBQTRCQyxJQUE1QixFQUFrQ0MsT0FBbEMsRUFBMkNDLFFBQTNDLENBQVA7QUFDRCxDQUhEIiwiZmlsZSI6ImNyZWF0ZUVycm9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZW5oYW5jZUVycm9yID0gcmVxdWlyZSgnLi9lbmhhbmNlRXJyb3InKTtcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3JlYXRlRXJyb3IobWVzc2FnZSwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICB2YXIgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlbmhhbmNlRXJyb3IoZXJyb3IsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpO1xufTtcbiJdfQ==
},{"./enhanceError":31}],30:[function(require,module,exports){
'use strict';

var utils = require('./../utils');
var transformData = require('./transformData');
var isCancel = require('../cancel/isCancel');
var defaults = require('../defaults');

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData(config.data, config.headers, config.transformRequest);

  // Flatten headers
  config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers || {});

  utils.forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
    delete config.headers[method];
  });

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData(response.data, response.headers, config.transformResponse);

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData(reason.response.data, reason.response.headers, config.transformResponse);
      }
    }

    return Promise.reject(reason);
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRpc3BhdGNoUmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJ0cmFuc2Zvcm1EYXRhIiwiaXNDYW5jZWwiLCJkZWZhdWx0cyIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJjb25maWciLCJjYW5jZWxUb2tlbiIsInRocm93SWZSZXF1ZXN0ZWQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiaGVhZGVycyIsImRhdGEiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwibWVyZ2UiLCJjb21tb24iLCJtZXRob2QiLCJmb3JFYWNoIiwiY2xlYW5IZWFkZXJDb25maWciLCJhZGFwdGVyIiwidGhlbiIsIm9uQWRhcHRlclJlc29sdXRpb24iLCJyZXNwb25zZSIsInRyYW5zZm9ybVJlc3BvbnNlIiwib25BZGFwdGVyUmVqZWN0aW9uIiwicmVhc29uIiwiUHJvbWlzZSIsInJlamVjdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7QUFDQSxJQUFJQyxnQkFBZ0JELFFBQVEsaUJBQVIsQ0FBcEI7QUFDQSxJQUFJRSxXQUFXRixRQUFRLG9CQUFSLENBQWY7QUFDQSxJQUFJRyxXQUFXSCxRQUFRLGFBQVIsQ0FBZjs7QUFFQTs7O0FBR0EsU0FBU0ksNEJBQVQsQ0FBc0NDLE1BQXRDLEVBQThDO0FBQzVDLE1BQUlBLE9BQU9DLFdBQVgsRUFBd0I7QUFDdEJELFdBQU9DLFdBQVAsQ0FBbUJDLGdCQUFuQjtBQUNEO0FBQ0Y7O0FBRUQ7Ozs7OztBQU1BQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLGVBQVQsQ0FBeUJMLE1BQXpCLEVBQWlDO0FBQ2hERCwrQkFBNkJDLE1BQTdCOztBQUVBO0FBQ0FBLFNBQU9NLE9BQVAsR0FBaUJOLE9BQU9NLE9BQVAsSUFBa0IsRUFBbkM7O0FBRUE7QUFDQU4sU0FBT08sSUFBUCxHQUFjWCxjQUNaSSxPQUFPTyxJQURLLEVBRVpQLE9BQU9NLE9BRkssRUFHWk4sT0FBT1EsZ0JBSEssQ0FBZDs7QUFNQTtBQUNBUixTQUFPTSxPQUFQLEdBQWlCWixNQUFNZSxLQUFOLENBQ2ZULE9BQU9NLE9BQVAsQ0FBZUksTUFBZixJQUF5QixFQURWLEVBRWZWLE9BQU9NLE9BQVAsQ0FBZU4sT0FBT1csTUFBdEIsS0FBaUMsRUFGbEIsRUFHZlgsT0FBT00sT0FBUCxJQUFrQixFQUhILENBQWpCOztBQU1BWixRQUFNa0IsT0FBTixDQUNFLENBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0IsTUFBbEIsRUFBMEIsTUFBMUIsRUFBa0MsS0FBbEMsRUFBeUMsT0FBekMsRUFBa0QsUUFBbEQsQ0FERixFQUVFLFNBQVNDLGlCQUFULENBQTJCRixNQUEzQixFQUFtQztBQUNqQyxXQUFPWCxPQUFPTSxPQUFQLENBQWVLLE1BQWYsQ0FBUDtBQUNELEdBSkg7O0FBT0EsTUFBSUcsVUFBVWQsT0FBT2MsT0FBUCxJQUFrQmhCLFNBQVNnQixPQUF6Qzs7QUFFQSxTQUFPQSxRQUFRZCxNQUFSLEVBQWdCZSxJQUFoQixDQUFxQixTQUFTQyxtQkFBVCxDQUE2QkMsUUFBN0IsRUFBdUM7QUFDakVsQixpQ0FBNkJDLE1BQTdCOztBQUVBO0FBQ0FpQixhQUFTVixJQUFULEdBQWdCWCxjQUNkcUIsU0FBU1YsSUFESyxFQUVkVSxTQUFTWCxPQUZLLEVBR2ROLE9BQU9rQixpQkFITyxDQUFoQjs7QUFNQSxXQUFPRCxRQUFQO0FBQ0QsR0FYTSxFQVdKLFNBQVNFLGtCQUFULENBQTRCQyxNQUE1QixFQUFvQztBQUNyQyxRQUFJLENBQUN2QixTQUFTdUIsTUFBVCxDQUFMLEVBQXVCO0FBQ3JCckIsbUNBQTZCQyxNQUE3Qjs7QUFFQTtBQUNBLFVBQUlvQixVQUFVQSxPQUFPSCxRQUFyQixFQUErQjtBQUM3QkcsZUFBT0gsUUFBUCxDQUFnQlYsSUFBaEIsR0FBdUJYLGNBQ3JCd0IsT0FBT0gsUUFBUCxDQUFnQlYsSUFESyxFQUVyQmEsT0FBT0gsUUFBUCxDQUFnQlgsT0FGSyxFQUdyQk4sT0FBT2tCLGlCQUhjLENBQXZCO0FBS0Q7QUFDRjs7QUFFRCxXQUFPRyxRQUFRQyxNQUFSLENBQWVGLE1BQWYsQ0FBUDtBQUNELEdBMUJNLENBQVA7QUEyQkQsQ0F4REQiLCJmaWxlIjoiZGlzcGF0Y2hSZXF1ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgdHJhbnNmb3JtRGF0YSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtRGF0YScpO1xudmFyIGlzQ2FuY2VsID0gcmVxdWlyZSgnLi4vY2FuY2VsL2lzQ2FuY2VsJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIC8vIEVuc3VyZSBoZWFkZXJzIGV4aXN0XG4gIGNvbmZpZy5oZWFkZXJzID0gY29uZmlnLmhlYWRlcnMgfHwge307XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgY29uZmlnLmRhdGEsXG4gICAgY29uZmlnLmhlYWRlcnMsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICAvLyBGbGF0dGVuIGhlYWRlcnNcbiAgY29uZmlnLmhlYWRlcnMgPSB1dGlscy5tZXJnZShcbiAgICBjb25maWcuaGVhZGVycy5jb21tb24gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnNbY29uZmlnLm1ldGhvZF0gfHwge30sXG4gICAgY29uZmlnLmhlYWRlcnMgfHwge31cbiAgKTtcblxuICB1dGlscy5mb3JFYWNoKFxuICAgIFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJywgJ2NvbW1vbiddLFxuICAgIGZ1bmN0aW9uIGNsZWFuSGVhZGVyQ29uZmlnKG1ldGhvZCkge1xuICAgICAgZGVsZXRlIGNvbmZpZy5oZWFkZXJzW21ldGhvZF07XG4gICAgfVxuICApO1xuXG4gIHZhciBhZGFwdGVyID0gY29uZmlnLmFkYXB0ZXIgfHwgZGVmYXVsdHMuYWRhcHRlcjtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICByZXNwb25zZS5kYXRhLFxuICAgICAgcmVzcG9uc2UuaGVhZGVycyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH0sIGZ1bmN0aW9uIG9uQWRhcHRlclJlamVjdGlvbihyZWFzb24pIHtcbiAgICBpZiAoIWlzQ2FuY2VsKHJlYXNvbikpIHtcbiAgICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICAgIGlmIChyZWFzb24gJiYgcmVhc29uLnJlc3BvbnNlKSB7XG4gICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59O1xuIl19
},{"../cancel/isCancel":26,"../defaults":34,"./../utils":45,"./transformData":33}],31:[function(require,module,exports){
'use strict';

/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */

module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }
  error.request = request;
  error.response = response;
  return error;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVuaGFuY2VFcnJvci5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZW5oYW5jZUVycm9yIiwiZXJyb3IiLCJjb25maWciLCJjb2RlIiwicmVxdWVzdCIsInJlc3BvbnNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7Ozs7Ozs7QUFVQUEsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxZQUFULENBQXNCQyxLQUF0QixFQUE2QkMsTUFBN0IsRUFBcUNDLElBQXJDLEVBQTJDQyxPQUEzQyxFQUFvREMsUUFBcEQsRUFBOEQ7QUFDN0VKLFFBQU1DLE1BQU4sR0FBZUEsTUFBZjtBQUNBLE1BQUlDLElBQUosRUFBVTtBQUNSRixVQUFNRSxJQUFOLEdBQWFBLElBQWI7QUFDRDtBQUNERixRQUFNRyxPQUFOLEdBQWdCQSxPQUFoQjtBQUNBSCxRQUFNSSxRQUFOLEdBQWlCQSxRQUFqQjtBQUNBLFNBQU9KLEtBQVA7QUFDRCxDQVJEIiwiZmlsZSI6ImVuaGFuY2VFcnJvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVcGRhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIGNvbmZpZywgZXJyb3IgY29kZSwgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvciB0byB1cGRhdGUuXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBlcnJvci5jb25maWcgPSBjb25maWc7XG4gIGlmIChjb2RlKSB7XG4gICAgZXJyb3IuY29kZSA9IGNvZGU7XG4gIH1cbiAgZXJyb3IucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIGVycm9yLnJlc3BvbnNlID0gcmVzcG9uc2U7XG4gIHJldHVybiBlcnJvcjtcbn07XG4iXX0=
},{}],32:[function(require,module,exports){
'use strict';

var createError = require('./createError');

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  // Note: status is not exposed by XDomainRequest
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError('Request failed with status code ' + response.status, response.config, null, response.request, response));
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNldHRsZS5qcyJdLCJuYW1lcyI6WyJjcmVhdGVFcnJvciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2V0dGxlIiwicmVzb2x2ZSIsInJlamVjdCIsInJlc3BvbnNlIiwidmFsaWRhdGVTdGF0dXMiLCJjb25maWciLCJzdGF0dXMiLCJyZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxjQUFjQyxRQUFRLGVBQVIsQ0FBbEI7O0FBRUE7Ozs7Ozs7QUFPQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxNQUFULENBQWdCQyxPQUFoQixFQUF5QkMsTUFBekIsRUFBaUNDLFFBQWpDLEVBQTJDO0FBQzFELE1BQUlDLGlCQUFpQkQsU0FBU0UsTUFBVCxDQUFnQkQsY0FBckM7QUFDQTtBQUNBLE1BQUksQ0FBQ0QsU0FBU0csTUFBVixJQUFvQixDQUFDRixjQUFyQixJQUF1Q0EsZUFBZUQsU0FBU0csTUFBeEIsQ0FBM0MsRUFBNEU7QUFDMUVMLFlBQVFFLFFBQVI7QUFDRCxHQUZELE1BRU87QUFDTEQsV0FBT04sWUFDTCxxQ0FBcUNPLFNBQVNHLE1BRHpDLEVBRUxILFNBQVNFLE1BRkosRUFHTCxJQUhLLEVBSUxGLFNBQVNJLE9BSkosRUFLTEosUUFMSyxDQUFQO0FBT0Q7QUFDRixDQWREIiwiZmlsZSI6InNldHRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiJdfQ==
},{"./createError":29}],33:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn(data, headers);
  });

  return data;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYW5zZm9ybURhdGEuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInRyYW5zZm9ybURhdGEiLCJkYXRhIiwiaGVhZGVycyIsImZucyIsImZvckVhY2giLCJ0cmFuc2Zvcm0iLCJmbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7O0FBRUE7Ozs7Ozs7O0FBUUFDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLE9BQTdCLEVBQXNDQyxHQUF0QyxFQUEyQztBQUMxRDtBQUNBUCxRQUFNUSxPQUFOLENBQWNELEdBQWQsRUFBbUIsU0FBU0UsU0FBVCxDQUFtQkMsRUFBbkIsRUFBdUI7QUFDeENMLFdBQU9LLEdBQUdMLElBQUgsRUFBU0MsT0FBVCxDQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPRCxJQUFQO0FBQ0QsQ0FQRCIsImZpbGUiOiJ0cmFuc2Zvcm1EYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbi8qKlxuICogVHJhbnNmb3JtIHRoZSBkYXRhIGZvciBhIHJlcXVlc3Qgb3IgYSByZXNwb25zZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gZGF0YSBUaGUgZGF0YSB0byBiZSB0cmFuc2Zvcm1lZFxuICogQHBhcmFtIHtBcnJheX0gaGVhZGVycyBUaGUgaGVhZGVycyBmb3IgdGhlIHJlcXVlc3Qgb3IgcmVzcG9uc2VcbiAqIEBwYXJhbSB7QXJyYXl8RnVuY3Rpb259IGZucyBBIHNpbmdsZSBmdW5jdGlvbiBvciBBcnJheSBvZiBmdW5jdGlvbnNcbiAqIEByZXR1cm5zIHsqfSBUaGUgcmVzdWx0aW5nIHRyYW5zZm9ybWVkIGRhdGFcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEsIGhlYWRlcnMsIGZucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgdXRpbHMuZm9yRWFjaChmbnMsIGZ1bmN0aW9uIHRyYW5zZm9ybShmbikge1xuICAgIGRhdGEgPSBmbihkYXRhLCBoZWFkZXJzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59O1xuIl19
},{"./../utils":45}],34:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('./utils');
var normalizeHeaderName = require('./helpers/normalizeHeaderName');

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = require('./adapters/xhr');
  } else if (typeof process !== 'undefined') {
    // For node use HTTP adapter
    adapter = require('./adapters/http');
  }
  return adapter;
}

var defaults = {
  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Content-Type');
    if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data)) {
      setContentTypeIfUnset(headers, 'application/json;charset=utf-8');
      return JSON.stringify(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    /*eslint no-param-reassign:0*/
    if (typeof data === 'string') {
      try {
        data = JSON.parse(data);
      } catch (e) {/* Ignore */}
    }
    return data;
  }],

  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZmF1bHRzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJERUZBVUxUX0NPTlRFTlRfVFlQRSIsInNldENvbnRlbnRUeXBlSWZVbnNldCIsImhlYWRlcnMiLCJ2YWx1ZSIsImlzVW5kZWZpbmVkIiwiZ2V0RGVmYXVsdEFkYXB0ZXIiLCJhZGFwdGVyIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9jZXNzIiwiZGVmYXVsdHMiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiZGF0YSIsImlzRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyIiwiaXNCdWZmZXIiLCJpc1N0cmVhbSIsImlzRmlsZSIsImlzQmxvYiIsImlzQXJyYXlCdWZmZXJWaWV3IiwiYnVmZmVyIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJ0b1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInRyYW5zZm9ybVJlc3BvbnNlIiwicGFyc2UiLCJlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJmb3JFYWNoIiwiZm9yRWFjaE1ldGhvZE5vRGF0YSIsIm1ldGhvZCIsImZvckVhY2hNZXRob2RXaXRoRGF0YSIsIm1lcmdlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxTQUFSLENBQVo7QUFDQSxJQUFJQyxzQkFBc0JELFFBQVEsK0JBQVIsQ0FBMUI7O0FBRUEsSUFBSUUsdUJBQXVCO0FBQ3pCLGtCQUFnQjtBQURTLENBQTNCOztBQUlBLFNBQVNDLHFCQUFULENBQStCQyxPQUEvQixFQUF3Q0MsS0FBeEMsRUFBK0M7QUFDN0MsTUFBSSxDQUFDTixNQUFNTyxXQUFOLENBQWtCRixPQUFsQixDQUFELElBQStCTCxNQUFNTyxXQUFOLENBQWtCRixRQUFRLGNB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QjtBQUNELENBRkQ7O0FBSUF3QyxPQUFPQyxPQUFQLEdBQWlCaEMsUUFBakIiLCJmaWxlIjoiZGVmYXVsdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBub3JtYWxpemVIZWFkZXJOYW1lID0gcmVxdWlyZSgnLi9oZWxwZXJzL25vcm1hbGl6ZUhlYWRlck5hbWUnKTtcblxudmFyIERFRkFVTFRfQ09OVEVOVF9UWVBFID0ge1xuICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCdcbn07XG5cbmZ1bmN0aW9uIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCB2YWx1ZSkge1xuICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnMpICYmIHV0aWxzLmlzVW5kZWZpbmVkKGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddKSkge1xuICAgIGhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGVmYXVsdEFkYXB0ZXIoKSB7XG4gIHZhciBhZGFwdGVyO1xuICBpZiAodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBicm93c2VycyB1c2UgWEhSIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy94aHInKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3Igbm9kZSB1c2UgSFRUUCBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMvaHR0cCcpO1xuICB9XG4gIHJldHVybiBhZGFwdGVyO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGFkYXB0ZXI6IGdldERlZmF1bHRBZGFwdGVyKCksXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgJ0NvbnRlbnQtVHlwZScpO1xuICAgIGlmICh1dGlscy5pc0Zvcm1EYXRhKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0FycmF5QnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0J1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNTdHJlYW0oZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzRmlsZShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCbG9iKGRhdGEpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXJWaWV3KGRhdGEpKSB7XG4gICAgICByZXR1cm4gZGF0YS5idWZmZXI7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCcpO1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7IC8qIElnbm9yZSAqLyB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9XG59O1xuXG5kZWZhdWx0cy5oZWFkZXJzID0ge1xuICBjb21tb246IHtcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWZhdWx0cztcbiJdfQ==
}).call(this,require("XJF/FV"))
},{"./adapters/http":22,"./adapters/xhr":22,"./helpers/normalizeHeaderName":42,"./utils":45,"XJF/FV":46}],35:[function(require,module,exports){
'use strict';

module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJpbmQuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImJpbmQiLCJmbiIsInRoaXNBcmciLCJ3cmFwIiwiYXJncyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiaSIsImFwcGx5Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxJQUFULENBQWNDLEVBQWQsRUFBa0JDLE9BQWxCLEVBQTJCO0FBQzFDLFNBQU8sU0FBU0MsSUFBVCxHQUFnQjtBQUNyQixRQUFJQyxPQUFPLElBQUlDLEtBQUosQ0FBVUMsVUFBVUMsTUFBcEIsQ0FBWDtBQUNBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSixLQUFLRyxNQUF6QixFQUFpQ0MsR0FBakMsRUFBc0M7QUFDcENKLFdBQUtJLENBQUwsSUFBVUYsVUFBVUUsQ0FBVixDQUFWO0FBQ0Q7QUFDRCxXQUFPUCxHQUFHUSxLQUFILENBQVNQLE9BQVQsRUFBa0JFLElBQWxCLENBQVA7QUFDRCxHQU5EO0FBT0QsQ0FSRCIsImZpbGUiOiJiaW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH07XG59O1xuIl19
},{}],36:[function(require,module,exports){
'use strict';

// btoa polyfill for IE<10 courtesy https://github.com/davidchambers/Base64.js

var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

function E() {
  this.message = 'String contains an invalid character';
}
E.prototype = new Error();
E.prototype.code = 5;
E.prototype.name = 'InvalidCharacterError';

function btoa(input) {
  var str = String(input);
  var output = '';
  for (
  // initialize result and counter
  var block, charCode, idx = 0, map = chars;
  // if the next str index does not exist:
  //   change the mapping table to "="
  //   check if d has no fractional digits
  str.charAt(idx | 0) || (map = '=', idx % 1);
  // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
  output += map.charAt(63 & block >> 8 - idx % 1 * 8)) {
    charCode = str.charCodeAt(idx += 3 / 4);
    if (charCode > 0xFF) {
      throw new E();
    }
    block = block << 8 | charCode;
  }
  return output;
}

module.exports = btoa;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ0b2EuanMiXSwibmFtZXMiOlsiY2hhcnMiLCJFIiwibWVzc2FnZSIsInByb3RvdHlwZSIsIkVycm9yIiwiY29kZSIsIm5hbWUiLCJidG9hIiwiaW5wdXQiLCJzdHIiLCJTdHJpbmciLCJvdXRwdXQiLCJibG9jayIsImNoYXJDb2RlIiwiaWR4IiwibWFwIiwiY2hhckF0IiwiY2hhckNvZGVBdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBLElBQUlBLFFBQVEsbUVBQVo7O0FBRUEsU0FBU0MsQ0FBVCxHQUFhO0FBQ1gsT0FBS0MsT0FBTCxHQUFlLHNDQUFmO0FBQ0Q7QUFDREQsRUFBRUUsU0FBRixHQUFjLElBQUlDLEtBQUosRUFBZDtBQUNBSCxFQUFFRSxTQUFGLENBQVlFLElBQVosR0FBbUIsQ0FBbkI7QUFDQUosRUFBRUUsU0FBRixDQUFZRyxJQUFaLEdBQW1CLHVCQUFuQjs7QUFFQSxTQUFTQyxJQUFULENBQWNDLEtBQWQsRUFBcUI7QUFDbkIsTUFBSUMsTUFBTUMsT0FBT0YsS0FBUCxDQUFWO0FBQ0EsTUFBSUcsU0FBUyxFQUFiO0FBQ0E7QUFDRTtBQUNBLE1BQUlDLEtBQUosRUFBV0MsUUFBWCxFQUFxQkMsTUFBTSxDQUEzQixFQUE4QkMsTUFBTWYsS0FGdEM7QUFHRTtBQUNBO0FBQ0E7QUFDQVMsTUFBSU8sTUFBSixDQUFXRixNQUFNLENBQWpCLE1BQXdCQyxNQUFNLEdBQU4sRUFBV0QsTUFBTSxDQUF6QyxDQU5GO0FBT0U7QUFDQUgsWUFBVUksSUFBSUMsTUFBSixDQUFXLEtBQUtKLFNBQVMsSUFBSUUsTUFBTSxDQUFOLEdBQVUsQ0FBdkMsQ0FSWixFQVNFO0FBQ0FELGVBQVdKLElBQUlRLFVBQUosQ0FBZUgsT0FBTyxJQUFJLENBQTFCLENBQVg7QUFDQSxRQUFJRCxXQUFXLElBQWYsRUFBcUI7QUFDbkIsWUFBTSxJQUFJWixDQUFKLEVBQU47QUFDRDtBQUNEVyxZQUFRQSxTQUFTLENBQVQsR0FBYUMsUUFBckI7QUFDRDtBQUNELFNBQU9GLE1BQVA7QUFDRDs7QUFFRE8sT0FBT0MsT0FBUCxHQUFpQlosSUFBakIiLCJmaWxlIjoiYnRvYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gYnRvYSBwb2x5ZmlsbCBmb3IgSUU8MTAgY291cnRlc3kgaHR0cHM6Ly9naXRodWIuY29tL2RhdmlkY2hhbWJlcnMvQmFzZTY0LmpzXG5cbnZhciBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPSc7XG5cbmZ1bmN0aW9uIEUoKSB7XG4gIHRoaXMubWVzc2FnZSA9ICdTdHJpbmcgY29udGFpbnMgYW4gaW52YWxpZCBjaGFyYWN0ZXInO1xufVxuRS5wcm90b3R5cGUgPSBuZXcgRXJyb3I7XG5FLnByb3RvdHlwZS5jb2RlID0gNTtcbkUucHJvdG90eXBlLm5hbWUgPSAnSW52YWxpZENoYXJhY3RlckVycm9yJztcblxuZnVuY3Rpb24gYnRvYShpbnB1dCkge1xuICB2YXIgc3RyID0gU3RyaW5nKGlucHV0KTtcbiAgdmFyIG91dHB1dCA9ICcnO1xuICBmb3IgKFxuICAgIC8vIGluaXRpYWxpemUgcmVzdWx0IGFuZCBjb3VudGVyXG4gICAgdmFyIGJsb2NrLCBjaGFyQ29kZSwgaWR4ID0gMCwgbWFwID0gY2hhcnM7XG4gICAgLy8gaWYgdGhlIG5leHQgc3RyIGluZGV4IGRvZXMgbm90IGV4aXN0OlxuICAgIC8vICAgY2hhbmdlIHRoZSBtYXBwaW5nIHRhYmxlIHRvIFwiPVwiXG4gICAgLy8gICBjaGVjayBpZiBkIGhhcyBubyBmcmFjdGlvbmFsIGRpZ2l0c1xuICAgIHN0ci5jaGFyQXQoaWR4IHwgMCkgfHwgKG1hcCA9ICc9JywgaWR4ICUgMSk7XG4gICAgLy8gXCI4IC0gaWR4ICUgMSAqIDhcIiBnZW5lcmF0ZXMgdGhlIHNlcXVlbmNlIDIsIDQsIDYsIDhcbiAgICBvdXRwdXQgKz0gbWFwLmNoYXJBdCg2MyAmIGJsb2NrID4+IDggLSBpZHggJSAxICogOClcbiAgKSB7XG4gICAgY2hhckNvZGUgPSBzdHIuY2hhckNvZGVBdChpZHggKz0gMyAvIDQpO1xuICAgIGlmIChjaGFyQ29kZSA+IDB4RkYpIHtcbiAgICAgIHRocm93IG5ldyBFKCk7XG4gICAgfVxuICAgIGJsb2NrID0gYmxvY2sgPDwgOCB8IGNoYXJDb2RlO1xuICB9XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnRvYTtcbiJdfQ==
},{}],37:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

function encode(val) {
  return encodeURIComponent(val).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      }

      if (!utils.isArray(val)) {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkVVJMLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmVxdWlyZSIsImVuY29kZSIsInZhbCIsImVuY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2UiLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGRVUkwiLCJ1cmwiLCJwYXJhbXMiLCJwYXJhbXNTZXJpYWxpemVyIiwic2VyaWFsaXplZFBhcmFtcyIsImlzVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJwYXJ0cyIsImZvckVhY2giLCJzZXJpYWxpemUiLCJrZXkiLCJpc0FycmF5IiwicGFyc2VWYWx1ZSIsInYiLCJpc0RhdGUiLCJ0b0lTT1N0cmluZyIsImlzT2JqZWN0IiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJqb2luIiwiaW5kZXhPZiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7O0FBRUEsU0FBU0MsTUFBVCxDQUFnQkMsR0FBaEIsRUFBcUI7QUFDbkIsU0FBT0MsbUJBQW1CRCxHQUFuQixFQUNMRSxPQURLLENBQ0csT0FESCxFQUNZLEdBRFosRUFFTEEsT0FGSyxDQUVHLE9BRkgsRUFFWSxHQUZaLEVBR0xBLE9BSEssQ0FHRyxNQUhILEVBR1csR0FIWCxFQUlMQSxPQUpLLENBSUcsT0FKSCxFQUlZLEdBSlosRUFLTEEsT0FMSyxDQUtHLE1BTEgsRUFLVyxHQUxYLEVBTUxBLE9BTkssQ0FNRyxPQU5ILEVBTVksR0FOWixFQU9MQSxPQVBLLENBT0csT0FQSCxFQU9ZLEdBUFosQ0FBUDtBQVFEOztBQUVEOzs7Ozs7O0FBT0FDLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUJDLE1BQXZCLEVBQStCQyxnQkFBL0IsRUFBaUQ7QUFDaEU7QUFDQSxNQUFJLENBQUNELE1BQUwsRUFBYTtBQUNYLFdBQU9ELEdBQVA7QUFDRDs7QUFFRCxNQUFJRyxnQkFBSjtBQUNBLE1BQUlELGdCQUFKLEVBQXNCO0FBQ3BCQyx1QkFBbUJELGlCQUFpQkQsTUFBakIsQ0FBbkI7QUFDRCxHQUZELE1BRU8sSUFBSVYsTUFBTWEsaUJBQU4sQ0FBd0JILE1BQXhCLENBQUosRUFBcUM7QUFDMUNFLHVCQUFtQkYsT0FBT0ksUUFBUCxFQUFuQjtBQUNELEdBRk0sTUFFQTtBQUNMLFFBQUlDLFFBQVEsRUFBWjs7QUFFQWYsVUFBTWdCLE9BQU4sQ0FBY04sTUFBZCxFQUFzQixTQUFTTyxTQUFULENBQW1CZCxHQUFuQixFQUF3QmUsR0FBeEIsRUFBNkI7QUFDakQsVUFBSWYsUUFBUSxJQUFSLElBQWdCLE9BQU9BLEdBQVAsS0FBZSxXQUFuQyxFQUFnRDtBQUM5QztBQUNEOztBQUVELFVBQUlILE1BQU1tQixPQUFOLENBQWNoQixHQUFkLENBQUosRUFBd0I7QUFDdEJlLGNBQU1BLE1BQU0sSUFBWjtBQUNEOztBQUVELFVBQUksQ0FBQ2xCLE1BQU1tQixPQUFOLENBQWNoQixHQUFkLENBQUwsRUFBeUI7QUFDdkJBLGNBQU0sQ0FBQ0EsR0FBRCxDQUFOO0FBQ0Q7O0FBRURILFlBQU1nQixPQUFOLENBQWNiLEdBQWQsRUFBbUIsU0FBU2lCLFVBQVQsQ0FBb0JDLENBQXBCLEVBQXVCO0FBQ3hDLFlBQUlyQixNQUFNc0IsTUFBTixDQUFhRCxDQUFiLENBQUosRUFBcUI7QUFDbkJBLGNBQUlBLEVBQUVFLFdBQUYsRUFBSjtBQUNELFNBRkQsTUFFTyxJQUFJdkIsTUFBTXdCLFFBQU4sQ0FBZUgsQ0FBZixDQUFKLEVBQXVCO0FBQzVCQSxjQUFJSSxLQUFLQyxTQUFMLENBQWVMLENBQWYsQ0FBSjtBQUNEO0FBQ0ROLGNBQU1ZLElBQU4sQ0FBV3pCLE9BQU9nQixHQUFQLElBQWMsR0FBZCxHQUFvQmhCLE9BQU9tQixDQUFQLENBQS9CO0FBQ0QsT0FQRDtBQVFELEtBckJEOztBQXVCQVQsdUJBQW1CRyxNQUFNYSxJQUFOLENBQVcsR0FBWCxDQUFuQjtBQUNEOztBQUVELE1BQUloQixnQkFBSixFQUFzQjtBQUNwQkgsV0FBTyxDQUFDQSxJQUFJb0IsT0FBSixDQUFZLEdBQVosTUFBcUIsQ0FBQyxDQUF0QixHQUEwQixHQUExQixHQUFnQyxHQUFqQyxJQUF3Q2pCLGdCQUEvQztBQUNEOztBQUVELFNBQU9ILEdBQVA7QUFDRCxDQTdDRCIsImZpbGUiOiJidWlsZFVSTC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBlbmNvZGUodmFsKSB7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQodmFsKS5cbiAgICByZXBsYWNlKC8lNDAvZ2ksICdAJykuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYnVpbGRVUkwodXJsLCBwYXJhbXMsIHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuXG4gIHZhciBzZXJpYWxpemVkUGFyYW1zO1xuICBpZiAocGFyYW1zU2VyaWFsaXplcikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcyk7XG4gIH0gZWxzZSBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMocGFyYW1zKSkge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJhbXMudG9TdHJpbmcoKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgIHV0aWxzLmZvckVhY2gocGFyYW1zLCBmdW5jdGlvbiBzZXJpYWxpemUodmFsLCBrZXkpIHtcbiAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdHlwZW9mIHZhbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIGtleSA9IGtleSArICdbXSc7XG4gICAgICB9XG5cbiAgICAgIGlmICghdXRpbHMuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIHZhbCA9IFt2YWxdO1xuICAgICAgfVxuXG4gICAgICB1dGlscy5mb3JFYWNoKHZhbCwgZnVuY3Rpb24gcGFyc2VWYWx1ZSh2KSB7XG4gICAgICAgIGlmICh1dGlscy5pc0RhdGUodikpIHtcbiAgICAgICAgICB2ID0gdi50b0lTT1N0cmluZygpO1xuICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzT2JqZWN0KHYpKSB7XG4gICAgICAgICAgdiA9IEpTT04uc3RyaW5naWZ5KHYpO1xuICAgICAgICB9XG4gICAgICAgIHBhcnRzLnB1c2goZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodikpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiJdfQ==
},{"./../utils":45}],38:[function(require,module,exports){
'use strict';

/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */

module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbWJpbmVVUkxzLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21iaW5lVVJMcyIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7Ozs7OztBQU9BQSxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLFdBQVQsQ0FBcUJDLE9BQXJCLEVBQThCQyxXQUE5QixFQUEyQztBQUMxRCxTQUFPQSxjQUNIRCxRQUFRRSxPQUFSLENBQWdCLE1BQWhCLEVBQXdCLEVBQXhCLElBQThCLEdBQTlCLEdBQW9DRCxZQUFZQyxPQUFaLENBQW9CLE1BQXBCLEVBQTRCLEVBQTVCLENBRGpDLEdBRUhGLE9BRko7QUFHRCxDQUpEIiwiZmlsZSI6ImNvbWJpbmVVUkxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIl19
},{}],39:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));

      if (utils.isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }

      if (utils.isString(path)) {
        cookie.push('path=' + path);
      }

      if (utils.isString(domain)) {
        cookie.push('domain=' + domain);
      }

      if (secure === true) {
        cookie.push('secure');
      }

      document.cookie = cookie.join('; ');
    },

    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },

    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :

// Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvb2tpZXMuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImlzU3RhbmRhcmRCcm93c2VyRW52Iiwic3RhbmRhcmRCcm93c2VyRW52Iiwid3JpdGUiLCJuYW1lIiwidmFsdWUiLCJleHBpcmVzIiwicGF0aCIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJpc051bWJlciIsIkRhdGUiLCJ0b0dNVFN0cmluZyIsImlzU3RyaW5nIiwiZG9jdW1lbnQiLCJqb2luIiwicmVhZCIsIm1hdGNoIiwiUmVnRXhwIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicmVtb3ZlIiwibm93Iiwibm9uU3RhbmRhcmRCcm93c2VyRW52Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRQyxRQUFRLFlBQVIsQ0FBWjs7QUFFQUMsT0FBT0MsT0FBUCxHQUNFSCxNQUFNSSxvQkFBTjs7QUFFQTtBQUNDLFNBQVNDLGtCQUFULEdBQThCO0FBQzdCLFNBQU87QUFDTEMsV0FBTyxTQUFTQSxLQUFULENBQWVDLElBQWYsRUFBcUJDLEtBQXJCLEVBQTRCQyxPQUE1QixFQUFxQ0MsSUFBckMsRUFBMkNDLE1BQTNDLEVBQW1EQyxNQUFuRCxFQUEyRDtBQUNoRSxVQUFJQyxTQUFTLEVBQWI7QUFDQUEsYUFBT0MsSUFBUCxDQUFZUCxPQUFPLEdBQVAsR0FBYVEsbUJBQW1CUCxLQUFuQixDQUF6Qjs7QUFFQSxVQUFJUixNQUFNZ0IsUUFBTixDQUFlUCxPQUFmLENBQUosRUFBNkI7QUFDM0JJLGVBQU9DLElBQVAsQ0FBWSxhQUFhLElBQUlHLElBQUosQ0FBU1IsT0FBVCxFQUFrQlMsV0FBbEIsRUFBekI7QUFDRDs7QUFFRCxVQUFJbEIsTUFBTW1CLFFBQU4sQ0FBZVQsSUFBZixDQUFKLEVBQTBCO0FBQ3hCRyxlQUFPQyxJQUFQLENBQVksVUFBVUosSUFBdEI7QUFDRDs7QUFFRCxVQUFJVixNQUFNbUIsUUFBTixDQUFlUixNQUFmLENBQUosRUFBNEI7QUFDMUJFLGVBQU9DLElBQVAsQ0FBWSxZQUFZSCxNQUF4QjtBQUNEOztBQUVELFVBQUlDLFdBQVcsSUFBZixFQUFxQjtBQUNuQkMsZUFBT0MsSUFBUCxDQUFZLFFBQVo7QUFDRDs7QUFFRE0sZUFBU1AsTUFBVCxHQUFrQkEsT0FBT1EsSUFBUCxDQUFZLElBQVosQ0FBbEI7QUFDRCxLQXRCSTs7QUF3QkxDLFVBQU0sU0FBU0EsSUFBVCxDQUFjZixJQUFkLEVBQW9CO0FBQ3hCLFVBQUlnQixRQUFRSCxTQUFTUCxNQUFULENBQWdCVSxLQUFoQixDQUFzQixJQUFJQyxNQUFKLENBQVcsZUFBZWpCLElBQWYsR0FBc0IsV0FBakMsQ0FBdEIsQ0FBWjtBQUNBLGFBQVFnQixRQUFRRSxtQkFBbUJGLE1BQU0sQ0FBTixDQUFuQixDQUFSLEdBQXVDLElBQS9DO0FBQ0QsS0EzQkk7O0FBNkJMRyxZQUFRLFNBQVNBLE1BQVQsQ0FBZ0JuQixJQUFoQixFQUFzQjtBQUM1QixXQUFLRCxLQUFMLENBQVdDLElBQVgsRUFBaUIsRUFBakIsRUFBcUJVLEtBQUtVLEdBQUwsS0FBYSxRQUFsQztBQUNEO0FBL0JJLEdBQVA7QUFpQ0QsQ0FsQ0QsRUFIQTs7QUF1Q0E7QUFDQyxTQUFTQyxxQkFBVCxHQUFpQztBQUNoQyxTQUFPO0FBQ0x0QixXQUFPLFNBQVNBLEtBQVQsR0FBaUIsQ0FBRSxDQURyQjtBQUVMZ0IsVUFBTSxTQUFTQSxJQUFULEdBQWdCO0FBQUUsYUFBTyxJQUFQO0FBQWMsS0FGakM7QUFHTEksWUFBUSxTQUFTQSxNQUFULEdBQWtCLENBQUU7QUFIdkIsR0FBUDtBQUtELENBTkQsRUF6Q0YiLCJmaWxlIjoiY29va2llcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgdXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgdmFyIGNvb2tpZSA9IFtdO1xuICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2V4cGlyZXM9JyArIG5ldyBEYXRlKGV4cGlyZXMpLnRvR01UU3RyaW5nKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKHBhdGgpKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGRvbWFpbikpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZG9tYWluPScgKyBkb21haW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlY3VyZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdzZWN1cmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgICAgfSxcblxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChuZXcgUmVnRXhwKCcoXnw7XFxcXHMqKSgnICsgbmFtZSArICcpPShbXjtdKiknKSk7XG4gICAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZShuYW1lKSB7XG4gICAgICAgIHRoaXMud3JpdGUobmFtZSwgJycsIERhdGUubm93KCkgLSA4NjQwMDAwMCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52ICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUoKSB7fSxcbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7fVxuICAgIH07XG4gIH0pKClcbik7XG4iXX0=
},{"./../utils":45}],40:[function(require,module,exports){
'use strict';

/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */

module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return (/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url)
  );
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzQWJzb2x1dGVVUkwuanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImlzQWJzb2x1dGVVUkwiLCJ1cmwiLCJ0ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7Ozs7OztBQU1BQSxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLGFBQVQsQ0FBdUJDLEdBQXZCLEVBQTRCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLFNBQU8saUNBQWdDQyxJQUFoQyxDQUFxQ0QsR0FBckM7QUFBUDtBQUNELENBTEQiLCJmaWxlIjoiaXNBYnNvbHV0ZVVSTC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQWJzb2x1dGVVUkwodXJsKSB7XG4gIC8vIEEgVVJMIGlzIGNvbnNpZGVyZWQgYWJzb2x1dGUgaWYgaXQgYmVnaW5zIHdpdGggXCI8c2NoZW1lPjovL1wiIG9yIFwiLy9cIiAocHJvdG9jb2wtcmVsYXRpdmUgVVJMKS5cbiAgLy8gUkZDIDM5ODYgZGVmaW5lcyBzY2hlbWUgbmFtZSBhcyBhIHNlcXVlbmNlIG9mIGNoYXJhY3RlcnMgYmVnaW5uaW5nIHdpdGggYSBsZXR0ZXIgYW5kIGZvbGxvd2VkXG4gIC8vIGJ5IGFueSBjb21iaW5hdGlvbiBvZiBsZXR0ZXJzLCBkaWdpdHMsIHBsdXMsIHBlcmlvZCwgb3IgaHlwaGVuLlxuICByZXR1cm4gL14oW2Etel1bYS16XFxkXFwrXFwtXFwuXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59O1xuIl19
},{}],41:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

module.exports = utils.isStandardBrowserEnv() ?

// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;

  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */
  function resolveURL(url) {
    var href = url;

    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }

    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }

  originURL = resolveURL(window.location.href);

  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */
  return function isURLSameOrigin(requestURL) {
    var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() :

// Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlzVVJMU2FtZU9yaWdpbi5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJzdGFuZGFyZEJyb3dzZXJFbnYiLCJtc2llIiwidGVzdCIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwib3JpZ2luVVJMIiwicmVzb2x2ZVVSTCIsInVybCIsImhyZWYiLCJzZXRBdHRyaWJ1dGUiLCJwcm90b2NvbCIsInJlcGxhY2UiLCJob3N0Iiwic2VhcmNoIiwiaGFzaCIsImhvc3RuYW1lIiwicG9ydCIsInBhdGhuYW1lIiwiY2hhckF0Iiwid2luZG93IiwibG9jYXRpb24iLCJpc1VSTFNhbWVPcmlnaW4iLCJyZXF1ZXN0VVJMIiwicGFyc2VkIiwiaXNTdHJpbmciLCJub25TdGFuZGFyZEJyb3dzZXJFbnYiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQUlBLFFBQVFDLFFBQVEsWUFBUixDQUFaOztBQUVBQyxPQUFPQyxPQUFQLEdBQ0VILE1BQU1JLG9CQUFOOztBQUVBO0FBQ0E7QUFDQyxTQUFTQyxrQkFBVCxHQUE4QjtBQUM3QixNQUFJQyxPQUFPLGtCQUFrQkMsSUFBbEIsQ0FBdUJDLFVBQVVDLFNBQWpDLENBQVg7QUFDQSxNQUFJQyxpQkFBaUJDLFNBQVNDLGFBQVQsQ0FBdUIsR0FBdkIsQ0FBckI7QUFDQSxNQUFJQyxTQUFKOztBQUVBOzs7Ozs7QUFNQSxXQUFTQyxVQUFULENBQW9CQyxHQUFwQixFQUF5QjtBQUN2QixRQUFJQyxPQUFPRCxHQUFYOztBQUVBLFFBQUlULElBQUosRUFBVTtBQUNSO0FBQ0FJLHFCQUFlTyxZQUFmLENBQTRCLE1BQTVCLEVBQW9DRCxJQUFwQztBQUNBQSxhQUFPTixlQUFlTSxJQUF0QjtBQUNEOztBQUVETixtQkFBZU8sWUFBZixDQUE0QixNQUE1QixFQUFvQ0QsSUFBcEM7O0FBRUE7QUFDQSxXQUFPO0FBQ0xBLFlBQU1OLGVBQWVNLElBRGhCO0FBRUxFLGdCQUFVUixlQUFlUSxRQUFmLEdBQTBCUixlQUFlUSxRQUFmLENBQXdCQyxPQUF4QixDQUFnQyxJQUFoQyxFQUFzQyxFQUF0QyxDQUExQixHQUFzRSxFQUYzRTtBQUdMQyxZQUFNVixlQUFlVSxJQUhoQjtBQUlMQyxjQUFRWCxlQUFlVyxNQUFmLEdBQXdCWCxlQUFlVyxNQUFmLENBQXNCRixPQUF0QixDQUE4QixLQUE5QixFQUFxQyxFQUFyQyxDQUF4QixHQUFtRSxFQUp0RTtBQUtMRyxZQUFNWixlQUFlWSxJQUFmLEdBQXNCWixlQUFlWSxJQUFmLENBQW9CSCxPQUFwQixDQUE0QixJQUE1QixFQUFrQyxFQUFsQyxDQUF0QixHQUE4RCxFQUwvRDtBQU1MSSxnQkFBVWIsZUFBZWEsUUFOcEI7QUFPTEMsWUFBTWQsZUFBZWMsSUFQaEI7QUFRTEMsZ0JBQVdmLGVBQWVlLFFBQWYsQ0FBd0JDLE1BQXhCLENBQStCLENBQS9CLE1BQXNDLEdBQXZDLEdBQ0FoQixlQUFlZSxRQURmLEdBRUEsTUFBTWYsZUFBZWU7QUFWMUIsS0FBUDtBQVlEOztBQUVEWixjQUFZQyxXQUFXYSxPQUFPQyxRQUFQLENBQWdCWixJQUEzQixDQUFaOztBQUVBOzs7Ozs7QUFNQSxTQUFPLFNBQVNhLGVBQVQsQ0FBeUJDLFVBQXpCLEVBQXFDO0FBQzFDLFFBQUlDLFNBQVUvQixNQUFNZ0MsUUFBTixDQUFlRixVQUFmLENBQUQsR0FBK0JoQixXQUFXZ0IsVUFBWCxDQUEvQixHQUF3REEsVUFBckU7QUFDQSxXQUFRQyxPQUFPYixRQUFQLEtBQW9CTCxVQUFVSyxRQUE5QixJQUNGYSxPQUFPWCxJQUFQLEtBQWdCUCxVQUFVTyxJQURoQztBQUVELEdBSkQ7QUFLRCxDQWxERCxFQUpBOztBQXdEQTtBQUNDLFNBQVNhLHFCQUFULEdBQWlDO0FBQ2hDLFNBQU8sU0FBU0osZUFBVCxHQUEyQjtBQUNoQyxXQUFPLElBQVA7QUFDRCxHQUZEO0FBR0QsQ0FKRCxFQTFERiIsImZpbGUiOiJpc1VSTFNhbWVPcmlnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgKGZ1bmN0aW9uIHN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICB2YXIgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIHZhciBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0J3MgY29tcG9uZW50c1xuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIFVSTCB0byBiZSBwYXJzZWRcbiAgICAqIEByZXR1cm5zIHtPYmplY3R9XG4gICAgKi9cbiAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgdmFyIGhyZWYgPSB1cmw7XG5cbiAgICAgIGlmIChtc2llKSB7XG4gICAgICAgIC8vIElFIG5lZWRzIGF0dHJpYnV0ZSBzZXQgdHdpY2UgdG8gbm9ybWFsaXplIHByb3BlcnRpZXNcbiAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgIGhyZWYgPSB1cmxQYXJzaW5nTm9kZS5ocmVmO1xuICAgICAgfVxuXG4gICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgLy8gdXJsUGFyc2luZ05vZGUgcHJvdmlkZXMgdGhlIFVybFV0aWxzIGludGVyZmFjZSAtIGh0dHA6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmx1dGlsc1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgcHJvdG9jb2w6IHVybFBhcnNpbmdOb2RlLnByb3RvY29sID8gdXJsUGFyc2luZ05vZGUucHJvdG9jb2wucmVwbGFjZSgvOiQvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdDogdXJsUGFyc2luZ05vZGUuaG9zdCxcbiAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICBoYXNoOiB1cmxQYXJzaW5nTm9kZS5oYXNoID8gdXJsUGFyc2luZ05vZGUuaGFzaC5yZXBsYWNlKC9eIy8sICcnKSA6ICcnLFxuICAgICAgICBob3N0bmFtZTogdXJsUGFyc2luZ05vZGUuaG9zdG5hbWUsXG4gICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgIHBhdGhuYW1lOiAodXJsUGFyc2luZ05vZGUucGF0aG5hbWUuY2hhckF0KDApID09PSAnLycpID9cbiAgICAgICAgICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAgICAgICAgICcvJyArIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lXG4gICAgICB9O1xuICAgIH1cblxuICAgIG9yaWdpblVSTCA9IHJlc29sdmVVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXG4gICAgLyoqXG4gICAgKiBEZXRlcm1pbmUgaWYgYSBVUkwgc2hhcmVzIHRoZSBzYW1lIG9yaWdpbiBhcyB0aGUgY3VycmVudCBsb2NhdGlvblxuICAgICpcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSByZXF1ZXN0VVJMIFRoZSBVUkwgdG8gdGVzdFxuICAgICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4sIG90aGVyd2lzZSBmYWxzZVxuICAgICovXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICB2YXIgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgICAgcGFyc2VkLmhvc3QgPT09IG9yaWdpblVSTC5ob3N0KTtcbiAgICB9O1xuICB9KSgpIDpcblxuICAvLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnZzICh3ZWIgd29ya2VycywgcmVhY3QtbmF0aXZlKSBsYWNrIG5lZWRlZCBzdXBwb3J0LlxuICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICB9KSgpXG4pO1xuIl19
},{"./../utils":45}],42:[function(require,module,exports){
'use strict';

var utils = require('../utils');

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vcm1hbGl6ZUhlYWRlck5hbWUuanMiXSwibmFtZXMiOlsidXRpbHMiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5vcm1hbGl6ZUhlYWRlck5hbWUiLCJoZWFkZXJzIiwibm9ybWFsaXplZE5hbWUiLCJmb3JFYWNoIiwicHJvY2Vzc0hlYWRlciIsInZhbHVlIiwibmFtZSIsInRvVXBwZXJDYXNlIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxRQUFRQyxRQUFRLFVBQVIsQ0FBWjs7QUFFQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxtQkFBVCxDQUE2QkMsT0FBN0IsRUFBc0NDLGNBQXRDLEVBQXNEO0FBQ3JFTixRQUFNTyxPQUFOLENBQWNGLE9BQWQsRUFBdUIsU0FBU0csYUFBVCxDQUF1QkMsS0FBdkIsRUFBOEJDLElBQTlCLEVBQW9DO0FBQ3pELFFBQUlBLFNBQVNKLGNBQVQsSUFBMkJJLEtBQUtDLFdBQUwsT0FBdUJMLGVBQWVLLFdBQWYsRUFBdEQsRUFBb0Y7QUFDbEZOLGNBQVFDLGNBQVIsSUFBMEJHLEtBQTFCO0FBQ0EsYUFBT0osUUFBUUssSUFBUixDQUFQO0FBQ0Q7QUFDRixHQUxEO0FBTUQsQ0FQRCIsImZpbGUiOiJub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIl19
},{"../utils":45}],43:[function(require,module,exports){
'use strict';

var utils = require('./../utils');

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) {
    return parsed;
  }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlSGVhZGVycy5qcyJdLCJuYW1lcyI6WyJ1dGlscyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2VIZWFkZXJzIiwiaGVhZGVycyIsInBhcnNlZCIsImtleSIsInZhbCIsImkiLCJmb3JFYWNoIiwic3BsaXQiLCJwYXJzZXIiLCJsaW5lIiwiaW5kZXhPZiIsInRyaW0iLCJzdWJzdHIiLCJ0b0xvd2VyQ2FzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsUUFBUUMsUUFBUSxZQUFSLENBQVo7O0FBRUE7Ozs7Ozs7Ozs7Ozs7QUFhQUMsT0FBT0MsT0FBUCxHQUFpQixTQUFTQyxZQUFULENBQXNCQyxPQUF0QixFQUErQjtBQUM5QyxNQUFJQyxTQUFTLEVBQWI7QUFDQSxNQUFJQyxHQUFKO0FBQ0EsTUFBSUMsR0FBSjtBQUNBLE1BQUlDLENBQUo7O0FBRUEsTUFBSSxDQUFDSixPQUFMLEVBQWM7QUFBRSxXQUFPQyxNQUFQO0FBQWdCOztBQUVoQ04sUUFBTVUsT0FBTixDQUFjTCxRQUFRTSxLQUFSLENBQWMsSUFBZCxDQUFkLEVBQW1DLFNBQVNDLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCO0FBQ3ZESixRQUFJSSxLQUFLQyxPQUFMLENBQWEsR0FBYixDQUFKO0FBQ0FQLFVBQU1QLE1BQU1lLElBQU4sQ0FBV0YsS0FBS0csTUFBTCxDQUFZLENBQVosRUFBZVAsQ0FBZixDQUFYLEVBQThCUSxXQUE5QixFQUFOO0FBQ0FULFVBQU1SLE1BQU1lLElBQU4sQ0FBV0YsS0FBS0csTUFBTCxDQUFZUCxJQUFJLENBQWhCLENBQVgsQ0FBTjs7QUFFQSxRQUFJRixHQUFKLEVBQVM7QUFDUEQsYUFBT0MsR0FBUCxJQUFjRCxPQUFPQyxHQUFQLElBQWNELE9BQU9DLEdBQVAsSUFBYyxJQUFkLEdBQXFCQyxHQUFuQyxHQUF5Q0EsR0FBdkQ7QUFDRDtBQUNGLEdBUkQ7O0FBVUEsU0FBT0YsTUFBUDtBQUNELENBbkJEIiwiZmlsZSI6InBhcnNlSGVhZGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vKipcbiAqIFBhcnNlIGhlYWRlcnMgaW50byBhbiBvYmplY3RcbiAqXG4gKiBgYGBcbiAqIERhdGU6IFdlZCwgMjcgQXVnIDIwMTQgMDg6NTg6NDkgR01UXG4gKiBDb250ZW50LVR5cGU6IGFwcGxpY2F0aW9uL2pzb25cbiAqIENvbm5lY3Rpb246IGtlZXAtYWxpdmVcbiAqIFRyYW5zZmVyLUVuY29kaW5nOiBjaHVua2VkXG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaGVhZGVycyBIZWFkZXJzIG5lZWRpbmcgdG8gYmUgcGFyc2VkXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhoZWFkZXJzKSB7XG4gIHZhciBwYXJzZWQgPSB7fTtcbiAgdmFyIGtleTtcbiAgdmFyIHZhbDtcbiAgdmFyIGk7XG5cbiAgaWYgKCFoZWFkZXJzKSB7IHJldHVybiBwYXJzZWQ7IH1cblxuICB1dGlscy5mb3JFYWNoKGhlYWRlcnMuc3BsaXQoJ1xcbicpLCBmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSB1dGlscy50cmltKGxpbmUuc3Vic3RyKDAsIGkpKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoaSArIDEpKTtcblxuICAgIGlmIChrZXkpIHtcbiAgICAgIHBhcnNlZFtrZXldID0gcGFyc2VkW2tleV0gPyBwYXJzZWRba2V5XSArICcsICcgKyB2YWwgOiB2YWw7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcGFyc2VkO1xufTtcbiJdfQ==
},{"./../utils":45}],44:[function(require,module,exports){
'use strict';

/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */

module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNwcmVhZC5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic3ByZWFkIiwiY2FsbGJhY2siLCJ3cmFwIiwiYXJyIiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkFBLE9BQU9DLE9BQVAsR0FBaUIsU0FBU0MsTUFBVCxDQUFnQkMsUUFBaEIsRUFBMEI7QUFDekMsU0FBTyxTQUFTQyxJQUFULENBQWNDLEdBQWQsRUFBbUI7QUFDeEIsV0FBT0YsU0FBU0csS0FBVCxDQUFlLElBQWYsRUFBcUJELEdBQXJCLENBQVA7QUFDRCxHQUZEO0FBR0QsQ0FKRCIsImZpbGUiOiJzcHJlYWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iXX0=
},{}],45:[function(require,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var bind = require('./helpers/bind');
var isBuffer = require('is-buffer');

/*global toString:true*/

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return typeof FormData !== 'undefined' && val instanceof FormData;
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && val.buffer instanceof ArrayBuffer;
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object';
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object' && !isArray(obj)) {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge() /* obj1, obj2, obj3, ... */{
  var result = {};
  function assignValue(val, key) {
    if (_typeof(result[key]) === 'object' && (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object') {
      result[key] = merge(result[key], val);
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"./helpers/bind":35,"is-buffer":47}],46:[function(require,module,exports){
'use strict';

// shim for using process in browser

var process = module.exports = {};

process.nextTick = function () {
    var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
    var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

    if (canSetImmediate) {
        return function (f) {
            return window.setImmediate(f);
        };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLElBQUlBLFVBQVVDLE9BQU9DLE9BQVAsR0FBaUIsRUFBL0I7O0FBRUFGLFFBQVFHLFFBQVIsR0FBb0IsWUFBWTtBQUM1QixRQUFJQyxrQkFBa0IsT0FBT0MsTUFBUCxLQUFrQixXQUFsQixJQUNuQkEsT0FBT0MsWUFEVjtBQUVBLFFBQUlDLFVBQVUsT0FBT0YsTUFBUCxLQUFrQixXQUFsQixJQUNYQSxPQUFPRyxXQURJLElBQ1dILE9BQU9JLGdCQURoQzs7QUFJQSxRQUFJTCxlQUFKLEVBQXFCO0FBQ2pCLGVBQU8sVUFBVU0sQ0FBVixFQUFhO0FBQUUsbUJBQU9MLE9BQU9DLFlBQVAsQ0FBb0JJLENBQXBCLENBQVA7QUFBK0IsU0FBckQ7QUFDSDs7QUFFRCxRQUFJSCxPQUFKLEVBQWE7QUFDVCxZQUFJSSxRQUFRLEVBQVo7QUFDQU4sZUFBT0ksZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsVUFBVUcsRUFBVixFQUFjO0FBQzdDLGdCQUFJQyxTQUFTRCxHQUFHQyxNQUFoQjtBQUNBLGdCQUFJLENBQUNBLFdBQVdSLE1BQVgsSUFBcUJRLFdBQVcsSUFBakMsS0FBMENELEdBQUdFLElBQUgsS0FBWSxjQUExRCxFQUEwRTtBQUN0RUYsbUJBQUdHLGVBQUg7QUFDQSxvQkFBSUosTUFBTUssTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ2xCLHdCQUFJQyxLQUFLTixNQUFNTyxLQUFOLEVBQVQ7QUFDQUQ7QUFDSDtBQUNKO0FBQ0osU0FURCxFQVNHLElBVEg7O0FBV0EsZUFBTyxTQUFTZCxRQUFULENBQWtCYyxFQUFsQixFQUFzQjtBQUN6Qk4sa0JBQU1RLElBQU4sQ0FBV0YsRUFBWDtBQUNBWixtQkFBT0csV0FBUCxDQUFtQixjQUFuQixFQUFtQyxHQUFuQztBQUNILFNBSEQ7QUFJSDs7QUFFRCxXQUFPLFNBQVNMLFFBQVQsQ0FBa0JjLEVBQWxCLEVBQXNCO0FBQ3pCRyxtQkFBV0gsRUFBWCxFQUFlLENBQWY7QUFDSCxLQUZEO0FBR0gsQ0FqQ2tCLEVBQW5COztBQW1DQWpCLFFBQVFxQixLQUFSLEdBQWdCLFNBQWhCO0FBQ0FyQixRQUFRc0IsT0FBUixHQUFrQixJQUFsQjtBQUNBdEIsUUFBUXVCLEdBQVIsR0FBYyxFQUFkO0FBQ0F2QixRQUFRd0IsSUFBUixHQUFlLEVBQWY7O0FBRUEsU0FBU0MsSUFBVCxHQUFnQixDQUFFOztBQUVsQnpCLFFBQVEwQixFQUFSLEdBQWFELElBQWI7QUFDQXpCLFFBQVEyQixXQUFSLEdBQXNCRixJQUF0QjtBQUNBekIsUUFBUTRCLElBQVIsR0FBZUgsSUFBZjtBQUNBekIsUUFBUTZCLEdBQVIsR0FBY0osSUFBZDtBQUNBekIsUUFBUThCLGNBQVIsR0FBeUJMLElBQXpCO0FBQ0F6QixRQUFRK0Isa0JBQVIsR0FBNkJOLElBQTdCO0FBQ0F6QixRQUFRZ0MsSUFBUixHQUFlUCxJQUFmOztBQUVBekIsUUFBUWlDLE9BQVIsR0FBa0IsVUFBVUMsSUFBVixFQUFnQjtBQUM5QixVQUFNLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0gsQ0FGRDs7QUFJQTtBQUNBbkMsUUFBUW9DLEdBQVIsR0FBYyxZQUFZO0FBQUUsV0FBTyxHQUFQO0FBQVksQ0FBeEM7QUFDQXBDLFFBQVFxQyxLQUFSLEdBQWdCLFVBQVVDLEdBQVYsRUFBZTtBQUMzQixVQUFNLElBQUlILEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0gsQ0FGRCIsImZpbGUiOiJicm93c2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG4iXX0=
},{}],47:[function(require,module,exports){
'use strict';

/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

// The _isBuffer check is for Safari 5-7 support, because it's missing
// Object.prototype.constructor. Remove this eventually
module.exports = function (obj) {
  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
};

function isBuffer(obj) {
  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

// For Node v0.10 support. Remove this eventually.
function isSlowBuffer(obj) {
  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJvYmoiLCJpc0J1ZmZlciIsImlzU2xvd0J1ZmZlciIsIl9pc0J1ZmZlciIsImNvbnN0cnVjdG9yIiwicmVhZEZsb2F0TEUiLCJzbGljZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQUEsT0FBT0MsT0FBUCxHQUFpQixVQUFVQyxHQUFWLEVBQWU7QUFDOUIsU0FBT0EsT0FBTyxJQUFQLEtBQWdCQyxTQUFTRCxHQUFULEtBQWlCRSxhQUFhRixHQUFiLENBQWpCLElBQXNDLENBQUMsQ0FBQ0EsSUFBSUcsU0FBNUQsQ0FBUDtBQUNELENBRkQ7O0FBSUEsU0FBU0YsUUFBVCxDQUFtQkQsR0FBbkIsRUFBd0I7QUFDdEIsU0FBTyxDQUFDLENBQUNBLElBQUlJLFdBQU4sSUFBcUIsT0FBT0osSUFBSUksV0FBSixDQUFnQkgsUUFBdkIsS0FBb0MsVUFBekQsSUFBdUVELElBQUlJLFdBQUosQ0FBZ0JILFFBQWhCLENBQXlCRCxHQUF6QixDQUE5RTtBQUNEOztBQUVEO0FBQ0EsU0FBU0UsWUFBVCxDQUF1QkYsR0FBdkIsRUFBNEI7QUFDMUIsU0FBTyxPQUFPQSxJQUFJSyxXQUFYLEtBQTJCLFVBQTNCLElBQXlDLE9BQU9MLElBQUlNLEtBQVgsS0FBcUIsVUFBOUQsSUFBNEVMLFNBQVNELElBQUlNLEtBQUosQ0FBVSxDQUFWLEVBQWEsQ0FBYixDQUFULENBQW5GO0FBQ0QiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcbiAqIERldGVybWluZSBpZiBhbiBvYmplY3QgaXMgYSBCdWZmZXJcbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iXX0=
},{}],48:[function(require,module,exports){
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
* Vue Material v0.7.4
* Made with love by Marcos Moura
* Released under the MIT License.
*/
!function (t, e) {
  "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) ? module.exports = e(require("vue")) : "function" == typeof define && define.amd ? define(["vue"], e) : "object" == (typeof exports === "undefined" ? "undefined" : _typeof(exports)) ? exports.VueMaterial = e(require("vue")) : t.VueMaterial = e(t.Vue);
}(undefined, function (t) {
  return function (t) {
    function e(i) {
      if (n[i]) return n[i].exports;var o = n[i] = { i: i, l: !1, exports: {} };return t[i].call(o.exports, o, o.exports, e), o.l = !0, o.exports;
    }var n = {};return e.m = t, e.c = n, e.i = function (t) {
      return t;
    }, e.d = function (t, n, i) {
      e.o(t, n) || Object.defineProperty(t, n, { configurable: !1, enumerable: !0, get: i });
    }, e.n = function (t) {
      var n = t && t.__esModule ? function () {
        return t.default;
      } : function () {
        return t;
      };return e.d(n, "a", n), n;
    }, e.o = function (t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }, e.p = "/", e(e.s = 481);
  }([function (t, e) {
    t.exports = function (t, e, n, i, o) {
      var a,
          r = t = t || {},
          s = _typeof(t.default);"object" !== s && "function" !== s || (a = t, r = t.default);var d = "function" == typeof r ? r.options : r;e && (d.render = e.render, d.staticRenderFns = e.staticRenderFns), i && (d._scopeId = i);var l;if (o ? (l = function l(t) {
        t = t || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext, t || "undefined" == typeof __VUE_SSR_CONTEXT__ || (t = __VUE_SSR_CONTEXT__), n && n.call(this, t), t && t._registeredComponents && t._registeredComponents.add(o);
      }, d._ssrRegister = l) : n && (l = n), l) {
        var c = d.functional,
            u = c ? d.render : d.beforeCreate;c ? d.render = function (t, e) {
          return l.call(e), u(t, e);
        } : d.beforeCreate = u ? [].concat(u, l) : [l];
      }return { esModule: a, exports: r, options: d };
    };
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      if (!t) return null;var e = t.mdTheme;return e || "md-theme" !== t.$options._componentTag || (e = t.mdName), e || i(t.$parent);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { props: { mdTheme: String }, computed: { mdEffectiveTheme: function mdEffectiveTheme() {
          return i(this) || this.$material.currentTheme;
        }, themeClass: function themeClass() {
          return this.$material.prefix + this.mdEffectiveTheme;
        } }, watch: { mdTheme: function mdTheme(t) {
          this.$material.useTheme(t);
        } }, beforeMount: function beforeMount() {
        var t = this.mdTheme;this.$material.useTheme(t ? t : "default");
      } }, t.exports = e.default;
  }, function (t, e) {
    var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();"number" == typeof __g && (__g = n);
  }, function (t, e, n) {
    t.exports = !n(5)(function () {
      return 7 != Object.defineProperty({}, "a", { get: function get() {
          return 7;
        } }).a;
    });
  }, function (t, e) {
    var n = t.exports = { version: "2.4.0" };"number" == typeof __e && (__e = n);
  }, function (t, e) {
    t.exports = function (t) {
      try {
        return !!t();
      } catch (t) {
        return !0;
      }
    };
  }, function (t, e) {
    t.exports = function (t) {
      return "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? null !== t : "function" == typeof t;
    };
  }, function (t, e, n) {
    var i = n(26),
        o = n(14);t.exports = function (t) {
      return i(o(t));
    };
  }, function (t, e) {
    var n = {}.hasOwnProperty;t.exports = function (t, e) {
      return n.call(t, e);
    };
  }, function (t, e, n) {
    var i = n(13),
        o = n(30),
        a = n(27),
        r = Object.defineProperty;e.f = n(3) ? Object.defineProperty : function (t, e, n) {
      if (i(t), e = a(e, !0), i(n), o) try {
        return r(t, e, n);
      } catch (t) {}if ("get" in n || "set" in n) throw TypeError("Accessors not supported!");return "value" in n && (t[e] = n.value), t;
    };
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = function t(e, n) {
      return !(!e || !e.$el) && 0 !== e._uid && (e.$el.classList.contains(n) ? e : t(e.$parent, n));
    };e.default = i, t.exports = e.default;
  }, function (t, e, n) {
    var i = n(9),
        o = n(17);t.exports = n(3) ? function (t, e, n) {
      return i.f(t, e, o(1, n));
    } : function (t, e, n) {
      return t[e] = n, t;
    };
  }, function (t, e, n) {
    var i = n(22)("wks"),
        o = n(20),
        a = n(2).Symbol,
        r = "function" == typeof a,
        s = t.exports = function (t) {
      return i[t] || (i[t] = r && a[t] || (r ? a : o)("Symbol." + t));
    };s.store = i;
  }, function (t, e, n) {
    var i = n(6);t.exports = function (t) {
      if (!i(t)) throw TypeError(t + " is not an object!");return t;
    };
  }, function (t, e) {
    t.exports = function (t) {
      if (void 0 == t) throw TypeError("Can't call method on  " + t);return t;
    };
  }, function (t, e) {
    var n = Math.ceil,
        i = Math.floor;t.exports = function (t) {
      return isNaN(t = +t) ? 0 : (t > 0 ? i : n)(t);
    };
  }, function (t, e, n) {
    var i = n(2),
        o = n(4),
        a = n(28),
        r = n(11),
        s = "prototype",
        d = function d(t, e, n) {
      var l,
          c,
          u,
          m = t & d.F,
          f = t & d.G,
          p = t & d.S,
          h = t & d.P,
          b = t & d.B,
          v = t & d.W,
          E = f ? o : o[e] || (o[e] = {}),
          g = E[s],
          _ = f ? i : p ? i[e] : (i[e] || {})[s];f && (n = e);for (l in n) {
        c = !m && _ && void 0 !== _[l], c && l in E || (u = c ? _[l] : n[l], E[l] = f && "function" != typeof _[l] ? n[l] : b && c ? a(u, i) : v && _[l] == u ? function (t) {
          var e = function e(_e, n, i) {
            if (this instanceof t) {
              switch (arguments.length) {case 0:
                  return new t();case 1:
                  return new t(_e);case 2:
                  return new t(_e, n);}return new t(_e, n, i);
            }return t.apply(this, arguments);
          };return e[s] = t[s], e;
        }(u) : h && "function" == typeof u ? a(Function.call, u) : u, h && ((E.virtual || (E.virtual = {}))[l] = u, t & d.R && g && !g[l] && r(g, l, u)));
      }
    };d.F = 1, d.G = 2, d.S = 4, d.P = 8, d.B = 16, d.W = 32, d.U = 64, d.R = 128, t.exports = d;
  }, function (t, e) {
    t.exports = function (t, e) {
      return { enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: e };
    };
  }, function (t, e, n) {
    var i = n(31),
        o = n(21);t.exports = Object.keys || function (t) {
      return i(t, o);
    };
  }, function (t, e, n) {
    var i = n(22)("keys"),
        o = n(20);t.exports = function (t) {
      return i[t] || (i[t] = o(t));
    };
  }, function (t, e) {
    var n = 0,
        i = Math.random();t.exports = function (t) {
      return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++n + i).toString(36));
    };
  }, function (t, e) {
    t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
  }, function (t, e, n) {
    var i = n(2),
        o = "__core-js_shared__",
        a = i[o] || (i[o] = {});t.exports = function (t) {
      return a[t] || (a[t] = {});
    };
  }, function (t, e, n) {
    var i = n(14);t.exports = function (t) {
      return Object(i(t));
    };
  }, function (t, e) {
    var n = {}.toString;t.exports = function (t) {
      return n.call(t).slice(8, -1);
    };
  }, function (t, e, n) {
    var i = n(6),
        o = n(2).document,
        a = i(o) && i(o.createElement);t.exports = function (t) {
      return a ? o.createElement(t) : {};
    };
  }, function (t, e, n) {
    var i = n(24);t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (t) {
      return "String" == i(t) ? t.split("") : Object(t);
    };
  }, function (t, e, n) {
    var i = n(6);t.exports = function (t, e) {
      if (!i(t)) return t;var n, o;if (e && "function" == typeof (n = t.toString) && !i(o = n.call(t))) return o;if ("function" == typeof (n = t.valueOf) && !i(o = n.call(t))) return o;if (!e && "function" == typeof (n = t.toString) && !i(o = n.call(t))) return o;throw TypeError("Can't convert object to primitive value");
    };
  }, function (t, e, n) {
    var i = n(33);t.exports = function (t, e, n) {
      if (i(t), void 0 === e) return t;switch (n) {case 1:
          return function (n) {
            return t.call(e, n);
          };case 2:
          return function (n, i) {
            return t.call(e, n, i);
          };case 3:
          return function (n, i, o) {
            return t.call(e, n, i, o);
          };}return function () {
        return t.apply(e, arguments);
      };
    };
  }, function (t, e, n) {
    var i = n(15),
        o = Math.min;t.exports = function (t) {
      return t > 0 ? o(i(t), 9007199254740991) : 0;
    };
  }, function (t, e, n) {
    t.exports = !n(3) && !n(5)(function () {
      return 7 != Object.defineProperty(n(25)("div"), "a", { get: function get() {
          return 7;
        } }).a;
    });
  }, function (t, e, n) {
    var i = n(8),
        o = n(7),
        a = n(34)(!1),
        r = n(19)("IE_PROTO");t.exports = function (t, e) {
      var n,
          s = o(t),
          d = 0,
          l = [];for (n in s) {
        n != r && i(s, n) && l.push(n);
      }for (; e.length > d;) {
        i(s, n = e[d++]) && (~a(l, n) || l.push(n));
      }return l;
    };
  }, function (t, e) {
    t.exports = {};
  }, function (t, e) {
    t.exports = function (t) {
      if ("function" != typeof t) throw TypeError(t + " is not a function!");return t;
    };
  }, function (t, e, n) {
    var i = n(7),
        o = n(29),
        a = n(35);t.exports = function (t) {
      return function (e, n, r) {
        var s,
            d = i(e),
            l = o(d.length),
            c = a(r, l);if (t && n != n) {
          for (; l > c;) {
            if (s = d[c++], s != s) return !0;
          }
        } else for (; l > c; c++) {
          if ((t || c in d) && d[c] === n) return t || c || 0;
        }return !t && -1;
      };
    };
  }, function (t, e, n) {
    var i = n(15),
        o = Math.max,
        a = Math.min;t.exports = function (t, e) {
      return t = i(t), t < 0 ? o(t + e, 0) : a(t, e);
    };
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = function i() {
      return Math.random().toString(36).slice(4);
    };e.default = i, t.exports = e.default;
  }, function (t, e, n) {
    var i = n(9).f,
        o = n(8),
        a = n(12)("toStringTag");t.exports = function (t, e, n) {
      t && !o(t = n ? t : t.prototype, a) && i(t, a, { configurable: !0, value: e });
    };
  }, function (t, e, n) {
    t.exports = { default: n(43), __esModule: !0 };
  }, function (t, e) {
    t.exports = !0;
  }, function (t, e) {
    e.f = {}.propertyIsEnumerable;
  }, function (t, e, n) {
    "use strict";
    function i() {
      var t = document.createElement("span"),
          e = { transition: "transitionend", OTransition: "oTransitionEnd", MozTransition: "transitionend", WebkitTransition: "webkitTransitionEnd" };for (var n in e) {
        if (void 0 !== t.style[n]) return e[n];
      }
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = i(), t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    var i = n(39),
        o = n(16),
        a = n(47),
        r = n(11),
        s = n(8),
        d = n(32),
        l = n(53),
        c = n(37),
        u = n(55),
        m = n(12)("iterator"),
        f = !([].keys && "next" in [].keys()),
        p = "@@iterator",
        h = "keys",
        b = "values",
        v = function v() {
      return this;
    };t.exports = function (t, e, n, E, g, _, C) {
      l(n, e, E);var M,
          T,
          A,
          x = function x(t) {
        if (!f && t in S) return S[t];switch (t) {case h:
            return function () {
              return new n(this, t);
            };case b:
            return function () {
              return new n(this, t);
            };}return function () {
          return new n(this, t);
        };
      },
          N = e + " Iterator",
          y = g == b,
          O = !1,
          S = t.prototype,
          R = S[m] || S[p] || g && S[g],
          w = R || x(g),
          k = g ? y ? x("entries") : w : void 0,
          P = "Array" == e ? S.entries || R : R;if (P && (A = u(P.call(new t())), A !== Object.prototype && (c(A, N, !0), i || s(A, m) || r(A, m, v))), y && R && R.name !== b && (O = !0, w = function w() {
        return R.call(this);
      }), i && !C || !f && !O && S[m] || r(S, m, w), d[e] = w, d[N] = v, g) if (M = { values: y ? w : x(b), keys: _ ? w : x(h), entries: k }, C) for (T in M) {
        T in S || a(S, T, M[T]);
      } else o(o.P + o.F * (f || O), e, M);return M;
    };
  }, function (t, e, n) {
    n(48), t.exports = n(4).Object.keys;
  }, function (t, e, n) {
    var i = n(13),
        o = n(54),
        a = n(21),
        r = n(19)("IE_PROTO"),
        s = function s() {},
        d = "prototype",
        _l = function l() {
      var t,
          e = n(25)("iframe"),
          i = a.length,
          o = "<",
          r = ">";for (e.style.display = "none", n(52).appendChild(e), e.src = "javascript:", t = e.contentWindow.document, t.open(), t.write(o + "script" + r + "document.F=Object" + o + "/script" + r), t.close(), _l = t.F; i--;) {
        delete _l[d][a[i]];
      }return _l();
    };t.exports = Object.create || function (t, e) {
      var n;return null !== t ? (s[d] = i(t), n = new s(), s[d] = null, n[r] = t) : n = _l(), void 0 === e ? n : o(n, e);
    };
  }, function (t, e) {
    e.f = Object.getOwnPropertySymbols;
  }, function (t, e, n) {
    var i = n(16),
        o = n(4),
        a = n(5);t.exports = function (t, e) {
      var n = (o.Object || {})[t] || Object[t],
          r = {};r[t] = e(n), i(i.S + i.F * a(function () {
        n(1);
      }), "Object", r);
    };
  }, function (t, e, n) {
    t.exports = n(11);
  }, function (t, e, n) {
    var i = n(23),
        o = n(18);n(46)("keys", function () {
      return function (t) {
        return o(i(t));
      };
    });
  }, function (t, e, n) {
    "use strict";
    var i = n(56)(!0);n(42)(String, "String", function (t) {
      this._t = String(t), this._i = 0;
    }, function () {
      var t,
          e = this._t,
          n = this._i;return n >= e.length ? { value: void 0, done: !0 } : (t = i(e, n), this._i += t.length, { value: t, done: !1 });
    });
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = function i(t, e) {
      var n = !1;return function () {
        n || (t.call(), n = !0, window.setTimeout(function () {
          n = !1;
        }, e));
      };
    };e.default = i, t.exports = e.default;
  }, function (t, e, n) {
    t.exports = { default: n(59), __esModule: !0 };
  }, function (t, e, n) {
    t.exports = n(2).document && document.documentElement;
  }, function (t, e, n) {
    "use strict";
    var i = n(44),
        o = n(17),
        a = n(37),
        r = {};n(11)(r, n(12)("iterator"), function () {
      return this;
    }), t.exports = function (t, e, n) {
      t.prototype = i(r, { next: o(1, n) }), a(t, e + " Iterator");
    };
  }, function (t, e, n) {
    var i = n(9),
        o = n(13),
        a = n(18);t.exports = n(3) ? Object.defineProperties : function (t, e) {
      o(t);for (var n, r = a(e), s = r.length, d = 0; s > d;) {
        i.f(t, n = r[d++], e[n]);
      }return t;
    };
  }, function (t, e, n) {
    var i = n(8),
        o = n(23),
        a = n(19)("IE_PROTO"),
        r = Object.prototype;t.exports = Object.getPrototypeOf || function (t) {
      return t = o(t), i(t, a) ? t[a] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? r : null;
    };
  }, function (t, e, n) {
    var i = n(15),
        o = n(14);t.exports = function (t) {
      return function (e, n) {
        var a,
            r,
            s = String(o(e)),
            d = i(n),
            l = s.length;return d < 0 || d >= l ? t ? "" : void 0 : (a = s.charCodeAt(d), a < 55296 || a > 56319 || d + 1 === l || (r = s.charCodeAt(d + 1)) < 56320 || r > 57343 ? t ? s.charAt(d) : a : t ? s.slice(d, d + 2) : (a - 55296 << 10) + (r - 56320) + 65536);
      };
    };
  }, function (t, e, n) {
    var i = n(60),
        o = n(12)("iterator"),
        a = n(32);t.exports = n(4).getIteratorMethod = function (t) {
      if (void 0 != t) return t[o] || t["@@iterator"] || a[i(t)];
    };
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { props: { value: [String, Number], debounce: { type: Number, default: 100 }, disabled: Boolean, required: Boolean, maxlength: [Number, String], name: String, placeholder: String, readonly: Boolean }, data: function data() {
        return { timeout: 0 };
      }, watch: { value: function value() {
          this.updateValues();
        }, disabled: function disabled() {
          this.setParentDisabled();
        }, required: function required() {
          this.setParentRequired();
        }, placeholder: function placeholder() {
          this.setParentPlaceholder();
        }, maxlength: function maxlength() {
          this.handleMaxLength();
        } }, methods: { handleMaxLength: function handleMaxLength() {
          this.parentContainer.enableCounter = this.maxlength > 0, this.parentContainer.counterLength = this.maxlength;
        }, lazyEventEmitter: function lazyEventEmitter() {
          var t = this;this.timeout && window.clearTimeout(this.timeout), this.timeout = window.setTimeout(function () {
            t.$emit("change", t.$el.value), t.$emit("input", t.$el.value);
          }, this.debounce);
        }, setParentValue: function setParentValue(t) {
          this.parentContainer.setValue(t || this.$el.value);
        }, setParentDisabled: function setParentDisabled() {
          this.parentContainer.isDisabled = this.disabled;
        }, setParentRequired: function setParentRequired() {
          this.parentContainer.isRequired = this.required;
        }, setParentPlaceholder: function setParentPlaceholder() {
          this.parentContainer.hasPlaceholder = !!this.placeholder;
        }, updateValues: function updateValues() {
          var t = this;this.$nextTick(function () {
            var e = t.$el.value || t.value;t.setParentValue(e), t.parentContainer.inputLength = e ? e.length : 0;
          });
        }, onFocus: function onFocus() {
          this.parentContainer && (this.parentContainer.isFocused = !0);
        }, onBlur: function onBlur() {
          this.parentContainer.isFocused = !1, this.setParentValue();
        }, onInput: function onInput() {
          this.updateValues(), this.lazyEventEmitter();
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    n(64), t.exports = n(4).Object.assign;
  }, function (t, e, n) {
    var i = n(24),
        o = n(12)("toStringTag"),
        a = "Arguments" == i(function () {
      return arguments;
    }()),
        r = function r(t, e) {
      try {
        return t[e];
      } catch (t) {}
    };t.exports = function (t) {
      var e, n, s;return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof (n = r(e = Object(t), o)) ? n : a ? i(e) : "Object" == (s = i(e)) && "function" == typeof e.callee ? "Arguments" : s;
    };
  }, function (t, e, n) {
    "use strict";
    var i = n(18),
        o = n(45),
        a = n(40),
        r = n(23),
        s = n(26),
        d = Object.assign;t.exports = !d || n(5)(function () {
      var t = {},
          e = {},
          n = Symbol(),
          i = "abcdefghijklmnopqrst";return t[n] = 7, i.split("").forEach(function (t) {
        e[t] = t;
      }), 7 != d({}, t)[n] || Object.keys(d({}, e)).join("") != i;
    }) ? function (t, e) {
      for (var n = r(t), d = arguments.length, l = 1, c = o.f, u = a.f; d > l;) {
        for (var m, f = s(arguments[l++]), p = c ? i(f).concat(c(f)) : i(f), h = p.length, b = 0; h > b;) {
          u.call(f, m = p[b++]) && (n[m] = f[m]);
        }
      }return n;
    } : d;
  }, function (t, e, n) {
    var i = n(2),
        o = n(4),
        a = n(39),
        r = n(63),
        s = n(9).f;t.exports = function (t) {
      var e = o.Symbol || (o.Symbol = a ? {} : i.Symbol || {});"_" == t.charAt(0) || t in e || s(e, t, { value: r.f(t) });
    };
  }, function (t, e, n) {
    e.f = n(12);
  }, function (t, e, n) {
    var i = n(16);i(i.S + i.F, "Object", { assign: n(61) });
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = function i(t, e, n) {
      var i = document.createElement("canvas");t.crossOrigin = "Anonymous", t.onload = function () {
        var t = 0,
            n = void 0,
            o = void 0,
            a = void 0,
            r = void 0,
            s = void 0,
            d = void 0,
            l = void 0;i.width = this.width, i.height = this.height, n = i.getContext("2d"), n.drawImage(this, 0, 0), o = n.getImageData(0, 0, i.width, i.height), a = o.data;for (var c = 0, u = a.length; c < u; c += 4) {
          r = a[c], s = a[c + 1], d = a[c + 2], l = Math.floor((r + s + d) / 3), t += l;
        }e(Math.floor(t / (this.width * this.height)));
      }, t.onerror = n;
    };e.default = i, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = function i(t) {
      return t && t.constructor === Array;
    };e.default = i, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }e.__esModule = !0;var o = n(69),
        a = i(o);e.default = function (t) {
      if (Array.isArray(t)) {
        for (var e = 0, n = Array(t.length); e < t.length; e++) {
          n[e] = t[e];
        }return n;
      }return (0, a.default)(t);
    };
  }, function (t, e, n) {
    n(79);for (var i = n(2), o = n(11), a = n(32), r = n(12)("toStringTag"), s = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], d = 0; d < 5; d++) {
      var l = s[d],
          c = i[l],
          u = c && c.prototype;u && !u[r] && o(u, r, l), a[l] = a.Array;
    }
  }, function (t, e, n) {
    t.exports = { default: n(70), __esModule: !0 };
  }, function (t, e, n) {
    n(49), n(78), t.exports = n(4).Array.from;
  }, function (t, e) {
    t.exports = function () {};
  }, function (t, e, n) {
    "use strict";
    var i = n(9),
        o = n(17);t.exports = function (t, e, n) {
      e in t ? i.f(t, e, o(0, n)) : t[e] = n;
    };
  }, function (t, e, n) {
    var i = n(32),
        o = n(12)("iterator"),
        a = Array.prototype;t.exports = function (t) {
      return void 0 !== t && (i.Array === t || a[o] === t);
    };
  }, function (t, e, n) {
    var i = n(13);t.exports = function (t, e, n, o) {
      try {
        return o ? e(i(n)[0], n[1]) : e(n);
      } catch (e) {
        var a = t.return;throw void 0 !== a && i(a.call(t)), e;
      }
    };
  }, function (t, e, n) {
    var i = n(12)("iterator"),
        o = !1;try {
      var a = [7][i]();a.return = function () {
        o = !0;
      }, Array.from(a, function () {
        throw 2;
      });
    } catch (t) {}t.exports = function (t, e) {
      if (!e && !o) return !1;var n = !1;try {
        var a = [7],
            r = a[i]();r.next = function () {
          return { done: n = !0 };
        }, a[i] = function () {
          return r;
        }, t(a);
      } catch (t) {}return n;
    };
  }, function (t, e) {
    t.exports = function (t, e) {
      return { value: e, done: !!t };
    };
  }, function (t, e, n) {
    var i = n(31),
        o = n(21).concat("length", "prototype");e.f = Object.getOwnPropertyNames || function (t) {
      return i(t, o);
    };
  }, function (t, e, n) {
    "use strict";
    var i = n(28),
        o = n(16),
        a = n(23),
        r = n(74),
        s = n(73),
        d = n(29),
        l = n(72),
        c = n(57);o(o.S + o.F * !n(75)(function (t) {
      Array.from(t);
    }), "Array", { from: function from(t) {
        var e,
            n,
            o,
            u,
            m = a(t),
            f = "function" == typeof this ? this : Array,
            p = arguments.length,
            h = p > 1 ? arguments[1] : void 0,
            b = void 0 !== h,
            v = 0,
            E = c(m);if (b && (h = i(h, p > 2 ? arguments[2] : void 0, 2)), void 0 == E || f == Array && s(E)) for (e = d(m.length), n = new f(e); e > v; v++) {
          l(n, v, b ? h(m[v], v) : m[v]);
        } else for (u = E.call(m), n = new f(); !(o = u.next()).done; v++) {
          l(n, v, b ? r(u, h, [o.value, v], !0) : o.value);
        }return n.length = v, n;
      } });
  }, function (t, e, n) {
    "use strict";
    var i = n(71),
        o = n(76),
        a = n(32),
        r = n(7);t.exports = n(42)(Array, "Array", function (t, e) {
      this._t = r(t), this._i = 0, this._k = e;
    }, function () {
      var t = this._t,
          e = this._k,
          n = this._i++;return !t || n >= t.length ? (this._t = void 0, o(1)) : "keys" == e ? o(0, n) : "values" == e ? o(0, t[n]) : o(0, [n, t[n]]);
    }, "values"), a.Arguments = a.Array, i("keys"), i("values"), i("entries");
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-avatar", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(295),
        r = i(a),
        s = n(265),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-backdrop", r.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(296),
        r = i(a);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-bottom-bar", r.default), t.component("md-bottom-bar-item", d.default), t.material.styles.push(c.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(297),
        r = i(a),
        s = n(298),
        d = i(s),
        l = n(266),
        c = i(l);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-button", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(299),
        r = i(a),
        s = n(267),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-button-toggle", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(300),
        r = i(a),
        s = n(268),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-card", r.default), t.component("md-card-media", d.default), t.component("md-card-media-cover", c.default), t.component("md-card-media-actions", m.default), t.component("md-card-header", p.default), t.component("md-card-header-text", b.default), t.component("md-card-content", E.default), t.component("md-card-actions", _.default), t.component("md-card-area", M.default), t.component("md-card-expand", A.default), t.material.styles.push(N.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(301),
        r = i(a),
        s = n(308),
        d = i(s),
        l = n(310),
        c = i(l),
        u = n(309),
        m = i(u),
        f = n(306),
        p = i(f),
        h = n(307),
        b = i(h),
        v = n(304),
        E = i(v),
        g = n(302),
        _ = i(g),
        C = n(303),
        M = i(C),
        T = n(305),
        A = i(T),
        x = n(269),
        N = i(x);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-checkbox", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(311),
        r = i(a),
        s = n(270),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-chips", r.default), t.component("md-chip", d.default), t.material.styles.push(c.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(313),
        r = i(a),
        s = n(312),
        d = i(s),
        l = n(271),
        c = i(l);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-dialog", r.default), t.component("md-dialog-title", d.default), t.component("md-dialog-content", c.default), t.component("md-dialog-actions", m.default), t.component("md-dialog-alert", p.default), t.component("md-dialog-confirm", b.default), t.component("md-dialog-prompt", E.default), t.material.styles.push(_.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(314),
        r = i(a),
        s = n(317),
        d = i(s),
        l = n(316),
        c = i(l),
        u = n(315),
        m = i(u),
        f = n(318),
        p = i(f),
        h = n(319),
        b = i(h),
        v = n(320),
        E = i(v),
        g = n(272),
        _ = i(g);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-divider", r.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(321),
        r = i(a);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-file", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(322),
        r = i(a),
        s = n(273),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-icon", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(323),
        r = i(a),
        s = n(274),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-image", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(324),
        r = i(a),
        s = n(275),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-input-container", r.default), t.component("md-input", d.default), t.component("md-autocomplete", c.default), t.component("md-textarea", m.default), t.material.styles.push(p.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(327),
        r = i(a),
        s = n(326),
        d = i(s),
        l = n(325),
        c = i(l),
        u = n(328),
        m = i(u),
        f = n(276),
        p = i(f);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-layout", r.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(329),
        r = i(a);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-list", r.default), t.component("md-list-item", d.default), t.component("md-list-expand", c.default), t.material.styles.push(m.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(330),
        r = i(a),
        s = n(116),
        d = i(s),
        l = n(331),
        c = i(l),
        u = n(277),
        m = i(u);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-menu", r.default), t.component("md-menu-item", d.default), t.component("md-menu-content", c.default), t.material.styles.push(m.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(337),
        r = i(a),
        s = n(339),
        d = i(s),
        l = n(338),
        c = i(l),
        u = n(278),
        m = i(u);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-boards", r.default), t.component("md-board", d.default), t.material.styles.push(c.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(341),
        r = i(a),
        s = n(340),
        d = i(s),
        l = n(279),
        c = i(l);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-progress", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(342),
        r = i(a),
        s = n(280),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-radio", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(343),
        r = i(a),
        s = n(281),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-rating-bar", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(344),
        r = i(a),
        s = n(282),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-select", r.default), t.component("md-option", d.default), t.material.styles.push(c.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(346),
        r = i(a),
        s = n(345),
        d = i(s),
        l = n(283),
        c = i(l);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-sidenav", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(347),
        r = i(a),
        s = n(284),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-snackbar", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(348),
        r = i(a),
        s = n(285),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-speed-dial", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(349),
        r = i(a),
        s = n(286),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-spinner", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(350),
        r = i(a),
        s = n(287),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-stepper", r.default), t.component("md-step", d.default), t.component("md-step-header-container", c.default), t.component("md-step-header", m.default), t.material.styles.push(p.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(353),
        r = i(a),
        s = n(351),
        d = i(s),
        l = n(118),
        c = i(l),
        u = n(352),
        m = i(u),
        f = n(288),
        p = i(f);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-subheader", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(354),
        r = i(a),
        s = n(289),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-switch", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(355),
        r = i(a),
        s = n(290),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-table", r.default), t.component("md-table-header", { functional: !0, render: function render(t, e) {
          return t("thead", { staticClass: "md-table-header" }, e.children);
        } }), t.component("md-table-body", { functional: !0, render: function render(t, e) {
          return t("tbody", { staticClass: "md-table-body" }, e.children);
        } }), t.component("md-table-row", d.default), t.component("md-table-head", c.default), t.component("md-table-cell", m.default), t.component("md-table-edit", p.default), t.component("md-table-card", b.default), t.component("md-table-pagination", _.default), t.component("md-table-alternate-header", E.default), t.material.styles.push(M.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(356),
        r = i(a),
        s = n(363),
        d = i(s),
        l = n(361),
        c = i(l),
        u = n(359),
        m = i(u),
        f = n(360),
        p = i(f),
        h = n(358),
        b = i(h),
        v = n(357),
        E = i(v),
        g = n(362),
        _ = i(g),
        C = n(291),
        M = i(C);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-tabs", r.default), t.component("md-tab", d.default), t.material.styles.push(c.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(365),
        r = i(a),
        s = n(364),
        d = i(s),
        l = n(292),
        c = i(l);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-toolbar", r.default), t.material.styles.push(d.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(366),
        r = i(a),
        s = n(293),
        d = i(s);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-tooltip", r.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(367),
        r = i(a);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-whiteframe", r.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(368),
        r = i(a);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      return o.installed ? void console.warn("Vue Material is already installed.") : (o.installed = !0, t.use(r.default), t.use(d.default), void t.material.styles.push(c.default));
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(121),
        r = i(a),
        s = n(119),
        d = i(s),
        l = n(294),
        c = i(l);n(229), t.exports = e.default;
  }, function (t, e, n) {
    var i, o, a;!function (n, r) {
      o = [e, t], i = r, a = "function" == typeof i ? i.apply(e, o) : i, !(void 0 !== a && (t.exports = a));
    }(this, function (t, e) {
      "use strict";
      function n(t) {
        function e() {
          var e = window.getComputedStyle(t, null);"vertical" === e.resize ? t.style.resize = "none" : "both" === e.resize && (t.style.resize = "horizontal"), d = "content-box" === e.boxSizing ? -(parseFloat(e.paddingTop) + parseFloat(e.paddingBottom)) : parseFloat(e.borderTopWidth) + parseFloat(e.borderBottomWidth), isNaN(d) && (d = 0), s();
        }function n(e) {
          var n = t.style.width;t.style.width = "0px", t.offsetWidth, t.style.width = n, t.style.overflowY = e;
        }function i(t) {
          for (var e = []; t && t.parentNode && t.parentNode instanceof Element;) {
            t.parentNode.scrollTop && e.push({ node: t.parentNode, scrollTop: t.parentNode.scrollTop }), t = t.parentNode;
          }return e;
        }function o() {
          var e = t.style.height,
              n = i(t),
              o = document.documentElement && document.documentElement.scrollTop;t.style.height = "auto";var a = t.scrollHeight + d;return 0 === t.scrollHeight ? void (t.style.height = e) : (t.style.height = a + "px", l = t.clientWidth, n.forEach(function (t) {
            t.node.scrollTop = t.scrollTop;
          }), void (o && (document.documentElement.scrollTop = o)));
        }function s() {
          o();var e = Math.round(parseFloat(t.style.height)),
              i = window.getComputedStyle(t, null),
              a = Math.round(parseFloat(i.height));if (a !== e ? "visible" !== i.overflowY && (n("visible"), o(), a = Math.round(parseFloat(window.getComputedStyle(t, null).height))) : "hidden" !== i.overflowY && (n("hidden"), o(), a = Math.round(parseFloat(window.getComputedStyle(t, null).height))), c !== a) {
            c = a;var s = r("autosize:resized");try {
              t.dispatchEvent(s);
            } catch (t) {}
          }
        }if (t && t.nodeName && "TEXTAREA" === t.nodeName && !a.has(t)) {
          var d = null,
              l = t.clientWidth,
              c = null,
              u = function u() {
            t.clientWidth !== l && s();
          },
              m = function (e) {
            window.removeEventListener("resize", u, !1), t.removeEventListener("input", s, !1), t.removeEventListener("keyup", s, !1), t.removeEventListener("autosize:destroy", m, !1), t.removeEventListener("autosize:update", s, !1), Object.keys(e).forEach(function (n) {
              t.style[n] = e[n];
            }), a.delete(t);
          }.bind(t, { height: t.style.height, resize: t.style.resize, overflowY: t.style.overflowY, overflowX: t.style.overflowX, wordWrap: t.style.wordWrap });t.addEventListener("autosize:destroy", m, !1), "onpropertychange" in t && "oninput" in t && t.addEventListener("keyup", s, !1), window.addEventListener("resize", u, !1), t.addEventListener("input", s, !1), t.addEventListener("autosize:update", s, !1), t.style.overflowX = "hidden", t.style.wordWrap = "break-word", a.set(t, { destroy: m, update: s }), e();
        }
      }function i(t) {
        var e = a.get(t);e && e.destroy();
      }function o(t) {
        var e = a.get(t);e && e.update();
      }var a = "function" == typeof Map ? new Map() : function () {
        var t = [],
            e = [];return { has: function has(e) {
            return t.indexOf(e) > -1;
          }, get: function get(n) {
            return e[t.indexOf(n)];
          }, set: function set(n, i) {
            t.indexOf(n) === -1 && (t.push(n), e.push(i));
          }, delete: function _delete(n) {
            var i = t.indexOf(n);i > -1 && (t.splice(i, 1), e.splice(i, 1));
          } };
      }(),
          r = function r(t) {
        return new Event(t, { bubbles: !0 });
      };try {
        new Event("test");
      } catch (t) {
        r = function r(t) {
          var e = document.createEvent("Event");return e.initEvent(t, !0, !1), e;
        };
      }var s = null;"undefined" == typeof window || "function" != typeof window.getComputedStyle ? (s = function s(t) {
        return t;
      }, s.destroy = function (t) {
        return t;
      }, s.update = function (t) {
        return t;
      }) : (s = function s(t, e) {
        return t && Array.prototype.forEach.call(t.length ? t : [t], function (t) {
          return n(t, e);
        }), t;
      }, s.destroy = function (t) {
        return t && Array.prototype.forEach.call(t.length ? t : [t], i), t;
      }, s.update = function (t) {
        return t && Array.prototype.forEach.call(t.length ? t : [t], o), t;
      }), e.exports = s;
    });
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(208),
        a = i(o),
        r = n(209),
        s = i(r),
        d = n(332),
        l = i(d),
        c = n(335),
        u = i(c),
        m = n(336),
        f = i(m),
        p = n(334),
        h = i(p),
        b = n(333),
        v = i(b);e.default = { functional: !0, props: { href: String, disabled: Boolean }, render: function render(t, e) {
        var n = e.children,
            i = e.data,
            o = e.props,
            r = function r() {
          var t = i.on,
              e = ["contextmenu", "dblclick", "dragend", "mousedown", "touchstart", "click"],
              a = n.length;if (o.href) return u.default;for (; a--;) {
            var r = n[a].componentOptions;if (r) if ("md-list-expand" === r.tag) {
              var d = function () {
                var t = n[a];return i.scopedSlots = { expand: function expand() {
                    return t;
                  } }, n.splice(a, 1), { v: h.default };
              }();if ("object" === ("undefined" == typeof d ? "undefined" : (0, s.default)(d))) return d.v;
            } else if ("router-link" === r.tag) return n[a].data.staticClass = "md-list-item-container md-button", f.default;
          }if (t) for (var c = e.length; c--;) {
            if (t[e[c]]) return l.default;
          }return v.default;
        };return t(r(), (0, a.default)({ props: o }, i), n);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(444),
        a = i(o),
        r = new a.default({ data: function data() {
        return { current: null };
      } });e.default = r, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(36),
        a = i(o);e.default = { functional: !0, props: { mdVertical: { type: Boolean, default: !1 } }, render: function render(t, e) {
        var n = e.children,
            i = e.props,
            o = function o(e) {
          return e.reduce(function (e, n, i, o) {
            if (e.push(n), i < o.length - 1) {
              var r = t("md-divider", { key: "divider-" + (0, a.default)() });e.push(r);
            }return e;
          }, []);
        };return i.mdVertical || (n = o(n)), t("div", { class: "md-steps-navigation-container" }, n);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      t.component("md-ink-ripple", r.default);
    }Object.defineProperty(e, "__esModule", { value: !0 }), e.default = o;var a = n(369),
        r = i(a);t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = e.changeHtmlMetaColor = void 0,
        o = e.createNewStyleElement = void 0;"server" !== n.i({ NODE_ENV: "development" }).VUE_ENV && (e.changeHtmlMetaColor = i = function i(t, e, n) {
      var i = document.querySelector('meta[name="theme-color"]');i ? i.setAttribute("content", t) : (i = document.createElement("meta"), i.setAttribute("name", "theme-color"), i.setAttribute("content", t), document.head.appendChild(i)), document.body.classList.remove(n), document.body.classList.add(e);
    }, e.createNewStyleElement = o = function o(t, e) {
      var n = document.head,
          i = n.querySelector("#" + e);if (i) i.textContent = t;else {
        var o = document.createElement("style");o.type = "text/css", o.id = e, o.textContent = t, n.appendChild(o);
      }
    });
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }function o(t) {
      console.warn("The theme '" + t + "' doesn't exists. You need to register it first in order to use.");
    }function a(t, e, n, i) {
      h.createNewStyleElement && (t = C(t, e, n), t = t.replace(/THEME_NAME/g, i), (0, h.createNewStyleElement)(t, i));
    }function r(t) {
      t.material = new t({ data: { currentTheme: "default", inkRipple: !0, prefix: "md-theme-", styles: [], themes: { default: E } }, watch: { styles: function styles() {
            this.refreshInjectedStyles();
          } }, methods: { registerPalette: function registerPalette(t, e) {
            c.default[t] = e;
          }, useTheme: function useTheme(t) {
            if (!(t in _)) {
              var e = this.themes[t];return e ? (a(this.styles.join("\n"), e, t, this.prefix + t), _[t] = !0) : o(t);
            }
          }, refreshInjectedStyles: function refreshInjectedStyles() {
            var t = this,
                e = this.styles.join("\n"),
                n = this.prefix;(0, d.default)(_).forEach(function (i) {
              var o = t.themes[i];a(e, o, i, n + i);
            });
          }, registerTheme: function registerTheme(t, e) {
            var n = this;"string" == typeof t ? this.themes[t] = e : (0, d.default)(t).forEach(function (e) {
              return n.themes[e] = t[e];
            });
          }, setCurrentTheme: function setCurrentTheme(t) {
            if (t !== this.currentTheme) {
              var e = this.prefix;this.useTheme(t), h.changeHtmlMetaColor && (0, h.changeHtmlMetaColor)(g[t], e + this.currentTheme, e + t), this.currentTheme = t;
            }
          } } }), t.component("md-theme", p.default), t.prototype.$material = t.material;
    }Object.defineProperty(e, "__esModule", { value: !0 });var s = n(38),
        d = i(s);e.default = r;var l = n(122),
        c = i(l),
        u = n(123),
        m = i(u),
        f = n(370),
        p = i(f),
        h = n(120),
        b = ["primary", "accent", "background", "warn", "hue-1", "hue-2", "hue-3"],
        v = new RegExp("(" + b.join("|").toUpperCase() + ")-(COLOR|CONTRAST)-?(A?\\d*)-?(\\d*\\.?\\d+)?", "g"),
        E = { primary: "indigo", accent: "pink", background: "white", warn: "deep-orange" },
        g = {},
        _ = {},
        C = function C(t, e, n) {
      return t.replace(v, function (t, i, o, a, r) {
        var s = void 0,
            d = 0 === +a ? 500 : a;if (i = i.toLowerCase(), e[i] ? "string" == typeof e[i] ? s = c.default[e[i]] : (s = c.default[e[i].color] || c.default[E[i]], d = 0 === +a ? e[i].hue : a) : s = c.default[E[i]], "COLOR" === o) {
          var l = c.default[e[i]];return d || l || ("accent" === i ? d = "A200" : "background" === i && (d = 50)), "primary" === i && (g[n] = s[d]), r ? (0, m.default)(s[d], r) : s[d];
        }var u = s.darkText.indexOf(d) >= 0;return e[i] && "string" != typeof e[i] && e[i].textColor && ("black" === e[i].textColor ? u = !0 : "white" === e[i].textColor && (u = !1)), u ? r ? (0, m.default)("#000", r) : "rgba(0, 0, 0, .87)" : r ? (0, m.default)("#fff", r) : "rgba(255, 255, 255, .87)";
      });
    };t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { red: { 50: "#ffebee", 100: "#ffcdd2", 200: "#ef9a9a", 300: "#e57373", 400: "#ef5350", 500: "#f44336", 600: "#e53935", 700: "#d32f2f", 800: "#c62828", 900: "#b71c1c", A100: "#ff8a80", A200: "#ff5252", A400: "#ff1744", A700: "#d50000", darkText: [50, 100, 200, 300, "A100"] }, pink: { 50: "#fce4ec", 100: "#f8bbd0", 200: "#f48fb1", 300: "#f06292", 400: "#ec407a", 500: "#e91e63", 600: "#d81b60", 700: "#c2185b", 800: "#ad1457", 900: "#880e4f", A100: "#ff80ab", A200: "#ff4081", A400: "#f50057", A700: "#c51162", darkText: [50, 100, 200, "A100"] }, purple: { 50: "#f3e5f5", 100: "#e1bee7", 200: "#ce93d8", 300: "#ba68c8", 400: "#ab47bc", 500: "#9c27b0", 600: "#8e24aa", 700: "#7b1fa2", 800: "#6a1b9a", 900: "#4a148c", A100: "#ea80fc", A200: "#e040fb", A400: "#d500f9", A700: "#aa00ff", darkText: [50, 100, 200, "A100"] }, "deep-purple": { 50: "#ede7f6", 100: "#d1c4e9", 200: "#b39ddb", 300: "#9575cd", 400: "#7e57c2", 500: "#673ab7", 600: "#5e35b1", 700: "#512da8", 800: "#4527a0", 900: "#311b92", A100: "#b388ff", A200: "#7c4dff", A400: "#651fff", A700: "#6200ea", darkText: [50, 100, 200, "A100"] }, indigo: { 50: "#e8eaf6", 100: "#c5cae9", 200: "#9fa8da", 300: "#7986cb", 400: "#5c6bc0", 500: "#3f51b5", 600: "#3949ab", 700: "#303f9f", 800: "#283593", 900: "#1a237e", A100: "#8c9eff", A200: "#536dfe", A400: "#3d5afe", A700: "#304ffe", darkText: [50, 100, 200, "A100"] }, blue: { 50: "#e3f2fd", 100: "#bbdefb", 200: "#90caf9", 300: "#64b5f6", 400: "#42a5f5", 500: "#2196f3", 600: "#1e88e5", 700: "#1976d2", 800: "#1565c0", 900: "#0d47a1", A100: "#82b1ff", A200: "#448aff", A400: "#2979ff", A700: "#2962ff", darkText: [50, 100, 200, 300, 400, "A100"] }, "light-blue": { 50: "#e1f5fe", 100: "#b3e5fc", 200: "#81d4fa", 300: "#4fc3f7", 400: "#29b6f6", 500: "#03a9f4", 600: "#039be5", 700: "#0288d1", 800: "#0277bd", 900: "#01579b", A100: "#80d8ff", A200: "#40c4ff", A400: "#00b0ff", A700: "#0091ea", darkText: [50, 100, 200, 300, 400, 500, "A100", "A200", "A300"] }, cyan: { 50: "#e0f7fa", 100: "#b2ebf2", 200: "#80deea", 300: "#4dd0e1", 400: "#26c6da", 500: "#00bcd4", 600: "#00acc1", 700: "#0097a7", 800: "#00838f", 900: "#006064", A100: "#84ffff", A200: "#18ffff", A400: "#00e5ff", A700: "#00b8d4", darkText: [50, 100, 200, 300, 400, 500, 600, "A100", "A200", "A300", "A400"] }, teal: { 50: "#e0f2f1", 100: "#b2dfdb", 200: "#80cbc4", 300: "#4db6ac", 400: "#26a69a", 500: "#009688", 600: "#00897b", 700: "#00796b", 800: "#00695c", 900: "#004d40", A100: "#a7ffeb", A200: "#64ffda", A400: "#1de9b6", A700: "#00bfa5", darkText: [50, 100, 200, 300, 400, "A100", "A200", "A300", "A400"] }, green: { 50: "#e8f5e9", 100: "#c8e6c9", 200: "#a5d6a7", 300: "#81c784", 400: "#66bb6a", 500: "#4caf50", 600: "#43a047", 700: "#388e3c", 800: "#2e7d32", 900: "#1b5e20", A100: "#b9f6ca", A200: "#69f0ae", A400: "#00e676", A700: "#00c853", darkText: [50, 100, 200, 300, 400, 500, "A100", "A200", "A300", "A400"] }, "light-green": { 50: "#f1f8e9", 100: "#dcedc8", 200: "#c5e1a5", 300: "#aed581", 400: "#9ccc65", 500: "#8bc34a", 600: "#7cb342", 700: "#689f38", 800: "#558b2f", 900: "#33691e", A100: "#ccff90", A200: "#b2ff59", A400: "#76ff03", A700: "#64dd17", darkText: [50, 100, 200, 300, 400, 500, 600, "A100", "A200", "A300", "A400"] }, lime: { 50: "#f9fbe7", 100: "#f0f4c3", 200: "#e6ee9c", 300: "#dce775", 400: "#d4e157", 500: "#cddc39", 600: "#c0ca33", 700: "#afb42b", 800: "#9e9d24", 900: "#827717", A100: "#f4ff81", A200: "#eeff41", A400: "#c6ff00", A700: "#aeea00", darkText: [50, 100, 200, 300, 400, 500, 600, 700, 800, "A100", "A200", "A300", "A400"] }, yellow: { 50: "#fffde7", 100: "#fff9c4", 200: "#fff59d", 300: "#fff176", 400: "#ffee58", 500: "#ffeb3b", 600: "#fdd835", 700: "#fbc02d", 800: "#f9a825", 900: "#f57f17", A100: "#ffff8d", A200: "#ffff00", A400: "#ffea00", A700: "#ffd600", darkText: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, "A100", "A200", "A300", "A400"] }, amber: { 50: "#fff8e1", 100: "#ffecb3", 200: "#ffe082", 300: "#ffd54f", 400: "#ffca28", 500: "#ffc107", 600: "#ffb300", 700: "#ffa000", 800: "#ff8f00", 900: "#ff6f00", A100: "#ffe57f", A200: "#ffd740", A400: "#ffc400", A700: "#ffab00", darkText: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, "A100", "A200", "A300", "A400"] }, orange: { 50: "#fff3e0", 100: "#ffe0b2", 200: "#ffcc80", 300: "#ffb74d", 400: "#ffa726", 500: "#ff9800", 600: "#fb8c00", 700: "#f57c00", 800: "#ef6c00", 900: "#e65100", A100: "#ffd180", A200: "#ffab40", A400: "#ff9100", A700: "#ff6d00", darkText: [50, 100, 200, 300, 400, 500, 600, 700, "A100", "A200", "A300", "A400"] }, "deep-orange": { 50: "#fbe9e7", 100: "#ffccbc", 200: "#ffab91", 300: "#ff8a65", 400: "#ff7043", 500: "#ff5722", 600: "#f4511e", 700: "#e64a19", 800: "#d84315", 900: "#bf360c", A100: "#ff9e80", A200: "#ff6e40", A400: "#ff3d00", A700: "#dd2c00", darkText: [50, 100, 200, 300, 400, "A100", "A200"] }, brown: { 50: "#efebe9", 100: "#d7ccc8", 200: "#bcaaa4", 300: "#a1887f", 400: "#8d6e63", 500: "#795548", 600: "#6d4c41", 700: "#5d4037", 800: "#4e342e", 900: "#3e2723", A100: "#d7ccc8", A200: "#bcaaa4", A400: "#8d6e63", A700: "#5d4037", darkText: [50, 100, 200, "A100", "A200", "A300", "A400"] }, grey: { 50: "#fafafa", 100: "#f5f5f5", 200: "#eeeeee", 300: "#e0e0e0", 400: "#bdbdbd", 500: "#9e9e9e", 600: "#757575", 700: "#616161", 800: "#424242", 900: "#212121", A100: "#fff", A200: "#000000", A400: "#303030", A700: "#616161", darkText: [50, 100, 200, 300, 400, 500, "A100"] }, "blue-grey": { 50: "#eceff1", 100: "#cfd8dc", 200: "#b0bec5", 300: "#90a4ae", 400: "#78909c", 500: "#607d8b", 600: "#546e7a", 700: "#455a64", 800: "#37474f", 900: "#263238", A100: "#cfd8dc", A200: "#b0bec5", A400: "#78909c", A700: "#455a64", darkText: [50, 100, 200, 300, "A100", "A200", "A300", "A400"] }, white: { 50: "#fff", 100: "#fff", 200: "#fff", 300: "#fff", 400: "#fff", 500: "#fff", 600: "#fff", 700: "#fff", 800: "#fff", 900: "#fff", A100: "#fff", A200: "#fff", A400: "#fff", A700: "#fff", darkText: [50, 100, 200, 300, 400, 500, 600, 700, 800, 900, "A100", "A200", "A300", "A400"] }, black: { 50: "#000", 100: "#000", 200: "#000", 300: "#000", 400: "#000", 500: "#000", 600: "#000", 700: "#000", 800: "#000", 900: "#000", A100: "#000", A200: "#000", A400: "#000", A700: "#000", darkText: [] } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = function (t, e) {
      var n = "",
          i = "",
          o = "",
          a = t.toString().match(/^#?(([0-9a-zA-Z]{3}){1,3})$/);if (!a) throw new Error("Invalid color" + t);if (t = a[1], 6 === t.length) n = parseInt(t.substring(0, 2), 16), i = parseInt(t.substring(2, 4), 16), o = parseInt(t.substring(4, 6), 16);else if (3 === t.length) {
        var r = t.substring(0, 1),
            s = t.substring(1, 2),
            d = t.substring(2, 3);n = parseInt(r + r, 16), i = parseInt(s + s, 16), o = parseInt(d + d, 16);
      }return e ? (e > 1 && (e /= 100), "rgba(" + n + ", " + i + ", " + o + ", " + e + ")") : "rgb(" + n + ", " + i + ", " + o + ")";
    }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { props: { debounce: { type: Number, default: 1e3 }, disabled: Boolean, fetch: { type: Function }, filterList: Function, list: { type: Array, default: function _default() {
            return [];
          } }, minChars: { type: Number, default: 1 }, name: String, prepareResponseData: Function, printAttribute: { type: String, default: "name" }, queryParam: { type: String, default: "q" }, required: Boolean }, methods: { onFocus: function onFocus() {
          this.parentContainer && (this.parentContainer.isFocused = !0);
        }, onBlur: function onBlur() {
          this.parentContainer.isFocused = !1, this.setParentValue();
        }, verifyProps: function verifyProps() {
          return this.parentContainer ? this.listIsEmpty && this.filterList ? this.throwErrorDestroy("You should use a `filterList` function prop with the `list` prop") : !this.fetch && this.listIsEmpty ? this.throwErrorDestroy("You should use a `fetch` function prop") : void 0 : this.throwErrorDestroy("You should wrap the md-input in a md-input-container");
        }, throwErrorDestroy: function throwErrorDestroy(t) {
          throw this.$destroy(), new Error(t);
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = 8,
        o = function o(t, e) {
      return e.top <= i - parseInt(getComputedStyle(t).marginTop, 10);
    },
        a = function a(t, e) {
      return e.top + t.offsetHeight + i >= window.innerHeight - parseInt(getComputedStyle(t).marginTop, 10);
    },
        r = function r(t, e) {
      return e.left <= i - parseInt(getComputedStyle(t).marginLeft, 10);
    },
        s = function s(t, e) {
      return e.left + t.offsetWidth + i >= window.innerWidth - parseInt(getComputedStyle(t).marginLeft, 10);
    },
        d = function d(t, e) {
      var n = getComputedStyle(t);return o(t, e) && (e.top = i - parseInt(n.marginTop, 10)), r(t, e) && (e.left = i - parseInt(n.marginLeft, 10)), s(t, e) && (e.left = window.innerWidth - i - t.offsetWidth - parseInt(n.marginLeft, 10)), a(t, e) && (e.top = window.innerHeight - i - t.offsetHeight - parseInt(n.marginTop, 10)), e;
    };e.default = d, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-avatar", mixins: [a.default] }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-backdrop", methods: { close: function close() {
          this.$emit("close");
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-bottom-bar", props: { mdShift: Boolean }, mixins: [a.default], computed: { classes: function classes() {
          return this.mdShift ? "md-shift" : "md-fixed";
        } }, methods: { setActive: function setActive(t) {
          this.$children.forEach(function (e) {
            e.active = e === t;
          }), this.$emit("change", this.$children.findIndex(function (e) {
            return e === t;
          }));
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-bottom-bar-item", props: { mdIcon: String, mdIconSrc: String, mdIconset: String, mdActive: Boolean, disabled: Boolean, href: String }, data: function data() {
        return { active: !1 };
      }, computed: { classes: function classes() {
          return { "md-active": this.active };
        } }, watch: { mdActive: function mdActive(t) {
          this.setActive(t);
        } }, methods: { setActive: function setActive(t, e) {
          t && this.$parent.setActive(this), e && this.$emit("click", e);
        } }, mounted: function mounted() {
        if (!this.$parent.$el.classList.contains("md-bottom-bar")) throw this.$destroy(), new Error("You should wrap the md-bottom-bar-item in a md-bottom-bar");this.mdActive && (this.active = !0);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-button", props: { href: String, target: String, rel: String, type: { type: String, default: "button" }, disabled: Boolean }, mixins: [a.default], computed: { newRel: function newRel() {
          return "_blank" === this.target ? this.rel || "noopener" : this.rel;
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = void 0;e.default = { name: "md-button-toggle", props: { mdSingle: Boolean }, mixins: [a.default], mounted: function mounted() {
        var t = this;this.$children.forEach(function (e) {
          var n = e.$el,
              i = "md-toggle";r = function r() {
            t.mdSingle ? (t.$children.forEach(function (t) {
              t.$el.classList.remove(i);
            }), n.classList.add(i)) : n.classList.toggle(i);
          }, n && n.classList.contains("md-button") && n.addEventListener("click", r);
        });
      }, beforeDestroy: function beforeDestroy() {
        this.$children.forEach(function (t) {
          var e = t.$el;e && e.classList.contains("md-button") && e.removeEventListener("click", r);
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-card", props: { mdWithHover: Boolean }, mixins: [a.default], computed: { classes: function classes() {
          return { "md-with-hover": this.mdWithHover };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-actions" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-area", props: { mdInset: Boolean }, computed: { classes: function classes() {
          return { "md-inset": this.mdInset };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-content" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-expand", data: function data() {
        return { trigger: null, content: null };
      }, methods: { toggle: function toggle() {
          this.$refs.expand.classList.toggle("md-active");
        } }, mounted: function mounted() {
        var t = this;window.setTimeout(function () {
          t.trigger = t.$el.querySelector("[md-expand-trigger]"), t.content = t.$el.querySelector(".md-card-content"), t.content && t.trigger.addEventListener("click", t.toggle);
        }, 200);
      }, destroyed: function destroyed() {
        this.content && this.trigger.removeEventListener("click", this.toggle);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-header" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-header-text", mounted: function mounted() {
        this.parentClasses = this.$parent.$el.classList, this.parentClasses.contains("md-card-header") && (this.insideParent = !0, this.parentClasses.add("md-card-header-flex"));
      }, destroyed: function destroyed() {
        this.parentClasses.remove("md-card-header-flex");
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-media", props: { mdRatio: String, mdMedium: Boolean, mdBig: Boolean }, computed: { classes: function t() {
          var t = {};if (this.mdRatio) {
            var e = [];this.mdRatio.indexOf(":") !== -1 ? e = this.mdRatio.split(":") : this.mdRatio.indexOf("/") !== -1 && (e = this.mdRatio.split("/")), 2 === e.length && (t["md-" + e[0] + "-" + e[1]] = !0);
          }return (this.mdMedium || this.mdBig) && (t = { "md-medium": this.mdMedium, "md-big": this.mdBig }), t;
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-card-media-actions" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(65),
        a = i(o);e.default = { name: "md-card-media-cover", props: { mdTextScrim: Boolean, mdSolid: Boolean }, data: function data() {
        return { backdropBg: {} };
      }, computed: { classes: function classes() {
          return { "md-text-scrim": this.mdTextScrim, "md-solid": this.mdSolid };
        }, styles: function styles() {
          return { background: this.backdropBg };
        } }, methods: { applyScrimColor: function applyScrimColor(t) {
          this.$refs.backdrop && (this.backdropBg = "linear-gradient(to bottom, rgba(0, 0, 0, 0) 20%, rgba(0, 0, 0, " + t / 2 + ") 66%, rgba(0, 0, 0, " + t + ") 100%)");
        }, applySolidColor: function applySolidColor(t) {
          var e = this.$el.querySelector(".md-card-area");e && (e.style.background = "rgba(0, 0, 0, " + t + ")");
        } }, mounted: function mounted() {
        var t = this,
            e = function e() {
          var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : .6;t.mdTextScrim ? t.applyScrimColor(e) : t.mdSolid && t.applySolidColor(e);
        },
            n = this.$el.querySelector("img");n && (this.mdTextScrim || this.mdSolid) && (0, a.default)(n, function (t) {
          var n = 256,
              i = (100 * Math.abs(n - t) / n + 15) / 100;i >= .7 && (i = .7), e(i);
        }, e);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-checkbox", props: { name: String, value: [String, Boolean], id: String, disabled: Boolean }, mixins: [a.default], data: function data() {
        return { checked: this.value || !1 };
      }, computed: { classes: function classes() {
          return { "md-checked": this.checked, "md-disabled": this.disabled };
        } }, watch: { value: function value() {
          this.checked = !!this.value;
        } }, methods: { toggleCheck: function toggleCheck(t) {
          this.disabled || (this.checked = !this.checked, this.$emit("change", this.checked, t), this.$emit("input", this.checked, t));
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-chip", props: { disabled: Boolean, mdDeletable: Boolean, mdEditable: Boolean }, mixins: [a.default], computed: { classes: function classes() {
          return { "md-deletable": this.mdDeletable, "md-disabled": this.disabled, "md-editable": this.mdEditable };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = n(36),
        s = i(r);e.default = { name: "md-chips", props: { value: Array, disabled: Boolean, debounce: { type: Number, default: 100 }, mdInputId: String, mdInputName: String, mdInputPlaceholder: String, mdInputType: { type: String, default: "text" }, mdStatic: Boolean, mdMax: { type: Number, default: 1 / 0 } }, mixins: [a.default], data: function data() {
        return { currentChip: null, selectedChips: this.value, inputId: this.mdInputId || "chips-" + (0, s.default)() };
      }, watch: { value: function value(t) {
          this.selectedChips = t;
        } }, computed: { classes: function classes() {
          return { "md-static": this.mdStatic, "md-disabled": this.disabled, "md-chips": !0 };
        } }, methods: { applyInputFocus: function applyInputFocus() {
          var t = this;this.$nextTick(function () {
            t.$refs.input.$el.focus();
          });
        }, addChip: function addChip() {
          if (this.currentChip && this.selectedChips.length < this.mdMax) {
            var t = this.currentChip.trim();this.selectedChips.indexOf(t) < 0 && (this.selectedChips.push(t), this.currentChip = null, this.$emit("input", this.selectedChips), this.$emit("change", this.selectedChips), this.applyInputFocus());
          }
        }, deleteChip: function deleteChip(t) {
          var e = this.selectedChips.indexOf(t);e >= 0 && this.selectedChips.splice(e, 1), this.$emit("change", this.selectedChips), this.applyInputFocus();
        }, editChip: function editChip(t) {
          var e = this.selectedChips.indexOf(t);e >= 0 && this.selectedChips.splice(e, 1), this.currentChip = t, this.$emit("change", this.selectedChips), this.applyInputFocus();
        }, deleteLastChip: function deleteLastChip() {
          this.currentChip || (this.selectedChips.pop(), this.$emit("change", this.selectedChips), this.applyInputFocus());
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = n(41),
        s = i(r);e.default = { name: "md-dialog", props: { mdClickOutsideToClose: { type: Boolean, default: !0 }, mdEscToClose: { type: Boolean, default: !0 }, mdBackdrop: { type: Boolean, default: !0 }, mdOpenFrom: String, mdCloseTo: String, mdFullscreen: { type: Boolean, default: !1 } }, mixins: [a.default], data: function data() {
        return { active: !1, transitionOff: !1, dialogTransform: "" };
      }, computed: { classes: function classes() {
          return { "md-active": this.active };
        }, dialogClasses: function dialogClasses() {
          return { "md-fullscreen": this.mdFullscreen, "md-transition-off": this.transitionOff, "md-reference": this.mdOpenFrom || this.mdCloseTo };
        }, styles: function styles() {
          return { transform: this.dialogTransform };
        } }, methods: { removeDialog: function removeDialog() {
          document.body.contains(this.dialogElement) && this.$el.parentNode.removeChild(this.$el);
        }, calculateDialogPos: function calculateDialogPos(t) {
          var e = document.querySelector(t);if (e) {
            var n = e.getBoundingClientRect(),
                i = this.dialogInnerElement.getBoundingClientRect(),
                o = n.width / i.width,
                a = n.height / i.height,
                r = { top: -(i.top - n.top), left: -(i.left - n.left + n.width) };n.top > i.top + i.height && (r.top = n.top - i.top), n.left > i.left + i.width && (r.left = n.left - i.left - n.width), this.dialogTransform = "translate3D(" + r.left + "px, " + r.top + "px, 0) scale(" + o + ", " + a + ")";
          }
        }, open: function open() {
          var t = this;document.body.appendChild(this.dialogElement), this.transitionOff = !0, this.calculateDialogPos(this.mdOpenFrom), window.setTimeout(function () {
            t.dialogElement.focus(), t.transitionOff = !1, t.active = !0;
          }), this.$emit("open");
        }, closeOnEsc: function closeOnEsc() {
          this.mdEscToClose && this.close();
        }, close: function close() {
          var t = this;document.body.contains(this.dialogElement) && this.$nextTick(function () {
            var e = function e() {
              var n = t.dialogElement.querySelector(".md-ripple.md-active");n && n.classList.remove("md-active"), t.dialogInnerElement.removeEventListener(s.default, e), document.body.removeChild(t.dialogElement), t.dialogTransform = "";
            };t.transitionOff = !0, t.dialogTransform = "", t.calculateDialogPos(t.mdCloseTo), window.setTimeout(function () {
              t.transitionOff = !1, t.active = !1, t.dialogInnerElement.addEventListener(s.default, e);
            }), t.$emit("close");
          });
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.dialogElement = t.$el, t.dialogInnerElement = t.$refs.dialog, t.removeDialog();
        });
      }, beforeDestroy: function beforeDestroy() {
        this.removeDialog();
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-dialog-actions" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-dialog-content" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-dialog-title" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-dialog-alert", props: { mdTitle: String, mdContent: String, mdContentHtml: String, mdOkText: { type: String, default: "Ok" } }, data: function data() {
        return { debounce: !1 };
      }, methods: { fireCloseEvent: function fireCloseEvent() {
          this.debounce || this.$emit("close");
        }, open: function open() {
          this.$emit("open"), this.debounce = !1, this.$refs.dialog.open();
        }, close: function close() {
          this.fireCloseEvent(), this.debounce = !0, this.$refs.dialog.close();
        } }, mounted: function mounted() {
        if (!this.mdContent && !this.mdContentHtml) throw new Error("Missing md-content or md-content-html attributes");
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-dialog-confirm", props: { mdTitle: String, mdContent: String, mdContentHtml: String, mdOkText: { type: String, default: "Ok" }, mdCancelText: { type: String, default: "Cancel" } }, data: function data() {
        return { debounce: !1 };
      }, methods: { fireCloseEvent: function fireCloseEvent(t) {
          this.debounce || this.$emit("close", t);
        }, open: function open() {
          this.$emit("open"), this.debounce = !1, this.$refs.dialog.open();
        }, close: function close(t) {
          this.fireCloseEvent(t), this.debounce = !0, this.$refs.dialog.close();
        } }, mounted: function mounted() {
        if (!this.mdContent && !this.mdContentHtml) throw new Error("Missing md-content or md-content-html attributes");
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-dialog-prompt", props: { value: { type: [String, Number], required: !0 }, mdTitle: String, mdContent: String, mdContentHtml: String, mdOkText: { type: String, default: "Ok" }, mdCancelText: { type: String, default: "Cancel" }, mdInputId: String, mdInputName: String, mdInputMaxlength: [String, Number], mdInputPlaceholder: String }, data: function data() {
        return { debounce: !1 };
      }, methods: { fireCloseEvent: function fireCloseEvent(t) {
          this.debounce || this.$emit("close", t);
        }, open: function open() {
          var t = this;this.$emit("open"), this.debounce = !1, this.$refs.dialog.open(), window.setTimeout(function () {
            t.$refs.input.$el.focus();
          });
        }, close: function close(t) {
          this.fireCloseEvent(t), this.debounce = !0, this.$refs.dialog.close();
        }, confirmValue: function confirmValue() {
          this.$emit("input", this.$refs.input.$el.value), this.close("ok");
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-divider" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(67),
        a = i(o),
        r = n(10),
        s = i(r);e.default = { name: "md-file", props: { value: String, id: String, name: String, disabled: Boolean, required: Boolean, placeholder: String, accept: String, multiple: Boolean }, data: function data() {
        return { filename: this.value };
      }, watch: { value: function value() {
          this.filename = this.value;
        } }, methods: { getMultipleName: function getMultipleName(t) {
          var e = [];return [].concat((0, a.default)(t)).forEach(function (t) {
            e.push(t.name);
          }), e.join(", ");
        }, openPicker: function openPicker() {
          this.disabled || (this.resetFile(), this.$refs.fileInput.click(), this.$refs.textInput.$el.focus());
        }, resetFile: function resetFile() {
          this.parentContainer.value = "", this.$refs.fileInput.value = "";
        }, onFileSelected: function onFileSelected(t) {
          var e = t.target.files || t.dataTransfer.files;e ? e.length > 1 ? this.filename = this.getMultipleName(e) : 1 === e.length ? this.filename = e[0].name : this.filename = null : this.filename = t.target.value.split("\\").pop(), this.$emit("selected", e || t.target.value), this.$emit("input", this.filename);
        } }, mounted: function mounted() {
        if (this.parentContainer = (0, s.default)(this.$parent, "md-input-container"), !this.parentContainer) throw this.$destroy(), new Error("You should wrap the md-file in a md-input-container");this.parentContainer.hasFile = !0;
      }, beforeDestroy: function beforeDestroy() {
        this.parentContainer.hasFile = !1;
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = {};e.default = { name: "md-icon", props: { mdSrc: String, mdIconset: { type: String, default: "material-icons" } }, data: function data() {
        return { svgContent: null, imageSrc: null };
      }, mixins: [a.default], watch: { mdSrc: function mdSrc() {
          this.svgContent = null, this.imageSrc = null, this.checkSrc();
        } }, methods: { isImage: function isImage(t) {
          return t.indexOf("image") >= 0;
        }, isSVG: function isSVG(t) {
          return t.indexOf("svg") >= 0;
        }, setSVGContent: function setSVGContent(t) {
          var e = this;this.svgContent = t, this.$nextTick(function () {
            e.$el.children[0].removeAttribute("fill");
          });
        }, loadSVG: function loadSVG() {
          if (r[this.mdSrc]) this.setSVGContent(r[this.mdSrc]);else {
            var t = new XMLHttpRequest(),
                e = this;t.open("GET", this.mdSrc, !0), t.onload = function () {
              var t = this.getResponseHeader("content-type");this.status >= 200 && this.status < 400 && e.isImage(t) ? e.isSVG(t) ? (r[e.mdSrc] = this.response, e.setSVGContent(this.response)) : e.loadImage() : console.warn("The file " + e.mdSrc + " is not a valid image.");
            }, t.send();
          }
        }, loadImage: function loadImage() {
          this.imageSrc = this.mdSrc;
        }, checkSrc: function checkSrc() {
          this.mdSrc && (this.mdSrc.indexOf(".svg") >= 0 ? this.loadSVG() : this.loadImage());
        } }, mounted: function mounted() {
        this.checkSrc();
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(65),
        a = i(o);e.default = { name: "md-image", props: { mdSrc: String }, data: function data() {
        return { loaded: !1, applyBlack: !0, imageElement: null };
      }, watch: { mdSrc: function mdSrc() {
          this.createImage();
        } }, computed: { classes: function classes() {
          return { "md-loaded": this.loaded, "md-black-output": this.applyBlack };
        } }, methods: { analyzeLightness: function analyzeLightness(t) {
          var e = this,
              n = function n() {
            e.loaded = !0;
          };(0, a.default)(t, function (t) {
            var i = 256,
                o = (100 * Math.abs(i - t) / i + 15) / 100;o >= .7 && (e.applyBlack = !0), e.$nextTick(n);
          }, n);
        }, createImage: function createImage() {
          this.loaded = !1, this.applyBlack = !1, this.imageElement = null, this.mdSrc && (this.imageElement = document.createElement("img"), this.imageElement.crossOrigin = "", this.imageElement.src = this.mdSrc, this.analyzeLightness(this.imageElement));
        } }, created: function created() {
        this.createImage();
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(207),
        a = i(o),
        r = n(51),
        s = i(r),
        d = n(124),
        l = i(d),
        c = n(58),
        u = i(c),
        m = n(10),
        f = i(m);e.default = { mixins: [u.default, l.default], data: function data() {
        return { items: [], loading: !1, query: "", selected: null, timeout: 0, parentContainer: null, searchButton: null };
      }, computed: { listIsEmpty: function listIsEmpty() {
          return 0 === this.list.length;
        } }, watch: { list: function list(t) {
          this.items = (0, s.default)([], t);
        }, query: function query(t) {
          this.$refs.input.value = t, this.setParentUpdateValue(t);
        }, value: function value(t) {
          this.query = t, this.setParentUpdateValue(t);
        } }, methods: { debounceUpdate: function debounceUpdate() {
          var t = this;this.onInput(), this.timeout && window.clearTimeout(this.timeout), this.timeout = window.setTimeout(function () {
            return t.listIsEmpty ? void t.update() : void t.renderFilteredList();
          }, this.debounce);
        }, hit: function hit(t) {
          this.query = t[this.printAttribute], this.$refs.input.value = t[this.printAttribute], this.selected = t, this.onInput(), this.$emit("selected", this.selected, this.$refs.input.value);
        }, makeFetchRequest: function makeFetchRequest(t) {
          var e = this;return this.fetch(t).then(function (t) {
            var n = t || t.data || t.body;n = e.prepareResponseData ? e.prepareResponseData(n) : n, e.items = e.limit ? n.slice(0, e.limit) : n, e.loading = !1, e.toggleMenu();
          });
        }, onFocus: function onFocus() {
          this.parentContainer && (this.parentContainer.isFocused = !0), this.$refs.input.focus();
        }, onInput: function onInput() {
          this.updateValues(), this.$emit("change", this.$refs.input.value), this.$emit("input", this.$refs.input.value);
        }, renderFilteredList: function renderFilteredList() {
          this.filterList && (this.items = this.filterList((0, s.default)([], this.list), this.query)), this.toggleMenu();
        }, reset: function reset() {
          this.items = [], this.query = "", this.loading = !1;
        }, setParentValue: function setParentValue(t) {
          this.parentContainer.setValue(t || this.$refs.input.value);
        }, setParentDisabled: function setParentDisabled() {
          this.parentContainer.isDisabled = this.disabled;
        }, setParentRequired: function setParentRequired() {
          this.parentContainer.isRequired = this.required;
        }, setParentPlaceholder: function setParentPlaceholder() {
          this.parentContainer.hasPlaceholder = !!this.placeholder;
        }, setParentUpdateValue: function setParentUpdateValue(t) {
          this.setParentValue(t), this.updateValues(t);
        }, setSearchButton: function setSearchButton() {
          this.searchButton = this.parentContainer.$el.querySelector("[md-autocomplete-search]"), this.searchButton && this.searchButton.addEventListener("click", this.makeFetchRequest);
        }, update: function update() {
          if (!this.query && !this.list.length) return this.reset();if (!(this.minChars && this.query.length < this.minChars)) {
            this.loading = !0;var t = (0, a.default)({}, this.queryParam, this.query);return this.makeFetchRequest(t);
          }
        }, toggleMenu: function toggleMenu() {
          this.items.length && this.$refs.menu.toggle();
        }, updateValues: function updateValues(t) {
          var e = t || this.$refs.input.value || this.value;this.setParentValue(e), this.parentContainer.inputLength = e ? e.length : 0;
        } }, beforeDestroy: function beforeDestroy() {
        this.searchButton && this.searchButton.removeEventListener("click", this.makeFetchRequest);
      }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.parentContainer = (0, f.default)(t.$parent, "md-input-container"), t.listIsEmpty || (t.items = (0, s.default)([], t.list)), t.query = t.value, t.verifyProps(), t.setSearchButton(), t.setParentDisabled(), t.setParentRequired(), t.setParentPlaceholder(), t.handleMaxLength(), t.updateValues();
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(58),
        a = i(o),
        r = n(10),
        s = i(r);e.default = { name: "md-input", props: { type: { type: String, default: "text" } }, mixins: [a.default], mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          if (t.parentContainer = (0, s.default)(t.$parent, "md-input-container"), !t.parentContainer) throw t.$destroy(), new Error("You should wrap the md-input in a md-input-container");t.parentContainer.inputInstance = t, t.setParentDisabled(), t.setParentRequired(), t.setParentPlaceholder(), t.handleMaxLength(), t.updateValues();
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = n(66),
        s = i(r);e.default = { name: "md-input-container", props: { mdInline: Boolean, mdHasPassword: Boolean, mdClearable: Boolean }, mixins: [a.default], data: function data() {
        return { value: "", input: !1, inputInstance: null, showPassword: !1, enableCounter: !1, hasSelect: !1, hasPlaceholder: !1, hasFile: !1, isDisabled: !1, isRequired: !1, isFocused: !1, counterLength: 0, inputLength: 0 };
      }, computed: { hasValue: function hasValue() {
          return (0, s.default)(this.value) ? this.value.length > 0 : Boolean(this.value);
        }, classes: function classes() {
          return { "md-input-inline": this.mdInline, "md-has-password": this.mdHasPassword, "md-clearable": this.mdClearable, "md-has-select": this.hasSelect, "md-has-file": this.hasFile, "md-has-value": this.hasValue, "md-input-placeholder": this.hasPlaceholder, "md-input-disabled": this.isDisabled, "md-input-required": this.isRequired, "md-input-focused": this.isFocused };
        } }, methods: { isInput: function isInput() {
          return this.input && "input" === this.input.tagName.toLowerCase();
        }, togglePasswordType: function togglePasswordType() {
          this.isInput() && ("password" === this.input.type ? (this.input.type = "text", this.showPassword = !0) : (this.input.type = "password", this.showPassword = !1), this.input.focus());
        }, clearInput: function clearInput() {
          this.inputInstance.$el.value = "", this.inputInstance.$emit("input", ""), this.setValue("");
        }, setValue: function setValue(t) {
          this.value = t;
        } }, mounted: function mounted() {
        if (this.input = this.$el.querySelectorAll("input, textarea, select, .md-file")[0], !this.input) throw this.$destroy(), new Error("Missing input/select/textarea inside md-input-container");
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(115),
        a = i(o),
        r = n(58),
        s = i(r),
        d = n(10),
        l = i(d);e.default = { name: "md-textarea", mixins: [s.default], watch: { value: function value() {
          var t = this;this.$nextTick(function () {
            return a.default.update(t.$el);
          });
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          if (t.parentContainer = (0, l.default)(t.$parent, "md-input-container"), !t.parentContainer) throw t.$destroy(), new Error("You should wrap the md-textarea in a md-input-container");t.parentContainer.inputInstance = t, t.setParentDisabled(), t.setParentRequired(), t.setParentPlaceholder(), t.handleMaxLength(), t.updateValues(), t.$el.getAttribute("rows") || t.$el.setAttribute("rows", "1"), (0, a.default)(t.$el), setTimeout(function () {
            return a.default.update(t.$el);
          }, 200);
        });
      }, beforeDestroy: function beforeDestroy() {
        a.default.destroy(this.$el);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-layout", props: { mdTag: { type: String, default: "div" }, mdRow: Boolean, mdRowXsmall: Boolean, mdRowSmall: Boolean, mdRowMedium: Boolean, mdRowLarge: Boolean, mdRowXlarge: Boolean, mdColumn: Boolean, mdColumnXsmall: Boolean, mdColumnSmall: Boolean, mdColumnMedium: Boolean, mdColumnLarge: Boolean, mdColumnXlarge: Boolean, mdHideXsmall: Boolean, mdHideSmall: Boolean, mdHideMedium: Boolean, mdHideLarge: Boolean, mdHideXlarge: Boolean, mdHideXsmallAndUp: Boolean, mdHideSmallAndUp: Boolean, mdHideMediumAndUp: Boolean, mdHideLargeAndUp: Boolean, mdHideXlargeAndUp: Boolean, mdGutter: [String, Number, Boolean], mdAlign: String, mdAlignXsmall: String, mdAlignSmall: String, mdAlignMedium: String, mdAlignLarge: String, mdAlignXlarge: String, mdVerticalAlign: String, mdVerticalAlignXsmall: String, mdVerticalAlignSmall: String, mdVerticalAlignMedium: String, mdVerticalAlignLarge: String, mdVerticalAlignXlarge: String, mdFlex: [String, Number, Boolean], mdFlexXsmall: [String, Number, Boolean], mdFlexSmall: [String, Number, Boolean], mdFlexMedium: [String, Number, Boolean], mdFlexLarge: [String, Number, Boolean], mdFlexXlarge: [String, Number, Boolean], mdFlexOffset: [String, Number, Boolean], mdFlexOffsetXsmall: [String, Number, Boolean], mdFlexOffsetSmall: [String, Number, Boolean], mdFlexOffsetMedium: [String, Number, Boolean], mdFlexOffsetLarge: [String, Number, Boolean], mdFlexOffsetXlarge: [String, Number, Boolean] }, computed: { classes: function t() {
          var t = { "md-row": this.mdRow, "md-row-xsmall": this.mdRowXsmall, "md-row-small": this.mdRowSmall, "md-row-medium": this.mdRowMedium, "md-row-large": this.mdRowLarge, "md-row-xlarge": this.mdRowXlarge, "md-column": this.mdColumn, "md-column-xsmall": this.mdColumnXsmall, "md-column-small": this.mdColumnSmall, "md-column-medium": this.mdColumnMedium, "md-column-large": this.mdColumnLarge, "md-column-xlarge": this.mdColumnXlarge, "md-hide-xsmall": this.mdHideXsmall, "md-hide-small": this.mdHideSmall, "md-hide-medium": this.mdHideMedium, "md-hide-large": this.mdHideLarge, "md-hide-xlarge": this.mdHideXlarge, "md-hide-xsmall-and-up": this.mdHideXsmallAndUp, "md-hide-small-and-up": this.mdHideSmallAndUp, "md-hide-medium-and-up": this.mdHideMediumAndUp, "md-hide-large-and-up": this.mdHideLargeAndUp, "md-hide-xlarge-and-up": this.mdHideXlargeAndUp };return this.mdGutter && ("boolean" == typeof this.mdGutter ? t["md-gutter"] = !0 : this.mdGutter && (t["md-gutter-" + this.mdGutter] = !0)), this.generatePropClasses("md-flex", "", "mdFlex", t), this.generatePropClasses("md-flex", "xsmall", "mdFlexXsmall", t), this.generatePropClasses("md-flex", "small", "mdFlexSmall", t), this.generatePropClasses("md-flex", "medium", "mdFlexMedium", t), this.generatePropClasses("md-flex", "large", "mdFlexLarge", t), this.generatePropClasses("md-flex", "xlarge", "mdFlexXlarge", t), this.generatePropClasses("md-flex-offset", "", "mdFlexOffset", t), this.generatePropClasses("md-flex-offset", "xsmall", "mdFlexOffsetXsmall", t), this.generatePropClasses("md-flex-offset", "small", "mdFlexOffsetSmall", t), this.generatePropClasses("md-flex-offset", "medium", "mdFlexOffsetMedium", t), this.generatePropClasses("md-flex-offset", "large", "mdFlexOffsetLarge", t), this.generatePropClasses("md-flex-offset", "xlarge", "mdFlexOffsetXlarge", t), this.generatePropClasses("md-align", "", "mdAlign", t), this.generatePropClasses("md-align", "xsmall", "mdAlignXsmall", t), this.generatePropClasses("md-align", "small", "mdAlignSmall", t), this.generatePropClasses("md-align", "medium", "mdAlignMedium", t), this.generatePropClasses("md-align", "large", "mdAlignLarge", t), this.generatePropClasses("md-align", "xlarge", "mdAlignXlarge", t), this.generatePropClasses("md-vertical-align", "", "mdVerticalAlign", t), this.generatePropClasses("md-vertical-align", "xsmall", "mdVerticalAlignXsmall", t), this.generatePropClasses("md-vertical-align", "small", "mdVerticalAlignSmall", t), this.generatePropClasses("md-vertical-align", "medium", "mdVerticalAlignMedium", t), this.generatePropClasses("md-vertical-align", "large", "mdVerticalAlignLarge", t), this.generatePropClasses("md-vertical-align", "xlarge", "mdVerticalAlignXlarge", t), t;
        } }, methods: { generatePropClasses: function generatePropClasses(t, e, n, i) {
          e && (e = "-" + e), this[n] && ("boolean" == typeof this[n] ? this[n] ? i[t + e] = !0 : i[t + e + "-none"] = !0 : i[t + e + "-" + this[n]] = !0);
        } }, render: function render(t) {
        return t(this.mdTag, { staticClass: "md-layout", class: this.classes }, this.$slots.default);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-list", mixins: [a.default] }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-list-expand" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-list-item", props: { disabled: Boolean }, computed: { classes: function classes() {
          return { "md-disabled": this.disabled };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-list-item" }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(10),
        a = i(o);e.default = { name: "md-list-item", props: { disabled: Boolean, mdExpandMultiple: Boolean }, data: function data() {
        return { parentList: !1, active: !1, height: 0, contentObserver: null, transitionOff: !0 };
      }, computed: { classes: function classes() {
          return { "md-disabled": this.disabled, "md-active": this.active };
        }, expandClasses: function expandClasses() {
          return { "md-transition-off": this.transitionOff };
        }, expandStyles: function expandStyles() {
          return { "margin-bottom": this.height };
        } }, methods: { resetSiblings: function resetSiblings() {
          var t = this;this.parentList.$children.forEach(function (e) {
            e.$el !== t.$el && e.$el.classList.contains("md-list-item-expand") && (e.active = !1);
          });
        }, calculatePadding: function calculatePadding() {
          var t = this;window.requestAnimationFrame(function () {
            t.height = -t.$el.scrollHeight + "px", window.setTimeout(function () {
              t.transitionOff = !1;
            });
          });
        }, toggleExpandList: function toggleExpandList(t) {
          this.mdExpandMultiple || this.resetSiblings(), this.calculatePadding(), this.active = !this.active, this.$emit("click", t);
        }, recalculateAfterChange: function recalculateAfterChange() {
          this.transitionOff = !0, this.calculatePadding();
        }, observeChildChanges: function observeChildChanges() {
          this.contentObserver = new MutationObserver(this.recalculateAfterChange), this.contentObserver.observe(this.$refs.expand, { childList: !0, characterData: !0, subtree: !0 });
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.parentList = (0, a.default)(t.$parent, "md-list"), t.calculatePadding(), t.observeChildChanges(), window.addEventListener("resize", t.recalculateAfterChange);
        });
      }, beforeDestroy: function beforeDestroy() {
        this.contentObserver && this.contentObserver.disconnect(), window.removeEventListener("resize", this.recalculateAfterChange);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-list-item", props: { href: String, target: String, disabled: Boolean }, computed: { classes: function classes() {
          return { "md-disabled": this.disabled };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-list-item", props: { disabled: Boolean }, computed: { classes: function classes() {
          return { "md-disabled": this.disabled };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(41),
        a = i(o),
        r = n(125),
        s = i(r);e.default = { name: "md-menu", props: { mdSize: { type: [Number, String], default: 0 }, mdDirection: { type: String, default: "bottom right" }, mdAlignTrigger: { type: Boolean, default: !1 }, mdOffsetX: { type: [Number, String], default: 0 }, mdOffsetY: { type: [Number, String], default: 0 }, mdCloseOnSelect: { type: Boolean, default: !0 } }, data: function data() {
        return { active: !1 };
      }, watch: { mdSize: function mdSize(t, e) {
          t >= 1 && t <= 7 && (this.removeLastSizeMenuContentClass(e), this.addNewSizeMenuContentClass(t));
        }, mdDirection: function mdDirection(t, e) {
          this.removeLastDirectionMenuContentClass(e), this.addNewDirectionMenuContentClass(t);
        }, mdAlignTrigger: function mdAlignTrigger(t) {
          this.handleAlignTriggerClass(t);
        } }, methods: { validateMenu: function validateMenu() {
          if (!this.menuContent) throw this.$destroy(), new Error("You must have a md-menu-content inside your menu.");if (!this.menuTrigger) throw this.$destroy(), new Error("You must have an element with a md-menu-trigger attribute inside your menu.");
        }, removeLastSizeMenuContentClass: function removeLastSizeMenuContentClass(t) {
          this.menuContent.classList.remove("md-size-" + t);
        }, removeLastDirectionMenuContentClass: function removeLastDirectionMenuContentClass(t) {
          this.menuContent.classList.remove("md-direction-" + t.replace(/ /g, "-"));
        }, addNewSizeMenuContentClass: function addNewSizeMenuContentClass(t) {
          this.menuContent.classList.add("md-size-" + t);
        }, addNewDirectionMenuContentClass: function addNewDirectionMenuContentClass(t) {
          this.menuContent.classList.add("md-direction-" + t.replace(/ /g, "-"));
        }, handleAlignTriggerClass: function handleAlignTriggerClass(t) {
          t && this.menuContent.classList.add("md-align-trigger");
        }, getPosition: function getPosition(t, e) {
          var n = this.menuTrigger.getBoundingClientRect(),
              i = "top" === t ? n.top + n.height - this.menuContent.offsetHeight : n.top,
              o = "left" === e ? n.left - this.menuContent.offsetWidth + n.width : n.left;return i += parseInt(this.mdOffsetY, 10), o += parseInt(this.mdOffsetX, 10), this.mdAlignTrigger && ("top" === t ? i -= n.height + 11 : i += n.height + 11), { top: i, left: o };
        }, calculateMenuContentPos: function calculateMenuContentPos() {
          var t = void 0;t = this.mdDirection ? this.getPosition.apply(this, this.mdDirection.trim().split(" ")) : this.getPosition("bottom", "right"), t = (0, s.default)(this.menuContent, t), this.menuContent.style.top = t.top + window.pageYOffset + "px", this.menuContent.style.left = t.left + window.pageXOffset + "px";
        }, recalculateOnResize: function recalculateOnResize() {
          window.requestAnimationFrame(this.calculateMenuContentPos);
        }, open: function open() {
          document.body.contains(this.menuContent) && document.body.removeChild(this.menuContent), document.body.appendChild(this.menuContent), document.body.appendChild(this.backdropElement), window.addEventListener("resize", this.recalculateOnResize), this.calculateMenuContentPos(), getComputedStyle(this.menuContent).top, this.menuContent.classList.add("md-active"), this.menuContent.focus(), this.active = !0, this.$emit("open");
        }, close: function t() {
          var e = this,
              t = function t(n) {
            if (e.menuContent && n.target === e.menuContent) {
              var i = e.menuContent.querySelector(".md-ripple.md-active");e.menuContent.removeEventListener(a.default, t), e.menuTrigger.focus(), e.active = !1, i && i.classList.remove("md-active"), document.body.removeChild(e.menuContent), document.body.removeChild(e.backdropElement), window.removeEventListener("resize", e.recalculateOnResize);
            }
          };this.menuContent.addEventListener(a.default, t), this.menuContent.classList.remove("md-active"), this.$emit("close");
        }, toggle: function toggle() {
          this.active ? this.close() : this.open();
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.menuTrigger = t.$el.querySelector("[md-menu-trigger]"), t.menuContent = t.$el.querySelector(".md-menu-content"), t.backdropElement = t.$refs.backdrop.$el, t.validateMenu(), t.handleAlignTriggerClass(t.mdAlignTrigger), t.addNewSizeMenuContentClass(t.mdSize), t.addNewDirectionMenuContentClass(t.mdDirection), t.$el.removeChild(t.$refs.backdrop.$el), t.menuContent.parentNode.removeChild(t.menuContent), t.menuTrigger.addEventListener("click", t.toggle);
        });
      }, beforeDestroy: function beforeDestroy() {
        document.body.contains(this.menuContent) && (document.body.removeChild(this.menuContent), document.body.removeChild(this.backdropElement)), this.menuTrigger.removeEventListener("click", this.toggle), window.removeEventListener("resize", this.recalculateOnResize);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-menu-content", data: function data() {
        return { oldHighlight: !1, highlighted: !1, itemsAmount: 0 };
      }, methods: { close: function close() {
          this.highlighted = !1, this.$parent.close();
        }, highlightItem: function highlightItem(t) {
          this.oldHighlight = this.highlighted, "up" === t && (1 === this.highlighted ? this.highlighted = this.itemsAmount : this.highlighted--), "down" === t && (this.highlighted === this.itemsAmount ? this.highlighted = 1 : this.highlighted++);
        }, fireClick: function fireClick() {
          this.highlighted > 0 && this.getOptions()[this.highlighted - 1].$el.click();
        }, getOptions: function getOptions() {
          return this.$children[0].$children.filter(function (t) {
            return t.$el.classList.contains("md-option");
          });
        } }, mounted: function mounted() {
        if (!this.$parent.$el.classList.contains("md-menu")) throw this.$destroy(), new Error("You must wrap the md-menu-content in a md-menu");
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(10),
        a = i(o);n(228), e.default = { name: "md-menu-item", props: { href: String, target: String, disabled: Boolean }, data: function data() {
        return { parentContent: {}, index: 0 };
      }, computed: { classes: function classes() {
          return { "md-highlighted": this.highlighted };
        }, highlighted: function highlighted() {
          return this.index === this.parentContent.highlighted && (this.disabled && (this.parentContent.oldHighlight > this.parentContent.highlighted ? this.parentContent.highlighted-- : this.parentContent.highlighted++), 1 === this.index ? this.parentContent.$el.scrollTop = 0 : this.index === this.parentContent.itemsAmount ? this.parentContent.$el.scrollTop = this.parentContent.$el.scrollHeight : this.$el.scrollIntoViewIfNeeded(!1), !0);
        } }, methods: { close: function close(t) {
          this.disabled || (this.parentMenu.mdCloseOnSelect && this.parentContent.close(), this.$emit("click", t), this.$emit("selected", t));
        } }, mounted: function mounted() {
        if (this.parentContent = (0, a.default)(this.$parent, "md-menu-content"), this.parentMenu = (0, a.default)(this.$parent, "md-menu"), !this.parentContent) throw this.$destroy(), new Error("You must wrap the md-menu-item in a md-menu-content");this.parentContent.itemsAmount++, this.index = this.parentContent.itemsAmount;
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(36),
        a = i(o),
        r = n(10),
        s = i(r);e.default = { props: { id: [String, Number], mdLabel: [String, Number], mdIcon: String, mdActive: Boolean, mdDisabled: Boolean, mdTooltip: String, mdTooltipDelay: { type: String, default: "0" }, mdTooltipDirection: { type: String, default: "bottom" } }, data: function data() {
        return { mounted: !1, boardId: this.id || "board-" + (0, a.default)(), width: "0px", left: "0px" };
      }, watch: { mdActive: function mdActive() {
          this.updateBoardData();
        }, mdDisabled: function mdDisabled() {
          this.updateBoardData();
        }, mdIcon: function mdIcon() {
          this.updateBoardData();
        }, mdLabel: function mdLabel() {
          this.updateBoardData();
        }, mdTooltip: function mdTooltip() {
          this.updateBoardData();
        }, mdTooltipDelay: function mdTooltipDelay() {
          this.updateBoardData();
        }, mdTooltipDirection: function mdTooltipDirection() {
          this.updateBoardData();
        } }, computed: { styles: function styles() {
          return { width: this.width, left: this.left };
        } }, methods: { getBoardData: function getBoardData() {
          return { id: this.boardId, label: this.mdLabel, icon: this.mdIcon, active: this.mdActive, disabled: this.mdDisabled, tooltip: this.mdTooltip, tooltipDelay: this.mdTooltipDelay, tooltipDirection: this.mdTooltipDirection, ref: this };
        }, updateBoardData: function updateBoardData() {
          this.parentBoards.updateBoard(this.getBoardData());
        } }, mounted: function mounted() {
        var t = this.getBoardData();if (this.parentBoards = (0, s.default)(this.$parent, "md-boards"), !this.parentBoards) throw new Error("You must wrap the md-board in a md-boards");this.mounted = !0, this.parentBoards.updateBoard(t), this.mdActive && this.parentBoards.setActiveBoard(t);
      }, beforeDestroy: function beforeDestroy() {
        this.parentBoards.unregisterBoard(this.getBoardData());
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(38),
        a = i(o),
        r = n(1),
        s = i(r),
        d = n(50),
        l = i(d);e.default = { props: { mdFixed: Boolean, mdCentered: Boolean, mdRight: Boolean, mdDynamicHeight: { type: Boolean, default: !0 }, mdElevation: { type: [String, Number], default: 0 }, mdAuto: { type: Boolean, default: !1 }, mdDuration: { type: Number, default: 5e3 }, mdControls: { type: Boolean, default: !1 }, mdInfinite: { type: Boolean, default: !1 }, mdSwipeable: Boolean, mdSwipeDistance: { type: Number, default: 100 } }, mixins: [s.default], data: function data() {
        return { boardList: {}, activeBoard: null, activeBoardNumber: 0, hasIcons: !1, hasLabel: !1, transitionControl: null, transitionOff: !1, contentHeight: "0px", contentWidth: "0px", autoTransition: null };
      }, computed: { boardClasses: function boardClasses() {
          return { "md-dynamic-height": this.mdDynamicHeight, "md-transition-off": this.transitionOff };
        }, navigationClasses: function navigationClasses() {
          return { "md-has-icon": this.hasIcons, "md-has-label": this.hasLabel, "md-fixed": this.mdFixed, "md-right": !this.mdCentered && this.mdRight, "md-centered": this.mdCentered || this.mdFixed };
        }, indicatorClasses: function indicatorClasses() {
          var t = this.lastIndicatorNumber > this.activeBoardNumber;return this.lastIndicatorNumber = this.activeBoardNumber, { "md-transition-off": this.transitionOff, "md-to-right": !t, "md-to-left": t };
        } }, methods: { getHeaderClass: function getHeaderClass(t) {
          return { "md-active": this.activeBoard === t.id, "md-disabled": t.disabled };
        }, registerBoard: function registerBoard(t) {
          this.boardList[t.id] = t;
        }, unregisterBoard: function unregisterBoard(t) {
          delete this.boardList[t.id];
        }, updateBoard: function updateBoard(t) {
          if (this.registerBoard(t), t.active) if (t.disabled) {
            if ((0, a.default)(this.boardList).length) {
              var e = (0, a.default)(this.boardList),
                  n = e.indexOf(t.id) + 1,
                  i = e[n];i ? this.setActiveBoard(this.boardList[i]) : this.setActiveBoard(this.boardList[0]);
            }
          } else this.setActiveBoard(t);
        }, observeElementChanges: function observeElementChanges() {
          this.parentObserver = new MutationObserver((0, l.default)(this.calculateOnWatch, 50)), this.parentObserver.observe(this.$refs.boardsContent, { childList: !0, attributes: !0, subtree: !0 });
        }, getBoardIndex: function getBoardIndex(t) {
          var e = (0, a.default)(this.boardList);return e.indexOf(t);
        }, calculateIndicatorPos: function calculateIndicatorPos() {
          if (this.$refs.boardHeader && this.$refs.boardHeader[this.activeBoardNumber]) {
            var t = this.$el.offsetWidth,
                e = this.$refs.boardHeader[this.activeBoardNumber],
                n = e.offsetLeft,
                i = t - n - e.offsetWidth;this.$refs.indicator.style.left = n + "px", this.$refs.indicator.style.right = i + "px";
          }
        }, calculateBoardsWidthAndPosition: function calculateBoardsWidthAndPosition() {
          var t = this.$el.offsetWidth,
              e = 0;this.contentWidth = t * this.activeBoardNumber + "px";for (var n in this.boardList) {
            var i = this.boardList[n];i.ref.width = t + "px", i.ref.left = t * e + "px", e++;
          }
        }, calculateContentHeight: function calculateContentHeight() {
          var t = this;this.$nextTick(function () {
            if ((0, a.default)(t.boardList).length) {
              var e = t.boardList[t.activeBoard].ref.$el.offsetHeight;t.contentHeight = e + "px";
            }
          });
        }, calculatePosition: function calculatePosition() {
          var t = this;window.requestAnimationFrame(function () {
            t.calculateIndicatorPos(), t.calculateBoardsWidthAndPosition(), t.calculateContentHeight();
          });
        }, debounceTransition: function debounceTransition() {
          var t = this;window.clearTimeout(this.transitionControl), this.transitionControl = window.setTimeout(function () {
            t.calculatePosition(), t.transitionOff = !1;
          }, 200);
        }, calculateOnWatch: function calculateOnWatch() {
          this.calculatePosition(), this.debounceTransition();
        }, calculateOnResize: function calculateOnResize() {
          this.transitionOff = !0, this.calculateOnWatch();
        }, start: function start() {
          var t = this;this.autoTransition && window.clearInterval(this.autoTransition), this.autoTransition = window.setInterval(function () {
            t.moveNextBoard();
          }, this.mdDuration);
        }, setActiveBoard: function setActiveBoard(t, e) {
          this.mdAuto && e && this.start(), this.hasIcons = !!t.icon, this.hasLabel = !!t.label, this.activeBoard = t.id, this.activeBoardNumber = this.getBoardIndex(this.activeBoard), this.calculatePosition(), this.$emit("change", this.activeBoardNumber);
        }, movePrevBoard: function movePrevBoard() {
          var t = (0, a.default)(this.boardList),
              e = t.indexOf(this.activeBoard) - 1,
              n = t[e];if (n) this.setActiveBoard(this.boardList[n], !0);else if (this.mdInfinite) {
            var i = (0, a.default)(this.boardList)[(0, a.default)(this.boardList).length - 1];this.setActiveBoard(this.boardList[i], !0);
          }
        }, moveNextBoard: function moveNextBoard() {
          var t = (0, a.default)(this.boardList),
              e = t.indexOf(this.activeBoard) + 1,
              n = t[e];if (n) this.setActiveBoard(this.boardList[n], !0);else if (this.mdInfinite) {
            var i = (0, a.default)(this.boardList)[0];this.setActiveBoard(this.boardList[i], !0);
          }
        }, isHorizontallyInside: function isHorizontallyInside(t) {
          return t > this.mountedRect.left && t < this.mountedRect.left + this.mountedRect.width;
        }, isVerticallyInside: function isVerticallyInside(t) {
          return t > this.mountedRect.top && t < this.mountedRect.top + this.mountedRect.height;
        }, handleTouchStart: function handleTouchStart(t) {
          this.mountedRect = this.$refs.boardsContent.getBoundingClientRect();var e = t.changedTouches[0].clientX,
              n = t.changedTouches[0].clientY;this.isHorizontallyInside(e) && this.isVerticallyInside(n) && (this.initialTouchPosition = e, this.canMove = !0);
        }, handleTouchEnd: function handleTouchEnd(t) {
          if (this.canMove) {
            var e = t.changedTouches[0].clientX,
                n = this.initialTouchPosition - e,
                i = n > 0 ? "moveNextBoard" : "movePrevBoard";Math.abs(n) > this.mdSwipeDistance && this[i](), this.canMove = !1, this.initialTouchPosition = null;
          }
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          if (t.observeElementChanges(), window.addEventListener("resize", t.calculateOnResize), (0, a.default)(t.boardList).length && !t.activeBoard) {
            var e = (0, a.default)(t.boardList)[0];t.setActiveBoard(t.boardList[e]);
          }t.mdSwipeable && (t.mountedRect = t.$refs.boardsContent.getBoundingClientRect(), t.initialTouchPosition = null, t.canMove = !1, document.addEventListener("touchstart", t.handleTouchStart), document.addEventListener("touchend", t.handleTouchEnd)), t.mdAuto && t.start();
        });
      }, beforeDestroy: function beforeDestroy() {
        this.parentObserver && this.parentObserver.disconnect(), this.autoTransition && window.clearTimeout(this.autoTransition), window.removeEventListener("resize", this.calculateOnResize), this.mdSwipeable && (document.removeEventListener("touchstart", this.handleTouchStart), document.removeEventListener("touchend", this.handleTouchEnd));
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-progress", props: { mdIndeterminate: Boolean, mdProgress: { type: Number, default: 0 } }, mixins: [a.default], computed: { classes: function classes() {
          return { "md-indeterminate": this.mdIndeterminate };
        }, styles: function styles() {
          if (!this.mdIndeterminate) return { width: this.mdProgress + "%" };
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-radio", props: { name: String, id: String, value: [String, Boolean, Number], mdValue: { type: [String, Boolean, Number], required: !0 }, disabled: Boolean }, mixins: [a.default], computed: { classes: function classes() {
          return { "md-checked": "undefined" != typeof this.value && null !== this.value && this.mdValue.toString() === this.value.toString(), "md-disabled": this.disabled };
        } }, methods: { toggleCheck: function toggleCheck(t) {
          this.disabled || (this.$emit("change", this.mdValue, t), this.$emit("input", this.mdValue, t));
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = 24;e.default = { props: { mdMaxRating: { type: Number, default: 5 }, disabled: Boolean, value: { type: Number, default: 0 }, mdIconSize: { type: Number, default: 1 }, mdFullIconset: String, mdEmptyIconset: String, mdFullIcon: { type: String, default: "star" }, mdEmptyIcon: { type: String, default: "star" } }, mixins: [a.default], data: function data() {
        return { srcFullIcon: null, srcEmptyIcon: null, rating: this.value };
      }, mounted: function mounted() {
        this.srcFullIcon = this.checkSrc(this.mdFullIcon), this.srcEmptyIcon = this.checkSrc(this.mdEmptyIcon);
      }, computed: { emptyIcon: function emptyIcon() {
          return this.mdEmptyIconset ? "" : this.mdEmptyIcon;
        }, fullIcon: function fullIcon() {
          return this.mdFullIconset ? "" : this.mdFullIcon;
        }, iconClasses: function iconClasses() {
          var t = {};return this.mdIconSize && (t["md-size-" + this.mdIconSize + "x"] = !0), t;
        }, fullIconStyle: function fullIconStyle() {
          return { width: 100 / this.mdMaxRating * this.rating + "%", "margin-left": -r * this.mdIconSize * this.mdMaxRating + "px" };
        } }, watch: { mdFullIcon: function mdFullIcon() {
          this.srcFullIcon = this.checkSrc(this.mdFullIcon);
        }, mdEmptyIcon: function mdEmptyIcon() {
          this.srcEmptyIcon = this.checkSrc(this.mdEmptyIcon);
        }, value: function value() {
          this.rating = this.value;
        } }, methods: { hoverStars: function hoverStars(t) {
          this.disabled || (this.rating = this.getIconIndex(t.currentTarget), this.$emit("hover", this.rating));
        }, clickStars: function clickStars(t) {
          if (!this.disabled) {
            var e = this.getIconIndex(t.currentTarget);this.$emit("input", e), this.$emit("change", e);
          }
        }, getIconIndex: function getIconIndex(t) {
          var e = this,
              n = this.$el.querySelectorAll(".md-empty-icon > .md-icon, .md-full-icon > .md-icon"),
              i = -1;return n = Array.prototype.slice.call(n), n.some(function (n, o) {
            if (n === t) return i = (o + 1) % e.mdMaxRating, i = i ? i : e.mdMaxRating, !0;
          }), i;
        }, checkSrc: function checkSrc(t) {
          return t && /.+\.(svg|png)/.test(t) ? t : null;
        }, onMouseOut: function onMouseOut() {
          this.rating = this.value;
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(10),
        a = i(o);e.default = { name: "md-option", props: { value: [String, Boolean, Number, Object] }, data: function data() {
        return { parentSelect: {}, check: !1, index: 0 };
      }, computed: { isSelected: function isSelected() {
          if (this.value && this.parentSelect.value) {
            var t = this.value.toString();return this.parentSelect.multiple ? this.parentSelect.value.indexOf(t) >= 0 : this.value && this.parentSelect.value && t === this.parentSelect.value.toString();
          }return !1;
        }, classes: function classes() {
          return { "md-selected": this.isSelected, "md-checked": this.check };
        } }, methods: { isMultiple: function isMultiple() {
          return this.parentSelect.multiple;
        }, setParentOption: function setParentOption() {
          this.isMultiple() ? this.check = !this.check : this.parentSelect.selectOption(this.value, this.$refs.item.textContent, this.$el);
        }, selectOption: function selectOption(t) {
          this.disabled || (this.setParentOption(), this.$emit("selected", t));
        } }, watch: { isSelected: function isSelected(t) {
          this.isMultiple() && (this.check = t);
        }, check: function check(t) {
          t ? this.parentSelect.selectMultiple(this.index, this.value, this.$refs.item.textContent) : this.parentSelect.selectMultiple(this.index);
        } }, mounted: function mounted() {
        if (this.parentSelect = (0, a.default)(this.$parent, "md-select"), this.parentContent = (0, a.default)(this.$parent, "md-menu-content"), !this.parentSelect) throw new Error("You must wrap the md-option in a md-select");this.parentSelect.optionsAmount++, this.index = this.parentSelect.optionsAmount, this.parentSelect.multipleOptions[this.index] = {}, this.parentSelect.options[this.index] = this, (this.isMultiple() && this.parentSelect.value.indexOf(this.value) >= 0 || this.parentSelect.value === this.value) && this.setParentOption();
      }, beforeDestroy: function beforeDestroy() {
        this.parentSelect && (delete this.parentSelect.options[this.index], delete this.parentSelect.multipleOptions[this.index]);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(38),
        a = i(o),
        r = n(1),
        s = i(r),
        d = n(10),
        l = i(d),
        c = n(66),
        u = i(c);e.default = { name: "md-select", props: { name: String, id: String, required: Boolean, multiple: Boolean, value: [String, Number, Array], disabled: Boolean, placeholder: String, mdMenuClass: String, mdMenuOptions: Object }, mixins: [s.default], data: function data() {
        return { lastSelected: null, selectedValue: null, selectedText: null, multipleOptions: {}, options: {}, optionsAmount: 0 };
      }, computed: { classes: function classes() {
          return { "md-disabled": this.disabled, "md-select-icon": this.hasIcon };
        }, contentClasses: function contentClasses() {
          return this.multiple ? "md-multiple " + this.mdMenuClass : this.mdMenuClass;
        }, hasIcon: function hasIcon() {
          return this.$slots.icon;
        }, valueStyle: function valueStyle() {
          return this.hasIcon ? { display: "none" } : {};
        } }, watch: { value: function value(t) {
          this.setTextAndValue(t), this.multiple && this.selectOptions(t);
        }, disabled: function disabled() {
          this.setParentDisabled();
        }, required: function required() {
          this.setParentRequired();
        }, placeholder: function placeholder() {
          this.setParentPlaceholder();
        } }, methods: { onOpen: function onOpen() {
          this.lastSelected && this.lastSelected.scrollIntoViewIfNeeded(!0), this.$emit("opened");
        }, setParentDisabled: function setParentDisabled() {
          this.parentContainer.isDisabled = this.disabled;
        }, setParentRequired: function setParentRequired() {
          this.parentContainer.isRequired = this.required;
        }, setParentPlaceholder: function setParentPlaceholder() {
          this.parentContainer.hasPlaceholder = !!this.placeholder;
        }, selectOptions: function selectOptions(t) {
          var e = this,
              n = (0, a.default)(this.options).map(function (t) {
            return e.options[t];
          });n && n.length && n.filter(function (e) {
            return t.indexOf(e.value) !== -1;
          }).forEach(function (t) {
            t.check = !0;
          });
        }, getSingleValue: function getSingleValue(t) {
          var e = this,
              n = {};return (0, a.default)(this.options).forEach(function (i) {
            var o = e.options[i];o.value === t && (n.value = t, n.text = o.$refs.item.textContent, n.el = o.$refs.item);
          }), n;
        }, getMultipleValue: function getMultipleValue(t) {
          var e = this;if ((0, u.default)(this.value)) {
            var n = [];return t.forEach(function (t) {
              (0, a.default)(e.options).forEach(function (i) {
                var o = e.options[i];if (o.value === t) {
                  var a = o.$refs.item.textContent;e.multipleOptions[i] = { value: t, text: a }, n.push(a);
                }
              });
            }), { value: t, text: n.join(", ") };
          }return {};
        }, setTextAndValue: function setTextAndValue(t) {
          var e = this.multiple ? this.getMultipleValue(t) : this.getSingleValue(t);this.selectedValue = e.value, this.selectedText = e.text, this.lastSelected = e.el, this.parentContainer && this.parentContainer.setValue(this.selectedText);
        }, changeValue: function changeValue(t) {
          this.$emit("input", t), this.$emit("change", t), this.$emit("selected", t);
        }, selectMultiple: function selectMultiple(t, e, n) {
          var i = [];this.multipleOptions[t] = { value: e, text: n };for (var o in this.multipleOptions) {
            this.multipleOptions.hasOwnProperty(o) && this.multipleOptions[o].value && i.push(this.multipleOptions[o].value);
          }this.changeValue(i);
        }, selectOption: function selectOption(t, e, n) {
          this.lastSelected = n, this.selectedText = e, this.setTextAndValue(t), this.changeValue(t);
        } }, mounted: function mounted() {
        this.parentContainer = (0, l.default)(this.$parent, "md-input-container"), this.parentContainer && (this.setParentDisabled(), this.setParentRequired(), this.setParentPlaceholder(), this.parentContainer.hasSelect = !0), this.setTextAndValue(this.value);
      }, beforeDestroy: function beforeDestroy() {
        this.parentContainer && (this.parentContainer.setValue(""), this.parentContainer.hasSelect = !1);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-sidenav", data: function data() {
        return { mdVisible: !1 };
      }, mixins: [a.default], props: { mdSwipeable: Boolean, mdSwipeThreshold: { type: Number, default: 15 }, mdSwipeDistance: { type: Number, default: 100 } }, computed: { classes: function classes() {
          return this.mdVisible && "md-active";
        } }, methods: { show: function show() {
          this.open();
        }, open: function open() {
          this.mdVisible = !0, this.$el.focus(), this.$emit("open");
        }, close: function close() {
          this.mdVisible = !1, this.$el.blur(), this.$emit("close");
        }, toggle: function toggle() {
          this.mdVisible ? this.close() : this.open();
        }, isHorizontallyInside: function isHorizontallyInside(t) {
          return t > 0 && t < this.mountedRect.left + this.mountedRect.width;
        }, isVerticallyInside: function isVerticallyInside(t) {
          return t > 0 && t < this.mountedRect.top + this.mountedRect.height;
        }, isFromStartWhenClosed: function isFromStartWhenClosed(t) {
          return !!this.mdVisible || t < this.mdSwipeThreshold;
        }, handleTouchStart: function handleTouchStart(t) {
          var e = t.touches[0].clientX - this.mountedRect.left,
              n = t.touches[0].clientY - this.mountedRect.top;this.isHorizontallyInside(e) && this.isVerticallyInside(n) && this.isFromStartWhenClosed(e) && (this.initialTouchPosition = e, this.canMove = !0);
        }, handleTouchEnd: function handleTouchEnd() {
          this.canMove = !1, this.initialTouchPosition = null;
        }, handleTouchMove: function handleTouchMove(t) {
          if (this.canMove) {
            var e = t.touches[0].clientX,
                n = this.mdVisible ? this.initialTouchPosition - e : e - this.initialTouchPosition,
                i = this.mdVisible ? "close" : "open";n > this.mdSwipeDistance && this[i]();
          }
        } }, mounted: function mounted() {
        this.mdSwipeable && (this.mountedRect = this.$refs.backdrop.$el.getBoundingClientRect(), this.initialTouchPosition = null, this.canMove = !1, document.addEventListener("touchstart", this.handleTouchStart), document.addEventListener("touchend", this.handleTouchEnd), document.addEventListener("touchmove", this.handleTouchMove));
      }, beforeDestroy: function beforeDestroy() {
        this.mdSwipeable && (document.removeEventListener("touchstart", this.handleTouchStart), document.removeEventListener("touchend", this.handleTouchEnd), document.removeEventListener("touchmove", this.handleTouchMove));
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(36),
        a = i(o),
        r = n(41),
        s = i(r),
        d = n(1),
        l = i(d),
        c = n(117),
        u = i(c);e.default = { name: "md-snackbar", props: { id: [String, Number], mdPosition: { type: String, default: "bottom center" }, mdDuration: { type: [String, Number], default: 4e3 } }, mixins: [l.default], data: function data() {
        return { snackbarId: this.id || "snackbar-" + (0, a.default)(), active: !1, rootElement: {}, snackbarElement: {}, directionClass: null, closeTimeout: null };
      }, computed: { classes: function classes() {
          var t = { "md-active": this.active };return this.directionClass = this.mdPosition.replace(/ /g, "-"), t["md-position-" + this.directionClass] = !0, t;
        } }, watch: { active: function active(t) {
          var e = "md-has-toast-" + this.directionClass,
              n = "md-has-toast";t ? (document.body.classList.add(e), document.body.classList.add(n)) : (document.body.classList.remove(e), document.body.classList.remove(n));
        } }, methods: { removeElement: function removeElement() {
          if (document.body.contains(this.snackbarElement)) {
            var t = this.snackbarElement.querySelector(".md-ripple.md-active");t && t.classList.remove("md-active"), document.body.removeChild(this.snackbarElement);
          }
        }, open: function open() {
          u.default.current && u.default.current.close(), u.default.current = this, document.body.appendChild(this.snackbarElement), window.getComputedStyle(this.$refs.container).backgroundColor, this.active = !0, this.$emit("open"), this.closeTimeout = window.setTimeout(this.close, this.mdDuration), this.timeoutStartedAt = Date.now();
        }, close: function close() {
          var t = this;if (this.$refs.container) {
            var e = function e() {
              t.$refs.container.removeEventListener(s.default, e), t.removeElement();
            };u.default.current = null, this.active = !1, this.$emit("close"), this.$refs.container.removeEventListener(s.default, e), this.$refs.container.addEventListener(s.default, e), window.clearTimeout(this.closeTimeout), this.pendingDuration = this.mdDuration;
          }
        }, pauseTimeout: function pauseTimeout() {
          this.pendingDuration = this.pendingDuration - (Date.now() - this.timeoutStartedAt), this.timeoutStartedAt = 0, window.clearTimeout(this.closeTimeout);
        }, resumeTimeout: function resumeTimeout() {
          this.timeoutStartedAt = Date.now(), this.closeTimeout = window.setTimeout(this.close, this.pendingDuration);
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.snackbarElement = t.$el, t.snackbarElement.parentNode.removeChild(t.snackbarElement), t.timeoutStartedAt = 0, t.pendingDuration = t.mdDuration;
        });
      }, beforeDestroy: function beforeDestroy() {
        window.clearTimeout(this.closeTimeout), this.removeElement();
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-speed-dial", props: { mdOpen: { type: String, default: "click" }, mdMode: { type: String, default: "fling" }, mdDirection: { type: String, default: "top" } }, mixins: [a.default], data: function data() {
        return { fabTrigger: null, active: !1 };
      }, computed: { classes: function t() {
          var t = { "md-active": this.active };return t["md-mode-" + this.mdMode] = !0, t["md-direction-" + this.mdDirection] = !0, t;
        } }, methods: { closeSpeedDial: function closeSpeedDial(t) {
          !t.target !== this.fabTrigger && this.fabTrigger.contains(t.target) || (this.active = !1, document.body.removeEventListener("click", this.closeSpeedDial));
        }, toggleSpeedDial: function toggleSpeedDial() {
          var t = this;this.active = !this.active, window.setTimeout(function () {
            document.body.addEventListener("click", t.closeSpeedDial);
          }, 50);
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.fabTrigger = t.$el.querySelector("[md-fab-trigger]"), "click" === t.mdOpen ? t.fabTrigger.addEventListener("click", t.toggleSpeedDial) : (t.$el.addEventListener("mouseenter", t.toggleSpeedDial), t.$el.addEventListener("mouseleave", t.closeSpeedDial));
        });
      }, beforeDestroy: function beforeDestroy() {
        this.fabTrigger.removeEventListener("click", this.toggleSpeedDial), document.body.removeEventListener("click", this.closeSpeedDial);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-spinner", props: { mdSize: { type: Number, default: 50 }, mdStroke: { type: Number, default: 3.5 }, mdIndeterminate: Boolean, mdProgress: { type: Number, default: 0 } }, mixins: [a.default], computed: { classes: function classes() {
          return { "md-indeterminate": this.mdIndeterminate };
        }, styles: function styles() {
          var t = this.mdSize + "px";return { width: t, height: t };
        }, dashProgress: function dashProgress() {
          var t = 125 * this.mdProgress / 100;return !this.mdIndeterminate && (t >= 125 && (t = 130), t + ", 200");
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(36),
        a = i(o),
        r = n(10),
        s = i(r);e.default = { name: "md-step", props: { id: [String, Number], mdActive: Boolean, mdButtonBack: { type: String, default: "BACK" }, mdButtonContinue: { type: String, default: "CONTINUE" }, mdContinue: { type: Boolean, default: !0 }, mdDisabled: Boolean, mdEditable: { type: Boolean, default: !0 }, mdIcon: String, mdLabel: [String, Number], mdMessage: [String], mdToolTip: String, mdTooltipDelay: { type: String, default: "0" }, mdTooltipDirection: { type: String, default: "bottom" } }, data: function data() {
        return { index: 0, left: "0px", mounted: !1, parentStepper: void 0, stepId: this.id || "step-" + (0, a.default)(), vertical: !1, width: "0px" };
      }, watch: { mdActive: function mdActive() {
          this.updateStepData();
        }, mdContinue: function mdContinue() {
          this.updateStepData();
        }, mdEditable: function mdEditable() {
          this.updateStepData();
        }, mdDisabled: function mdDisabled() {
          this.updateStepData();
        }, mdIcon: function mdIcon() {
          this.updateStepData();
        }, mdLabel: function mdLabel() {
          this.updateStepData();
        }, mdMessage: function mdMessage() {
          this.updateStepData();
        }, mdToolTip: function mdToolTip() {
          this.updateStepData();
        }, mdTooltipDelay: function mdTooltipDelay() {
          this.updateStepData();
        }, mdTooltipDirection: function mdTooltipDirection() {
          this.updateStepData();
        } }, computed: { canGoBack: function canGoBack() {
          if (0 === this.index) return !1;if (!this.parentStepper) return !1;var t = this.parentStepper.getPreviousStep(this.stepId);return !(void 0 !== t && !t.editable);
        }, continueText: function continueText() {
          return this.parentStepper && this.index + 1 === this.parentStepper.getStepsCount() && "CONTINUE" === this.mdButtonContinue ? "FINISH" : this.mdButtonContinue;
        }, isCurrentStep: function isCurrentStep() {
          return this.index === this.parentStepper.activeStepNumber;
        }, styles: function styles() {
          return this.vertical ? {} : { width: this.width, left: this.left };
        } }, methods: { getStepData: function getStepData() {
          return { id: this.stepId, label: this.mdLabel, message: this.mdMessage, icon: this.mdIcon, active: this.mdActive, continue: this.mdContinue, editable: this.mdEditable, disabled: this.mdDisabled, toolTip: this.mdToolTip, tooltipDelay: this.mdTooltipDelay, tooltipDirection: this.mdTooltipDirection, ref: this };
        }, moveNextStep: function moveNextStep() {
          this.parentStepper.moveNextStep();
        }, movePreviousStep: function movePreviousStep() {
          this.parentStepper.movePreviousStep();
        }, setActiveStep: function setActiveStep() {
          this.parentStepper.setActiveStep(this.getStepData());
        }, updateStepData: function updateStepData() {
          this.parentStepper.updateStep(this.getStepData());
        } }, mounted: function mounted() {
        var t = this.getStepData();if (this.parentStepper = (0, s.default)(this.$parent, "md-stepper"), !this.parentStepper) throw new Error("You must wrap the md-step in a md-stepper");this.mounted = !0, this.parentStepper.updateStep(t), this.mdActive && this.parentStepper.setActiveStep(t), this.vertical = this.parentStepper.mdVertical, this.index = this.parentStepper.getStepIndex(this.stepId);
      }, beforeDestroy: function beforeDestroy() {
        this.parentStepper.unregisterStep(this.getStepData());
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(10),
        a = i(o);e.default = { props: { step: Object, mdAlternateLabels: Boolean }, data: function data() {
        return { index: Number, parentStepper: {} };
      }, computed: { isCompleted: function isCompleted() {
          return this.index < this.parentStepper.activeStepNumber;
        }, getHeaderClasses: function getHeaderClasses() {
          return { "md-active": this.parentStepper.activeStep === this.step.id, "md-alternate-labels": this.mdAlternateLabels, "md-disabled": this.step.disabled, "md-has-sub-message": this.step.message, "md-primary": this.isCompleted };
        }, icon: function icon() {
          return !this.step.disabled && this.step.editable && this.isCompleted ? "mode_edit" : !this.step.disabled && this.isCompleted ? "check" : this.step.icon;
        }, stepNumber: function stepNumber() {
          return this.index + 1;
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          if (t.parentStepper = (0, a.default)(t.$parent, "md-stepper"), !t.parentStepper) throw t.$destroy(), new Error("You should wrap the md-step-header in a md-stepper");t.index = t.parentStepper.getStepIndex(t.step.id);
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(38),
        a = i(o),
        r = n(1),
        s = i(r),
        d = n(50),
        l = i(d);e.default = { name: "md-stepper", props: { mdAlternateLabels: { type: Boolean, default: !1 }, mdElevation: { type: [String, Number], default: 1 }, mdVertical: { type: Boolean, default: !1 } }, mixins: [s.default], data: function data() {
        return { stepList: {}, activeStep: null, activeStepNumber: 0, contentHeight: "0px", contentWidth: "0px" };
      }, computed: { navigationClasses: function navigationClasses() {
          return { "md-alternate-labels": this.mdAlternateLabels };
        }, stepsClasses: function stepsClasses() {
          return { "md-steps-vertical": this.mdVertical };
        } }, methods: { getNextStep: function getNextStep(t) {
          var e = this.getStepIndex(t);if (e !== this.stepList.length) {
            var n = (0, a.default)(this.stepList)[e + 1],
                i = this.stepList[n];return i;
          }
        }, getPreviousStep: function getPreviousStep(t) {
          var e = this.getStepIndex(t);if (0 !== e) {
            var n = (0, a.default)(this.stepList)[e - 1],
                i = this.stepList[n];return i;
          }
        }, getStepsCount: function getStepsCount() {
          var t = (0, a.default)(this.stepList);return t.length;
        }, getStepIndex: function getStepIndex(t) {
          var e = (0, a.default)(this.stepList);return e.indexOf(t);
        }, registerStep: function registerStep(t) {
          this.$set(this.stepList, t.id, t);
        }, moveNextStep: function moveNextStep() {
          if (this.activeStepNumber < this.getStepsCount() - 1) {
            var t = this.getNextStep(this.activeStep);this.setActiveStep(t);
          } else this.$emit("completed");
        }, movePreviousStep: function movePreviousStep() {
          if (this.activeStepNumber > 0 && this.activeStepNumber < this.getStepsCount()) {
            var t = this.getPreviousStep(this.activeStep);this.setActiveStep(t);
          }
        }, setActiveStep: function setActiveStep(t) {
          this.activeStepNumber > this.getStepIndex(t.id) && !t.editable || (this.activeStep = t.id, this.activeStepNumber = this.getStepIndex(this.activeStep), this.calculatePosition(), this.$emit("change", this.activeStepNumber));
        }, unregisterStep: function unregisterStep(t) {
          this.$delete(this.stepList, t.id);
        }, updateStep: function updateStep(t) {
          if (this.registerStep(t), t.active) if (t.disabled) {
            if ((0, a.default)(this.stepList).length) {
              var e = (0, a.default)(this.stepList),
                  n = e.indexOf(t.id) + 1,
                  i = e[n];i ? this.setActiveStep(this.stepList[i]) : this.setActiveStep(this.stepList[0]);
            }
          } else this.setActiveStep(t);
        }, observeElementChanges: function observeElementChanges() {
          this.parentObserver = new MutationObserver((0, l.default)(this.calculateOnWatch, 50)), this.parentObserver.observe(this.$refs.stepContent, { childList: !0, attributes: !0, subtree: !0 });
        }, calculateStepsWidthAndPosition: function calculateStepsWidthAndPosition() {
          if (this.mdVertical) this.contentWidth = "initial";else {
            var t = this.$el.offsetWidth,
                e = 0;this.contentWidth = t * this.activeStepNumber + "px";for (var n in this.stepList) {
              var i = this.stepList[n];i.ref.width = t + "px", i.ref.left = t * e + "px", e++;
            }
          }
        }, calculateContentHeight: function calculateContentHeight() {
          var t = this;this.$nextTick(function () {
            if (!t.mdVertical && (0, a.default)(t.stepList).length) {
              var e = t.stepList[t.activeStep].ref.$el.offsetHeight;t.contentHeight = e + "px";
            } else t.contentHeight = "initial";
          });
        }, calculatePosition: function calculatePosition() {
          var t = this;window.requestAnimationFrame(function () {
            t.calculateStepsWidthAndPosition(), t.calculateContentHeight();
          });
        }, debounceTransition: function debounceTransition() {
          var t = this;window.clearTimeout(this.transitionControl), this.transitionControl = window.setTimeout(function () {
            t.calculatePosition(), t.transitionOff = !1;
          }, 200);
        }, calculateOnWatch: function calculateOnWatch() {
          this.calculatePosition(), this.debounceTransition();
        }, calculateOnResize: function calculateOnResize() {
          this.transitionOff = !0, this.calculateOnWatch();
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          if (t.observeElementChanges(), window.addEventListener("resize", t.calculateOnResize), (0, a.default)(t.stepList).length && !t.activeStep) {
            var e = (0, a.default)(t.stepList)[0];t.setActiveStep(t.stepList[e]);
          }
        });
      }, beforeDestroy: function beforeDestroy() {
        this.parentObserver && this.parentObserver.disconnect(), window.removeEventListener("resize", this.calculateOnResize);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-subheader", mixins: [a.default] }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = 75,
        s = "-1px";e.default = { name: "md-switch", props: { name: String, value: Boolean, id: String, disabled: Boolean, type: { type: String, default: "button" } }, mixins: [a.default], data: function data() {
        return { leftPos: s, checked: Boolean(this.value) };
      }, computed: { classes: function classes() {
          return { "md-checked": this.checked, "md-disabled": this.disabled };
        }, styles: function styles() {
          return { transform: "translate3D(" + this.leftPos + ", -50%, 0)" };
        } }, watch: { checked: function checked() {
          this.setPosition();
        }, value: function value(t) {
          this.changeState(t);
        } }, methods: { setPosition: function setPosition() {
          this.leftPos = this.checked ? r + "%" : s;
        }, changeState: function changeState(t, e) {
          "undefined" != typeof e ? (this.$emit("change", t, e), e.defaultPrevented || (this.checked = t), this.$emit("input", this.checked, e)) : this.checked = t;
        }, toggle: function toggle(t) {
          this.disabled || this.changeState(!this.checked, t);
        } }, mounted: function mounted() {
        this.$nextTick(this.setPosition);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(51),
        a = i(o),
        r = n(1),
        s = i(r),
        d = n(10),
        l = i(d);e.default = { name: "md-table", props: { mdSortType: String, mdSort: String }, mixins: [s.default], data: function data() {
        return { sortType: this.mdSortType, sortBy: this.mdSort, hasRowSelection: !1, data: [], selectedRows: [] };
      }, computed: { numberOfRows: function numberOfRows() {
          return this.data ? this.data.length : 0;
        }, numberOfSelected: function numberOfSelected() {
          return this.selectedRows ? this.selectedRows.length : 0;
        } }, methods: { emitSort: function emitSort(t) {
          this.sortBy = t, this.$emit("sort", { name: t, type: this.sortType });
        }, emitSelection: function emitSelection() {
          this.$emit("select", this.selectedRows);
        }, removeRow: function removeRow(t) {
          var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
              n = e || this.data,
              i = n.indexOf(t);i !== -1 && n.splice(i, 1);
        }, setRowSelection: function setRowSelection(t, e) {
          return t ? void this.selectedRows.push(e) : void this.removeRow(e, this.selectedRows);
        }, setMultipleRowSelection: function setMultipleRowSelection(t) {
          this.selectedRows = t ? (0, a.default)([], this.data) : [];
        } }, watch: { mdSort: function mdSort() {
          this.sortBy = this.mdSort, this.$emit("sortInput");
        }, mdSortType: function mdSortType() {
          this.sortType = this.mdSortType, this.$emit("sortInput");
        } }, mounted: function mounted() {
        this.parentCard = (0, l.default)(this.$parent, "md-table-card"), this.parentCard && (this.parentCard.tableInstance = this);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o),
        r = n(10),
        s = i(r);e.default = { name: "md-table-alternate-header", mixins: [a.default], props: { mdSelectedLabel: { type: String, default: "selected" } }, data: function data() {
        return { classes: {}, tableInstance: {} };
      }, computed: { numberOfSelected: function numberOfSelected() {
          return this.tableInstance.numberOfSelected || 0;
        } }, mounted: function mounted() {
        var t = this;this.parentCard = (0, s.default)(this.$parent, "md-table-card"), this.$nextTick(function () {
          t.tableInstance = t.parentCard.tableInstance, t.$watch("tableInstance.numberOfSelected", function () {
            t.$refs.counter.textContent = t.tableInstance.numberOfSelected, t.classes = { "md-active": t.tableInstance.numberOfSelected > 0 };
          });
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-table-card", mixins: [a.default] }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-table-cell", props: { mdNumeric: Boolean }, data: function data() {
        return { hasAction: !1 };
      }, computed: { classes: function classes() {
          return { "md-numeric": this.mdNumeric, "md-has-action": this.hasAction };
        } }, mounted: function mounted() {
        this.$children.length > 0 && (this.hasAction = !0);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-table-edit", props: { value: [String, Number], mdLarge: Boolean, mdId: String, mdName: String, mdPlaceholder: String, mdMaxlength: [Number, String] }, data: function data() {
        return { active: !1 };
      }, computed: { triggerClasses: function triggerClasses() {
          return { "md-edited": this.value };
        }, dialogClasses: function dialogClasses() {
          return { "md-active": this.active, "md-large": this.mdLarge };
        }, realValue: function realValue() {
          console.log(this.value);
        } }, methods: { openDialog: function openDialog() {
          this.active = !0, this.$refs.input.$el.focus(), document.addEventListener("click", this.closeDialogOnOffClick);
        }, closeDialog: function closeDialog() {
          this.active && (this.active = !1, this.$refs.input.$el.blur(), document.removeEventListener("click", this.closeDialogOnOffClick));
        }, closeDialogOnOffClick: function closeDialogOnOffClick(t) {
          this.$refs.dialog.contains(t.target) || this.closeDialog();
        }, confirmDialog: function confirmDialog() {
          var t = this.$refs.input.$el.value;this.closeDialog(), this.$emit("input", t), this.$emit("edited", t);
        } } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(10),
        a = i(o);e.default = { name: "md-table-head", props: { mdNumeric: Boolean, mdSortBy: String, mdTooltip: String }, data: function data() {
        return { sortType: null, sorted: !1, parentTable: {} };
      }, computed: { classes: function classes() {
          var t = this.hasMatchSort();return t || (this.sorted = !1), { "md-numeric": this.mdNumeric, "md-sortable": this.mdSortBy, "md-sorted": t && this.sorted, "md-sorted-descending": t && "desc" === this.sortType };
        } }, methods: { hasMatchSort: function hasMatchSort() {
          return this.parentTable.sortBy === this.mdSortBy;
        }, changeSort: function changeSort() {
          this.mdSortBy && ("asc" === this.sortType && this.sorted ? this.sortType = "desc" : this.sortType = "asc", this.sorted = !0, this.parentTable.sortType = this.sortType, this.parentTable.emitSort(this.mdSortBy));
        }, initSort: function initSort() {
          this.hasMatchSort() && (this.sorted = !0, this.sortType = this.parentTable.sortType || "asc");
        } }, mounted: function mounted() {
        var t = this;this.parentTable = (0, a.default)(this.$parent, "md-table"), this.initSort(), this.parentTable.$on("sortInput", function () {
          t.initSort();
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(203),
        a = i(o);e.default = { name: "md-table-pagination", props: { mdSize: { type: [Number, String], default: 10 }, mdPageOptions: { type: [Array, Boolean], default: function _default() {
            return [10, 25, 50, 100];
          } }, mdPage: { type: [Number, String], default: 1 }, mdTotal: { type: [Number, String], default: "Many" }, mdLabel: { type: String, default: "Rows per page" }, mdSeparator: { type: String, default: "of" } }, data: function data() {
        return { totalItems: 0, currentPage: 1, currentSize: parseInt(this.mdSize, 10) };
      }, watch: { mdTotal: function mdTotal(t) {
          var e = this.currentPage * this.currentSize;this.subTotal = e > t ? t : e, this.totalItems = isNaN(t) ? a.default : parseInt(t, 10);
        }, mdSize: function mdSize(t) {
          this.currentSize = parseInt(t, 10);
        }, mdPage: function mdPage(t) {
          this.currentPage = parseInt(t, 10);
        } }, computed: { lastPage: function lastPage() {
          return !1;
        }, shouldDisable: function shouldDisable() {
          return this.currentSize * this.currentPage >= this.totalItems;
        }, subTotal: function subTotal() {
          var t = this.currentPage * this.currentSize;return t > this.mdTotal ? this.mdTotal : t;
        } }, methods: { emitPaginationEvent: function emitPaginationEvent() {
          this.canFireEvents && this.$emit("pagination", { size: this.currentSize, page: this.currentPage });
        }, changeSize: function changeSize() {
          this.canFireEvents && (this.$emit("size", this.currentSize), this.emitPaginationEvent());
        }, previousPage: function previousPage() {
          this.canFireEvents && (this.currentPage--, this.$emit("page", this.currentPage), this.emitPaginationEvent());
        }, nextPage: function nextPage() {
          this.canFireEvents && (this.currentPage++, this.$emit("page", this.currentPage), this.emitPaginationEvent());
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.mdPageOptions ? t.currentSize = t.mdPageOptions.includes(t.currentSize) ? t.currentSize : t.mdPageOptions[0] : t.currentSize = 0, t.canFireEvents = !0;
        });
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(10),
        a = i(o),
        r = n(36),
        s = i(r),
        d = "md-transition-off";e.default = { name: "md-table-row", props: { mdAutoSelect: Boolean, mdSelection: Boolean, mdItem: Object }, data: function data() {
        return { parentTable: {}, headRow: !1, checkbox: !1, index: 0, uuid: "mdrow_uuid_" + (0, s.default)() };
      }, computed: { isDisabled: function isDisabled() {
          return !this.mdSelection && !this.headRow;
        }, hasSelection: function hasSelection() {
          return this.mdSelection || this.headRow && this.parentTable.hasRowSelection;
        }, classes: function classes() {
          return { "md-selected": this.checkbox };
        } }, watch: { mdItem: function mdItem(t, e) {
          this.parentTable.data[this.index] = this.mdItem, this.handleMultipleSelection(t === e);
        } }, methods: { setRowSelection: function setRowSelection(t, e) {
          this.parentTable.setRowSelection(t, e);
        }, handleSingleSelection: function handleSingleSelection(t) {
          this.parentTable.setRowSelection(t, this.mdItem), this.parentTable.$children[0].checkbox = this.parentTable.numberOfSelected === this.parentTable.numberOfRows;
        }, handleMultipleSelection: function handleMultipleSelection(t) {
          var e = this;this.parentTable.numberOfRows > 25 && this.parentTable.$el.classList.add(d), this.parentTable.$children.forEach(function (e) {
            e.checkbox = t;
          }), this.parentTable.setMultipleRowSelection(t), window.setTimeout(function () {
            return e.parentTable.$el.classList.remove(d);
          }, 100);
        }, select: function select(t) {
          this.hasSelection && (this.headRow ? this.handleMultipleSelection(t) : this.handleSingleSelection(t), this.parentTable.emitSelection(), this.$emit(t ? "selected" : "deselected", t));
        }, autoSelect: function autoSelect() {
          this.mdAutoSelect && this.hasSelection && (this.checkbox = !this.checkbox, this.handleSingleSelection(this.checkbox), this.parentTable.emitSelection());
        }, startTableRow: function startTableRow() {
          if (this.parentTable = (0, a.default)(this.$parent, "md-table"), "thead" === this.$el.parentNode.tagName.toLowerCase()) this.headRow = !0;else {
            if (!this.mdItem && this.mdSelection) throw new Error('You should set the md-item property when using mdSelection. Example: <md-table-row md-selection :md-item="ITEM" ...>');this.mdSelection && (this.parentTable.hasRowSelection = !0), this.parentTable.data.push(this.mdItem);
          }
        } }, destroyed: function destroyed() {
        this.parentTable.removeRow(this.mdItem);
      }, mounted: function mounted() {
        this.startTableRow();
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(36),
        a = i(o),
        r = n(10),
        s = i(r);e.default = { name: "md-tab", props: { id: [String, Number], mdLabel: [String, Number], mdIcon: String, mdIconset: String, mdActive: Boolean, mdDisabled: Boolean, mdOptions: { default: void 0 }, mdTooltip: String, mdTooltipDelay: { type: String, default: "0" }, mdTooltipDirection: { type: String, default: "bottom" } }, data: function data() {
        return { mounted: !1, tabId: this.id || "tab-" + (0, a.default)(), width: "0px", left: "0px" };
      }, watch: { mdActive: function mdActive() {
          this.updateTabData();
        }, mdDisabled: function mdDisabled() {
          this.updateTabData();
        }, mdIcon: function mdIcon() {
          this.updateTabData();
        }, mdIconset: function mdIconset() {
          this.updateTabData();
        }, mdOptions: { deep: !0, handler: function handler() {
            this.updateTabData();
          } }, mdLabel: function mdLabel() {
          this.updateTabData();
        }, mdTooltip: function mdTooltip() {
          this.updateTabData();
        }, mdTooltipDelay: function mdTooltipDelay() {
          this.updateTabData();
        }, mdTooltipDirection: function mdTooltipDirection() {
          this.updateTabData();
        } }, computed: { styles: function styles() {
          return { width: this.width, left: this.left };
        } }, methods: { getTabData: function getTabData() {
          return { id: this.tabId, label: this.mdLabel, icon: this.mdIcon, iconset: this.mdIconset, options: this.mdOptions, active: this.mdActive, disabled: this.mdDisabled, tooltip: this.mdTooltip, tooltipDelay: this.mdTooltipDelay, tooltipDirection: this.mdTooltipDirection, ref: this };
        }, updateTabData: function updateTabData() {
          this.parentTabs.updateTab(this.getTabData());
        } }, mounted: function mounted() {
        var t = this.getTabData();if (this.parentTabs = (0, s.default)(this.$parent, "md-tabs"), !this.parentTabs) throw new Error("You must wrap the md-tab in a md-tabs");this.mounted = !0, this.parentTabs.updateTab(t), this.mdActive && this.parentTabs.setActiveTab(t);
      }, beforeDestroy: function beforeDestroy() {
        this.parentTabs.unregisterTab(this.getTabData());
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(38),
        a = i(o),
        r = n(202),
        s = i(r),
        d = n(1),
        l = i(d),
        c = n(50),
        u = i(c);e.default = { name: "md-tabs", props: { mdFixed: Boolean, mdCentered: Boolean, mdRight: Boolean, mdNavigation: { type: Boolean, default: !0 }, mdDynamicHeight: { type: Boolean, default: !0 }, mdElevation: { type: [String, Number], default: 0 } }, mixins: [l.default], data: function data() {
        return { tabList: {}, activeTab: null, activeTabNumber: 0, hasIcons: !1, hasLabel: !1, hasNavigationScroll: !1, isNavigationOnStart: !0, isNavigationOnEnd: !1, transitionControl: null, transitionOff: !1, contentHeight: "0px", contentWidth: "0px" };
      }, computed: { tabClasses: function tabClasses() {
          return { "md-dynamic-height": this.mdDynamicHeight, "md-transition-off": this.transitionOff };
        }, navigationClasses: function navigationClasses() {
          return { "md-has-icon": this.hasIcons, "md-has-label": this.hasLabel, "md-fixed": this.mdFixed, "md-right": !this.mdCentered && this.mdRight, "md-centered": this.mdCentered || this.mdFixed, "md-has-navigation-scroll": this.hasNavigationScroll };
        }, indicatorClasses: function indicatorClasses() {
          var t = this.lastIndicatorNumber > this.activeTabNumber;return this.lastIndicatorNumber = this.activeTabNumber, { "md-transition-off": this.transitionOff, "md-to-right": !t, "md-to-left": t };
        }, navigationLeftButtonClasses: function navigationLeftButtonClasses() {
          return { "md-disabled": this.isNavigationOnStart };
        }, navigationRightButtonClasses: function navigationRightButtonClasses() {
          return { "md-disabled": this.isNavigationOnEnd };
        } }, methods: { getHeaderClass: function getHeaderClass(t) {
          return { "md-active": this.activeTab === t.id, "md-disabled": t.disabled };
        }, registerTab: function registerTab(t) {
          var e = !1,
              n = !0,
              i = !1,
              o = void 0;try {
            for (var r, d = (0, s.default)((0, a.default)(this.tabList)); !(n = (r = d.next()).done); n = !0) {
              var l = r.value;if (this.tabList[l].active) {
                e = !0;break;
              }
            }
          } catch (t) {
            i = !0, o = t;
          } finally {
            try {
              !n && d.return && d.return();
            } finally {
              if (i) throw o;
            }
          }this.$set(this.tabList, t.id, t), e || (this.tabList[t.id].active = !0);
        }, unregisterTab: function unregisterTab(t) {
          this.$delete(this.tabList, t.id);
        }, updateTab: function updateTab(t) {
          if (this.registerTab(t), t.active) if (t.disabled) {
            if ((0, a.default)(this.tabList).length) {
              var e = (0, a.default)(this.tabList),
                  n = e.indexOf(t.id) + 1,
                  i = e[n];i ? this.setActiveTab(this.tabList[i]) : this.setActiveTab(this.tabList[0]);
            }
          } else this.setActiveTab(t);
        }, observeElementChanges: function observeElementChanges() {
          this.parentObserver = new MutationObserver((0, u.default)(this.calculateOnWatch, 50)), this.parentObserver.observe(this.$refs.tabContent, { childList: !0, attributes: !0, subtree: !0 });
        }, getTabIndex: function getTabIndex(t) {
          var e = (0, a.default)(this.tabList);return e.indexOf(t);
        }, calculateIndicatorPos: function calculateIndicatorPos() {
          if (this.$refs.tabHeader && this.$refs.tabHeader[this.activeTabNumber]) {
            var t = this.$el.offsetWidth,
                e = this.$refs.tabHeader[this.activeTabNumber],
                n = e.offsetLeft - this.$refs.tabsContainer.scrollLeft,
                i = t - n - e.offsetWidth;this.$refs.indicator.style.left = n + "px", this.$refs.indicator.style.right = i + "px";
          }
        }, calculateTabsWidthAndPosition: function calculateTabsWidthAndPosition() {
          var t = this.$el.offsetWidth,
              e = 0;this.contentWidth = t * this.activeTabNumber + "px";for (var n in this.tabList) {
            var i = this.tabList[n];i.ref.width = t + "px", i.ref.left = t * e + "px", e++;
          }
        }, calculateContentHeight: function calculateContentHeight() {
          var t = this;this.$nextTick(function () {
            if ((0, a.default)(t.tabList).length) {
              var e = t.tabList[t.activeTab].ref.$el.offsetHeight;t.contentHeight = e + "px";
            }
          });
        }, calculatePosition: function calculatePosition() {
          var t = this;window.requestAnimationFrame(function () {
            t.calculateIndicatorPos(), t.calculateTabsWidthAndPosition(), t.calculateContentHeight(), t.checkNavigationScroll();
          });
        }, debounceTransition: function debounceTransition() {
          var t = this;window.clearTimeout(this.transitionControl), this.transitionControl = window.setTimeout(function () {
            t.calculatePosition(), t.transitionOff = !1;
          }, 200);
        }, calculateOnWatch: function calculateOnWatch() {
          this.calculatePosition(), this.debounceTransition();
        }, calculateOnResize: function calculateOnResize() {
          this.transitionOff = !0, this.calculateOnWatch();
        }, calculateScrollPos: function calculateScrollPos() {
          var t = this.$refs.tabsContainer,
              e = t.scrollLeft,
              n = t.scrollWidth,
              i = t.clientWidth;this.isNavigationOnStart = e < 32, this.isNavigationOnEnd = n - e - 32 < i;
        }, handleNavigationScroll: function handleNavigationScroll() {
          var t = this;window.requestAnimationFrame(function () {
            t.calculateIndicatorPos(), t.calculateScrollPos();
          });
        }, checkNavigationScroll: function checkNavigationScroll() {
          var t = this.$refs.tabsContainer,
              e = t.scrollWidth,
              n = t.clientWidth;
          this.hasNavigationScroll = e > n;
        }, setActiveTab: function setActiveTab(t) {
          this.hasIcons = !!t.icon || !!t.iconset, this.hasLabel = !!t.label, this.activeTab = t.id, this.activeTabNumber = this.getTabIndex(this.activeTab), this.calculatePosition(), this.$emit("change", this.activeTabNumber);
        }, navigationScrollLeft: function navigationScrollLeft() {
          var t = this.$refs.tabsContainer,
              e = t.scrollLeft,
              n = t.clientWidth;this.$refs.tabsContainer.scrollLeft = Math.max(0, e - n);
        }, navigationScrollRight: function navigationScrollRight() {
          var t = this.$refs.tabsContainer,
              e = t.scrollLeft,
              n = t.clientWidth,
              i = t.scrollWidth;this.$refs.tabsContainer.scrollLeft = Math.min(i, e + n);
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          if (t.observeElementChanges(), window.addEventListener("resize", t.calculateOnResize), (0, a.default)(t.tabList).length && !t.activeTab) {
            var e = (0, a.default)(t.tabList)[0];t.setActiveTab(t.tabList[e]);
          }
        });
      }, beforeDestroy: function beforeDestroy() {
        this.parentObserver && this.parentObserver.disconnect(), window.removeEventListener("resize", this.calculateOnResize);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(1),
        a = i(o);e.default = { name: "md-toolbar", mixins: [a.default] }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(67),
        a = i(o),
        r = n(41),
        s = i(r);e.default = { name: "md-tooltip", props: { mdDirection: { type: String, default: "bottom" }, mdDelay: { type: String, default: "0" } }, data: function data() {
        return { active: !1, parentClass: null, transitionOff: !1, topPosition: !1, leftPosition: !1 };
      }, computed: { classes: function classes() {
          var t = { "md-active": this.active, "md-transition-off": this.transitionOff, "md-tooltip-top": "top" === this.mdDirection, "md-tooltip-right": "right" === this.mdDirection, "md-tooltip-bottom": "bottom" === this.mdDirection, "md-tooltip-left": "left" === this.mdDirection };return this.parentClass && (t[this.parentClass] = !0), t;
        }, style: function style() {
          return { "transition-delay": this.mdDelay + "ms", top: this.topPosition + "px", left: this.leftPosition + "px" };
        } }, watch: { mdDirection: function mdDirection() {
          this.calculateTooltipPosition();
        } }, methods: { removeTooltips: function removeTooltips() {
          this.tooltipElement.parentNode && (this.tooltipElement.removeEventListener(s.default, this.removeTooltips), this.tooltipElement.parentNode.removeChild(this.tooltipElement));
        }, calculateTooltipPosition: function calculateTooltipPosition() {
          var t = this.parentElement.getBoundingClientRect(),
              e = {};switch (this.mdDirection) {case "top":
              e.top = t.top - this.$el.offsetHeight, e.left = t.left + t.width / 2;break;case "right":
              e.top = t.top, e.left = t.left + t.width;break;case "bottom":
              e.top = t.bottom, e.left = t.left + t.width / 2;break;case "left":
              e.top = t.top, e.left = t.left - this.$el.offsetWidth;break;default:
              console.warn("Invalid " + this.mdDirection + " option to md-direction option");}this.topPosition = e.top, this.leftPosition = e.left;
        }, generateTooltipClasses: function generateTooltipClasses() {
          var t = [];[].concat((0, a.default)(this.parentElement.classList)).forEach(function (e) {
            e.indexOf("md-") >= 0 && "md-active" !== e && t.push(e + "-tooltip");
          }), this.parentClass = t.join(" ");
        }, open: function open() {
          var t = this;this.removeTooltips(), this.$nextTick(function () {
            document.body.appendChild(t.tooltipElement), getComputedStyle(t.tooltipElement).top, t.transitionOff = !0, t.generateTooltipClasses(), t.calculateTooltipPosition(), window.setTimeout(function () {
              t.transitionOff = !1, t.active = !0;
            }, 10);
          });
        }, close: function close() {
          this.active = !1, this.tooltipElement.removeEventListener(s.default, this.removeTooltips), this.tooltipElement.addEventListener(s.default, this.removeTooltips);
        } }, mounted: function mounted() {
        var t = this;this.$nextTick(function () {
          t.tooltipElement = t.$el, t.parentElement = t.tooltipElement.parentNode, t.$el.parentNode.removeChild(t.$el), t.parentElement.addEventListener("mouseenter", t.open), t.parentElement.addEventListener("focus", t.open), t.parentElement.addEventListener("mouseleave", t.close), t.parentElement.addEventListener("blur", t.close);
        });
      }, beforeDestroy: function beforeDestroy() {
        this.active = !1, this.removeTooltips(), this.parentElement && (this.parentElement.removeEventListener("mouseenter", this.open), this.parentElement.removeEventListener("focus", this.open), this.parentElement.removeEventListener("mouseleave", this.close), this.parentElement.removeEventListener("blur", this.close));
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-whiteframe", props: { mdElevation: { type: [String, Number], default: 1 }, mdTag: { type: String, default: "div" } }, computed: { classes: function classes() {
          var t = parseInt(this.mdElevation, 10),
              e = "md-whiteframe-";return isNaN(t) || "number" != typeof t ? this.mdElevation.indexOf("dp") > -1 && (e += this.mdElevation) : (e += t, e += "dp"), e;
        } }, render: function render(t) {
        return t(this.mdTag, { staticClass: "md-whiteframe", class: this.classes }, this.$slots.default);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 });var i = function i(t, e, n) {
      "start" === e ? (t.addEventListener("mousedown", n), t.addEventListener("touchstart", n)) : (t.addEventListener("mouseup", n), t.addEventListener("touchend", n));
    },
        o = function o(t, e, n) {
      "start" === e ? (t.removeEventListener("mousedown", n), t.removeEventListener("touchstart", n)) : (t.removeEventListener("mouseup", n), t.removeEventListener("touchend", n));
    };e.default = { name: "md-ink-ripple", props: { mdDisabled: Boolean }, data: function data() {
        return { mounted: !1, rippleElement: null, parentElement: null, parentDimensions: { width: null, height: null, top: null, left: null }, awaitingComplete: !1, hasCompleted: !1, fadeOut: !1, active: !1 };
      }, computed: { classes: function classes() {
          return { "md-fadeout": this.fadeOut, "md-active": this.active };
        }, styles: function styles() {
          return { width: this.parentDimensions.width, height: this.parentDimensions.height, top: this.parentDimensions.top, left: this.parentDimensions.left };
        }, disabled: function disabled() {
          return this.mdDisabled || !this.$material.inkRipple;
        } }, watch: { disabled: function disabled(t) {
          t ? this.destroy() : this.init();
        } }, methods: { checkAvailablePositions: function checkAvailablePositions(t) {
          var e = ["relative", "absolute", "fixed"];return e.indexOf(getComputedStyle(t).position) > -1;
        }, getClosestPositionedParent: function getClosestPositionedParent(t) {
          var e = t && t.parentNode;return !(!e || "body" === e.tagName.toLowerCase()) && (this.checkAvailablePositions(t) ? t : this.getClosestPositionedParent(e));
        }, getParentSize: function getParentSize() {
          var t = this.parentElement;return Math.round(Math.max(t.offsetWidth, t.offsetHeight)) + "px";
        }, getClickPosition: function getClickPosition(t) {
          if (this.$refs.ripple) {
            var e = this.parentElement.getBoundingClientRect(),
                n = t.pageY,
                i = t.pageX;return "touchstart" === t.type && (n = t.changedTouches[0].pageY, i = t.changedTouches[0].pageX), { top: n - e.top - this.$refs.ripple.offsetHeight / 2 - document.body.scrollTop + "px", left: i - e.left - this.$refs.ripple.offsetWidth / 2 - document.body.scrollLeft + "px" };
          }return !1;
        }, setDimensions: function setDimensions() {
          var t = this.getParentSize();this.parentDimensions.width = t, this.parentDimensions.height = t;
        }, setPositions: function setPositions(t) {
          var e = this.getClickPosition(t);e && (this.parentDimensions.top = e.top, this.parentDimensions.left = e.left);
        }, clearState: function clearState() {
          this.active = !1, this.fadeOut = !1, this.hasCompleted = !1, this.setDimensions(), window.clearTimeout(this.awaitingComplete), o(document.body, "end", this.endRipple);
        }, startRipple: function startRipple(t) {
          var e = this;"touchstart" === t.type ? this.previous.push("touch") : this.previous.push("mouse"), this.previous = this.previous.splice(this.previous.length - 2, this.previous.length), this.previous.length >= 2 && "touch" === this.previous[1] && "mouse" === this.previous[0] || (this.clearState(), this.awaitingComplete = window.setTimeout(function () {
            e.hasCompleted = !0;
          }, 400), i(document.body, "end", this.endRipple), this.$nextTick(function () {
            e.setPositions(t), e.active = !0;
          }));
        }, endRipple: function endRipple() {
          var t = this;this.hasCompleted ? this.fadeOut = !0 : this.awaitingComplete = window.setTimeout(function () {
            t.fadeOut = !0;
          }, 200), o(document.body, "end", this.endRipple);
        }, registerTriggerEvent: function registerTriggerEvent() {
          i(this.parentElement, "start", this.startRipple);
        }, unregisterTriggerEvent: function unregisterTriggerEvent() {
          this.parentElement && o(this.parentElement, "start", this.startRipple);
        }, init: function init() {
          this.rippleElement = this.$el, this.parentElement = this.getClosestPositionedParent(this.$el.parentNode), this.previous = ["mouse"], this.parentElement ? (this.rippleElement.parentNode.removeChild(this.rippleElement), this.parentElement.querySelectorAll(".md-ink-ripple").length > 0 ? this.$destroy() : (this.parentElement.appendChild(this.rippleElement), this.registerTriggerEvent(), this.setDimensions())) : this.$destroy();
        }, destroy: function destroy() {
          this.rippleElement && this.rippleElement.parentNode && (this.unregisterTriggerEvent(), this.rippleElement.parentNode.removeChild(this.rippleElement));
        } }, mounted: function mounted() {
        var t = this;window.setTimeout(function () {
          t.disabled ? t.destroy() : t.init(), t.$nextTick(function () {
            t.mounted = !0;
          });
        }, 100);
      }, beforeDestroy: function beforeDestroy() {
        this.destroy();
      } }, t.exports = e.default;
  }, function (t, e, n) {
    "use strict";
    Object.defineProperty(e, "__esModule", { value: !0 }), e.default = { name: "md-theme", props: { mdTag: String, mdName: { type: String, default: "default" } }, render: function render(t) {
        return this.mdTag || this.$slots.default.length > 1 ? t(this.mdTag || "div", { staticClass: this.$material.prefix + this.mdName }, this.$slots.default) : this.$slots.default[0];
      }, watch: { mdName: function mdName(t) {
          this.$material.useTheme(t);
        } }, beforeMount: function beforeMount() {
        var t = this.mdName;t && this.$material.useTheme(t);
      } }, t.exports = e.default;
  }, function (t, e, n) {
    t.exports = { default: n(210), __esModule: !0 };
  }, function (t, e, n) {
    t.exports = { default: n(211), __esModule: !0 };
  }, function (t, e, n) {
    t.exports = { default: n(212), __esModule: !0 };
  }, function (t, e, n) {
    t.exports = { default: n(213), __esModule: !0 };
  }, function (t, e, n) {
    t.exports = { default: n(214), __esModule: !0 };
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }e.__esModule = !0;var o = n(204),
        a = i(o);e.default = function (t, e, n) {
      return e in t ? (0, a.default)(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t;
    };
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }e.__esModule = !0;var o = n(51),
        a = i(o);e.default = a.default || function (t) {
      for (var e = 1; e < arguments.length; e++) {
        var n = arguments[e];for (var i in n) {
          Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
        }
      }return t;
    };
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }e.__esModule = !0;var o = n(206),
        a = i(o),
        r = n(205),
        s = i(r),
        d = "function" == typeof s.default && "symbol" == _typeof(a.default) ? function (t) {
      return typeof t === "undefined" ? "undefined" : _typeof(t);
    } : function (t) {
      return t && "function" == typeof s.default && t.constructor === s.default && t !== s.default.prototype ? "symbol" : typeof t === "undefined" ? "undefined" : _typeof(t);
    };e.default = "function" == typeof s.default && "symbol" === d(a.default) ? function (t) {
      return "undefined" == typeof t ? "undefined" : d(t);
    } : function (t) {
      return t && "function" == typeof s.default && t.constructor === s.default && t !== s.default.prototype ? "symbol" : "undefined" == typeof t ? "undefined" : d(t);
    };
  }, function (t, e, n) {
    n(68), n(49), t.exports = n(221);
  }, function (t, e, n) {
    n(222), t.exports = 9007199254740991;
  }, function (t, e, n) {
    n(223);var i = n(4).Object;t.exports = function (t, e, n) {
      return i.defineProperty(t, e, n);
    };
  }, function (t, e, n) {
    n(225), n(224), n(226), n(227), t.exports = n(4).Symbol;
  }, function (t, e, n) {
    n(49), n(68), t.exports = n(63).f("iterator");
  }, function (t, e, n) {
    var i = n(18),
        o = n(45),
        a = n(40);t.exports = function (t) {
      var e = i(t),
          n = o.f;if (n) for (var r, s = n(t), d = a.f, l = 0; s.length > l;) {
        d.call(t, r = s[l++]) && e.push(r);
      }return e;
    };
  }, function (t, e, n) {
    var i = n(24);t.exports = Array.isArray || function (t) {
      return "Array" == i(t);
    };
  }, function (t, e, n) {
    var i = n(18),
        o = n(7);t.exports = function (t, e) {
      for (var n, a = o(t), r = i(a), s = r.length, d = 0; s > d;) {
        if (a[n = r[d++]] === e) return n;
      }
    };
  }, function (t, e, n) {
    var i = n(20)("meta"),
        o = n(6),
        a = n(8),
        r = n(9).f,
        s = 0,
        d = Object.isExtensible || function () {
      return !0;
    },
        l = !n(5)(function () {
      return d(Object.preventExtensions({}));
    }),
        c = function c(t) {
      r(t, i, { value: { i: "O" + ++s, w: {} } });
    },
        u = function u(t, e) {
      if (!o(t)) return "symbol" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t : ("string" == typeof t ? "S" : "P") + t;if (!a(t, i)) {
        if (!d(t)) return "F";if (!e) return "E";c(t);
      }return t[i].i;
    },
        m = function m(t, e) {
      if (!a(t, i)) {
        if (!d(t)) return !0;if (!e) return !1;c(t);
      }return t[i].w;
    },
        f = function f(t) {
      return l && p.NEED && d(t) && !a(t, i) && c(t), t;
    },
        p = t.exports = { KEY: i, NEED: !1, fastKey: u, getWeak: m, onFreeze: f };
  }, function (t, e, n) {
    var i = n(40),
        o = n(17),
        a = n(7),
        r = n(27),
        s = n(8),
        d = n(30),
        l = Object.getOwnPropertyDescriptor;e.f = n(3) ? l : function (t, e) {
      if (t = a(t), e = r(e, !0), d) try {
        return l(t, e);
      } catch (t) {}if (s(t, e)) return o(!i.f.call(t, e), t[e]);
    };
  }, function (t, e, n) {
    var i = n(7),
        o = n(77).f,
        a = {}.toString,
        r = "object" == (typeof window === "undefined" ? "undefined" : _typeof(window)) && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
        s = function s(t) {
      try {
        return o(t);
      } catch (t) {
        return r.slice();
      }
    };t.exports.f = function (t) {
      return r && "[object Window]" == a.call(t) ? s(t) : o(i(t));
    };
  }, function (t, e, n) {
    var i = n(13),
        o = n(57);t.exports = n(4).getIterator = function (t) {
      var e = o(t);if ("function" != typeof e) throw TypeError(t + " is not iterable!");return i(e.call(t));
    };
  }, function (t, e, n) {
    var i = n(16);i(i.S, "Number", { MAX_SAFE_INTEGER: 9007199254740991 });
  }, function (t, e, n) {
    var i = n(16);i(i.S + i.F * !n(3), "Object", { defineProperty: n(9).f });
  }, function (t, e) {}, function (t, e, n) {
    "use strict";
    var i = n(2),
        o = n(8),
        a = n(3),
        r = n(16),
        s = n(47),
        d = n(218).KEY,
        l = n(5),
        c = n(22),
        u = n(37),
        m = n(20),
        f = n(12),
        p = n(63),
        h = n(62),
        b = n(217),
        v = n(215),
        E = n(216),
        g = n(13),
        _ = n(7),
        C = n(27),
        M = n(17),
        T = n(44),
        A = n(220),
        x = n(219),
        N = n(9),
        y = n(18),
        O = x.f,
        S = N.f,
        R = A.f,
        _w = i.Symbol,
        k = i.JSON,
        P = k && k.stringify,
        H = "prototype",
        L = f("_hidden"),
        $ = f("toPrimitive"),
        I = {}.propertyIsEnumerable,
        B = c("symbol-registry"),
        D = c("symbols"),
        F = c("op-symbols"),
        j = Object[H],
        W = "function" == typeof _w,
        Y = i.QObject,
        V = !Y || !Y[H] || !Y[H].findChild,
        U = a && l(function () {
      return 7 != T(S({}, "a", { get: function get() {
          return S(this, "a", { value: 7 }).a;
        } })).a;
    }) ? function (t, e, n) {
      var i = O(j, e);i && delete j[e], S(t, e, n), i && t !== j && S(j, e, i);
    } : S,
        z = function z(t) {
      var e = D[t] = T(_w[H]);return e._k = t, e;
    },
        G = W && "symbol" == _typeof(_w.iterator) ? function (t) {
      return "symbol" == (typeof t === "undefined" ? "undefined" : _typeof(t));
    } : function (t) {
      return t instanceof _w;
    },
        q = function q(t, e, n) {
      return t === j && q(F, e, n), g(t), e = C(e, !0), g(n), o(D, e) ? (n.enumerable ? (o(t, L) && t[L][e] && (t[L][e] = !1), n = T(n, { enumerable: M(0, !1) })) : (o(t, L) || S(t, L, M(1, {})), t[L][e] = !0), U(t, e, n)) : S(t, e, n);
    },
        K = function K(t, e) {
      g(t);for (var n, i = v(e = _(e)), o = 0, a = i.length; a > o;) {
        q(t, n = i[o++], e[n]);
      }return t;
    },
        X = function X(t, e) {
      return void 0 === e ? T(t) : K(T(t), e);
    },
        J = function J(t) {
      var e = I.call(this, t = C(t, !0));return !(this === j && o(D, t) && !o(F, t)) && (!(e || !o(this, t) || !o(D, t) || o(this, L) && this[L][t]) || e);
    },
        Q = function Q(t, e) {
      if (t = _(t), e = C(e, !0), t !== j || !o(D, e) || o(F, e)) {
        var n = O(t, e);return !n || !o(D, e) || o(t, L) && t[L][e] || (n.enumerable = !0), n;
      }
    },
        Z = function Z(t) {
      for (var e, n = R(_(t)), i = [], a = 0; n.length > a;) {
        o(D, e = n[a++]) || e == L || e == d || i.push(e);
      }return i;
    },
        tt = function tt(t) {
      for (var e, n = t === j, i = R(n ? F : _(t)), a = [], r = 0; i.length > r;) {
        !o(D, e = i[r++]) || n && !o(j, e) || a.push(D[e]);
      }return a;
    };W || (_w = function w() {
      if (this instanceof _w) throw TypeError("Symbol is not a constructor!");var t = m(arguments.length > 0 ? arguments[0] : void 0),
          e = function e(n) {
        this === j && e.call(F, n), o(this, L) && o(this[L], t) && (this[L][t] = !1), U(this, t, M(1, n));
      };return a && V && U(j, t, { configurable: !0, set: e }), z(t);
    }, s(_w[H], "toString", function () {
      return this._k;
    }), x.f = Q, N.f = q, n(77).f = A.f = Z, n(40).f = J, n(45).f = tt, a && !n(39) && s(j, "propertyIsEnumerable", J, !0), p.f = function (t) {
      return z(f(t));
    }), r(r.G + r.W + r.F * !W, { Symbol: _w });for (var et = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), nt = 0; et.length > nt;) {
      f(et[nt++]);
    }for (var et = y(f.store), nt = 0; et.length > nt;) {
      h(et[nt++]);
    }r(r.S + r.F * !W, "Symbol", { for: function _for(t) {
        return o(B, t += "") ? B[t] : B[t] = _w(t);
      }, keyFor: function keyFor(t) {
        if (G(t)) return b(B, t);throw TypeError(t + " is not a symbol!");
      }, useSetter: function useSetter() {
        V = !0;
      }, useSimple: function useSimple() {
        V = !1;
      } }), r(r.S + r.F * !W, "Object", { create: X, defineProperty: q, defineProperties: K, getOwnPropertyDescriptor: Q, getOwnPropertyNames: Z, getOwnPropertySymbols: tt }), k && r(r.S + r.F * (!W || l(function () {
      var t = _w();return "[null]" != P([t]) || "{}" != P({ a: t }) || "{}" != P(Object(t));
    })), "JSON", { stringify: function stringify(t) {
        if (void 0 !== t && !G(t)) {
          for (var e, n, i = [t], o = 1; arguments.length > o;) {
            i.push(arguments[o++]);
          }return e = i[1], "function" == typeof e && (n = e), !n && E(e) || (e = function e(t, _e2) {
            if (n && (_e2 = n.call(this, t, _e2)), !G(_e2)) return _e2;
          }), i[1] = e, P.apply(k, i);
        }
      } }), _w[H][$] || n(11)(_w[H], $, _w[H].valueOf), u(_w, "Symbol"), u(Math, "Math", !0), u(i.JSON, "JSON", !0);
  }, function (t, e, n) {
    n(62)("asyncIterator");
  }, function (t, e, n) {
    n(62)("observable");
  }, function (t, e) {
    Element.prototype.scrollIntoViewIfNeeded || (Element.prototype.scrollIntoViewIfNeeded = function (t) {
      t = 0 === arguments.length || !!t;var e = this.parentNode,
          n = window.getComputedStyle(e, null),
          i = parseInt(n.getPropertyValue("border-top-width")),
          o = parseInt(n.getPropertyValue("border-left-width")),
          a = this.offsetTop - e.offsetTop < e.scrollTop,
          r = this.offsetTop - e.offsetTop + this.clientHeight - i > e.scrollTop + e.clientHeight,
          s = this.offsetLeft - e.offsetLeft < e.scrollLeft,
          d = this.offsetLeft - e.offsetLeft + this.clientWidth - o > e.scrollLeft + e.clientWidth,
          l = a && !r;(a || r) && t && (e.scrollTop = this.offsetTop - e.offsetTop - e.clientHeight / 2 - i + this.clientHeight / 2), (s || d) && t && (e.scrollLeft = this.offsetLeft - e.offsetLeft - e.clientWidth / 2 - o + this.clientWidth / 2), (a || r || s || d) && !t && this.scrollIntoView(l);
    });
  }, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {}, function (t, e) {
    t.exports = ".THEME_NAME.md-avatar.md-primary.md-avatar-icon{background-color:PRIMARY-COLOR}.THEME_NAME.md-avatar.md-primary.md-avatar-icon .md-icon{color:PRIMARY-CONTRAST-0.99999}.THEME_NAME.md-avatar.md-accent.md-avatar-icon{background-color:ACCENT-COLOR}.THEME_NAME.md-avatar.md-accent.md-avatar-icon .md-icon{color:ACCENT-CONTRAST-0.99999}.THEME_NAME.md-avatar.md-warn.md-avatar-icon{background-color:WARN-COLOR}.THEME_NAME.md-avatar.md-warn.md-avatar-icon .md-icon{color:WARN-CONTRAST-0.99999}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-bottom-bar.md-fixed{background-color:BACKGROUND-COLOR}.THEME_NAME.md-bottom-bar.md-fixed .md-bottom-bar-item{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-bottom-bar.md-fixed .md-bottom-bar-item:hover:not([disabled]):not(.md-active){color:BACKGROUND-CONTRAST-0.87}.THEME_NAME.md-bottom-bar.md-fixed .md-bottom-bar-item.md-active{color:PRIMARY-COLOR}.THEME_NAME.md-bottom-bar.md-fixed.md-accent .md-bottom-bar-item.md-active{color:ACCENT-COLOR}.THEME_NAME.md-bottom-bar.md-fixed.md-warn .md-bottom-bar-item.md-active{color:WARN-COLOR}.THEME_NAME.md-bottom-bar.md-fixed.md-transparent .md-bottom-bar-item.md-active{color:BACKGROUND-CONTRAST}.THEME_NAME.md-bottom-bar.md-shift{background-color:PRIMARY-COLOR;color:PRIMARY-CONTRAST}.THEME_NAME.md-bottom-bar.md-shift .md-bottom-bar-item{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-bottom-bar.md-shift .md-bottom-bar-item:hover:not([disabled]):not(.md-active){color:PRIMARY-CONTRAST-0.87}.THEME_NAME.md-bottom-bar.md-shift .md-bottom-bar-item.md-active{color:PRIMARY-CONTRAST}.THEME_NAME.md-bottom-bar.md-shift.md-accent{background-color:ACCENT-COLOR}.THEME_NAME.md-bottom-bar.md-shift.md-accent .md-bottom-bar-item{color:ACCENT-CONTRAST-0.54}.THEME_NAME.md-bottom-bar.md-shift.md-accent .md-bottom-bar-item:hover:not([disabled]):not(.md-active){color:ACCENT-CONTRAST-0.87}.THEME_NAME.md-bottom-bar.md-shift.md-accent .md-bottom-bar-item.md-active{color:ACCENT-CONTRAST}.THEME_NAME.md-bottom-bar.md-shift.md-warn{background-color:WARN-COLOR}.THEME_NAME.md-bottom-bar.md-shift.md-warn .md-bottom-bar-item{color:WARN-CONTRAST-0.54}.THEME_NAME.md-bottom-bar.md-shift.md-warn .md-bottom-bar-item:hover:not([disabled]):not(.md-active){color:WARN-CONTRAST-0.87}.THEME_NAME.md-bottom-bar.md-shift.md-warn .md-bottom-bar-item.md-active{color:WARN-CONTRAST}.THEME_NAME.md-bottom-bar.md-shift.md-transparent{background-color:transparent}.THEME_NAME.md-bottom-bar.md-shift.md-transparent .md-bottom-bar-item{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-bottom-bar.md-shift.md-transparent .md-bottom-bar-item:hover:not([disabled]):not(.md-active){color:BACKGROUND-CONTRAST-0.87}.THEME_NAME.md-bottom-bar.md-shift.md-transparent .md-bottom-bar-item.md-active{color:BACKGROUND-CONTRAST}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-button:not([disabled]).md-raised:not(.md-icon-button){color:BACKGROUND-CONTRAST;background-color:BACKGROUND-COLOR}.THEME_NAME.md-button:not([disabled]).md-raised:not(.md-icon-button):hover{background-color:BACKGROUND-COLOR-200}.THEME_NAME.md-button:not([disabled]).md-raised.md-icon-button:not(.md-raised){color:BACKGROUND-CONTRAST}.THEME_NAME.md-button:not([disabled]).md-fab{color:ACCENT-CONTRAST;background-color:ACCENT-COLOR}.THEME_NAME.md-button:not([disabled]).md-fab:hover{background-color:ACCENT-COLOR-600}.THEME_NAME.md-button:not([disabled]).md-fab.md-clean{color:BACKGROUND-CONTRAST;background-color:BACKGROUND-COLOR}.THEME_NAME.md-button:not([disabled]).md-fab.md-clean:hover{background-color:BACKGROUND-COLOR-200}.THEME_NAME.md-button:not([disabled]).md-primary:not(.md-icon-button){color:PRIMARY-COLOR}.THEME_NAME.md-button:not([disabled]).md-primary.md-raised,.THEME_NAME.md-button:not([disabled]).md-primary.md-fab{background-color:PRIMARY-COLOR;color:PRIMARY-CONTRAST}.THEME_NAME.md-button:not([disabled]).md-primary.md-raised:hover,.THEME_NAME.md-button:not([disabled]).md-primary.md-fab:hover{background-color:PRIMARY-COLOR-600}.THEME_NAME.md-button:not([disabled]).md-primary.md-icon-button:not(.md-raised){color:PRIMARY-COLOR}.THEME_NAME.md-button:not([disabled]).md-accent:not(.md-icon-button){color:ACCENT-COLOR}.THEME_NAME.md-button:not([disabled]).md-accent.md-raised{background-color:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME.md-button:not([disabled]).md-accent.md-raised:hover{background-color:ACCENT-COLOR-600}.THEME_NAME.md-button:not([disabled]).md-accent.md-icon-button:not(.md-raised){color:ACCENT-COLOR}.THEME_NAME.md-button:not([disabled]).md-warn:not(.md-icon-button){color:WARN-COLOR}.THEME_NAME.md-button:not([disabled]).md-warn.md-raised,.THEME_NAME.md-button:not([disabled]).md-warn.md-fab{background-color:WARN-COLOR;color:WARN-CONTRAST}.THEME_NAME.md-button:not([disabled]).md-warn.md-raised:hover,.THEME_NAME.md-button:not([disabled]).md-warn.md-fab:hover{background-color:WARN-COLOR-600}.THEME_NAME.md-button:not([disabled]).md-warn.md-icon-button:not(.md-raised){color:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = '.THEME_NAME.md-button-toggle .md-button:after{width:1px;position:absolute;top:0;bottom:0;left:0;content:" "}.THEME_NAME.md-button-toggle .md-toggle{color:BACKGROUND-CONTRAST-0.54;background-color:BACKGROUND-CONTRAST-0.26}.THEME_NAME.md-button-toggle .md-toggle:hover:not([disabled]){background-color:BACKGROUND-CONTRAST-0.38}.THEME_NAME.md-button-toggle .md-toggle+.md-toggle:after{background-color:BACKGROUND-CONTRAST-0.12}.THEME_NAME.md-button-toggle.md-primary .md-toggle{color:PRIMARY-CONTRAST;background-color:PRIMARY-COLOR}.THEME_NAME.md-button-toggle.md-primary .md-toggle:hover:not([disabled]){background-color:PRIMARY-COLOR}.THEME_NAME.md-button-toggle.md-primary .md-toggle+.md-toggle:after{background-color:PRIMARY-COLOR-600}.THEME_NAME.md-button-toggle.md-accent .md-toggle{color:ACCENT-CONTRAST;background-color:ACCENT-COLOR}.THEME_NAME.md-button-toggle.md-accent .md-toggle:hover:not([disabled]){background-color:ACCENT-COLOR}.THEME_NAME.md-button-toggle.md-accent .md-toggle+.md-toggle:after{background-color:ACCENT-COLOR-600}.THEME_NAME.md-button-toggle.md-warn .md-toggle{color:WARN-CONTRAST;background-color:WARN-COLOR}.THEME_NAME.md-button-toggle.md-warn .md-toggle:hover:not([disabled]){background-color:WARN-COLOR}.THEME_NAME.md-button-toggle.md-warn .md-toggle+.md-toggle:after{background-color:WARN-COLOR-600}.THEME_NAME.md-button-toggle [disabled]{color:rgba(0,0,0,0.26)}.THEME_NAME.md-button-toggle [disabled].md-toggle{color:BACKGROUND-CONTRAST-0.2;background-color:rgba(0,0,0,0.26)}\n';
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-card{background-color:BACKGROUND-COLOR}.THEME_NAME.md-card.md-primary{background-color:PRIMARY-COLOR;color:PRIMARY-CONTRAST}.THEME_NAME.md-card.md-primary .md-card-header .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon,.THEME_NAME.md-card.md-primary .md-card-actions .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon{color:PRIMARY-CONTRAST-0.87}.THEME_NAME.md-card.md-primary .md-input-container.md-input-focused input,.THEME_NAME.md-card.md-primary .md-input-container.md-input-focused textarea{color:PRIMARY-CONTRAST;text-shadow:0 0 0 PRIMARY-CONTRAST}.THEME_NAME.md-card.md-primary .md-input-container.md-input-focused label,.THEME_NAME.md-card.md-primary .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:PRIMARY-CONTRAST}.THEME_NAME.md-card.md-primary .md-input-container:after{background-color:PRIMARY-CONTRAST}.THEME_NAME.md-card.md-primary .md-input-container input,.THEME_NAME.md-card.md-primary .md-input-container textarea{color:PRIMARY-CONTRAST;text-shadow:0 0 0 PRIMARY-CONTRAST}.THEME_NAME.md-card.md-primary .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-card.md-primary .md-input-container textarea::-webkit-input-placeholder{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-card.md-primary .md-input-container label,.THEME_NAME.md-card.md-primary .md-input-container .md-icon:not(.md-icon-delete){color:PRIMARY-CONTRAST}.THEME_NAME.md-card.md-accent{background-color:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME.md-card.md-accent .md-card-header .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon,.THEME_NAME.md-card.md-accent .md-card-actions .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon{color:ACCENT-CONTRAST-0.87}.THEME_NAME.md-card.md-accent .md-input-container.md-input-focused input,.THEME_NAME.md-card.md-accent .md-input-container.md-input-focused textarea{color:ACCENT-CONTRAST;text-shadow:0 0 0 ACCENT-CONTRAST}.THEME_NAME.md-card.md-accent .md-input-container.md-input-focused label,.THEME_NAME.md-card.md-accent .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:ACCENT-CONTRAST}.THEME_NAME.md-card.md-accent .md-input-container:after{background-color:ACCENT-CONTRAST}.THEME_NAME.md-card.md-accent .md-input-container input,.THEME_NAME.md-card.md-accent .md-input-container textarea{color:ACCENT-CONTRAST;text-shadow:0 0 0 ACCENT-CONTRAST}.THEME_NAME.md-card.md-accent .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-card.md-accent .md-input-container textarea::-webkit-input-placeholder{color:ACCENT-CONTRAST-0.54}.THEME_NAME.md-card.md-accent .md-input-container label,.THEME_NAME.md-card.md-accent .md-input-container .md-icon:not(.md-icon-delete){color:ACCENT-CONTRAST}.THEME_NAME.md-card.md-warn{background-color:WARN-COLOR;color:WARN-CONTRAST}.THEME_NAME.md-card.md-warn .md-card-header .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon,.THEME_NAME.md-card.md-warn .md-card-actions .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon{color:WARN-CONTRAST-0.87}.THEME_NAME.md-card.md-warn .md-input-container.md-input-focused input,.THEME_NAME.md-card.md-warn .md-input-container.md-input-focused textarea{color:WARN-CONTRAST;text-shadow:0 0 0 WARN-CONTRAST}.THEME_NAME.md-card.md-warn .md-input-container.md-input-focused label,.THEME_NAME.md-card.md-warn .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:WARN-CONTRAST}.THEME_NAME.md-card.md-warn .md-input-container:after{background-color:WARN-CONTRAST}.THEME_NAME.md-card.md-warn .md-input-container input,.THEME_NAME.md-card.md-warn .md-input-container textarea{color:WARN-CONTRAST;text-shadow:0 0 0 WARN-CONTRAST}.THEME_NAME.md-card.md-warn .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-card.md-warn .md-input-container textarea::-webkit-input-placeholder{color:WARN-CONTRAST-0.54}.THEME_NAME.md-card.md-warn .md-input-container label,.THEME_NAME.md-card.md-warn .md-input-container .md-icon:not(.md-icon-delete){color:WARN-CONTRAST}.THEME_NAME.md-card .md-card-header .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon,.THEME_NAME.md-card .md-card-actions .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-card>.md-card-area:after{background-color:BACKGROUND-CONTRAST-0.12}.THEME_NAME.md-card .md-card-media-cover.md-text-scrim .md-backdrop{background:linear-gradient(to bottom, BACKGROUND-CONTRAST-0.0 20%, BACKGROUND-CONTRAST-0.275 66%, BACKGROUND-CONTRAST-0.55 100%)}.THEME_NAME.md-card .md-card-media-cover.md-solid .md-card-area{background-color:BACKGROUND-CONTRAST-0.4}.THEME_NAME.md-card .md-card-media-cover .md-card-header .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon,.THEME_NAME.md-card .md-card-media-cover .md-card-actions .md-icon-button:not(.md-primary):not(.md-warn):not(.md-accent) .md-icon{color:#fff}.THEME_NAME.md-card .md-card-expand .md-card-actions{background-color:BACKGROUND-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-checkbox.md-checked .md-checkbox-container{background-color:ACCENT-COLOR;border-color:ACCENT-COLOR}.THEME_NAME.md-checkbox.md-checked .md-checkbox-container:after{border-color:ACCENT-CONTRAST}.THEME_NAME.md-checkbox .md-ink-ripple{color:ACCENT-COLOR}.THEME_NAME.md-checkbox .md-ripple{opacity:.26}.THEME_NAME.md-checkbox.md-primary.md-checked .md-checkbox-container{background-color:PRIMARY-COLOR;border-color:PRIMARY-COLOR}.THEME_NAME.md-checkbox.md-primary.md-checked .md-checkbox-container:after{border-color:PRIMARY-CONTRAST}.THEME_NAME.md-checkbox.md-primary .md-ink-ripple{color:PRIMARY-COLOR}.THEME_NAME.md-checkbox.md-warn.md-checked .md-checkbox-container{background-color:WARN-COLOR;border-color:WARN-COLOR}.THEME_NAME.md-checkbox.md-warn.md-checked .md-checkbox-container:after{border-color:WARN-CONTRAST}.THEME_NAME.md-checkbox.md-warn .md-ink-ripple{color:WARN-COLOR}.THEME_NAME.md-checkbox.md-disabled.md-checked .md-checkbox-container{background-color:rgba(0,0,0,0.26);border-color:transparent}.THEME_NAME.md-checkbox.md-disabled:not(.md-checked) .md-checkbox-container{border-color:rgba(0,0,0,0.26)}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-chip{background-color:BACKGROUND-CONTRAST-0.12}.THEME_NAME.md-chip.md-deletable:hover,.THEME_NAME.md-chip.md-deletable:focus,.THEME_NAME.md-chip.md-editable:hover,.THEME_NAME.md-chip.md-editable:focus{background-color:BACKGROUND-CONTRAST-0.54;color:BACKGROUND-COLOR}.THEME_NAME.md-chip.md-deletable:hover .md-delete,.THEME_NAME.md-chip.md-deletable:focus .md-delete,.THEME_NAME.md-chip.md-editable:hover .md-delete,.THEME_NAME.md-chip.md-editable:focus .md-delete{color:BACKGROUND-COLOR}.THEME_NAME.md-chip .md-delete{color:BACKGROUND-CONTRAST-0.38}.THEME_NAME.md-chip .md-delete .md-ripple{color:BACKGROUND-COLOR}.THEME_NAME.md-chip.md-primary{color:PRIMARY-CONTRAST;background-color:PRIMARY-COLOR}.THEME_NAME.md-chip.md-accent{color:ACCENT-CONTRAST;background-color:ACCENT-COLOR}.THEME_NAME.md-chip.md-warn{color:WARN-CONTRAST;background-color:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-dialog-container .md-dialog{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST}\n";
  }, function (t, e) {
    t.exports = "";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-icon.md-primary{color:PRIMARY-COLOR}.THEME_NAME.md-icon.md-accent{color:ACCENT-COLOR}.THEME_NAME.md-icon.md-warn{color:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = "";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-input-container.md-input-invalid:after{background-color:WARN-COLOR}.THEME_NAME.md-input-container.md-input-invalid label,.THEME_NAME.md-input-container.md-input-invalid input,.THEME_NAME.md-input-container.md-input-invalid textarea,.THEME_NAME.md-input-container.md-input-invalid .md-error,.THEME_NAME.md-input-container.md-input-invalid .md-count,.THEME_NAME.md-input-container.md-input-invalid .md-icon:not(.md-icon-delete){color:WARN-COLOR}.THEME_NAME.md-input-container.md-input-focused.md-input-inline label{color:rgba(0,0,0,0.54)}.THEME_NAME.md-input-container.md-input-focused.md-input-required label:after{color:WARN-COLOR}.THEME_NAME.md-input-container.md-input-focused:after{height:2px;background-color:PRIMARY-COLOR}.THEME_NAME.md-input-container.md-input-focused input,.THEME_NAME.md-input-container.md-input-focused textarea{color:PRIMARY-COLOR;text-shadow:0 0 0 BACKGROUND-CONTRAST;-webkit-text-fill-color:transparent}.THEME_NAME.md-input-container.md-input-focused label,.THEME_NAME.md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:PRIMARY-COLOR}.THEME_NAME.md-input-container.md-input-disabled label,.THEME_NAME.md-input-container.md-input-disabled input,.THEME_NAME.md-input-container.md-input-disabled textarea,.THEME_NAME.md-input-container.md-input-disabled .md-error,.THEME_NAME.md-input-container.md-input-disabled .md-count,.THEME_NAME.md-input-container.md-input-disabled .md-icon:not(.md-icon-delete),.THEME_NAME.md-input-container.md-input-disabled ::-webkit-input-placeholder{color:BACKGROUND-CONTRAST-0.38}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-list{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST}.THEME_NAME.md-list.md-transparent{background-color:transparent;color:inherit}.THEME_NAME.md-list .md-list-item .router-link-active.md-list-item-container{color:PRIMARY-COLOR}.THEME_NAME.md-list .md-list-item .router-link-active.md-list-item-container>.md-icon{color:PRIMARY-COLOR}.THEME_NAME.md-list .md-list-item.md-primary .md-list-item-container{color:PRIMARY-COLOR}.THEME_NAME.md-list .md-list-item.md-primary .md-list-item-container>.md-icon{color:PRIMARY-COLOR}.THEME_NAME.md-list .md-list-item.md-accent .md-list-item-container{color:ACCENT-COLOR}.THEME_NAME.md-list .md-list-item.md-accent .md-list-item-container>.md-icon{color:ACCENT-COLOR}.THEME_NAME.md-list .md-list-item.md-warn .md-list-item-container{color:WARN-COLOR}.THEME_NAME.md-list .md-list-item.md-warn .md-list-item-container>.md-icon{color:WARN-COLOR}.THEME_NAME.md-list .md-list-item-expand .md-list-item-container{background-color:BACKGROUND-COLOR}.THEME_NAME.md-list .md-list-item-expand .md-list-item-container:hover,.THEME_NAME.md-list .md-list-item-expand .md-list-item-container:focus{background-color:rgba(153,153,153,0.2)}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-menu-content .md-list{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST}.THEME_NAME.md-menu-content .md-list .md-menu-item:hover .md-button:not([disabled]),.THEME_NAME.md-menu-content .md-list .md-menu-item:focus .md-button:not([disabled]),.THEME_NAME.md-menu-content .md-list .md-menu-item.md-highlighted .md-button:not([disabled]){background-color:BACKGROUND-CONTRAST-0.12}.THEME_NAME.md-menu-content .md-list .md-menu-item[disabled]{color:BACKGROUND-CONTRAST-0.38}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-boards>.md-boards-navigation{background-color:transparent}.THEME_NAME.md-boards>.md-boards-navigation .md-board-header{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-boards>.md-boards-navigation .md-board-header.md-active,.THEME_NAME.md-boards>.md-boards-navigation .md-board-header:focus{color:PRIMARY-COLOR}.THEME_NAME.md-boards>.md-boards-navigation .md-board-header.md-disabled{color:BACKGROUND-CONTRAST-0.26}.THEME_NAME.md-boards>.md-boards-navigation .md-button{color:PRIMARY-COLOR}.THEME_NAME.md-boards.md-transparent>.md-boards-navigation{background-color:transparent}.THEME_NAME.md-boards.md-transparent>.md-boards-navigation .md-board-header{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-boards.md-transparent>.md-boards-navigation .md-board-header.md-active,.THEME_NAME.md-boards.md-transparent>.md-boards-navigation .md-board-header:focus{color:PRIMARY-CONTRAST}.THEME_NAME.md-boards.md-transparent>.md-boards-navigation .md-board-header.md-disabled{color:PRIMARY-CONTRAST-0.26}.THEME_NAME.md-boards.md-transparent>.md-boards-navigation .md-button{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-boards.md-primary>.md-boards-navigation{background-color:PRIMARY-COLOR}.THEME_NAME.md-boards.md-primary>.md-boards-navigation .md-board-header{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-boards.md-primary>.md-boards-navigation .md-board-header.md-active,.THEME_NAME.md-boards.md-primary>.md-boards-navigation .md-board-header:focus{color:PRIMARY-CONTRAST}.THEME_NAME.md-boards.md-primary>.md-boards-navigation .md-board-header.md-disabled{color:PRIMARY-CONTRAST-0.26}.THEME_NAME.md-boards.md-primary>.md-boards-navigation .md-button{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-boards.md-accent>.md-boards-navigation{background-color:ACCENT-COLOR}.THEME_NAME.md-boards.md-accent>.md-boards-navigation .md-board-header{color:ACCENT-CONTRAST-0.54}.THEME_NAME.md-boards.md-accent>.md-boards-navigation .md-board-header.md-active,.THEME_NAME.md-boards.md-accent>.md-boards-navigation .md-board-header:focus{color:ACCENT-CONTRAST}.THEME_NAME.md-boards.md-accent>.md-boards-navigation .md-board-header.md-disabled{color:ACCENT-CONTRAST-0.26}.THEME_NAME.md-boards.md-accent>.md-boards-navigation .md-button{color:ACCENT-CONTRAST-0.54}.THEME_NAME.md-boards.md-warn>.md-boards-navigation{background-color:WARN-COLOR}.THEME_NAME.md-boards.md-warn>.md-boards-navigation .md-board-header{color:WARN-CONTRAST-0.54}.THEME_NAME.md-boards.md-warn>.md-boards-navigation .md-board-header.md-active,.THEME_NAME.md-boards.md-warn>.md-boards-navigation .md-board-header:focus{color:WARN-CONTRAST}.THEME_NAME.md-boards.md-warn>.md-boards-navigation .md-board-header.md-disabled{color:WARN-CONTRAST-0.26}.THEME_NAME.md-boards.md-warn>.md-boards-navigation .md-button{color:WARN-CONTRAST-0.54}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-progress{background-color:PRIMARY-COLOR-0.38}.THEME_NAME.md-progress:not(.md-indeterminate) .md-progress-track{background-color:PRIMARY-COLOR}.THEME_NAME.md-progress .md-progress-track:after,.THEME_NAME.md-progress .md-progress-track:before{background-color:PRIMARY-COLOR}.THEME_NAME.md-progress.md-accent{background-color:ACCENT-COLOR-0.38}.THEME_NAME.md-progress.md-accent:not(.md-indeterminate) .md-progress-track{background-color:ACCENT-COLOR}.THEME_NAME.md-progress.md-accent .md-progress-track:after,.THEME_NAME.md-progress.md-accent .md-progress-track:before{background-color:ACCENT-COLOR}.THEME_NAME.md-progress.md-warn{background-color:WARN-COLOR-0.38}.THEME_NAME.md-progress.md-warn:not(.md-indeterminate) .md-progress-track{background-color:WARN-COLOR}.THEME_NAME.md-progress.md-warn .md-progress-track:after,.THEME_NAME.md-progress.md-warn .md-progress-track:before{background-color:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-radio .md-radio-container:after{background-color:ACCENT-COLOR}.THEME_NAME.md-radio.md-checked .md-radio-container{border-color:ACCENT-COLOR}.THEME_NAME.md-radio.md-checked .md-ink-ripple{color:ACCENT-COLOR}.THEME_NAME.md-radio.md-checked .md-ripple{opacity:.38}.THEME_NAME.md-radio.md-primary .md-radio-container:after{background-color:PRIMARY-COLOR}.THEME_NAME.md-radio.md-primary.md-checked .md-radio-container{border-color:PRIMARY-COLOR}.THEME_NAME.md-radio.md-primary.md-checked .md-ink-ripple{color:PRIMARY-COLOR}.THEME_NAME.md-radio.md-warn .md-radio-container:after{background-color:WARN-COLOR}.THEME_NAME.md-radio.md-warn.md-checked .md-radio-container{border-color:WARN-COLOR}.THEME_NAME.md-radio.md-warn.md-checked .md-ink-ripple{color:WARN-COLOR}.THEME_NAME.md-radio.md-disabled .md-radio-container{border-color:rgba(0,0,0,0.26)}.THEME_NAME.md-radio.md-disabled .md-radio-container:after{background-color:rgba(0,0,0,0.26)}.THEME_NAME.md-radio.md-disabled.md-checked .md-radio-container{border-color:rgba(0,0,0,0.26)}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-rating-bar>.md-empty-icon .md-icon{color:BACKGROUND-CONTRAST-0.26}.THEME_NAME.md-rating-bar>.md-full-icon .md-icon{color:BACKGROUND-CONTRAST-0.38}.THEME_NAME.md-rating-bar.md-primary>.md-full-icon .md-icon{color:PRIMARY-COLOR}.THEME_NAME.md-rating-bar.md-accent>.md-full-icon .md-icon{color:ACCENT-COLOR}.THEME_NAME.md-rating-bar.md-warn>.md-full-icon .md-icon{color:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-select:after{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-select:after{color:BACKGROUND-CONTRAST-0.38}.THEME_NAME.md-select-content .md-menu-item.md-selected,.THEME_NAME.md-select-content .md-menu-item.md-checked{color:PRIMARY-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-sidenav .md-sidenav-content{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME .md-snackbar .md-ink-ripple,.THEME_NAME.md-snackbar .md-ink-ripple{color:#fff}\n";
  }, function (t, e) {
    t.exports = "";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-spinner .md-spinner-path{stroke:PRIMARY-COLOR}.THEME_NAME.md-spinner.md-accent .md-spinner-path{stroke:ACCENT-COLOR}.THEME_NAME.md-spinner.md-warn .md-spinner-path{stroke:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-stepper .md-step-header .md-step-icon,.THEME_NAME.md-stepper .md-step-header .md-step-number{color:BACKGROUND-CONTRAST;background-color:#bdbdbd}.THEME_NAME.md-stepper .md-step-header.md-primary .md-step-icon,.THEME_NAME.md-stepper .md-step-header.md-primary .md-step-number,.THEME_NAME.md-stepper .md-step-header.md-active .md-step-icon,.THEME_NAME.md-stepper .md-step-header.md-active .md-step-number{color:PRIMARY-CONTRAST;background-color:PRIMARY-COLOR}.THEME_NAME.md-stepper .md-step-header.md-accent .md-step-icon,.THEME_NAME.md-stepper .md-step-header.md-accent .md-step-number{color:ACCENT-CONTRAST;background-color:ACCENT-COLOR}.THEME_NAME.md-stepper .md-step-header.md-warn .md-step-icon,.THEME_NAME.md-stepper .md-step-header.md-warn .md-step-number{color:WARN-CONTRAST;background-color:WARN-COLOR}.THEME_NAME.md-stepper .md-step-header.md-disabled{color:#bdbdbd}.THEME_NAME.md-stepper .md-step-header.md-disabled .md-step-icon,.THEME_NAME.md-stepper .md-step-header.md-disabled .md-step-number{color:white;background-color:#bdbdbd}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-subheader.md-primary{color:PRIMARY-COLOR}.THEME_NAME.md-subheader.md-accent{color:ACCENT-COLOR}.THEME_NAME.md-subheader.md-warn{color:WARN-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-switch.md-checked .md-switch-container{background-color:ACCENT-COLOR-500-0.5}.THEME_NAME.md-switch.md-checked .md-switch-thumb{background-color:ACCENT-COLOR}.THEME_NAME.md-switch.md-checked .md-ink-ripple{color:ACCENT-COLOR}.THEME_NAME.md-switch.md-checked .md-ripple{opacity:.38}.THEME_NAME.md-switch.md-checked.md-primary .md-switch-container{background-color:PRIMARY-COLOR-500-0.5}.THEME_NAME.md-switch.md-checked.md-primary .md-switch-thumb{background-color:PRIMARY-COLOR}.THEME_NAME.md-switch.md-checked.md-primary .md-ink-ripple{color:PRIMARY-COLOR}.THEME_NAME.md-switch.md-checked.md-warn .md-switch-container{background-color:WARN-COLOR-500-0.5}.THEME_NAME.md-switch.md-checked.md-warn .md-switch-thumb{background-color:WARN-COLOR}.THEME_NAME.md-switch.md-checked.md-warn .md-ink-ripple{color:WARN-COLOR}.THEME_NAME.md-switch.md-disabled .md-switch-container,.THEME_NAME.md-switch.md-disabled.md-checked .md-switch-container{background-color:rgba(0,0,0,0.12)}.THEME_NAME.md-switch.md-disabled .md-switch-thumb,.THEME_NAME.md-switch.md-disabled.md-checked .md-switch-thumb{background-color:#bdbdbd}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-table-card .md-toolbar{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST}.THEME_NAME.md-table-alternate-header{background-color:BACKGROUND-COLOR}.THEME_NAME.md-table-alternate-header .md-toolbar{background-color:ACCENT-COLOR-A100-0.2;color:ACCENT-CONTRAST-A100}.THEME_NAME.md-table-alternate-header .md-counter{color:ACCENT-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-tabs>.md-tabs-navigation{background-color:PRIMARY-COLOR}.THEME_NAME.md-tabs>.md-tabs-navigation .md-tab-header{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-tabs>.md-tabs-navigation .md-tab-header.md-active,.THEME_NAME.md-tabs>.md-tabs-navigation .md-tab-header:focus{color:PRIMARY-CONTRAST}.THEME_NAME.md-tabs>.md-tabs-navigation .md-tab-header.md-disabled{color:PRIMARY-CONTRAST-0.26}.THEME_NAME.md-tabs>.md-tabs-navigation .md-tab-indicator{background-color:ACCENT-COLOR}.THEME_NAME.md-tabs>.md-tabs-navigation .md-tab-header-navigation-button{color:PRIMARY-CONTRAST-0.54;background-color:PRIMARY-COLOR}.THEME_NAME.md-tabs.md-transparent>.md-tabs-navigation{background-color:transparent;border-bottom:1px solid BACKGROUND-CONTRAST-0.12}.THEME_NAME.md-tabs.md-transparent>.md-tabs-navigation .md-tab-header{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-tabs.md-transparent>.md-tabs-navigation .md-tab-header.md-active,.THEME_NAME.md-tabs.md-transparent>.md-tabs-navigation .md-tab-header:focus{color:PRIMARY-COLOR}.THEME_NAME.md-tabs.md-transparent>.md-tabs-navigation .md-tab-header.md-disabled{color:BACKGROUND-CONTRAST-0.26}.THEME_NAME.md-tabs.md-transparent>.md-tabs-navigation .md-tab-indicator{background-color:PRIMARY-COLOR}.THEME_NAME.md-tabs.md-accent>.md-tabs-navigation{background-color:ACCENT-COLOR}.THEME_NAME.md-tabs.md-accent>.md-tabs-navigation .md-tab-header{color:ACCENT-CONTRAST-0.54}.THEME_NAME.md-tabs.md-accent>.md-tabs-navigation .md-tab-header.md-active,.THEME_NAME.md-tabs.md-accent>.md-tabs-navigation .md-tab-header:focus{color:ACCENT-CONTRAST}.THEME_NAME.md-tabs.md-accent>.md-tabs-navigation .md-tab-header.md-disabled{color:ACCENT-CONTRAST-0.26}.THEME_NAME.md-tabs.md-accent>.md-tabs-navigation .md-tab-indicator{background-color:BACKGROUND-COLOR}.THEME_NAME.md-tabs.md-warn>.md-tabs-navigation{background-color:WARN-COLOR}.THEME_NAME.md-tabs.md-warn>.md-tabs-navigation .md-tab-header{color:WARN-CONTRAST-0.54}.THEME_NAME.md-tabs.md-warn>.md-tabs-navigation .md-tab-header.md-active,.THEME_NAME.md-tabs.md-warn>.md-tabs-navigation .md-tab-header:focus{color:WARN-CONTRAST}.THEME_NAME.md-tabs.md-warn>.md-tabs-navigation .md-tab-header.md-disabled{color:WARN-CONTRAST-0.26}.THEME_NAME.md-tabs.md-warn>.md-tabs-navigation .md-tab-indicator{background-color:BACKGROUND-COLOR}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME.md-toolbar{background-color:PRIMARY-COLOR;color:PRIMARY-CONTRAST}.THEME_NAME.md-toolbar .md-input-container.md-input-focused input,.THEME_NAME.md-toolbar .md-input-container.md-input-focused textarea{color:PRIMARY-CONTRAST;text-shadow:0 0 0 PRIMARY-CONTRAST}.THEME_NAME.md-toolbar .md-input-container.md-input-focused label,.THEME_NAME.md-toolbar .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:PRIMARY-CONTRAST}.THEME_NAME.md-toolbar .md-input-container:after{background-color:PRIMARY-CONTRAST}.THEME_NAME.md-toolbar .md-input-container input,.THEME_NAME.md-toolbar .md-input-container textarea{color:PRIMARY-CONTRAST;text-shadow:0 0 0 PRIMARY-CONTRAST}.THEME_NAME.md-toolbar .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-toolbar .md-input-container textarea::-webkit-input-placeholder{color:PRIMARY-CONTRAST-0.54}.THEME_NAME.md-toolbar .md-input-container label,.THEME_NAME.md-toolbar .md-input-container .md-icon:not(.md-icon-delete){color:PRIMARY-CONTRAST}.THEME_NAME.md-toolbar.md-accent{background-color:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-accent .md-input-container.md-input-focused input,.THEME_NAME.md-toolbar.md-accent .md-input-container.md-input-focused textarea{color:ACCENT-CONTRAST;text-shadow:0 0 0 ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-accent .md-input-container.md-input-focused label,.THEME_NAME.md-toolbar.md-accent .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-accent .md-input-container:after{background-color:ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-accent .md-input-container input,.THEME_NAME.md-toolbar.md-accent .md-input-container textarea{color:ACCENT-CONTRAST;text-shadow:0 0 0 ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-accent .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-toolbar.md-accent .md-input-container textarea::-webkit-input-placeholder{color:ACCENT-CONTRAST-0.54}.THEME_NAME.md-toolbar.md-accent .md-input-container label,.THEME_NAME.md-toolbar.md-accent .md-input-container .md-icon:not(.md-icon-delete){color:ACCENT-CONTRAST}.THEME_NAME.md-toolbar.md-warn{background-color:WARN-COLOR;color:WARN-CONTRAST}.THEME_NAME.md-toolbar.md-warn .md-input-container.md-input-focused input,.THEME_NAME.md-toolbar.md-warn .md-input-container.md-input-focused textarea{color:WARN-CONTRAST;text-shadow:0 0 0 WARN-CONTRAST}.THEME_NAME.md-toolbar.md-warn .md-input-container.md-input-focused label,.THEME_NAME.md-toolbar.md-warn .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:WARN-CONTRAST}.THEME_NAME.md-toolbar.md-warn .md-input-container:after{background-color:WARN-CONTRAST}.THEME_NAME.md-toolbar.md-warn .md-input-container input,.THEME_NAME.md-toolbar.md-warn .md-input-container textarea{color:WARN-CONTRAST;text-shadow:0 0 0 WARN-CONTRAST}.THEME_NAME.md-toolbar.md-warn .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-toolbar.md-warn .md-input-container textarea::-webkit-input-placeholder{color:WARN-CONTRAST-0.54}.THEME_NAME.md-toolbar.md-warn .md-input-container label,.THEME_NAME.md-toolbar.md-warn .md-input-container .md-icon:not(.md-icon-delete){color:WARN-CONTRAST}.THEME_NAME.md-toolbar.md-transparent{background-color:transparent;color:BACKGROUND-CONTRAST}.THEME_NAME.md-toolbar.md-transparent .md-input-container.md-input-focused input,.THEME_NAME.md-toolbar.md-transparent .md-input-container.md-input-focused textarea{color:BACKGROUND-CONTRAST;text-shadow:0 0 0 BACKGROUND-CONTRAST}.THEME_NAME.md-toolbar.md-transparent .md-input-container.md-input-focused label,.THEME_NAME.md-toolbar.md-transparent .md-input-container.md-input-focused .md-icon:not(.md-icon-delete){color:BACKGROUND-CONTRAST}.THEME_NAME.md-toolbar.md-transparent .md-input-container:after{background-color:BACKGROUND-CONTRAST}.THEME_NAME.md-toolbar.md-transparent .md-input-container input,.THEME_NAME.md-toolbar.md-transparent .md-input-container textarea{color:BACKGROUND-CONTRAST;text-shadow:0 0 0 BACKGROUND-CONTRAST}.THEME_NAME.md-toolbar.md-transparent .md-input-container input::-webkit-input-placeholder,.THEME_NAME.md-toolbar.md-transparent .md-input-container textarea::-webkit-input-placeholder{color:BACKGROUND-CONTRAST-0.54}.THEME_NAME.md-toolbar.md-transparent .md-input-container label,.THEME_NAME.md-toolbar.md-transparent .md-input-container .md-icon:not(.md-icon-delete){color:BACKGROUND-CONTRAST}\n";
  }, function (t, e) {
    t.exports = ".THEME_NAME :not(input):not(textarea)::selection{background:ACCENT-COLOR;color:ACCENT-CONTRAST}.THEME_NAME a:not(.md-button){color:ACCENT-COLOR}.THEME_NAME a:not(.md-button):hover{color:ACCENT-COLOR-800}body.THEME_NAME{background-color:BACKGROUND-COLOR;color:BACKGROUND-CONTRAST-0.87}.THEME_NAME .md-caption,.THEME_NAME .md-display-1,.THEME_NAME .md-display-2,.THEME_NAME .md-display-3,.THEME_NAME .md-display-4{color:BACKGROUND-CONTRAST-0.57}.THEME_NAME code:not(.hljs){background-color:ACCENT-COLOR-A100-0.2;color:ACCENT-COLOR-800}\n";
  }, function (t, e, n) {
    function i(t) {
      n(246);
    }var o = n(0)(n(126), n(411), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(264);
    }var o = n(0)(n(127), n(442), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(234);
    }var o = n(0)(n(128), n(385), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(129), n(387), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(254);
    }var o = n(0)(n(130), n(429), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(231);
    }var o = n(0)(n(131), n(377), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(235);
    }var o = n(0)(n(132), n(388), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(133), n(399), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(134), n(383), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(135), n(428), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(136), n(376), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(137), n(421), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(138), n(415), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(139), n(381), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(140), n(372), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(141), n(379), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(257);
    }var o = n(0)(n(142), n(435), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(143), n(395), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(250);
    }var o = n(0)(n(144), n(417), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(239);
    }var o = n(0)(n(145), n(398), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(146), n(433), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(147), n(403), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(148), n(396), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(149), n(418), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(150), n(441), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(151), n(394), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(251);
    }var o = n(0)(n(152), n(419), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(248);
    }var o = n(0)(n(153), n(413), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(236);
    }var o = n(0)(n(154), n(390), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(261);
    }var o = n(0)(n(155), n(438), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(156), n(391), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(157), n(389), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(237);
    }var o = n(0)(n(158), n(392), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(159), n(424), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(259);
    }var o = n(0)(n(160), null, i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(240);
    }var o = n(0)(n(161), n(400), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(162), n(443), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(163), n(380), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(164), n(410), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(165), n(386), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(166), n(405), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(167), n(397), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(263);
    }var o = n(0)(n(168), n(440), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(169), n(432), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(170), n(384), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(171), n(407), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(256);
    }var o = n(0)(n(172), n(434), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(238);
    }var o = n(0)(n(173), n(393), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(230);
    }var o = n(0)(n(174), n(374), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(245);
    }var o = n(0)(n(175), n(409), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(176), n(422), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(258);
    }var o = n(0)(n(177), n(436), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(249);
    }var o = n(0)(n(178), n(414), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(262);
    }var o = n(0)(n(179), n(439), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(247);
    }var o = n(0)(n(180), n(412), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(233);
    }var o = n(0)(n(181), n(382), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(182), n(416), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(183), n(406), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(242);
    }var o = n(0)(n(184), n(402), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(253);
    }var o = n(0)(n(185), n(427), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(255);
    }var o = n(0)(n(186), n(431), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(232);
    }var o = n(0)(n(187), n(378), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(188), n(423), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(189), n(373), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(190), n(420), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(191), n(426), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(192), n(430), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(193), n(375), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(194), n(408), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    var i = n(0)(n(195), n(371), null, null, null);t.exports = i.exports;
  }, function (t, e, n) {
    function i(t) {
      n(241);
    }var o = n(0)(n(196), n(401), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(243);
    }var o = n(0)(n(197), n(404), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(260);
    }var o = n(0)(n(198), n(437), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(244);
    }var o = n(0)(n(199), null, i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    function i(t) {
      n(252);
    }var o = n(0)(n(200), n(425), i, null, null);t.exports = o.exports;
  }, function (t, e, n) {
    var i = n(0)(n(201), null, null, null, null);t.exports = i.exports;
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-tab", style: t.styles, attrs: { id: t.tabId } }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-media-actions" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-card", { staticClass: "md-table-card", class: [t.themeClass] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-radio", class: [t.themeClass, t.classes] }, [n("div", { staticClass: "md-radio-container", on: { click: function click(e) {
              e.stopPropagation(), t.toggleCheck(e);
            } } }, [n("input", { attrs: { type: "radio", name: t.name, id: t.id, disabled: t.disabled }, domProps: { value: t.value } }), t._v(" "), n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } })], 1), t._v(" "), t.$slots.default ? n("label", { staticClass: "md-radio-label", attrs: { for: t.id || t.name }, on: { click: t.toggleCheck } }, [t._t("default")], 2) : t._e()]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-table-pagination" }, [n("span", { staticClass: "md-table-pagination-label" }, [t._v(t._s(t.mdLabel) + ":")]), t._v(" "), t.mdPageOptions !== !1 ? n("md-select", { attrs: { "md-menu-class": "md-pagination-select" }, on: { change: t.changeSize }, model: { value: t.currentSize, callback: function callback(e) {
              t.currentSize = e;
            }, expression: "currentSize" } }, t._l(t.mdPageOptions, function (e) {
          return n("md-option", { key: e, attrs: { value: e } }, [t._v(t._s(e))]);
        })) : t._e(), t._v(" "), n("span", [t._v(t._s((t.currentPage - 1) * t.currentSize + 1) + "-" + t._s(t.subTotal) + " " + t._s(t.mdSeparator) + " " + t._s(t.mdTotal))]), t._v(" "), n("md-button", { staticClass: "md-icon-button md-table-pagination-previous", attrs: { disabled: 1 === t.currentPage }, on: { click: t.previousPage } }, [n("md-icon", [t._v("keyboard_arrow_left")])], 1), t._v(" "), n("md-button", { staticClass: "md-icon-button md-table-pagination-next", attrs: { disabled: t.shouldDisable }, on: { click: t.nextPage } }, [n("md-icon", [t._v("keyboard_arrow_right")])], 1)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { ref: "expand", staticClass: "md-card-expand" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-button-toggle", class: [t.themeClass] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-table", class: [t.themeClass] }, [n("table", [t._t("default")], 2)]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-media-cover", class: t.classes }, [t._t("default"), t._v(" "), t.mdTextScrim ? n("div", { ref: "backdrop", staticClass: "md-card-backdrop", style: t.styles }) : t._e()], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("li", { staticClass: "md-list-item", class: t.classes }, [n("div", { staticClass: "md-list-item-container md-button" }, [t._t("default")], 2), t._v(" "), n("md-button", { staticClass: "md-button-ghost", attrs: { type: "button", disabled: t.disabled }, on: { click: function click(e) {
              t.$emit("click", e);
            } } })], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-media", class: t.classes }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("transition", { attrs: { name: "md-spinner", appear: "" } }, [n("div", { staticClass: "md-spinner", class: [t.themeClass, t.classes], style: t.styles }, [n("svg", { staticClass: "md-spinner-draw", attrs: { viewBox: "25 25 50 50" } }, [n("circle", { staticClass: "md-spinner-path", attrs: { cx: "50", cy: "50", r: "20", "stroke-width": t.mdStroke, "stroke-dasharray": t.dashProgress } })])])]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-area", class: t.classes }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-list-item", { staticClass: "md-menu-item", class: t.classes, attrs: { href: t.href, target: t.target, disabled: t.disabled }, on: { click: t.close } }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-bottom-bar", class: [t.themeClass, t.classes] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("li", { staticClass: "md-list-item md-list-item-expand", class: t.classes }, [n("div", { staticClass: "md-list-item-container md-button" }, [t._t("default"), t._v(" "), n("md-icon", { staticClass: "md-list-expand-indicator" }, [t._v("keyboard_arrow_down")])], 2), t._v(" "), n("md-button", { staticClass: "md-button-ghost", attrs: { type: "button", disabled: t.disabled }, on: { click: t.toggleExpandList } }), t._v(" "), n("div", { ref: "expand", staticClass: "md-list-expand", class: t.expandClasses, style: t.expandStyles }, [t._t("expand")], 2)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return t.href ? n("a", { staticClass: "md-bottom-bar-item", class: t.classes, attrs: { href: t.href, disabled: t.disabled }, on: { click: function click(e) {
              t.setActive(!0, e);
            } } }, [t.mdIcon || t.mdIconSrc || t.mdIconset ? n("md-icon", { attrs: { "md-src": t.mdIconSrc, "md-iconset": t.mdIconset } }, [t._v(t._s(t.mdIcon))]) : t._e(), t._v(" "), n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } }), t._v(" "), n("span", { staticClass: "md-text" }, [t._t("default")], 2)], 1) : n("button", { staticClass: "md-bottom-bar-item", class: t.classes, attrs: { type: "button", disabled: t.disabled }, on: { click: function click(e) {
              t.setActive(!0, e);
            } } }, [t.mdIcon || t.mdIconSrc || t.mdIconset ? n("md-icon", { attrs: { "md-src": t.mdIconSrc, "md-iconset": t.mdIconset } }, [t._v(t._s(t.mdIcon))]) : t._e(), t._v(" "), n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } }), t._v(" "), n("span", { staticClass: "md-text" }, [t._t("default")], 2)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card", class: [t.themeClass, t.classes] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("input", { staticClass: "md-input", attrs: { type: t.type, name: t.name, disabled: t.disabled, required: t.required, placeholder: t.placeholder, maxlength: t.maxlength, readonly: t.readonly }, domProps: { value: t.value }, on: { focus: t.onFocus, blur: t.onBlur, input: t.onInput, keydown: [function (e) {
              return "button" in e || !t._k(e.keyCode, "up", 38) ? void t.onInput(e) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "down", 40) ? void t.onInput(e) : null;
            }] } });
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return t.svgContent ? n("i", { staticClass: "md-icon", class: [t.themeClass], domProps: { innerHTML: t._s(t.svgContent) } }) : t.imageSrc ? n("md-image", { staticClass: "md-icon", class: [t.themeClass],
          attrs: { "md-src": t.imageSrc } }) : n("i", { staticClass: "md-icon", class: [t.themeClass, t.mdIconset], attrs: { "aria-hidden": !!t.mdIconset } }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-autocomplete", on: { focus: t.onFocus, blur: t.onBlur } }, [n("md-menu", { ref: "menu", staticClass: "md-autocomplete-menu", attrs: { "md-offset-x": 8, "md-offset-y": "45" } }, [n("span", { attrs: { "md-menu-trigger": "" } }), t._v(" "), n("input", { directives: [{ name: "model", rawName: "v-model", value: t.query, expression: "query" }], ref: "input", staticClass: "md-input", attrs: { type: "text", disabled: t.disabled, required: t.required, placeholder: t.placeholder, maxlength: t.maxlength, name: t.name }, domProps: { value: t.query }, on: { focus: t.onFocus, blur: t.onBlur, input: [function (e) {
              e.target.composing || (t.query = e.target.value);
            }, t.debounceUpdate] } }), t._v(" "), n("md-menu-content", t._l(t.items, function (e) {
          return t.items.length ? n("md-menu-item", { key: e, on: { keyup: function keyup(n) {
                return "button" in n || !t._k(n.keyCode, "enter", 13) ? void t.hit(e) : null;
              }, click: function click(n) {
                t.hit(e);
              } } }, [t._v("\n        " + t._s(e[t.printAttribute]) + "\n      ")]) : t._e();
        }))], 1)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-input-container", class: [t.themeClass, t.classes] }, [t._t("default"), t._v(" "), t.enableCounter ? n("span", { staticClass: "md-count" }, [t._v(t._s(t.inputLength) + " / " + t._s(t.counterLength))]) : t._e(), t._v(" "), t.mdHasPassword ? n("md-button", { staticClass: "md-icon-button md-toggle-password", attrs: { tabindex: "-1" }, on: { click: function click(e) {
              e.preventDefault(), t.togglePasswordType(e);
            } } }, [n("md-icon", [t._v(t._s(t.showPassword ? "visibility_off" : "visibility"))])], 1) : t._e(), t._v(" "), t.mdClearable && t.hasValue ? n("md-button", { staticClass: "md-icon-button md-clear-input", attrs: { tabindex: "-1" }, on: { click: t.clearInput } }, [n("md-icon", [t._v("clear")])], 1) : t._e()], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("transition", { attrs: { name: "md-progress", appear: "" } }, [n("div", { staticClass: "md-progress", class: [t.themeClass, t.classes] }, [n("div", { staticClass: "md-progress-track", style: t.styles })])]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-dialog", { ref: "dialog", staticClass: "md-dialog-prompt", on: { close: function close(e) {
              t.fireCloseEvent("cancel");
            } } }, [t.mdTitle ? n("md-dialog-title", [t._v(t._s(t.mdTitle))]) : t._e(), t._v(" "), t.mdContentHtml ? n("md-dialog-content", { domProps: { innerHTML: t._s(t.mdContentHtml) } }) : t._e(), t._v(" "), t.mdContent ? n("md-dialog-content", [t._v(t._s(t.mdContent))]) : t._e(), t._v(" "), n("md-dialog-content", [n("md-input-container", [n("md-input", { ref: "input", attrs: { id: t.mdInputId, name: t.mdInputName, maxlength: t.mdInputMaxlength, placeholder: t.mdInputPlaceholder, value: t.value }, nativeOn: { keydown: function keydown(e) {
              return "button" in e || !t._k(e.keyCode, "enter", 13) ? void t.confirmValue(e) : null;
            } } })], 1)], 1), t._v(" "), n("md-dialog-actions", [n("md-button", { staticClass: "md-primary", on: { click: function click(e) {
              t.close("cancel");
            } } }, [t._v(t._s(t.mdCancelText))]), t._v(" "), n("md-button", { staticClass: "md-primary", on: { click: t.confirmValue } }, [t._v(t._s(t.mdOkText))])], 1)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-chip", class: [t.themeClass, t.classes], attrs: { tabindex: "0" } }, [n("div", { staticClass: "md-chip-container", on: { click: function click(e) {
              !t.disabled && t.mdEditable && t.$emit("edit");
            } } }, [t._t("default")], 2), t._v(" "), t.mdDeletable ? n("md-button", { staticClass: "md-icon-button md-dense md-delete", attrs: { tabindex: "-1" }, on: { click: function click(e) {
              !t.disabled && t.$emit("delete");
            } }, nativeOn: { keyup: function keyup(e) {
              return "button" in e || !t._k(e.keyCode, "delete", [8, 46]) ? void (!t.disabled && t.$emit("delete")) : null;
            } } }, [n("md-icon", { staticClass: "md-icon-delete" }, [t._v("cancel")])], 1) : t._e()], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-dialog-title md-title" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("li", { staticClass: "md-list-item", class: t.classes, attrs: { disabled: t.disabled } }, [t._t("default"), t._v(" "), n("md-ink-ripple", { attrs: { disabled: t.disabled } })], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-dialog-container", class: [t.themeClass, t.classes], attrs: { tabindex: "0" }, on: { keyup: function keyup(e) {
              return "button" in e || !t._k(e.keyCode, "esc", 27) ? (e.stopPropagation(), void t.closeOnEsc(e)) : null;
            } } }, [n("div", { ref: "dialog", staticClass: "md-dialog", class: t.dialogClasses, style: t.styles }, [t._t("default")], 2), t._v(" "), t.mdBackdrop ? n("md-backdrop", { ref: "backdrop", staticClass: "md-dialog-backdrop", class: t.classes, on: { close: function close(e) {
              t.mdClickOutsideToClose && t.close();
            } } }) : t._e()], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-actions" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("ul", { staticClass: "md-list", class: [t.themeClass] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-tabs", class: [t.themeClass, t.tabClasses] }, [n("md-whiteframe", { ref: "tabNavigation", staticClass: "md-tabs-navigation", class: t.navigationClasses, attrs: { "md-tag": "nav", "md-elevation": t.mdElevation } }, [n("div", { ref: "tabsContainer", staticClass: "md-tabs-navigation-container", on: { scroll: t.handleNavigationScroll } }, [n("div", { staticClass: "md-tabs-navigation-scroll-container" }, [t._l(t.tabList, function (e) {
          return n("button", { key: e.id, ref: "tabHeader", refInFor: !0, staticClass: "md-tab-header", class: t.getHeaderClass(e), attrs: { type: "button", disabled: e.disabled }, on: { click: function click(n) {
                t.setActiveTab(e);
              } } }, [n("md-ink-ripple", { attrs: { "md-disabled": e.disabled } }), t._v(" "), n("div", { staticClass: "md-tab-header-container" }, [e.icon ? n("md-icon", [t._v(t._s(e.icon))]) : e.iconset ? n("md-icon", { attrs: { "md-iconset": e.iconset } }, [t._v(t._s(e.icon))]) : t._e(), t._v(" "), e.label ? n("span", [t._v(t._s(e.label))]) : t._e(), t._v(" "), e.tooltip ? n("md-tooltip", { attrs: { "md-direction": e.tooltipDirection, "md-delay": e.tooltipDelay } }, [t._v(t._s(e.tooltip))]) : t._e()], 1)], 1);
        }), t._v(" "), n("span", { ref: "indicator", staticClass: "md-tab-indicator", class: t.indicatorClasses })], 2)]), t._v(" "), t.mdNavigation && t.hasNavigationScroll ? n("button", { staticClass: "md-tab-header-navigation-button md-left", class: t.navigationLeftButtonClasses, on: { click: t.navigationScrollLeft } }, [n("md-icon", [t._v("keyboard_arrow_left")])], 1) : t._e(), t._v(" "), t.mdNavigation && t.hasNavigationScroll ? n("button", { staticClass: "md-tab-header-navigation-button md-right", class: t.navigationRightButtonClasses, on: { click: t.navigationScrollRight } }, [n("md-icon", [t._v("keyboard_arrow_right")])], 1) : t._e()]), t._v(" "), n("div", { ref: "tabContent", staticClass: "md-tabs-content", style: { height: t.contentHeight } }, [n("div", { staticClass: "md-tabs-wrapper", style: { transform: "translate3D(-" + t.contentWidth + ", 0, 0)" } }, [t._t("default")], 2)])], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-stepper", class: [t.themeClass, t.stepsClasses] }, [t.mdVertical ? t._e() : n("md-whiteframe", { ref: "stepNavigation", staticClass: "md-steps-navigation", class: t.navigationClasses, attrs: { "md-tag": "nav", "md-elevation": t.mdElevation } }, [n("md-step-header-container", { ref: "stepHeader", attrs: { "md-vertical": t.mdVertical } }, t._l(t.stepList, function (e, i) {
          return n("md-step-header", { key: e.id, attrs: { step: e, "md-alternate-labels": t.mdAlternateLabels }, on: { click: function click(n) {
                t.setActiveStep(e);
              } } });
        }))], 1), t._v(" "), n("md-whiteframe", { attrs: { "md-elevation": t.mdElevation } }, [t.mdVertical ? t._e() : n("div", { ref: "stepContent", staticClass: "md-steps-container", style: { height: t.contentHeight } }, [n("div", { staticClass: "md-steps-wrapper", style: { transform: "translate3D(-" + t.contentWidth + ", 0, 0)" } }, [t._t("default")], 2)]), t._v(" "), t.mdVertical ? n("div", { ref: "stepContent", staticClass: "md-steps-vertical-container" }, [t._t("default")], 2) : t._e()])], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-dialog-content" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-toolbar", class: [t.themeClass] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("li", { staticClass: "md-list-item", class: t.classes }, [n("a", { staticClass: "md-list-item-container md-button", attrs: { href: t.href, target: t.target, disabled: t.disabled }, on: { click: function click(e) {
              t.$emit("click", e);
            } } }, [t._t("default")], 2), t._v(" "), n("md-ink-ripple", { attrs: { disabled: t.disabled } })], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-step-header", class: t.getHeaderClasses }, [n("div", { staticClass: "md-step-icons" }, [t.icon ? n("md-icon", { staticClass: "md-step-icon" }, [t._v(t._s(t.icon))]) : t._e(), t._v(" "), t.icon ? t._e() : n("div", { staticClass: "md-step-number" }, [n("span", [t._v(t._s(t.stepNumber))])])], 1), t._v(" "), n("div", { staticClass: "md-step-titles" }, [n("div", { staticClass: "md-step-title" }, [t._v(t._s(t.step.label))]), t._v(" "), t.step.message ? n("small", [t._v(t._s(t.step.message))]) : t._e()]), t._v(" "), t.step.toolTip ? n("md-tooltip", { attrs: { "md-direction": t.step.tooltipDirection, "md-delay": t.step.tooltipDelay } }, [t._v(t._s(t.step.toolTip))]) : t._e()], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-board", style: t.styles, attrs: { id: t.boardId } }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("tr", { staticClass: "md-table-row", class: t.classes, on: { click: t.autoSelect }, nativeOn: { click: function click(e) {
              t.autoSelect(e);
            } } }, [t.hasSelection ? n("md-table-cell", { staticClass: "md-table-selection" }, [n("md-checkbox", { attrs: { disabled: t.isDisabled }, on: { change: t.select }, nativeOn: { change: function change(e) {
              t.select(e);
            } }, model: { value: t.checkbox, callback: function callback(e) {
              t.checkbox = e;
            }, expression: "checkbox" } })], 1) : t._e(), t._v(" "), t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-rating-bar", class: [t.themeClass], attrs: { disabled: t.disabled } }, [t.srcEmptyIcon ? n("div", { staticClass: "md-empty-icon" }, t._l(t.mdMaxRating, function (e) {
          return t.srcEmptyIcon ? n("md-icon", { key: e, class: [t.iconClasses], attrs: { "md-src": t.srcEmptyIcon }, nativeOn: { mouseover: function mouseover(e) {
                t.hoverStars(e);
              }, click: function click(e) {
                t.clickStars(e);
              }, mouseout: function mouseout(e) {
                t.onMouseOut(e);
              } } }) : t._e();
        })) : n("div", { staticClass: "md-empty-icon" }, t._l(t.mdMaxRating, function (e) {
          return n("md-icon", { key: e, class: [t.iconClasses], attrs: { "md-iconset": t.mdEmptyIconset }, domProps: { innerHTML: t._s(t.emptyIcon) }, nativeOn: { mouseover: function mouseover(e) {
                t.hoverStars(e);
              }, click: function click(e) {
                t.clickStars(e);
              }, mouseout: function mouseout(e) {
                t.onMouseOut(e);
              } } });
        })), t._v(" "), t.srcFullIcon ? n("div", { staticClass: "md-full-icon", style: t.fullIconStyle }, t._l(t.mdMaxRating, function (e) {
          return t.srcFullIcon ? n("md-icon", { key: e, class: [t.iconClasses], attrs: { "md-src": t.srcFullIcon }, nativeOn: { mouseover: function mouseover(e) {
                t.hoverStars(e);
              }, click: function click(e) {
                t.clickStars(e);
              }, mouseout: function mouseout(e) {
                t.onMouseOut(e);
              } } }) : t._e();
        })) : n("div", { staticClass: "md-full-icon", style: t.fullIconStyle }, t._l(t.mdMaxRating, function (e) {
          return n("md-icon", { key: e, class: [t.iconClasses], attrs: { "md-iconset": t.mdFullIconset }, domProps: { innerHTML: t._s(t.fullIcon) }, nativeOn: { mouseover: function mouseover(e) {
                t.hoverStars(e);
              }, click: function click(e) {
                t.clickStars(e);
              }, mouseout: function mouseout(e) {
                t.onMouseOut(e);
              } } });
        }))]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("li", { staticClass: "md-list-item" }, [n("div", { staticClass: "md-list-item-container" }, [t._t("default")], 2)]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-avatar", class: [t.themeClass] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-speed-dial", class: [t.themeClass, t.classes] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-file", on: { click: t.openPicker } }, [n("md-input", { ref: "textInput", attrs: { readonly: "", required: t.required, placeholder: t.placeholder, disabled: t.disabled }, model: { value: t.filename, callback: function callback(e) {
              t.filename = e;
            }, expression: "filename" } }), t._v(" "), n("md-icon", [t._v("attach_file")]), t._v(" "), n("input", { ref: "fileInput", attrs: { type: "file", id: t.id, name: t.name, disabled: t.disabled, multiple: t.multiple, accept: t.accept }, on: { change: t.onFileSelected } })], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-sidenav", class: [t.themeClass, t.classes], attrs: { tabindex: "0" }, on: { keyup: function keyup(e) {
              return "button" in e || !t._k(e.keyCode, "esc", 27) ? void t.close(e) : null;
            } } }, [n("div", { staticClass: "md-sidenav-content" }, [t._t("default")], 2), t._v(" "), n("md-backdrop", { ref: "backdrop", staticClass: "md-sidenav-backdrop", on: { close: t.close } })], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-header-text" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-step", style: t.styles, attrs: { id: t.stepId } }, [t.vertical ? n("md-step-header", { attrs: { step: t.getStepData() }, on: { click: function click(e) {
              t.setActiveStep();
            } } }) : t._e(), t._v(" "), !t.vertical || t.vertical && t.isCurrentStep ? n("div", { staticClass: "md-step-content" }, [t._t("default"), t._v(" "), !t.vertical || t.vertical && t.isCurrentStep ? n("div", { staticClass: "md-step-actions" }, [n("md-button", { staticClass: "md-raised md-primary", attrs: { disabled: !t.mdContinue }, on: { click: t.moveNextStep } }, [t._v(t._s(t.continueText))]), t._v(" "), n("md-button", { attrs: { disabled: !t.canGoBack }, on: { click: t.movePreviousStep } }, [t._v(t._s(t.mdButtonBack))])], 1) : t._e()], 2) : t._e()], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-input-container", { staticClass: "md-chips", class: [t.themeClass, t.classes], on: { click: t.applyInputFocus } }, [t._l(t.selectedChips, function (e) {
          return n("md-chip", { key: e, attrs: { "md-editable": !t.mdStatic, "md-deletable": !t.mdStatic, disabled: t.disabled }, on: { edit: function edit(n) {
                t.editChip(e);
              }, delete: function _delete(n) {
                t.deleteChip(e);
              } } }, [t._t("chip", [t._v(t._s(e))], { value: e })], 2);
        }), t._v(" "), n("md-input", { directives: [{ name: "show", rawName: "v-show", value: !t.mdStatic, expression: "!mdStatic" }], ref: "input", attrs: { type: t.mdInputType, placeholder: t.mdInputPlaceholder, id: t.inputId, name: t.mdInputName, disabled: t.disabled, tabindex: "0", debounce: 0 }, nativeOn: { keydown: [function (e) {
              return "button" in e || !t._k(e.keyCode, "delete", [8, 46]) ? void t.deleteLastChip(e) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "enter", 13) ? (e.preventDefault(), void t.addChip(e)) : null;
            }, function (e) {
              return "button" in e || 186 === e.keyCode ? (e.preventDefault(), void t.addChip(e)) : null;
            }] }, model: { value: t.currentChip, callback: function callback(e) {
              t.currentChip = e;
            }, expression: "currentChip" } }), t._v(" "), t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-dialog", { ref: "dialog", staticClass: "md-dialog-alert", on: { close: function close(e) {
              t.fireCloseEvent();
            } } }, [t.mdTitle ? n("md-dialog-title", [t._v(t._s(t.mdTitle))]) : t._e(), t._v(" "), t.mdContentHtml ? n("md-dialog-content", { domProps: { innerHTML: t._s(t.mdContentHtml) } }) : n("md-dialog-content", [t._v(t._s(t.mdContent))]), t._v(" "), n("md-dialog-actions", [n("md-button", { staticClass: "md-primary", on: { click: function click(e) {
              t.close();
            } } }, [t._v(t._s(t.mdOkText))])], 1)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("hr", { staticClass: "md-divider" });
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("td", { staticClass: "md-table-cell", class: t.classes }, [n("div", { staticClass: "md-table-cell-container" }, [t._t("default")], 2)]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-header" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-menu-item", { staticClass: "md-option", class: t.classes, attrs: { tabindex: "-1" }, on: { click: t.selectOption } }, [t.parentSelect.multiple ? n("md-checkbox", { staticClass: "md-primary", model: { value: t.check, callback: function callback(e) {
              t.check = e;
            }, expression: "check" } }, [n("span", { ref: "item" }, [t._t("default")], 2)]) : n("span", { ref: "item" }, [t._t("default")], 2)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-table-alternate-header", class: [t.themeClass, t.classes] }, [n("md-toolbar", [n("div", { staticClass: "md-counter" }, [n("span", { ref: "counter" }, [t._v(t._s(t.numberOfSelected))]), t._v(" "), n("span", [t._v(t._s(t.mdSelectedLabel))])]), t._v(" "), t._t("default")], 2)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("textarea", { staticClass: "md-input", attrs: { disabled: t.disabled, required: t.required, placeholder: t.placeholder, maxlength: t.maxlength, readonly: t.readonly }, domProps: { value: t.value }, on: { focus: t.onFocus, blur: t.onBlur, input: t.onInput } });
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return t.mounted || !t.disabled ? n("div", { staticClass: "md-ink-ripple" }, [n("div", { ref: "ripple", staticClass: "md-ripple", class: t.classes, style: t.styles })]) : t._e();
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-table-edit", on: { keydown: function keydown(e) {
              return "button" in e || !t._k(e.keyCode, "esc", 27) ? void t.closeDialog(e) : null;
            } } }, [n("div", { staticClass: "md-table-edit-trigger", class: t.triggerClasses, on: { click: function click(e) {
              e.stopPropagation(), t.openDialog(e);
            } } }, [t._v("\n    " + t._s(t.value || t.mdPlaceholder) + "\n  ")]), t._v(" "), n("div", { ref: "dialog", staticClass: "md-table-dialog", class: t.dialogClasses }, [n("md-input-container", [n("md-input", { ref: "input", attrs: { id: t.mdId, name: t.mdName, maxlength: t.mdMaxlength, value: t.value, placeholder: t.mdPlaceholder }, nativeOn: { keydown: function keydown(e) {
              return "button" in e || !t._k(e.keyCode, "enter", 13) ? void t.confirmDialog(e) : null;
            } } })], 1)], 1)]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return "md-list" === t.$parent.$options._componentTag ? n("li", { staticClass: "md-subheader", class: [t.themeClass] }, [t._t("default")], 2) : n("div", { staticClass: "md-subheader", class: [t.themeClass] }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-card-content" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return t.href ? n("a", { staticClass: "md-button", class: [t.themeClass], attrs: { href: t.href, disabled: t.disabled, target: t.target, rel: t.newRel }, on: { click: function click(e) {
              t.$emit("click", e);
            } } }, [n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } }), t._v(" "), t._t("default")], 2) : n("button", { staticClass: "md-button", class: [t.themeClass], attrs: { type: t.type, disabled: t.disabled }, on: { click: function click(e) {
              t.$emit("click", e);
            } } }, [n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } }), t._v(" "), t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("th", { staticClass: "md-table-head", class: t.classes, on: { click: t.changeSort } }, [n("div", { staticClass: "md-table-head-container" }, [n("div", { staticClass: "md-table-head-text md-test" }, [t.mdSortBy ? n("md-icon", { staticClass: "md-sortable-icon" }, [t._v("arrow_upward")]) : t._e(), t._v(" "), t._t("default"), t._v(" "), t.mdTooltip ? n("md-tooltip", [t._v(t._s(t.mdTooltip))]) : t._e()], 2), t._v(" "), n("md-ink-ripple", { attrs: { "md-disabled": !t.mdSortBy } })], 1)]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-switch", class: [t.themeClass, t.classes] }, [n("div", { staticClass: "md-switch-container", on: { click: function click(e) {
              t.toggle(e);
            } } }, [n("div", { staticClass: "md-switch-thumb", style: t.styles }, [n("input", { attrs: { type: "checkbox", name: t.name, id: t.id, disabled: t.disabled, tabindex: "-1" }, domProps: { value: t.value } }), t._v(" "), n("button", { staticClass: "md-switch-holder", attrs: { type: t.type } }), t._v(" "), n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } })], 1)]), t._v(" "), t.$slots.default ? n("label", { staticClass: "md-switch-label", attrs: { for: t.id || t.name } }, [t._t("default")], 2) : t._e()]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-menu-content", attrs: { tabindex: "-1" }, on: { keydown: [function (e) {
              return "button" in e || !t._k(e.keyCode, "esc", 27) ? (e.preventDefault(), void t.close(e)) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "tab", 9) ? (e.preventDefault(), void t.close(e)) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "up", 38) ? (e.preventDefault(), void t.highlightItem("up")) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "down", 40) ? (e.preventDefault(), void t.highlightItem("down")) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "enter", 13) ? void t.fireClick(e) : null;
            }, function (e) {
              return "button" in e || !t._k(e.keyCode, "space", 32) ? void t.fireClick(e) : null;
            }] } }, [n("md-list", [t._t("default")], 2)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-dialog-actions" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-boards", class: [t.themeClass, t.boardClasses] }, [n("div", { ref: "boardsContent", staticClass: "md-boards-content", style: { height: t.contentHeight } }, [n("div", { staticClass: "md-boards-wrapper", style: { transform: "translate3D(-" + t.contentWidth + ", 0, 0)" } }, [t._t("default")], 2)]), t._v(" "), n("nav", { ref: "boardNavigation", staticClass: "md-boards-navigation", class: t.navigationClasses }, [t.mdControls ? t._e() : n("span", { staticStyle: { flex: "1" } }), t._v(" "), t.mdControls ? n("md-button", { on: { click: function click(e) {
              t.movePrevBoard();
            } } }, [n("div", { staticClass: "md-board-header-container" }, [n("md-icon", { staticClass: "md-control" }, [t._v("chevron_left")])], 1)]) : t._e(), t._v(" "), n("span", { staticStyle: { flex: "1" } }), t._v(" "), t._l(t.boardList, function (e) {
          return n("button", { key: e.id, ref: "boardHeader", refInFor: !0, staticClass: "md-board-header", class: t.getHeaderClass(e), attrs: { type: "button", disabled: e.disabled }, on: { click: function click(n) {
                t.setActiveBoard(e, !0);
              } } }, [n("div", { staticClass: "md-board-header-container" }, [n("md-icon", [t._v("fiber_manual_record")])], 1)]);
        }), t._v(" "), n("span", { staticStyle: { flex: "1" } }), t._v(" "), t.mdControls ? n("md-button", { on: { click: function click(e) {
              t.moveNextBoard();
            } } }, [n("div", { staticClass: "md-board-header-container" }, [n("md-icon", { staticClass: "md-control" }, [t._v("chevron_right")])], 1)]) : t._e(), t._v(" "), t.mdControls ? t._e() : n("span", { staticStyle: { flex: "1" } }), t._v(" "), n("span", { ref: "indicator" })], 2)]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-checkbox", class: [t.themeClass, t.classes] }, [n("div", { staticClass: "md-checkbox-container", attrs: { tabindex: "0" }, on: { click: function click(e) {
              e.stopPropagation(), t.toggleCheck(e);
            } } }, [n("input", { attrs: { type: "checkbox", name: t.name, id: t.id, disabled: t.disabled, tabindex: "-1" }, domProps: { value: t.value, checked: t.checked } }), t._v(" "), n("md-ink-ripple", { attrs: { "md-disabled": t.disabled } })], 1), t._v(" "), t.$slots.default ? n("label", { staticClass: "md-checkbox-label", attrs: { for: t.id || t.name }, on: { click: function click(e) {
              e.preventDefault(), t.toggleCheck(e);
            } } }, [t._t("default")], 2) : t._e()]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-select", class: [t.themeClass, t.classes] }, [n("md-menu", t._b({ attrs: { "md-close-on-select": !t.multiple }, on: { opened: function opened(e) {
              t.$emit("open");
            }, closed: function closed(e) {
              t.$emit("close");
            } } }, "md-menu", t.mdMenuOptions), [t._t("icon"), t._v(" "), n("span", { ref: "value", staticClass: "md-select-value", style: t.valueStyle, attrs: { "md-menu-trigger": "" } }, [t._v(t._s(t.selectedText || t.placeholder))]), t._v(" "), n("md-menu-content", { staticClass: "md-select-content", class: [t.themeClass, t.contentClasses] }, [t._t("default")], 2)], 2), t._v(" "), n("select", { attrs: { name: t.name, id: t.id, required: t.required, disabled: t.disabled, tabindex: "-1" } }, [t.multiple ? t._e() : n("option", { attrs: { selected: "true" }, domProps: { value: t.selectedValue } }, [t._v(t._s(t.selectedText))]), t._v(" "), t._l(t.multipleOptions, function (e) {
          return e.value ? n("option", { attrs: { selected: "true" }, domProps: { value: e.value } }, [t._v(t._s(e.text))]) : t._e();
        })], 2)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("span", { staticClass: "md-tooltip", class: t.classes, style: t.style }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("img", { staticClass: "md-image", class: t.classes, attrs: { src: t.mdSrc } });
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-snackbar", class: [t.themeClass, t.classes], attrs: { id: t.snackbarId }, on: { mouseenter: t.pauseTimeout, mouseleave: t.resumeTimeout } }, [n("div", { ref: "container", staticClass: "md-snackbar-container" }, [n("div", { staticClass: "md-snackbar-content" }, [t._t("default")], 2)])]);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-menu" }, [t._t("default"), t._v(" "), n("md-backdrop", { ref: "backdrop", staticClass: "md-menu-backdrop md-transparent md-active", on: { close: t.close } })], 2);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("md-dialog", { ref: "dialog", staticClass: "md-dialog-confirm", on: { close: function close(e) {
              t.fireCloseEvent("cancel");
            } } }, [t.mdTitle ? n("md-dialog-title", [t._v(t._s(t.mdTitle))]) : t._e(), t._v(" "), t.mdContentHtml ? n("md-dialog-content", { domProps: { innerHTML: t._s(t.mdContentHtml) } }) : n("md-dialog-content", [t._v(t._s(t.mdContent))]), t._v(" "), n("md-dialog-actions", [n("md-button", { staticClass: "md-primary", on: { click: function click(e) {
              t.close("cancel");
            } } }, [t._v(t._s(t.mdCancelText))]), t._v(" "), n("md-button", { staticClass: "md-primary", on: { click: function click(e) {
              t.close("ok");
            } } }, [t._v(t._s(t.mdOkText))])], 1)], 1);
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-backdrop", on: { click: t.close, keyup: function keyup(e) {
              return "button" in e || !t._k(e.keyCode, "esc", 27) ? void t.close(e) : null;
            } } });
      }, staticRenderFns: [] };
  }, function (t, e) {
    t.exports = { render: function render() {
        var t = this,
            e = t.$createElement,
            n = t._self._c || e;return n("div", { staticClass: "md-list-expand-container" }, [t._t("default")], 2);
      }, staticRenderFns: [] };
  }, function (e, n) {
    e.exports = t;
  }, function (t, e, n) {
    "use strict";
    function i(t) {
      return t && t.__esModule ? t : { default: t };
    }Object.defineProperty(e, "__esModule", { value: !0 });var o = n(114),
        a = i(o),
        r = n(80),
        s = i(r),
        d = n(81),
        l = i(d),
        c = n(82),
        u = i(c),
        m = n(83),
        f = i(m),
        p = n(84),
        h = i(p),
        b = n(85),
        v = i(b),
        E = n(86),
        g = i(E),
        _ = n(87),
        C = i(_),
        M = n(88),
        T = i(M),
        A = n(89),
        x = i(A),
        N = n(90),
        y = i(N),
        O = n(91),
        S = i(O),
        R = n(92),
        w = i(R),
        k = n(93),
        P = i(k),
        H = n(94),
        L = i(H),
        $ = n(95),
        I = i($),
        B = n(96),
        D = i(B),
        F = n(97),
        j = i(F),
        W = n(98),
        Y = i(W),
        V = n(99),
        U = i(V),
        z = n(100),
        G = i(z),
        q = n(101),
        K = i(q),
        X = n(102),
        J = i(X),
        Q = n(103),
        Z = i(Q),
        tt = n(104),
        et = i(tt),
        nt = n(105),
        it = i(nt),
        ot = n(106),
        at = i(ot),
        rt = n(107),
        st = i(rt),
        dt = n(108),
        lt = i(dt),
        ct = n(109),
        ut = i(ct),
        mt = n(110),
        ft = i(mt),
        pt = n(111),
        ht = i(pt),
        bt = n(112),
        vt = i(bt),
        Et = n(113),
        gt = i(Et),
        _t = { MdCore: a.default, MdAvatar: s.default, MdBackdrop: l.default, MdBottomBar: u.default, MdButton: f.default, MdButtonToggle: h.default, MdCard: v.default, MdCheckbox: g.default, MdChips: C.default, MdDialog: T.default, MdDivider: x.default, MdFile: y.default, MdIcon: S.default, MdImage: w.default, MdInputContainer: P.default, MdLayout: L.default, MdList: I.default, MdMenu: D.default, MdOnboarding: j.default, MdProgress: Y.default, MdRadio: U.default, MdRatingBar: G.default, MdSelect: K.default, MdSidenav: J.default, MdSnackbar: Z.default, MdSpeedDial: et.default, MdSpinner: it.default, MdStepper: at.default, MdSubheader: st.default, MdSwitch: lt.default, MdTable: ut.default, MdTabs: ft.default, MdToolbar: ht.default, MdTooltip: vt.default, MdWhiteframe: gt.default };_t.install = function (t) {
      for (var e in _t) {
        var n = _t[e];n && "install" !== e && t.use(n);
      }
    }, e.default = _t, t.exports = e.default;
  },,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,, function (t, e, n) {
    t.exports = n(445);
  }]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZ1ZS1tYXRlcmlhbC5qcyJdLCJuYW1lcyI6WyJ0IiwiZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwiVnVlTWF0ZXJpYWwiLCJWdWUiLCJpIiwibiIsIm8iLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImEiLCJyIiwib3B0aW9ucyIsInJlbmRlciIsInN0YXRpY1JlbmRlckZucyIsIl9zY29wZUlkIiwiJHZub2RlIiwic3NyQ29udGV4dCIsInBhcmVudCIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCJmdW5jdGlvbmFsIiwidSIsImJlZm9yZUNyZWF0ZSIsImNvbmNhdCIsImVzTW9kdWxlIiwibWRUaGVtZSIsIiRvcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsIm1kTmFtZSIsIiRwYXJlbnQiLCJ2YWx1ZSIsInByb3BzIiwiU3RyaW5nIiwiY29tcHV0ZWQiLCJtZEVmZmVjdGl2ZVRoZW1lIiwiJG1hdGVyaWFsIiwiY3VycmVudFRoZW1lIiwidGhlbWVDbGFzcyIsInByZWZpeCIsIndhdGNoIiwidXNlVGhlbWUiLCJiZWZvcmVNb3VudCIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJ2ZXJzaW9uIiwiX19lIiwiZiIsIlR5cGVFcnJvciIsIiRlbCIsIl91aWQiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsIlN5bWJvbCIsInN0b3JlIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJGIiwiRyIsIlMiLCJoIiwiUCIsImIiLCJCIiwidiIsIlciLCJFIiwiZyIsIl8iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJhcHBseSIsInZpcnR1YWwiLCJSIiwiVSIsIndyaXRhYmxlIiwia2V5cyIsInJhbmRvbSIsInRvU3RyaW5nIiwic3BsaXQiLCJzbGljZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidmFsdWVPZiIsIm1pbiIsInB1c2giLCJtYXgiLCJ0cmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiV2Via2l0VHJhbnNpdGlvbiIsInN0eWxlIiwiQyIsIk0iLCJUIiwiQSIsIngiLCJOIiwieSIsIk8iLCJ3IiwiayIsImVudHJpZXMiLCJuYW1lIiwidmFsdWVzIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImNsb3NlIiwiY3JlYXRlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiX3QiLCJfaSIsImRvbmUiLCJzZXRUaW1lb3V0IiwiZG9jdW1lbnRFbGVtZW50IiwibmV4dCIsImRlZmluZVByb3BlcnRpZXMiLCJnZXRQcm90b3R5cGVPZiIsImNvbnN0cnVjdG9yIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiTnVtYmVyIiwiZGVib3VuY2UiLCJ0eXBlIiwiZGlzYWJsZWQiLCJCb29sZWFuIiwicmVxdWlyZWQiLCJtYXhsZW5ndGgiLCJwbGFjZWhvbGRlciIsInJlYWRvbmx5IiwiZGF0YSIsInRpbWVvdXQiLCJ1cGRhdGVWYWx1ZXMiLCJzZXRQYXJlbnREaXNhYmxlZCIsInNldFBhcmVudFJlcXVpcmVkIiwic2V0UGFyZW50UGxhY2Vob2xkZXIiLCJoYW5kbGVNYXhMZW5ndGgiLCJtZXRob2RzIiwicGFyZW50Q29udGFpbmVyIiwiZW5hYmxlQ291bnRlciIsImNvdW50ZXJMZW5ndGgiLCJsYXp5RXZlbnRFbWl0dGVyIiwiY2xlYXJUaW1lb3V0IiwiJGVtaXQiLCJzZXRQYXJlbnRWYWx1ZSIsInNldFZhbHVlIiwiaXNEaXNhYmxlZCIsImlzUmVxdWlyZWQiLCJoYXNQbGFjZWhvbGRlciIsIiRuZXh0VGljayIsImlucHV0TGVuZ3RoIiwib25Gb2N1cyIsImlzRm9jdXNlZCIsIm9uQmx1ciIsIm9uSW5wdXQiLCJhc3NpZ24iLCJjYWxsZWUiLCJmb3JFYWNoIiwiam9pbiIsImNyb3NzT3JpZ2luIiwib25sb2FkIiwid2lkdGgiLCJoZWlnaHQiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwiZ2V0SW1hZ2VEYXRhIiwib25lcnJvciIsIkFycmF5IiwiaXNBcnJheSIsImZyb20iLCJyZXR1cm4iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiX2siLCJBcmd1bWVudHMiLCJjb21wb25lbnQiLCJtYXRlcmlhbCIsInN0eWxlcyIsInN0YXRpY0NsYXNzIiwiY2hpbGRyZW4iLCJpbnN0YWxsZWQiLCJjb25zb2xlIiwid2FybiIsInVzZSIsImdldENvbXB1dGVkU3R5bGUiLCJyZXNpemUiLCJib3hTaXppbmciLCJwYXJzZUZsb2F0IiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckJvdHRvbVdpZHRoIiwib2Zmc2V0V2lkdGgiLCJvdmVyZmxvd1kiLCJwYXJlbnROb2RlIiwiRWxlbWVudCIsInNjcm9sbFRvcCIsIm5vZGUiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRXaWR0aCIsInJvdW5kIiwiZGlzcGF0Y2hFdmVudCIsIm5vZGVOYW1lIiwiaGFzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRlbGV0ZSIsImJpbmQiLCJvdmVyZmxvd1giLCJ3b3JkV3JhcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXQiLCJkZXN0cm95IiwidXBkYXRlIiwiTWFwIiwiaW5kZXhPZiIsInNwbGljZSIsIkV2ZW50IiwiYnViYmxlcyIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiaHJlZiIsIm9uIiwiY29tcG9uZW50T3B0aW9ucyIsInRhZyIsInNjb3BlZFNsb3RzIiwiZXhwYW5kIiwiY3VycmVudCIsIm1kVmVydGljYWwiLCJyZWR1Y2UiLCJrZXkiLCJjbGFzcyIsImNoYW5nZUh0bWxNZXRhQ29sb3IiLCJjcmVhdGVOZXdTdHlsZUVsZW1lbnQiLCJOT0RFX0VOViIsIlZVRV9FTlYiLCJxdWVyeVNlbGVjdG9yIiwic2V0QXR0cmlidXRlIiwiaGVhZCIsImJvZHkiLCJyZW1vdmUiLCJ0ZXh0Q29udGVudCIsImlkIiwicmVwbGFjZSIsImlua1JpcHBsZSIsInRoZW1lcyIsInJlZnJlc2hJbmplY3RlZFN0eWxlcyIsInJlZ2lzdGVyUGFsZXR0ZSIsInJlZ2lzdGVyVGhlbWUiLCJzZXRDdXJyZW50VGhlbWUiLCJSZWdFeHAiLCJ0b1VwcGVyQ2FzZSIsInByaW1hcnkiLCJhY2NlbnQiLCJiYWNrZ3JvdW5kIiwidG9Mb3dlckNhc2UiLCJjb2xvciIsImh1ZSIsImRhcmtUZXh0IiwidGV4dENvbG9yIiwicmVkIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsInBpbmsiLCJwdXJwbGUiLCJpbmRpZ28iLCJibHVlIiwiY3lhbiIsInRlYWwiLCJncmVlbiIsImxpbWUiLCJ5ZWxsb3ciLCJhbWJlciIsIm9yYW5nZSIsImJyb3duIiwiZ3JleSIsIndoaXRlIiwiYmxhY2siLCJtYXRjaCIsIkVycm9yIiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJmZXRjaCIsImZpbHRlckxpc3QiLCJsaXN0IiwibWluQ2hhcnMiLCJwcmVwYXJlUmVzcG9uc2VEYXRhIiwicHJpbnRBdHRyaWJ1dGUiLCJxdWVyeVBhcmFtIiwidmVyaWZ5UHJvcHMiLCJsaXN0SXNFbXB0eSIsInRocm93RXJyb3JEZXN0cm95IiwiJGRlc3Ryb3kiLCJ0b3AiLCJtYXJnaW5Ub3AiLCJvZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsImxlZnQiLCJtYXJnaW5MZWZ0IiwiaW5uZXJXaWR0aCIsIm1peGlucyIsIm1kU2hpZnQiLCJjbGFzc2VzIiwic2V0QWN0aXZlIiwiJGNoaWxkcmVuIiwiYWN0aXZlIiwiZmluZEluZGV4IiwibWRJY29uIiwibWRJY29uU3JjIiwibWRJY29uc2V0IiwibWRBY3RpdmUiLCJtb3VudGVkIiwidGFyZ2V0IiwicmVsIiwibmV3UmVsIiwibWRTaW5nbGUiLCJ0b2dnbGUiLCJiZWZvcmVEZXN0cm95IiwibWRXaXRoSG92ZXIiLCJtZEluc2V0IiwidHJpZ2dlciIsImNvbnRlbnQiLCIkcmVmcyIsImRlc3Ryb3llZCIsInBhcmVudENsYXNzZXMiLCJpbnNpZGVQYXJlbnQiLCJtZFJhdGlvIiwibWRNZWRpdW0iLCJtZEJpZyIsIm1kVGV4dFNjcmltIiwibWRTb2xpZCIsImJhY2tkcm9wQmciLCJhcHBseVNjcmltQ29sb3IiLCJiYWNrZHJvcCIsImFwcGx5U29saWRDb2xvciIsImFicyIsImNoZWNrZWQiLCJ0b2dnbGVDaGVjayIsIm1kRGVsZXRhYmxlIiwibWRFZGl0YWJsZSIsIm1kSW5wdXRJZCIsIm1kSW5wdXROYW1lIiwibWRJbnB1dFBsYWNlaG9sZGVyIiwibWRJbnB1dFR5cGUiLCJtZFN0YXRpYyIsIm1kTWF4IiwiY3VycmVudENoaXAiLCJzZWxlY3RlZENoaXBzIiwiaW5wdXRJZCIsImFwcGx5SW5wdXRGb2N1cyIsImlucHV0IiwiZm9jdXMiLCJhZGRDaGlwIiwidHJpbSIsImRlbGV0ZUNoaXAiLCJlZGl0Q2hpcCIsImRlbGV0ZUxhc3RDaGlwIiwicG9wIiwibWRDbGlja091dHNpZGVUb0Nsb3NlIiwibWRFc2NUb0Nsb3NlIiwibWRCYWNrZHJvcCIsIm1kT3BlbkZyb20iLCJtZENsb3NlVG8iLCJtZEZ1bGxzY3JlZW4iLCJ0cmFuc2l0aW9uT2ZmIiwiZGlhbG9nVHJhbnNmb3JtIiwiZGlhbG9nQ2xhc3NlcyIsInRyYW5zZm9ybSIsInJlbW92ZURpYWxvZyIsImRpYWxvZ0VsZW1lbnQiLCJyZW1vdmVDaGlsZCIsImNhbGN1bGF0ZURpYWxvZ1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImRpYWxvZ0lubmVyRWxlbWVudCIsImNsb3NlT25Fc2MiLCJkaWFsb2ciLCJtZFRpdGxlIiwibWRDb250ZW50IiwibWRDb250ZW50SHRtbCIsIm1kT2tUZXh0IiwiZmlyZUNsb3NlRXZlbnQiLCJtZENhbmNlbFRleHQiLCJtZElucHV0TWF4bGVuZ3RoIiwiY29uZmlybVZhbHVlIiwiYWNjZXB0IiwibXVsdGlwbGUiLCJmaWxlbmFtZSIsImdldE11bHRpcGxlTmFtZSIsIm9wZW5QaWNrZXIiLCJyZXNldEZpbGUiLCJmaWxlSW5wdXQiLCJjbGljayIsInRleHRJbnB1dCIsIm9uRmlsZVNlbGVjdGVkIiwiZmlsZXMiLCJkYXRhVHJhbnNmZXIiLCJoYXNGaWxlIiwibWRTcmMiLCJzdmdDb250ZW50IiwiaW1hZ2VTcmMiLCJjaGVja1NyYyIsImlzSW1hZ2UiLCJpc1NWRyIsInNldFNWR0NvbnRlbnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJsb2FkU1ZHIiwiWE1MSHR0cFJlcXVlc3QiLCJnZXRSZXNwb25zZUhlYWRlciIsInN0YXR1cyIsInJlc3BvbnNlIiwibG9hZEltYWdlIiwic2VuZCIsImxvYWRlZCIsImFwcGx5QmxhY2siLCJpbWFnZUVsZW1lbnQiLCJjcmVhdGVJbWFnZSIsImFuYWx5emVMaWdodG5lc3MiLCJjcmVhdGVkIiwiaXRlbXMiLCJsb2FkaW5nIiwicXVlcnkiLCJzZWxlY3RlZCIsInNlYXJjaEJ1dHRvbiIsInNldFBhcmVudFVwZGF0ZVZhbHVlIiwiZGVib3VuY2VVcGRhdGUiLCJyZW5kZXJGaWx0ZXJlZExpc3QiLCJoaXQiLCJtYWtlRmV0Y2hSZXF1ZXN0IiwidGhlbiIsImxpbWl0IiwidG9nZ2xlTWVudSIsInJlc2V0Iiwic2V0U2VhcmNoQnV0dG9uIiwibWVudSIsImlucHV0SW5zdGFuY2UiLCJtZElubGluZSIsIm1kSGFzUGFzc3dvcmQiLCJtZENsZWFyYWJsZSIsInNob3dQYXNzd29yZCIsImhhc1NlbGVjdCIsImhhc1ZhbHVlIiwiaXNJbnB1dCIsInRhZ05hbWUiLCJ0b2dnbGVQYXNzd29yZFR5cGUiLCJjbGVhcklucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsImdldEF0dHJpYnV0ZSIsIm1kVGFnIiwibWRSb3ciLCJtZFJvd1hzbWFsbCIsIm1kUm93U21hbGwiLCJtZFJvd01lZGl1bSIsIm1kUm93TGFyZ2UiLCJtZFJvd1hsYXJnZSIsIm1kQ29sdW1uIiwibWRDb2x1bW5Yc21hbGwiLCJtZENvbHVtblNtYWxsIiwibWRDb2x1bW5NZWRpdW0iLCJtZENvbHVtbkxhcmdlIiwibWRDb2x1bW5YbGFyZ2UiLCJtZEhpZGVYc21hbGwiLCJtZEhpZGVTbWFsbCIsIm1kSGlkZU1lZGl1bSIsIm1kSGlkZUxhcmdlIiwibWRIaWRlWGxhcmdlIiwibWRIaWRlWHNtYWxsQW5kVXAiLCJtZEhpZGVTbWFsbEFuZFVwIiwibWRIaWRlTWVkaXVtQW5kVXAiLCJtZEhpZGVMYXJnZUFuZFVwIiwibWRIaWRlWGxhcmdlQW5kVXAiLCJtZEd1dHRlciIsIm1kQWxpZ24iLCJtZEFsaWduWHNtYWxsIiwibWRBbGlnblNtYWxsIiwibWRBbGlnbk1lZGl1bSIsIm1kQWxpZ25MYXJnZSIsIm1kQWxpZ25YbGFyZ2UiLCJtZFZlcnRpY2FsQWxpZ24iLCJtZFZlcnRpY2FsQWxpZ25Yc21hbGwiLCJtZFZlcnRpY2FsQWxpZ25TbWFsbCIsIm1kVmVydGljYWxBbGlnbk1lZGl1bSIsIm1kVmVydGljYWxBbGlnbkxhcmdlIiwibWRWZXJ0aWNhbEFsaWduWGxhcmdlIiwibWRGbGV4IiwibWRGbGV4WHNtYWxsIiwibWRGbGV4U21hbGwiLCJtZEZsZXhNZWRpdW0iLCJtZEZsZXhMYXJnZSIsIm1kRmxleFhsYXJnZSIsIm1kRmxleE9mZnNldCIsIm1kRmxleE9mZnNldFhzbWFsbCIsIm1kRmxleE9mZnNldFNtYWxsIiwibWRGbGV4T2Zmc2V0TWVkaXVtIiwibWRGbGV4T2Zmc2V0TGFyZ2UiLCJtZEZsZXhPZmZzZXRYbGFyZ2UiLCJnZW5lcmF0ZVByb3BDbGFzc2VzIiwiJHNsb3RzIiwibWRFeHBhbmRNdWx0aXBsZSIsInBhcmVudExpc3QiLCJjb250ZW50T2JzZXJ2ZXIiLCJleHBhbmRDbGFzc2VzIiwiZXhwYW5kU3R5bGVzIiwicmVzZXRTaWJsaW5ncyIsImNhbGN1bGF0ZVBhZGRpbmciLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ0b2dnbGVFeHBhbmRMaXN0IiwicmVjYWxjdWxhdGVBZnRlckNoYW5nZSIsIm9ic2VydmVDaGlsZENoYW5nZXMiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJzdWJ0cmVlIiwiZGlzY29ubmVjdCIsIm1kU2l6ZSIsIm1kRGlyZWN0aW9uIiwibWRBbGlnblRyaWdnZXIiLCJtZE9mZnNldFgiLCJtZE9mZnNldFkiLCJtZENsb3NlT25TZWxlY3QiLCJyZW1vdmVMYXN0U2l6ZU1lbnVDb250ZW50Q2xhc3MiLCJhZGROZXdTaXplTWVudUNvbnRlbnRDbGFzcyIsInJlbW92ZUxhc3REaXJlY3Rpb25NZW51Q29udGVudENsYXNzIiwiYWRkTmV3RGlyZWN0aW9uTWVudUNvbnRlbnRDbGFzcyIsImhhbmRsZUFsaWduVHJpZ2dlckNsYXNzIiwidmFsaWRhdGVNZW51IiwibWVudUNvbnRlbnQiLCJtZW51VHJpZ2dlciIsImdldFBvc2l0aW9uIiwiY2FsY3VsYXRlTWVudUNvbnRlbnRQb3MiLCJwYWdlWU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwicmVjYWxjdWxhdGVPblJlc2l6ZSIsImJhY2tkcm9wRWxlbWVudCIsIm9sZEhpZ2hsaWdodCIsImhpZ2hsaWdodGVkIiwiaXRlbXNBbW91bnQiLCJoaWdobGlnaHRJdGVtIiwiZmlyZUNsaWNrIiwiZ2V0T3B0aW9ucyIsImZpbHRlciIsInBhcmVudENvbnRlbnQiLCJpbmRleCIsInNjcm9sbEludG9WaWV3SWZOZWVkZWQiLCJwYXJlbnRNZW51IiwibWRMYWJlbCIsIm1kRGlzYWJsZWQiLCJtZFRvb2x0aXAiLCJtZFRvb2x0aXBEZWxheSIsIm1kVG9vbHRpcERpcmVjdGlvbiIsImJvYXJkSWQiLCJ1cGRhdGVCb2FyZERhdGEiLCJnZXRCb2FyZERhdGEiLCJsYWJlbCIsImljb24iLCJ0b29sdGlwIiwidG9vbHRpcERlbGF5IiwidG9vbHRpcERpcmVjdGlvbiIsInJlZiIsInBhcmVudEJvYXJkcyIsInVwZGF0ZUJvYXJkIiwic2V0QWN0aXZlQm9hcmQiLCJ1bnJlZ2lzdGVyQm9hcmQiLCJtZEZpeGVkIiwibWRDZW50ZXJlZCIsIm1kUmlnaHQiLCJtZER5bmFtaWNIZWlnaHQiLCJtZEVsZXZhdGlvbiIsIm1kQXV0byIsIm1kRHVyYXRpb24iLCJtZENvbnRyb2xzIiwibWRJbmZpbml0ZSIsIm1kU3dpcGVhYmxlIiwibWRTd2lwZURpc3RhbmNlIiwiYm9hcmRMaXN0IiwiYWN0aXZlQm9hcmQiLCJhY3RpdmVCb2FyZE51bWJlciIsImhhc0ljb25zIiwiaGFzTGFiZWwiLCJ0cmFuc2l0aW9uQ29udHJvbCIsImNvbnRlbnRIZWlnaHQiLCJjb250ZW50V2lkdGgiLCJhdXRvVHJhbnNpdGlvbiIsImJvYXJkQ2xhc3NlcyIsIm5hdmlnYXRpb25DbGFzc2VzIiwiaW5kaWNhdG9yQ2xhc3NlcyIsImxhc3RJbmRpY2F0b3JOdW1iZXIiLCJnZXRIZWFkZXJDbGFzcyIsInJlZ2lzdGVyQm9hcmQiLCJvYnNlcnZlRWxlbWVudENoYW5nZXMiLCJwYXJlbnRPYnNlcnZlciIsImNhbGN1bGF0ZU9uV2F0Y2giLCJib2FyZHNDb250ZW50IiwiYXR0cmlidXRlcyIsImdldEJvYXJkSW5kZXgiLCJjYWxjdWxhdGVJbmRpY2F0b3JQb3MiLCJib2FyZEhlYWRlciIsIm9mZnNldExlZnQiLCJpbmRpY2F0b3IiLCJyaWdodCIsImNhbGN1bGF0ZUJvYXJkc1dpZHRoQW5kUG9zaXRpb24iLCJjYWxjdWxhdGVDb250ZW50SGVpZ2h0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJkZWJvdW5jZVRyYW5zaXRpb24iLCJjYWxjdWxhdGVPblJlc2l6ZSIsInN0YXJ0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwibW92ZU5leHRCb2FyZCIsIm1vdmVQcmV2Qm9hcmQiLCJpc0hvcml6b250YWxseUluc2lkZSIsIm1vdW50ZWRSZWN0IiwiaXNWZXJ0aWNhbGx5SW5zaWRlIiwiaGFuZGxlVG91Y2hTdGFydCIsImNoYW5nZWRUb3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJpbml0aWFsVG91Y2hQb3NpdGlvbiIsImNhbk1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsIm1kSW5kZXRlcm1pbmF0ZSIsIm1kUHJvZ3Jlc3MiLCJtZFZhbHVlIiwibWRNYXhSYXRpbmciLCJtZEljb25TaXplIiwibWRGdWxsSWNvbnNldCIsIm1kRW1wdHlJY29uc2V0IiwibWRGdWxsSWNvbiIsIm1kRW1wdHlJY29uIiwic3JjRnVsbEljb24iLCJzcmNFbXB0eUljb24iLCJyYXRpbmciLCJlbXB0eUljb24iLCJmdWxsSWNvbiIsImljb25DbGFzc2VzIiwiZnVsbEljb25TdHlsZSIsImhvdmVyU3RhcnMiLCJnZXRJY29uSW5kZXgiLCJjdXJyZW50VGFyZ2V0IiwiY2xpY2tTdGFycyIsInNvbWUiLCJ0ZXN0Iiwib25Nb3VzZU91dCIsInBhcmVudFNlbGVjdCIsImNoZWNrIiwiaXNTZWxlY3RlZCIsImlzTXVsdGlwbGUiLCJzZXRQYXJlbnRPcHRpb24iLCJzZWxlY3RPcHRpb24iLCJpdGVtIiwic2VsZWN0TXVsdGlwbGUiLCJvcHRpb25zQW1vdW50IiwibXVsdGlwbGVPcHRpb25zIiwibWRNZW51Q2xhc3MiLCJtZE1lbnVPcHRpb25zIiwibGFzdFNlbGVjdGVkIiwic2VsZWN0ZWRWYWx1ZSIsInNlbGVjdGVkVGV4dCIsImhhc0ljb24iLCJjb250ZW50Q2xhc3NlcyIsInZhbHVlU3R5bGUiLCJzZXRUZXh0QW5kVmFsdWUiLCJzZWxlY3RPcHRpb25zIiwib25PcGVuIiwibWFwIiwiZ2V0U2luZ2xlVmFsdWUiLCJ0ZXh0IiwiZWwiLCJnZXRNdWx0aXBsZVZhbHVlIiwiY2hhbmdlVmFsdWUiLCJtZFZpc2libGUiLCJtZFN3aXBlVGhyZXNob2xkIiwic2hvdyIsImJsdXIiLCJpc0Zyb21TdGFydFdoZW5DbG9zZWQiLCJ0b3VjaGVzIiwiaGFuZGxlVG91Y2hNb3ZlIiwibWRQb3NpdGlvbiIsInNuYWNrYmFySWQiLCJyb290RWxlbWVudCIsInNuYWNrYmFyRWxlbWVudCIsImRpcmVjdGlvbkNsYXNzIiwiY2xvc2VUaW1lb3V0IiwicmVtb3ZlRWxlbWVudCIsImNvbnRhaW5lciIsImJhY2tncm91bmRDb2xvciIsInRpbWVvdXRTdGFydGVkQXQiLCJEYXRlIiwibm93IiwicGVuZGluZ0R1cmF0aW9uIiwicGF1c2VUaW1lb3V0IiwicmVzdW1lVGltZW91dCIsIm1kT3BlbiIsIm1kTW9kZSIsImZhYlRyaWdnZXIiLCJjbG9zZVNwZWVkRGlhbCIsInRvZ2dsZVNwZWVkRGlhbCIsIm1kU3Ryb2tlIiwiZGFzaFByb2dyZXNzIiwibWRCdXR0b25CYWNrIiwibWRCdXR0b25Db250aW51ZSIsIm1kQ29udGludWUiLCJtZE1lc3NhZ2UiLCJtZFRvb2xUaXAiLCJwYXJlbnRTdGVwcGVyIiwic3RlcElkIiwidmVydGljYWwiLCJ1cGRhdGVTdGVwRGF0YSIsImNhbkdvQmFjayIsImdldFByZXZpb3VzU3RlcCIsImVkaXRhYmxlIiwiY29udGludWVUZXh0IiwiZ2V0U3RlcHNDb3VudCIsImlzQ3VycmVudFN0ZXAiLCJhY3RpdmVTdGVwTnVtYmVyIiwiZ2V0U3RlcERhdGEiLCJtZXNzYWdlIiwiY29udGludWUiLCJ0b29sVGlwIiwibW92ZU5leHRTdGVwIiwibW92ZVByZXZpb3VzU3RlcCIsInNldEFjdGl2ZVN0ZXAiLCJ1cGRhdGVTdGVwIiwiZ2V0U3RlcEluZGV4IiwidW5yZWdpc3RlclN0ZXAiLCJzdGVwIiwibWRBbHRlcm5hdGVMYWJlbHMiLCJpc0NvbXBsZXRlZCIsImdldEhlYWRlckNsYXNzZXMiLCJhY3RpdmVTdGVwIiwic3RlcE51bWJlciIsInN0ZXBMaXN0Iiwic3RlcHNDbGFzc2VzIiwiZ2V0TmV4dFN0ZXAiLCJyZWdpc3RlclN0ZXAiLCIkc2V0IiwiJGRlbGV0ZSIsInN0ZXBDb250ZW50IiwiY2FsY3VsYXRlU3RlcHNXaWR0aEFuZFBvc2l0aW9uIiwibGVmdFBvcyIsInNldFBvc2l0aW9uIiwiY2hhbmdlU3RhdGUiLCJkZWZhdWx0UHJldmVudGVkIiwibWRTb3J0VHlwZSIsIm1kU29ydCIsInNvcnRUeXBlIiwic29ydEJ5IiwiaGFzUm93U2VsZWN0aW9uIiwic2VsZWN0ZWRSb3dzIiwibnVtYmVyT2ZSb3dzIiwibnVtYmVyT2ZTZWxlY3RlZCIsImVtaXRTb3J0IiwiZW1pdFNlbGVjdGlvbiIsInJlbW92ZVJvdyIsInNldFJvd1NlbGVjdGlvbiIsInNldE11bHRpcGxlUm93U2VsZWN0aW9uIiwicGFyZW50Q2FyZCIsInRhYmxlSW5zdGFuY2UiLCJtZFNlbGVjdGVkTGFiZWwiLCIkd2F0Y2giLCJjb3VudGVyIiwibWROdW1lcmljIiwiaGFzQWN0aW9uIiwibWRMYXJnZSIsIm1kSWQiLCJtZFBsYWNlaG9sZGVyIiwibWRNYXhsZW5ndGgiLCJ0cmlnZ2VyQ2xhc3NlcyIsInJlYWxWYWx1ZSIsImxvZyIsIm9wZW5EaWFsb2ciLCJjbG9zZURpYWxvZ09uT2ZmQ2xpY2siLCJjbG9zZURpYWxvZyIsImNvbmZpcm1EaWFsb2ciLCJtZFNvcnRCeSIsInNvcnRlZCIsInBhcmVudFRhYmxlIiwiaGFzTWF0Y2hTb3J0IiwiY2hhbmdlU29ydCIsImluaXRTb3J0IiwiJG9uIiwibWRQYWdlT3B0aW9ucyIsIm1kUGFnZSIsIm1kVG90YWwiLCJtZFNlcGFyYXRvciIsInRvdGFsSXRlbXMiLCJjdXJyZW50UGFnZSIsImN1cnJlbnRTaXplIiwic3ViVG90YWwiLCJsYXN0UGFnZSIsInNob3VsZERpc2FibGUiLCJlbWl0UGFnaW5hdGlvbkV2ZW50IiwiY2FuRmlyZUV2ZW50cyIsInNpemUiLCJwYWdlIiwiY2hhbmdlU2l6ZSIsInByZXZpb3VzUGFnZSIsIm5leHRQYWdlIiwiaW5jbHVkZXMiLCJtZEF1dG9TZWxlY3QiLCJtZFNlbGVjdGlvbiIsIm1kSXRlbSIsImhlYWRSb3ciLCJjaGVja2JveCIsInV1aWQiLCJoYXNTZWxlY3Rpb24iLCJoYW5kbGVNdWx0aXBsZVNlbGVjdGlvbiIsImhhbmRsZVNpbmdsZVNlbGVjdGlvbiIsInNlbGVjdCIsImF1dG9TZWxlY3QiLCJzdGFydFRhYmxlUm93IiwibWRPcHRpb25zIiwidGFiSWQiLCJ1cGRhdGVUYWJEYXRhIiwiZGVlcCIsImhhbmRsZXIiLCJnZXRUYWJEYXRhIiwiaWNvbnNldCIsInBhcmVudFRhYnMiLCJ1cGRhdGVUYWIiLCJzZXRBY3RpdmVUYWIiLCJ1bnJlZ2lzdGVyVGFiIiwibWROYXZpZ2F0aW9uIiwidGFiTGlzdCIsImFjdGl2ZVRhYiIsImFjdGl2ZVRhYk51bWJlciIsImhhc05hdmlnYXRpb25TY3JvbGwiLCJpc05hdmlnYXRpb25PblN0YXJ0IiwiaXNOYXZpZ2F0aW9uT25FbmQiLCJ0YWJDbGFzc2VzIiwibmF2aWdhdGlvbkxlZnRCdXR0b25DbGFzc2VzIiwibmF2aWdhdGlvblJpZ2h0QnV0dG9uQ2xhc3NlcyIsInJlZ2lzdGVyVGFiIiwidGFiQ29udGVudCIsImdldFRhYkluZGV4IiwidGFiSGVhZGVyIiwidGFic0NvbnRhaW5lciIsInNjcm9sbExlZnQiLCJjYWxjdWxhdGVUYWJzV2lkdGhBbmRQb3NpdGlvbiIsImNoZWNrTmF2aWdhdGlvblNjcm9sbCIsImNhbGN1bGF0ZVNjcm9sbFBvcyIsInNjcm9sbFdpZHRoIiwiaGFuZGxlTmF2aWdhdGlvblNjcm9sbCIsIm5hdmlnYXRpb25TY3JvbGxMZWZ0IiwibmF2aWdhdGlvblNjcm9sbFJpZ2h0IiwibWREZWxheSIsInBhcmVudENsYXNzIiwidG9wUG9zaXRpb24iLCJsZWZ0UG9zaXRpb24iLCJjYWxjdWxhdGVUb29sdGlwUG9zaXRpb24iLCJyZW1vdmVUb29sdGlwcyIsInRvb2x0aXBFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImJvdHRvbSIsImdlbmVyYXRlVG9vbHRpcENsYXNzZXMiLCJyaXBwbGVFbGVtZW50IiwicGFyZW50RGltZW5zaW9ucyIsImF3YWl0aW5nQ29tcGxldGUiLCJoYXNDb21wbGV0ZWQiLCJmYWRlT3V0IiwiaW5pdCIsImNoZWNrQXZhaWxhYmxlUG9zaXRpb25zIiwicG9zaXRpb24iLCJnZXRDbG9zZXN0UG9zaXRpb25lZFBhcmVudCIsImdldFBhcmVudFNpemUiLCJnZXRDbGlja1Bvc2l0aW9uIiwicmlwcGxlIiwicGFnZVkiLCJwYWdlWCIsInNldERpbWVuc2lvbnMiLCJzZXRQb3NpdGlvbnMiLCJjbGVhclN0YXRlIiwiZW5kUmlwcGxlIiwic3RhcnRSaXBwbGUiLCJwcmV2aW91cyIsInJlZ2lzdGVyVHJpZ2dlckV2ZW50IiwidW5yZWdpc3RlclRyaWdnZXJFdmVudCIsImlzRXh0ZW5zaWJsZSIsInByZXZlbnRFeHRlbnNpb25zIiwiTkVFRCIsIktFWSIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRJdGVyYXRvciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJKU09OIiwic3RyaW5naWZ5IiwiSCIsIkwiLCIkIiwiSSIsIkQiLCJqIiwiWSIsIlFPYmplY3QiLCJWIiwiZmluZENoaWxkIiwieiIsIml0ZXJhdG9yIiwicSIsIksiLCJYIiwiSiIsIlEiLCJaIiwidHQiLCJldCIsIm50IiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsIm9mZnNldFRvcCIsImNsaWVudEhlaWdodCIsInNjcm9sbEludG9WaWV3IiwiJGNyZWF0ZUVsZW1lbnQiLCJfc2VsZiIsIl9jIiwiYXR0cnMiLCJzdG9wUHJvcGFnYXRpb24iLCJkb21Qcm9wcyIsIl92IiwiX2UiLCJfcyIsImNoYW5nZSIsIm1vZGVsIiwiY2FsbGJhY2siLCJleHByZXNzaW9uIiwiX2wiLCJhcHBlYXIiLCJ2aWV3Qm94IiwiY3giLCJjeSIsImtleWRvd24iLCJrZXlDb2RlIiwiaW5uZXJIVE1MIiwiZGlyZWN0aXZlcyIsInJhd05hbWUiLCJjb21wb3NpbmciLCJrZXl1cCIsInRhYmluZGV4IiwicHJldmVudERlZmF1bHQiLCJuYXRpdmVPbiIsInNjcm9sbCIsInJlZkluRm9yIiwibW91c2VvdmVyIiwibW91c2VvdXQiLCJlZGl0Iiwic3RhdGljU3R5bGUiLCJmbGV4IiwiX2IiLCJvcGVuZWQiLCJjbG9zZWQiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsIml0Iiwib3QiLCJhdCIsInJ0Iiwic3QiLCJkdCIsImx0IiwiY3QiLCJ1dCIsIm10IiwiZnQiLCJwdCIsImh0IiwiYnQiLCJ2dCIsIkV0IiwiZ3QiLCJNZENvcmUiLCJNZEF2YXRhciIsIk1kQmFja2Ryb3AiLCJNZEJvdHRvbUJhciIsIk1kQnV0dG9uIiwiTWRCdXR0b25Ub2dnbGUiLCJNZENhcmQiLCJNZENoZWNrYm94IiwiTWRDaGlwcyIsIk1kRGlhbG9nIiwiTWREaXZpZGVyIiwiTWRGaWxlIiwiTWRJY29uIiwiTWRJbWFnZSIsIk1kSW5wdXRDb250YWluZXIiLCJNZExheW91dCIsIk1kTGlzdCIsIk1kTWVudSIsIk1kT25ib2FyZGluZyIsIk1kUHJvZ3Jlc3MiLCJNZFJhZGlvIiwiTWRSYXRpbmdCYXIiLCJNZFNlbGVjdCIsIk1kU2lkZW5hdiIsIk1kU25hY2tiYXIiLCJNZFNwZWVkRGlhbCIsIk1kU3Bpbm5lciIsIk1kU3RlcHBlciIsIk1kU3ViaGVhZGVyIiwiTWRTd2l0Y2giLCJNZFRhYmxlIiwiTWRUYWJzIiwiTWRUb29sYmFyIiwiTWRUb29sdGlwIiwiTWRXaGl0ZWZyYW1lIiwiaW5zdGFsbCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7OztBQUtBLENBQUUsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxzQkFBaUJDLE9BQWpCLHlDQUFpQkEsT0FBakIsTUFBMEIsb0JBQWlCQyxNQUFqQix5Q0FBaUJBLE1BQWpCLEVBQTFCLEdBQWtEQSxPQUFPRCxPQUFQLEdBQWVELEVBQUVHLFFBQVEsS0FBUixDQUFGLENBQWpFLEdBQW1GLGNBQVksT0FBT0MsTUFBbkIsSUFBMkJBLE9BQU9DLEdBQWxDLEdBQXNDRCxPQUFPLENBQUMsS0FBRCxDQUFQLEVBQWVKLENBQWYsQ0FBdEMsR0FBd0Qsb0JBQWlCQyxPQUFqQix5Q0FBaUJBLE9BQWpCLEtBQXlCQSxRQUFRSyxXQUFSLEdBQW9CTixFQUFFRyxRQUFRLEtBQVIsQ0FBRixDQUE3QyxHQUErREosRUFBRU8sV0FBRixHQUFjTixFQUFFRCxFQUFFUSxHQUFKLENBQXhOO0FBQWlPLENBQWhQLFlBQXdQLFVBQVNSLENBQVQsRUFBVztBQUFDLFNBQVEsVUFBU0EsQ0FBVCxFQUFXO0FBQUMsYUFBU0MsQ0FBVCxDQUFXUSxDQUFYLEVBQWE7QUFBQyxVQUFHQyxFQUFFRCxDQUFGLENBQUgsRUFBUSxPQUFPQyxFQUFFRCxDQUFGLEVBQUtQLE9BQVosQ0FBb0IsSUFBSVMsSUFBRUQsRUFBRUQsQ0FBRixJQUFLLEVBQUNBLEdBQUVBLENBQUgsRUFBS0csR0FBRSxDQUFDLENBQVIsRUFBVVYsU0FBUSxFQUFsQixFQUFYLENBQWlDLE9BQU9GLEVBQUVTLENBQUYsRUFBS0ksSUFBTCxDQUFVRixFQUFFVCxPQUFaLEVBQW9CUyxDQUFwQixFQUFzQkEsRUFBRVQsT0FBeEIsRUFBZ0NELENBQWhDLEdBQW1DVSxFQUFFQyxDQUFGLEdBQUksQ0FBQyxDQUF4QyxFQUEwQ0QsRUFBRVQsT0FBbkQ7QUFBMkQsU0FBSVEsSUFBRSxFQUFOLENBQVMsT0FBT1QsRUFBRWEsQ0FBRixHQUFJZCxDQUFKLEVBQU1DLEVBQUVjLENBQUYsR0FBSUwsQ0FBVixFQUFZVCxFQUFFUSxDQUFGLEdBQUksVUFBU1QsQ0FBVCxFQUFXO0FBQUMsYUFBT0EsQ0FBUDtBQUFTLEtBQXJDLEVBQXNDQyxFQUFFZSxDQUFGLEdBQUksVUFBU2hCLENBQVQsRUFBV1UsQ0FBWCxFQUFhRCxDQUFiLEVBQWU7QUFBQ1IsUUFBRVUsQ0FBRixDQUFJWCxDQUFKLEVBQU1VLENBQU4sS0FBVU8sT0FBT0MsY0FBUCxDQUFzQmxCLENBQXRCLEVBQXdCVSxDQUF4QixFQUEwQixFQUFDUyxjQUFhLENBQUMsQ0FBZixFQUFpQkMsWUFBVyxDQUFDLENBQTdCLEVBQStCQyxLQUFJWixDQUFuQyxFQUExQixDQUFWO0FBQTJFLEtBQXJJLEVBQXNJUixFQUFFUyxDQUFGLEdBQUksVUFBU1YsQ0FBVCxFQUFXO0FBQUMsVUFBSVUsSUFBRVYsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0IsWUFBVTtBQUFDLGVBQU90QixFQUFFdUIsT0FBVDtBQUFpQixPQUE1QyxHQUE2QyxZQUFVO0FBQUMsZUFBT3ZCLENBQVA7QUFBUyxPQUF2RSxDQUF3RSxPQUFPQyxFQUFFZSxDQUFGLENBQUlOLENBQUosRUFBTSxHQUFOLEVBQVVBLENBQVYsR0FBYUEsQ0FBcEI7QUFBc0IsS0FBcFAsRUFBcVBULEVBQUVVLENBQUYsR0FBSSxVQUFTWCxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQU9nQixPQUFPTyxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ1osSUFBaEMsQ0FBcUNiLENBQXJDLEVBQXVDQyxDQUF2QyxDQUFQO0FBQWlELEtBQXhULEVBQXlUQSxFQUFFeUIsQ0FBRixHQUFJLEdBQTdULEVBQWlVekIsRUFBRUEsRUFBRTBCLENBQUYsR0FBSSxHQUFOLENBQXhVO0FBQW1WLEdBQS9lLENBQWlmLENBQUUsVUFBUzNCLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlRCxDQUFmLEVBQWlCRSxDQUFqQixFQUFtQjtBQUFDLFVBQUlpQixDQUFKO0FBQUEsVUFBTUMsSUFBRTdCLElBQUVBLEtBQUcsRUFBYjtBQUFBLFVBQWdCMkIsWUFBUzNCLEVBQUV1QixPQUFYLENBQWhCLENBQW1DLGFBQVdJLENBQVgsSUFBYyxlQUFhQSxDQUEzQixLQUErQkMsSUFBRTVCLENBQUYsRUFBSTZCLElBQUU3QixFQUFFdUIsT0FBdkMsRUFBZ0QsSUFBSVAsSUFBRSxjQUFZLE9BQU9hLENBQW5CLEdBQXFCQSxFQUFFQyxPQUF2QixHQUErQkQsQ0FBckMsQ0FBdUM1QixNQUFJZSxFQUFFZSxNQUFGLEdBQVM5QixFQUFFOEIsTUFBWCxFQUFrQmYsRUFBRWdCLGVBQUYsR0FBa0IvQixFQUFFK0IsZUFBMUMsR0FBMkR2QixNQUFJTyxFQUFFaUIsUUFBRixHQUFXeEIsQ0FBZixDQUEzRCxDQUE2RSxJQUFJRyxDQUFKLENBQU0sSUFBR0QsS0FBR0MsSUFBRSxXQUFTWixDQUFULEVBQVc7QUFBQ0EsWUFBRUEsS0FBRyxLQUFLa0MsTUFBTCxJQUFhLEtBQUtBLE1BQUwsQ0FBWUMsVUFBNUIsSUFBd0MsS0FBS0MsTUFBTCxJQUFhLEtBQUtBLE1BQUwsQ0FBWUYsTUFBekIsSUFBaUMsS0FBS0UsTUFBTCxDQUFZRixNQUFaLENBQW1CQyxVQUE5RixFQUF5R25DLEtBQUcsZUFBYSxPQUFPcUMsbUJBQXZCLEtBQTZDckMsSUFBRXFDLG1CQUEvQyxDQUF6RyxFQUE2SzNCLEtBQUdBLEVBQUVHLElBQUYsQ0FBTyxJQUFQLEVBQVliLENBQVosQ0FBaEwsRUFBK0xBLEtBQUdBLEVBQUVzQyxxQkFBTCxJQUE0QnRDLEVBQUVzQyxxQkFBRixDQUF3QkMsR0FBeEIsQ0FBNEI1QixDQUE1QixDQUEzTjtBQUEwUCxPQUF4USxFQUF5UUssRUFBRXdCLFlBQUYsR0FBZTVCLENBQTNSLElBQThSRixNQUFJRSxJQUFFRixDQUFOLENBQTlSLEVBQXVTRSxDQUExUyxFQUE0UztBQUFDLFlBQUlHLElBQUVDLEVBQUV5QixVQUFSO0FBQUEsWUFBbUJDLElBQUUzQixJQUFFQyxFQUFFZSxNQUFKLEdBQVdmLEVBQUUyQixZQUFsQyxDQUErQzVCLElBQUVDLEVBQUVlLE1BQUYsR0FBUyxVQUFTL0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxpQkFBT1csRUFBRUMsSUFBRixDQUFPWixDQUFQLEdBQVV5QyxFQUFFMUMsQ0FBRixFQUFJQyxDQUFKLENBQWpCO0FBQXdCLFNBQWpELEdBQWtEZSxFQUFFMkIsWUFBRixHQUFlRCxJQUFFLEdBQUdFLE1BQUgsQ0FBVUYsQ0FBVixFQUFZOUIsQ0FBWixDQUFGLEdBQWlCLENBQUNBLENBQUQsQ0FBbEY7QUFBc0YsY0FBTSxFQUFDaUMsVUFBU2pCLENBQVYsRUFBWTFCLFNBQVEyQixDQUFwQixFQUFzQkMsU0FBUWQsQ0FBOUIsRUFBTjtBQUF1QyxLQUFwc0I7QUFBcXNCLEdBQXJ0QixFQUF3dEIsVUFBU2hCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsVUFBRyxDQUFDQSxDQUFKLEVBQU0sT0FBTyxJQUFQLENBQVksSUFBSUMsSUFBRUQsRUFBRThDLE9BQVIsQ0FBZ0IsT0FBTzdDLEtBQUcsZUFBYUQsRUFBRStDLFFBQUYsQ0FBV0MsYUFBM0IsS0FBMkMvQyxJQUFFRCxFQUFFaUQsTUFBL0MsR0FBdURoRCxLQUFHUSxFQUFFVCxFQUFFa0QsT0FBSixDQUFqRTtBQUE4RSxZQUFPaEMsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQzZCLE9BQU0sRUFBQ04sU0FBUU8sTUFBVCxFQUFQLEVBQXdCQyxVQUFTLEVBQUNDLGtCQUFpQiw0QkFBVTtBQUFDLGlCQUFPOUMsRUFBRSxJQUFGLEtBQVMsS0FBSytDLFNBQUwsQ0FBZUMsWUFBL0I7QUFBNEMsU0FBekUsRUFBMEVDLFlBQVcsc0JBQVU7QUFBQyxpQkFBTyxLQUFLRixTQUFMLENBQWVHLE1BQWYsR0FBc0IsS0FBS0osZ0JBQWxDO0FBQW1ELFNBQW5KLEVBQWpDLEVBQXNMSyxPQUFNLEVBQUNkLFNBQVEsaUJBQVM5QyxDQUFULEVBQVc7QUFBQyxlQUFLd0QsU0FBTCxDQUFlSyxRQUFmLENBQXdCN0QsQ0FBeEI7QUFBMkIsU0FBaEQsRUFBNUwsRUFBOE84RCxhQUFZLHVCQUFVO0FBQUMsWUFBSTlELElBQUUsS0FBSzhDLE9BQVgsQ0FBbUIsS0FBS1UsU0FBTCxDQUFlSyxRQUFmLENBQXdCN0QsSUFBRUEsQ0FBRixHQUFJLFNBQTVCO0FBQXVDLE9BQS9ULEVBQTNELEVBQTRYQSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUF4WTtBQUFnWixHQUFud0MsRUFBc3dDLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFFBQUlTLElBQUVWLEVBQUVFLE9BQUYsR0FBVSxlQUFhLE9BQU82RCxNQUFwQixJQUE0QkEsT0FBT0MsSUFBUCxJQUFhQSxJQUF6QyxHQUE4Q0QsTUFBOUMsR0FBcUQsZUFBYSxPQUFPRSxJQUFwQixJQUEwQkEsS0FBS0QsSUFBTCxJQUFXQSxJQUFyQyxHQUEwQ0MsSUFBMUMsR0FBK0NDLFNBQVMsYUFBVCxHQUFwSCxDQUE4SSxZQUFVLE9BQU9DLEdBQWpCLEtBQXVCQSxNQUFJekQsQ0FBM0I7QUFBOEIsR0FBaDhDLEVBQW04QyxVQUFTVixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNWLE1BQUVFLE9BQUYsR0FBVSxDQUFDUSxFQUFFLENBQUYsRUFBTSxZQUFVO0FBQUMsYUFBTyxLQUFHTyxPQUFPQyxjQUFQLENBQXNCLEVBQXRCLEVBQXlCLEdBQXpCLEVBQTZCLEVBQUNHLEtBQUksZUFBVTtBQUFDLGlCQUFPLENBQVA7QUFBUyxTQUF6QixFQUE3QixFQUF5RE8sQ0FBbkU7QUFBcUUsS0FBdEYsQ0FBWDtBQUFvRyxHQUF2akQsRUFBMGpELFVBQVM1QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFFBQUlTLElBQUVWLEVBQUVFLE9BQUYsR0FBVSxFQUFDa0UsU0FBUSxPQUFULEVBQWhCLENBQWtDLFlBQVUsT0FBT0MsR0FBakIsS0FBdUJBLE1BQUkzRCxDQUEzQjtBQUE4QixHQUF4b0QsRUFBMm9ELFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVc7QUFBQyxVQUFHO0FBQUMsZUFBTSxDQUFDLENBQUNBLEdBQVI7QUFBWSxPQUFoQixDQUFnQixPQUFNQSxDQUFOLEVBQVE7QUFBQyxlQUFNLENBQUMsQ0FBUDtBQUFTO0FBQUMsS0FBekQ7QUFBMEQsR0FBbnRELEVBQXN0RCxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsYUFBTSxvQkFBaUJBLENBQWpCLHlDQUFpQkEsQ0FBakIsS0FBbUIsU0FBT0EsQ0FBMUIsR0FBNEIsY0FBWSxPQUFPQSxDQUFyRDtBQUF1RCxLQUE3RTtBQUE4RSxHQUFsekQsRUFBcXpELFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixDQUFkLENBQW9CVixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsYUFBT1MsRUFBRUUsRUFBRVgsQ0FBRixDQUFGLENBQVA7QUFBZSxLQUFyQztBQUFzQyxHQUEvM0QsRUFBazRELFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsUUFBSVMsSUFBRSxHQUFHZSxjQUFULENBQXdCekIsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsYUFBT1MsRUFBRUcsSUFBRixDQUFPYixDQUFQLEVBQVNDLENBQVQsQ0FBUDtBQUFtQixLQUEzQztBQUE0QyxHQUFwOUQsRUFBdTlELFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixDQUFkO0FBQUEsUUFBb0JrQixJQUFFbEIsRUFBRSxFQUFGLENBQXRCO0FBQUEsUUFBNEJtQixJQUFFWixPQUFPQyxjQUFyQyxDQUFvRGpCLEVBQUVxRSxDQUFGLEdBQUk1RCxFQUFFLENBQUYsSUFBS08sT0FBT0MsY0FBWixHQUEyQixVQUFTbEIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFVBQUdELEVBQUVULENBQUYsR0FBS0MsSUFBRTJCLEVBQUUzQixDQUFGLEVBQUksQ0FBQyxDQUFMLENBQVAsRUFBZVEsRUFBRUMsQ0FBRixDQUFmLEVBQW9CQyxDQUF2QixFQUF5QixJQUFHO0FBQUMsZUFBT2tCLEVBQUU3QixDQUFGLEVBQUlDLENBQUosRUFBTVMsQ0FBTixDQUFQO0FBQWdCLE9BQXBCLENBQW9CLE9BQU1WLENBQU4sRUFBUSxDQUFFLEtBQUcsU0FBUVUsQ0FBUixJQUFXLFNBQVFBLENBQXRCLEVBQXdCLE1BQU02RCxVQUFVLDBCQUFWLENBQU4sQ0FBNEMsT0FBTSxXQUFVN0QsQ0FBVixLQUFjVixFQUFFQyxDQUFGLElBQUtTLEVBQUV5QyxLQUFyQixHQUE0Qm5ELENBQWxDO0FBQW9DLEtBQTlNO0FBQStNLEdBQTF1RSxFQUE2dUUsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSTFDLElBQUUsU0FBU1QsQ0FBVCxDQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQU0sRUFBRSxDQUFDVCxDQUFELElBQUksQ0FBQ0EsRUFBRXVFLEdBQVQsS0FBZ0IsTUFBSXZFLEVBQUV3RSxJQUFOLEtBQWF4RSxFQUFFdUUsR0FBRixDQUFNRSxTQUFOLENBQWdCQyxRQUFoQixDQUF5QmpFLENBQXpCLElBQTRCVCxDQUE1QixHQUE4QkQsRUFBRUMsRUFBRWlELE9BQUosRUFBWXhDLENBQVosQ0FBM0MsQ0FBdEI7QUFBa0YsS0FBeEcsQ0FBeUdULEVBQUVzQixPQUFGLEdBQVVkLENBQVYsRUFBWVQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBeEI7QUFBZ0MsR0FBcDhFLEVBQXU4RSxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV0MsSUFBRUQsRUFBRSxFQUFGLENBQWIsQ0FBbUJWLEVBQUVFLE9BQUYsR0FBVVEsRUFBRSxDQUFGLElBQUssVUFBU1YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQU9ELEVBQUU2RCxDQUFGLENBQUl0RSxDQUFKLEVBQU1DLENBQU4sRUFBUVUsRUFBRSxDQUFGLEVBQUlELENBQUosQ0FBUixDQUFQO0FBQXVCLEtBQTVDLEdBQTZDLFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFPVixFQUFFQyxDQUFGLElBQUtTLENBQUwsRUFBT1YsQ0FBZDtBQUFnQixLQUF2RjtBQUF3RixHQUFsa0YsRUFBcWtGLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsRUFBTSxLQUFOLENBQU47QUFBQSxRQUFtQkMsSUFBRUQsRUFBRSxFQUFGLENBQXJCO0FBQUEsUUFBMkJrQixJQUFFbEIsRUFBRSxDQUFGLEVBQUtrRSxNQUFsQztBQUFBLFFBQXlDL0MsSUFBRSxjQUFZLE9BQU9ELENBQTlEO0FBQUEsUUFBZ0VELElBQUUzQixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsYUFBT1MsRUFBRVQsQ0FBRixNQUFPUyxFQUFFVCxDQUFGLElBQUs2QixLQUFHRCxFQUFFNUIsQ0FBRixDQUFILElBQVMsQ0FBQzZCLElBQUVELENBQUYsR0FBSWpCLENBQUwsRUFBUSxZQUFVWCxDQUFsQixDQUFyQixDQUFQO0FBQWtELEtBQTFJLENBQTJJMkIsRUFBRWtELEtBQUYsR0FBUXBFLENBQVI7QUFBVSxHQUExdUYsRUFBNnVGLFVBQVNULENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTixDQUFXVixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsVUFBRyxDQUFDUyxFQUFFVCxDQUFGLENBQUosRUFBUyxNQUFNdUUsVUFBVXZFLElBQUUsb0JBQVosQ0FBTixDQUF3QyxPQUFPQSxDQUFQO0FBQVMsS0FBaEY7QUFBaUYsR0FBejFGLEVBQTQxRixVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsVUFBRyxLQUFLLENBQUwsSUFBUUEsQ0FBWCxFQUFhLE1BQU11RSxVQUFVLDJCQUF5QnZFLENBQW5DLENBQU4sQ0FBNEMsT0FBT0EsQ0FBUDtBQUFTLEtBQXhGO0FBQXlGLEdBQW44RixFQUFzOEYsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxRQUFJUyxJQUFFc0QsS0FBS2MsSUFBWDtBQUFBLFFBQWdCckUsSUFBRXVELEtBQUtlLEtBQXZCLENBQTZCL0UsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU9nRixNQUFNaEYsSUFBRSxDQUFDQSxDQUFULElBQVksQ0FBWixHQUFjLENBQUNBLElBQUUsQ0FBRixHQUFJUyxDQUFKLEdBQU1DLENBQVAsRUFBVVYsQ0FBVixDQUFyQjtBQUFrQyxLQUF4RDtBQUF5RCxHQUExaUcsRUFBNmlHLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdDLElBQUVELEVBQUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFbEIsRUFBRSxFQUFGLENBQXBCO0FBQUEsUUFBMEJtQixJQUFFbkIsRUFBRSxFQUFGLENBQTVCO0FBQUEsUUFBa0NpQixJQUFFLFdBQXBDO0FBQUEsUUFBZ0RYLElBQUUsU0FBRkEsQ0FBRSxDQUFTaEIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFVBQUlFLENBQUo7QUFBQSxVQUFNRyxDQUFOO0FBQUEsVUFBUTJCLENBQVI7QUFBQSxVQUFVNUIsSUFBRWQsSUFBRWdCLEVBQUVpRSxDQUFoQjtBQUFBLFVBQWtCWCxJQUFFdEUsSUFBRWdCLEVBQUVrRSxDQUF4QjtBQUFBLFVBQTBCeEQsSUFBRTFCLElBQUVnQixFQUFFbUUsQ0FBaEM7QUFBQSxVQUFrQ0MsSUFBRXBGLElBQUVnQixFQUFFcUUsQ0FBeEM7QUFBQSxVQUEwQ0MsSUFBRXRGLElBQUVnQixFQUFFdUUsQ0FBaEQ7QUFBQSxVQUFrREMsSUFBRXhGLElBQUVnQixFQUFFeUUsQ0FBeEQ7QUFBQSxVQUEwREMsSUFBRXBCLElBQUUzRCxDQUFGLEdBQUlBLEVBQUVWLENBQUYsTUFBT1UsRUFBRVYsQ0FBRixJQUFLLEVBQVosQ0FBaEU7QUFBQSxVQUFnRjBGLElBQUVELEVBQUUvRCxDQUFGLENBQWxGO0FBQUEsVUFBdUZpRSxJQUFFdEIsSUFBRTdELENBQUYsR0FBSWlCLElBQUVqQixFQUFFUixDQUFGLENBQUYsR0FBTyxDQUFDUSxFQUFFUixDQUFGLEtBQU0sRUFBUCxFQUFXMEIsQ0FBWCxDQUFwRyxDQUFrSDJDLE1BQUk1RCxJQUFFVCxDQUFOLEVBQVMsS0FBSVcsQ0FBSixJQUFTRixDQUFUO0FBQVdLLFlBQUUsQ0FBQ0QsQ0FBRCxJQUFJOEUsQ0FBSixJQUFPLEtBQUssQ0FBTCxLQUFTQSxFQUFFaEYsQ0FBRixDQUFsQixFQUF1QkcsS0FBR0gsS0FBSzhFLENBQVIsS0FBWWhELElBQUUzQixJQUFFNkUsRUFBRWhGLENBQUYsQ0FBRixHQUFPRixFQUFFRSxDQUFGLENBQVQsRUFBYzhFLEVBQUU5RSxDQUFGLElBQUswRCxLQUFHLGNBQVksT0FBT3NCLEVBQUVoRixDQUFGLENBQXRCLEdBQTJCRixFQUFFRSxDQUFGLENBQTNCLEdBQWdDMEUsS0FBR3ZFLENBQUgsR0FBS2EsRUFBRWMsQ0FBRixFQUFJakMsQ0FBSixDQUFMLEdBQVkrRSxLQUFHSSxFQUFFaEYsQ0FBRixLQUFNOEIsQ0FBVCxHQUFZLFVBQVMxQyxDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLFdBQVNBLEVBQVQsRUFBV1MsQ0FBWCxFQUFhRCxDQUFiLEVBQWU7QUFBQyxnQkFBRyxnQkFBZ0JULENBQW5CLEVBQXFCO0FBQUMsc0JBQU82RixVQUFVQyxNQUFqQixHQUF5QixLQUFLLENBQUw7QUFBTyx5QkFBTyxJQUFJOUYsQ0FBSixFQUFQLENBQWEsS0FBSyxDQUFMO0FBQU8seUJBQU8sSUFBSUEsQ0FBSixDQUFNQyxFQUFOLENBQVAsQ0FBZ0IsS0FBSyxDQUFMO0FBQU8seUJBQU8sSUFBSUQsQ0FBSixDQUFNQyxFQUFOLEVBQVFTLENBQVIsQ0FBUCxDQUEzRSxDQUE2RixPQUFPLElBQUlWLENBQUosQ0FBTUMsRUFBTixFQUFRUyxDQUFSLEVBQVVELENBQVYsQ0FBUDtBQUFvQixvQkFBT1QsRUFBRStGLEtBQUYsQ0FBUSxJQUFSLEVBQWFGLFNBQWIsQ0FBUDtBQUErQixXQUE1TCxDQUE2TCxPQUFPNUYsRUFBRTBCLENBQUYsSUFBSzNCLEVBQUUyQixDQUFGLENBQUwsRUFBVTFCLENBQWpCO0FBQW1CLFNBQTdOLENBQStOeUMsQ0FBL04sQ0FBWCxHQUE2TzBDLEtBQUcsY0FBWSxPQUFPMUMsQ0FBdEIsR0FBd0JkLEVBQUVzQyxTQUFTckQsSUFBWCxFQUFnQjZCLENBQWhCLENBQXhCLEdBQTJDQSxDQUF2VixFQUF5VjBDLE1BQUksQ0FBQ00sRUFBRU0sT0FBRixLQUFZTixFQUFFTSxPQUFGLEdBQVUsRUFBdEIsQ0FBRCxFQUE0QnBGLENBQTVCLElBQStCOEIsQ0FBL0IsRUFBaUMxQyxJQUFFZ0IsRUFBRWlGLENBQUosSUFBT04sQ0FBUCxJQUFVLENBQUNBLEVBQUUvRSxDQUFGLENBQVgsSUFBaUJpQixFQUFFOEQsQ0FBRixFQUFJL0UsQ0FBSixFQUFNOEIsQ0FBTixDQUF0RCxDQUFyVyxDQUF2QjtBQUFYO0FBQXdjLEtBQXJvQixDQUFzb0IxQixFQUFFaUUsQ0FBRixHQUFJLENBQUosRUFBTWpFLEVBQUVrRSxDQUFGLEdBQUksQ0FBVixFQUFZbEUsRUFBRW1FLENBQUYsR0FBSSxDQUFoQixFQUFrQm5FLEVBQUVxRSxDQUFGLEdBQUksQ0FBdEIsRUFBd0JyRSxFQUFFdUUsQ0FBRixHQUFJLEVBQTVCLEVBQStCdkUsRUFBRXlFLENBQUYsR0FBSSxFQUFuQyxFQUFzQ3pFLEVBQUVrRixDQUFGLEdBQUksRUFBMUMsRUFBNkNsRixFQUFFaUYsQ0FBRixHQUFJLEdBQWpELEVBQXFEakcsRUFBRUUsT0FBRixHQUFVYyxDQUEvRDtBQUFpRSxHQUFwd0gsRUFBdXdILFVBQVNoQixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxhQUFNLEVBQUNtQixZQUFXLEVBQUUsSUFBRXBCLENBQUosQ0FBWixFQUFtQm1CLGNBQWEsRUFBRSxJQUFFbkIsQ0FBSixDQUFoQyxFQUF1Q21HLFVBQVMsRUFBRSxJQUFFbkcsQ0FBSixDQUFoRCxFQUF1RG1ELE9BQU1sRCxDQUE3RCxFQUFOO0FBQXNFLEtBQTlGO0FBQStGLEdBQXAzSCxFQUF1M0gsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWUMsSUFBRUQsRUFBRSxFQUFGLENBQWQsQ0FBb0JWLEVBQUVFLE9BQUYsR0FBVWUsT0FBT21GLElBQVAsSUFBYSxVQUFTcEcsQ0FBVCxFQUFXO0FBQUMsYUFBT1MsRUFBRVQsQ0FBRixFQUFJVyxDQUFKLENBQVA7QUFBYyxLQUFqRDtBQUFrRCxHQUE3OEgsRUFBZzlILFVBQVNYLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsRUFBTSxNQUFOLENBQU47QUFBQSxRQUFvQkMsSUFBRUQsRUFBRSxFQUFGLENBQXRCLENBQTRCVixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsYUFBT1MsRUFBRVQsQ0FBRixNQUFPUyxFQUFFVCxDQUFGLElBQUtXLEVBQUVYLENBQUYsQ0FBWixDQUFQO0FBQXlCLEtBQS9DO0FBQWdELEdBQTVpSSxFQUEraUksVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxRQUFJUyxJQUFFLENBQU47QUFBQSxRQUFRRCxJQUFFdUQsS0FBS3FDLE1BQUwsRUFBVixDQUF3QnJHLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVc7QUFBQyxhQUFNLFVBQVU0QyxNQUFWLENBQWlCLEtBQUssQ0FBTCxLQUFTNUMsQ0FBVCxHQUFXLEVBQVgsR0FBY0EsQ0FBL0IsRUFBaUMsSUFBakMsRUFBc0MsQ0FBQyxFQUFFVSxDQUFGLEdBQUlELENBQUwsRUFBUTZGLFFBQVIsQ0FBaUIsRUFBakIsQ0FBdEMsQ0FBTjtBQUFrRSxLQUF4RjtBQUF5RixHQUE5cUksRUFBaXJJLFVBQVN0RyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsZ0dBQWdHcUcsS0FBaEcsQ0FBc0csR0FBdEcsQ0FBVjtBQUFxSCxHQUFwekksRUFBdXpJLFVBQVN2RyxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXQyxJQUFFLG9CQUFiO0FBQUEsUUFBa0NpQixJQUFFbkIsRUFBRUUsQ0FBRixNQUFPRixFQUFFRSxDQUFGLElBQUssRUFBWixDQUFwQyxDQUFvRFgsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU80QixFQUFFNUIsQ0FBRixNQUFPNEIsRUFBRTVCLENBQUYsSUFBSyxFQUFaLENBQVA7QUFBdUIsS0FBN0M7QUFBOEMsR0FBejZJLEVBQTQ2SSxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU4sQ0FBWVYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU9pQixPQUFPUixFQUFFVCxDQUFGLENBQVAsQ0FBUDtBQUFvQixLQUExQztBQUEyQyxHQUFuL0ksRUFBcy9JLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsUUFBSVMsSUFBRSxHQUFHNEYsUUFBVCxDQUFrQnRHLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVc7QUFBQyxhQUFPVSxFQUFFRyxJQUFGLENBQU9iLENBQVAsRUFBVXdHLEtBQVYsQ0FBZ0IsQ0FBaEIsRUFBa0IsQ0FBQyxDQUFuQixDQUFQO0FBQTZCLEtBQW5EO0FBQW9ELEdBQTFrSixFQUE2a0osVUFBU3hHLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdDLElBQUVELEVBQUUsQ0FBRixFQUFLK0YsUUFBbEI7QUFBQSxRQUEyQjdFLElBQUVuQixFQUFFRSxDQUFGLEtBQU1GLEVBQUVFLEVBQUUrRixhQUFKLENBQW5DLENBQXNEMUcsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU80QixJQUFFakIsRUFBRStGLGFBQUYsQ0FBZ0IxRyxDQUFoQixDQUFGLEdBQXFCLEVBQTVCO0FBQStCLEtBQXJEO0FBQXNELEdBQXpzSixFQUE0c0osVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsRUFBRixDQUFOLENBQVlWLEVBQUVFLE9BQUYsR0FBVWUsT0FBTyxHQUFQLEVBQVkwRixvQkFBWixDQUFpQyxDQUFqQyxJQUFvQzFGLE1BQXBDLEdBQTJDLFVBQVNqQixDQUFULEVBQVc7QUFBQyxhQUFNLFlBQVVTLEVBQUVULENBQUYsQ0FBVixHQUFlQSxFQUFFdUcsS0FBRixDQUFRLEVBQVIsQ0FBZixHQUEyQnRGLE9BQU9qQixDQUFQLENBQWpDO0FBQTJDLEtBQTVHO0FBQTZHLEdBQXIxSixFQUF3MUosVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOLENBQVdWLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFVBQUcsQ0FBQ1EsRUFBRVQsQ0FBRixDQUFKLEVBQVMsT0FBT0EsQ0FBUCxDQUFTLElBQUlVLENBQUosRUFBTUMsQ0FBTixDQUFRLElBQUdWLEtBQUcsY0FBWSxRQUFPUyxJQUFFVixFQUFFc0csUUFBWCxDQUFmLElBQXFDLENBQUM3RixFQUFFRSxJQUFFRCxFQUFFRyxJQUFGLENBQU9iLENBQVAsQ0FBSixDQUF6QyxFQUF3RCxPQUFPVyxDQUFQLENBQVMsSUFBRyxjQUFZLFFBQU9ELElBQUVWLEVBQUU0RyxPQUFYLENBQVosSUFBaUMsQ0FBQ25HLEVBQUVFLElBQUVELEVBQUVHLElBQUYsQ0FBT2IsQ0FBUCxDQUFKLENBQXJDLEVBQW9ELE9BQU9XLENBQVAsQ0FBUyxJQUFHLENBQUNWLENBQUQsSUFBSSxjQUFZLFFBQU9TLElBQUVWLEVBQUVzRyxRQUFYLENBQWhCLElBQXNDLENBQUM3RixFQUFFRSxJQUFFRCxFQUFFRyxJQUFGLENBQU9iLENBQVAsQ0FBSixDQUExQyxFQUF5RCxPQUFPVyxDQUFQLENBQVMsTUFBTTRELFVBQVUseUNBQVYsQ0FBTjtBQUEyRCxLQUE3UztBQUE4UyxHQUFqcUssRUFBb3FLLFVBQVN2RSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU4sQ0FBWVYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxVQUFHRCxFQUFFVCxDQUFGLEdBQUssS0FBSyxDQUFMLEtBQVNDLENBQWpCLEVBQW1CLE9BQU9ELENBQVAsQ0FBUyxRQUFPVSxDQUFQLEdBQVUsS0FBSyxDQUFMO0FBQU8saUJBQU8sVUFBU0EsQ0FBVCxFQUFXO0FBQUMsbUJBQU9WLEVBQUVhLElBQUYsQ0FBT1osQ0FBUCxFQUFTUyxDQUFULENBQVA7QUFBbUIsV0FBdEMsQ0FBdUMsS0FBSyxDQUFMO0FBQU8saUJBQU8sVUFBU0EsQ0FBVCxFQUFXRCxDQUFYLEVBQWE7QUFBQyxtQkFBT1QsRUFBRWEsSUFBRixDQUFPWixDQUFQLEVBQVNTLENBQVQsRUFBV0QsQ0FBWCxDQUFQO0FBQXFCLFdBQTFDLENBQTJDLEtBQUssQ0FBTDtBQUFPLGlCQUFPLFVBQVNDLENBQVQsRUFBV0QsQ0FBWCxFQUFhRSxDQUFiLEVBQWU7QUFBQyxtQkFBT1gsRUFBRWEsSUFBRixDQUFPWixDQUFQLEVBQVNTLENBQVQsRUFBV0QsQ0FBWCxFQUFhRSxDQUFiLENBQVA7QUFBdUIsV0FBOUMsQ0FBakgsQ0FBZ0ssT0FBTyxZQUFVO0FBQUMsZUFBT1gsRUFBRStGLEtBQUYsQ0FBUTlGLENBQVIsRUFBVTRGLFNBQVYsQ0FBUDtBQUE0QixPQUE5QztBQUErQyxLQUFyUTtBQUFzUSxHQUF0OEssRUFBeThLLFVBQVM3RixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFcUQsS0FBSzZDLEdBQW5CLENBQXVCN0csRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU9BLElBQUUsQ0FBRixHQUFJVyxFQUFFRixFQUFFVCxDQUFGLENBQUYsRUFBTyxnQkFBUCxDQUFKLEdBQTZCLENBQXBDO0FBQXNDLEtBQTVEO0FBQTZELEdBQTdpTCxFQUFnakwsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDVixNQUFFRSxPQUFGLEdBQVUsQ0FBQ1EsRUFBRSxDQUFGLENBQUQsSUFBTyxDQUFDQSxFQUFFLENBQUYsRUFBTSxZQUFVO0FBQUMsYUFBTyxLQUFHTyxPQUFPQyxjQUFQLENBQXNCUixFQUFFLEVBQUYsRUFBTSxLQUFOLENBQXRCLEVBQW1DLEdBQW5DLEVBQXVDLEVBQUNXLEtBQUksZUFBVTtBQUFDLGlCQUFPLENBQVA7QUFBUyxTQUF6QixFQUF2QyxFQUFtRU8sQ0FBN0U7QUFBK0UsS0FBaEcsQ0FBbEI7QUFBcUgsR0FBcnJMLEVBQXdyTCxVQUFTNUIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV0MsSUFBRUQsRUFBRSxDQUFGLENBQWI7QUFBQSxRQUFrQmtCLElBQUVsQixFQUFFLEVBQUYsRUFBTSxDQUFDLENBQVAsQ0FBcEI7QUFBQSxRQUE4Qm1CLElBQUVuQixFQUFFLEVBQUYsRUFBTSxVQUFOLENBQWhDLENBQWtEVixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFJUyxDQUFKO0FBQUEsVUFBTWlCLElBQUVoQixFQUFFWCxDQUFGLENBQVI7QUFBQSxVQUFhZ0IsSUFBRSxDQUFmO0FBQUEsVUFBaUJKLElBQUUsRUFBbkIsQ0FBc0IsS0FBSUYsQ0FBSixJQUFTaUIsQ0FBVDtBQUFXakIsYUFBR21CLENBQUgsSUFBTXBCLEVBQUVrQixDQUFGLEVBQUlqQixDQUFKLENBQU4sSUFBY0UsRUFBRWtHLElBQUYsQ0FBT3BHLENBQVAsQ0FBZDtBQUFYLE9BQW1DLE9BQUtULEVBQUU2RixNQUFGLEdBQVM5RSxDQUFkO0FBQWlCUCxVQUFFa0IsQ0FBRixFQUFJakIsSUFBRVQsRUFBRWUsR0FBRixDQUFOLE1BQWdCLENBQUNZLEVBQUVoQixDQUFGLEVBQUlGLENBQUosQ0FBRCxJQUFTRSxFQUFFa0csSUFBRixDQUFPcEcsQ0FBUCxDQUF6QjtBQUFqQixPQUFxRCxPQUFPRSxDQUFQO0FBQVMsS0FBL0k7QUFBZ0osR0FBMTRMLEVBQTY0TCxVQUFTWixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBVjtBQUFhLEdBQXg2TCxFQUEyNkwsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLFVBQUcsY0FBWSxPQUFPQSxDQUF0QixFQUF3QixNQUFNdUUsVUFBVXZFLElBQUUscUJBQVosQ0FBTixDQUF5QyxPQUFPQSxDQUFQO0FBQVMsS0FBaEc7QUFBaUcsR0FBMWhNLEVBQTZoTSxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXQyxJQUFFRCxFQUFFLEVBQUYsQ0FBYjtBQUFBLFFBQW1Ca0IsSUFBRWxCLEVBQUUsRUFBRixDQUFyQixDQUEyQlYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU8sVUFBU0MsQ0FBVCxFQUFXUyxDQUFYLEVBQWFtQixDQUFiLEVBQWU7QUFBQyxZQUFJRixDQUFKO0FBQUEsWUFBTVgsSUFBRVAsRUFBRVIsQ0FBRixDQUFSO0FBQUEsWUFBYVcsSUFBRUQsRUFBRUssRUFBRThFLE1BQUosQ0FBZjtBQUFBLFlBQTJCL0UsSUFBRWEsRUFBRUMsQ0FBRixFQUFJakIsQ0FBSixDQUE3QixDQUFvQyxJQUFHWixLQUFHVSxLQUFHQSxDQUFULEVBQVc7QUFBQyxpQkFBS0UsSUFBRUcsQ0FBUDtBQUFVLGdCQUFHWSxJQUFFWCxFQUFFRCxHQUFGLENBQUYsRUFBU1ksS0FBR0EsQ0FBZixFQUFpQixPQUFNLENBQUMsQ0FBUDtBQUEzQjtBQUFvQyxTQUFoRCxNQUFxRCxPQUFLZixJQUFFRyxDQUFQLEVBQVNBLEdBQVQ7QUFBYSxjQUFHLENBQUNmLEtBQUdlLEtBQUtDLENBQVQsS0FBYUEsRUFBRUQsQ0FBRixNQUFPTCxDQUF2QixFQUF5QixPQUFPVixLQUFHZSxDQUFILElBQU0sQ0FBYjtBQUF0QyxTQUFxRCxPQUFNLENBQUNmLENBQUQsSUFBSSxDQUFDLENBQVg7QUFBYSxPQUFsTDtBQUFtTCxLQUF6TTtBQUEwTSxHQUFseE0sRUFBcXhNLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVxRCxLQUFLK0MsR0FBbkI7QUFBQSxRQUF1Qm5GLElBQUVvQyxLQUFLNkMsR0FBOUIsQ0FBa0M3RyxFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxhQUFPRCxJQUFFUyxFQUFFVCxDQUFGLENBQUYsRUFBT0EsSUFBRSxDQUFGLEdBQUlXLEVBQUVYLElBQUVDLENBQUosRUFBTSxDQUFOLENBQUosR0FBYTJCLEVBQUU1QixDQUFGLEVBQUlDLENBQUosQ0FBM0I7QUFBa0MsS0FBMUQ7QUFBMkQsR0FBbDRNLEVBQXE0TSxVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJMUMsSUFBRSxTQUFGQSxDQUFFLEdBQVU7QUFBQyxhQUFPdUQsS0FBS3FDLE1BQUwsR0FBY0MsUUFBZCxDQUF1QixFQUF2QixFQUEyQkUsS0FBM0IsQ0FBaUMsQ0FBakMsQ0FBUDtBQUEyQyxLQUE1RCxDQUE2RHZHLEVBQUVzQixPQUFGLEdBQVVkLENBQVYsRUFBWVQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBeEI7QUFBZ0MsR0FBaGpOLEVBQW1qTixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLNEQsQ0FBWDtBQUFBLFFBQWEzRCxJQUFFRCxFQUFFLENBQUYsQ0FBZjtBQUFBLFFBQW9Ca0IsSUFBRWxCLEVBQUUsRUFBRixFQUFNLGFBQU4sQ0FBdEIsQ0FBMkNWLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNWLFdBQUcsQ0FBQ1csRUFBRVgsSUFBRVUsSUFBRVYsQ0FBRixHQUFJQSxFQUFFd0IsU0FBVixFQUFvQkksQ0FBcEIsQ0FBSixJQUE0Qm5CLEVBQUVULENBQUYsRUFBSTRCLENBQUosRUFBTSxFQUFDVCxjQUFhLENBQUMsQ0FBZixFQUFpQmdDLE9BQU1sRCxDQUF2QixFQUFOLENBQTVCO0FBQTZELEtBQXZGO0FBQXdGLEdBQXRzTixFQUF5c04sVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDVixNQUFFRSxPQUFGLEdBQVUsRUFBQ3FCLFNBQVFiLEVBQUUsRUFBRixDQUFULEVBQWVZLFlBQVcsQ0FBQyxDQUEzQixFQUFWO0FBQXdDLEdBQWp3TixFQUFvd04sVUFBU3RCLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxDQUFDLENBQVg7QUFBYSxHQUEveE4sRUFBa3lOLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNBLE1BQUVxRSxDQUFGLEdBQUksR0FBR3FDLG9CQUFQO0FBQTRCLEdBQTUwTixFQUErME4sVUFBUzNHLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsR0FBWTtBQUFDLFVBQUlULElBQUV5RyxTQUFTQyxhQUFULENBQXVCLE1BQXZCLENBQU47QUFBQSxVQUFxQ3pHLElBQUUsRUFBQytHLFlBQVcsZUFBWixFQUE0QkMsYUFBWSxnQkFBeEMsRUFBeURDLGVBQWMsZUFBdkUsRUFBdUZDLGtCQUFpQixxQkFBeEcsRUFBdkMsQ0FBc0ssS0FBSSxJQUFJekcsQ0FBUixJQUFhVCxDQUFiO0FBQWUsWUFBRyxLQUFLLENBQUwsS0FBU0QsRUFBRW9ILEtBQUYsQ0FBUTFHLENBQVIsQ0FBWixFQUF1QixPQUFPVCxFQUFFUyxDQUFGLENBQVA7QUFBdEM7QUFBa0QsWUFBT1EsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVkLEdBQTNELEVBQStEVCxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEzRTtBQUFtRixHQUFwcU8sRUFBdXFPLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixDQUFkO0FBQUEsUUFBb0JrQixJQUFFbEIsRUFBRSxFQUFGLENBQXRCO0FBQUEsUUFBNEJtQixJQUFFbkIsRUFBRSxFQUFGLENBQTlCO0FBQUEsUUFBb0NpQixJQUFFakIsRUFBRSxDQUFGLENBQXRDO0FBQUEsUUFBMkNNLElBQUVOLEVBQUUsRUFBRixDQUE3QztBQUFBLFFBQW1ERSxJQUFFRixFQUFFLEVBQUYsQ0FBckQ7QUFBQSxRQUEyREssSUFBRUwsRUFBRSxFQUFGLENBQTdEO0FBQUEsUUFBbUVnQyxJQUFFaEMsRUFBRSxFQUFGLENBQXJFO0FBQUEsUUFBMkVJLElBQUVKLEVBQUUsRUFBRixFQUFNLFVBQU4sQ0FBN0U7QUFBQSxRQUErRjRELElBQUUsRUFBRSxHQUFHOEIsSUFBSCxJQUFTLFVBQVEsR0FBR0EsSUFBSCxFQUFuQixDQUFqRztBQUFBLFFBQStIMUUsSUFBRSxZQUFqSTtBQUFBLFFBQThJMEQsSUFBRSxNQUFoSjtBQUFBLFFBQXVKRSxJQUFFLFFBQXpKO0FBQUEsUUFBa0tFLElBQUUsU0FBRkEsQ0FBRSxHQUFVO0FBQUMsYUFBTyxJQUFQO0FBQVksS0FBM0wsQ0FBNEx4RixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZWdGLENBQWYsRUFBaUJDLENBQWpCLEVBQW1CQyxDQUFuQixFQUFxQnlCLENBQXJCLEVBQXVCO0FBQUN6RyxRQUFFRixDQUFGLEVBQUlULENBQUosRUFBTXlGLENBQU4sRUFBUyxJQUFJNEIsQ0FBSjtBQUFBLFVBQU1DLENBQU47QUFBQSxVQUFRQyxDQUFSO0FBQUEsVUFBVUMsSUFBRSxTQUFGQSxDQUFFLENBQVN6SCxDQUFULEVBQVc7QUFBQyxZQUFHLENBQUNzRSxDQUFELElBQUl0RSxLQUFLbUYsQ0FBWixFQUFjLE9BQU9BLEVBQUVuRixDQUFGLENBQVAsQ0FBWSxRQUFPQSxDQUFQLEdBQVUsS0FBS29GLENBQUw7QUFBTyxtQkFBTyxZQUFVO0FBQUMscUJBQU8sSUFBSTFFLENBQUosQ0FBTSxJQUFOLEVBQVdWLENBQVgsQ0FBUDtBQUFxQixhQUF2QyxDQUF3QyxLQUFLc0YsQ0FBTDtBQUFPLG1CQUFPLFlBQVU7QUFBQyxxQkFBTyxJQUFJNUUsQ0FBSixDQUFNLElBQU4sRUFBV1YsQ0FBWCxDQUFQO0FBQXFCLGFBQXZDLENBQWhFLENBQXdHLE9BQU8sWUFBVTtBQUFDLGlCQUFPLElBQUlVLENBQUosQ0FBTSxJQUFOLEVBQVdWLENBQVgsQ0FBUDtBQUFxQixTQUF2QztBQUF3QyxPQUFsTTtBQUFBLFVBQW1NMEgsSUFBRXpILElBQUUsV0FBdk07QUFBQSxVQUFtTjBILElBQUVoQyxLQUFHTCxDQUF4TjtBQUFBLFVBQTBOc0MsSUFBRSxDQUFDLENBQTdOO0FBQUEsVUFBK056QyxJQUFFbkYsRUFBRXdCLFNBQW5PO0FBQUEsVUFBNk95RSxJQUFFZCxFQUFFckUsQ0FBRixLQUFNcUUsRUFBRXpELENBQUYsQ0FBTixJQUFZaUUsS0FBR1IsRUFBRVEsQ0FBRixDQUE5UDtBQUFBLFVBQW1Ra0MsSUFBRTVCLEtBQUd3QixFQUFFOUIsQ0FBRixDQUF4UTtBQUFBLFVBQTZRbUMsSUFBRW5DLElBQUVnQyxJQUFFRixFQUFFLFNBQUYsQ0FBRixHQUFlSSxDQUFqQixHQUFtQixLQUFLLENBQXZTO0FBQUEsVUFBeVN4QyxJQUFFLFdBQVNwRixDQUFULEdBQVdrRixFQUFFNEMsT0FBRixJQUFXOUIsQ0FBdEIsR0FBd0JBLENBQW5VLENBQXFVLElBQUdaLE1BQUltQyxJQUFFOUUsRUFBRTJDLEVBQUV4RSxJQUFGLENBQU8sSUFBSWIsQ0FBSixFQUFQLENBQUYsQ0FBRixFQUFtQndILE1BQUl2RyxPQUFPTyxTQUFYLEtBQXVCVCxFQUFFeUcsQ0FBRixFQUFJRSxDQUFKLEVBQU0sQ0FBQyxDQUFQLEdBQVVqSCxLQUFHa0IsRUFBRTZGLENBQUYsRUFBSTFHLENBQUosQ0FBSCxJQUFXZSxFQUFFMkYsQ0FBRixFQUFJMUcsQ0FBSixFQUFNMEUsQ0FBTixDQUE1QyxDQUF2QixHQUE4RW1DLEtBQUcxQixDQUFILElBQU1BLEVBQUUrQixJQUFGLEtBQVMxQyxDQUFmLEtBQW1Cc0MsSUFBRSxDQUFDLENBQUgsRUFBS0MsSUFBRSxhQUFVO0FBQUMsZUFBTzVCLEVBQUVwRixJQUFGLENBQU8sSUFBUCxDQUFQO0FBQW9CLE9BQXpELENBQTlFLEVBQXlJSixLQUFHLENBQUM0RyxDQUFKLElBQU8sQ0FBQy9DLENBQUQsSUFBSSxDQUFDc0QsQ0FBTCxJQUFRekMsRUFBRXJFLENBQUYsQ0FBZixJQUFxQmUsRUFBRXNELENBQUYsRUFBSXJFLENBQUosRUFBTStHLENBQU4sQ0FBOUosRUFBdUs3RyxFQUFFZixDQUFGLElBQUs0SCxDQUE1SyxFQUE4SzdHLEVBQUUwRyxDQUFGLElBQUtsQyxDQUFuTCxFQUFxTEcsQ0FBeEwsRUFBMEwsSUFBRzJCLElBQUUsRUFBQ1csUUFBT04sSUFBRUUsQ0FBRixHQUFJSixFQUFFbkMsQ0FBRixDQUFaLEVBQWlCYyxNQUFLUixJQUFFaUMsQ0FBRixHQUFJSixFQUFFckMsQ0FBRixDQUExQixFQUErQjJDLFNBQVFELENBQXZDLEVBQUYsRUFBNENULENBQS9DLEVBQWlELEtBQUlFLENBQUosSUFBU0QsQ0FBVDtBQUFXQyxhQUFLcEMsQ0FBTCxJQUFRdkQsRUFBRXVELENBQUYsRUFBSW9DLENBQUosRUFBTUQsRUFBRUMsQ0FBRixDQUFOLENBQVI7QUFBWCxPQUFqRCxNQUFxRjVHLEVBQUVBLEVBQUUwRSxDQUFGLEdBQUkxRSxFQUFFc0UsQ0FBRixJQUFLWCxLQUFHc0QsQ0FBUixDQUFOLEVBQWlCM0gsQ0FBakIsRUFBbUJxSCxDQUFuQixFQUFzQixPQUFPQSxDQUFQO0FBQVMsS0FBOXBCO0FBQStwQixHQUEvaFEsRUFBa2lRLFVBQVN0SCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNBLE1BQUUsRUFBRixHQUFNVixFQUFFRSxPQUFGLEdBQVVRLEVBQUUsQ0FBRixFQUFLTyxNQUFMLENBQVltRixJQUE1QjtBQUFpQyxHQUFubFEsRUFBc2xRLFVBQVNwRyxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsQ0FBZDtBQUFBLFFBQW9Ca0IsSUFBRWxCLEVBQUUsRUFBRixDQUF0QjtBQUFBLFFBQTRCbUIsSUFBRW5CLEVBQUUsRUFBRixFQUFNLFVBQU4sQ0FBOUI7QUFBQSxRQUFnRGlCLElBQUUsU0FBRkEsQ0FBRSxHQUFVLENBQUUsQ0FBOUQ7QUFBQSxRQUErRFgsSUFBRSxXQUFqRTtBQUFBLFFBQTZFSixLQUFFLGFBQVU7QUFBQyxVQUFJWixDQUFKO0FBQUEsVUFBTUMsSUFBRVMsRUFBRSxFQUFGLEVBQU0sUUFBTixDQUFSO0FBQUEsVUFBd0JELElBQUVtQixFQUFFa0UsTUFBNUI7QUFBQSxVQUFtQ25GLElBQUUsR0FBckM7QUFBQSxVQUF5Q2tCLElBQUUsR0FBM0MsQ0FBK0MsS0FBSTVCLEVBQUVtSCxLQUFGLENBQVFjLE9BQVIsR0FBZ0IsTUFBaEIsRUFBdUJ4SCxFQUFFLEVBQUYsRUFBTXlILFdBQU4sQ0FBa0JsSSxDQUFsQixDQUF2QixFQUE0Q0EsRUFBRW1JLEdBQUYsR0FBTSxhQUFsRCxFQUFnRXBJLElBQUVDLEVBQUVvSSxhQUFGLENBQWdCNUIsUUFBbEYsRUFBMkZ6RyxFQUFFc0ksSUFBRixFQUEzRixFQUFvR3RJLEVBQUV1SSxLQUFGLENBQVE1SCxJQUFFLFFBQUYsR0FBV2tCLENBQVgsR0FBYSxtQkFBYixHQUFpQ2xCLENBQWpDLEdBQW1DLFNBQW5DLEdBQTZDa0IsQ0FBckQsQ0FBcEcsRUFBNEo3QixFQUFFd0ksS0FBRixFQUE1SixFQUFzSzVILEtBQUVaLEVBQUVpRixDQUE5SyxFQUFnTHhFLEdBQWhMO0FBQXFMLGVBQU9HLEdBQUVJLENBQUYsRUFBS1ksRUFBRW5CLENBQUYsQ0FBTCxDQUFQO0FBQXJMLE9BQXVNLE9BQU9HLElBQVA7QUFBVyxLQUEzVixDQUE0VlosRUFBRUUsT0FBRixHQUFVZSxPQUFPd0gsTUFBUCxJQUFlLFVBQVN6SSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFVBQUlTLENBQUosQ0FBTSxPQUFPLFNBQU9WLENBQVAsSUFBVTJCLEVBQUVYLENBQUYsSUFBS1AsRUFBRVQsQ0FBRixDQUFMLEVBQVVVLElBQUUsSUFBSWlCLENBQUosRUFBWixFQUFrQkEsRUFBRVgsQ0FBRixJQUFLLElBQXZCLEVBQTRCTixFQUFFbUIsQ0FBRixJQUFLN0IsQ0FBM0MsSUFBOENVLElBQUVFLElBQWhELEVBQW9ELEtBQUssQ0FBTCxLQUFTWCxDQUFULEdBQVdTLENBQVgsR0FBYUMsRUFBRUQsQ0FBRixFQUFJVCxDQUFKLENBQXhFO0FBQStFLEtBQTVIO0FBQTZILEdBQS9qUixFQUFra1IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0EsTUFBRXFFLENBQUYsR0FBSXJELE9BQU95SCxxQkFBWDtBQUFpQyxHQUFqblIsRUFBb25SLFVBQVMxSSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLENBQUYsQ0FBZDtBQUFBLFFBQW1Ca0IsSUFBRWxCLEVBQUUsQ0FBRixDQUFyQixDQUEwQlYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsVUFBSVMsSUFBRSxDQUFDQyxFQUFFTSxNQUFGLElBQVUsRUFBWCxFQUFlakIsQ0FBZixLQUFtQmlCLE9BQU9qQixDQUFQLENBQXpCO0FBQUEsVUFBbUM2QixJQUFFLEVBQXJDLENBQXdDQSxFQUFFN0IsQ0FBRixJQUFLQyxFQUFFUyxDQUFGLENBQUwsRUFBVUQsRUFBRUEsRUFBRTBFLENBQUYsR0FBSTFFLEVBQUV3RSxDQUFGLEdBQUlyRCxFQUFHLFlBQVU7QUFBQ2xCLFVBQUUsQ0FBRjtBQUFLLE9BQW5CLENBQVYsRUFBZ0MsUUFBaEMsRUFBeUNtQixDQUF6QyxDQUFWO0FBQXNELEtBQXRIO0FBQXVILEdBQXJ4UixFQUF3eFIsVUFBUzdCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ1YsTUFBRUUsT0FBRixHQUFVUSxFQUFFLEVBQUYsQ0FBVjtBQUFnQixHQUF4elIsRUFBMnpSLFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixDQUFkLENBQW9CQSxFQUFFLEVBQUYsRUFBTSxNQUFOLEVBQWMsWUFBVTtBQUFDLGFBQU8sVUFBU1YsQ0FBVCxFQUFXO0FBQUMsZUFBT1csRUFBRUYsRUFBRVQsQ0FBRixDQUFGLENBQVA7QUFBZSxPQUFsQztBQUFtQyxLQUE1RDtBQUErRCxHQUE5NVIsRUFBaTZSLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLFFBQUlELElBQUVDLEVBQUUsRUFBRixFQUFNLENBQUMsQ0FBUCxDQUFOLENBQWdCQSxFQUFFLEVBQUYsRUFBTTJDLE1BQU4sRUFBYSxRQUFiLEVBQXVCLFVBQVNyRCxDQUFULEVBQVc7QUFBQyxXQUFLMkksRUFBTCxHQUFRdEYsT0FBT3JELENBQVAsQ0FBUixFQUFrQixLQUFLNEksRUFBTCxHQUFRLENBQTFCO0FBQTRCLEtBQS9ELEVBQWtFLFlBQVU7QUFBQyxVQUFJNUksQ0FBSjtBQUFBLFVBQU1DLElBQUUsS0FBSzBJLEVBQWI7QUFBQSxVQUFnQmpJLElBQUUsS0FBS2tJLEVBQXZCLENBQTBCLE9BQU9sSSxLQUFHVCxFQUFFNkYsTUFBTCxHQUFZLEVBQUMzQyxPQUFNLEtBQUssQ0FBWixFQUFjMEYsTUFBSyxDQUFDLENBQXBCLEVBQVosSUFBb0M3SSxJQUFFUyxFQUFFUixDQUFGLEVBQUlTLENBQUosQ0FBRixFQUFTLEtBQUtrSSxFQUFMLElBQVM1SSxFQUFFOEYsTUFBcEIsRUFBMkIsRUFBQzNDLE9BQU1uRCxDQUFQLEVBQVM2SSxNQUFLLENBQUMsQ0FBZixFQUEvRCxDQUFQO0FBQXlGLEtBQWhNO0FBQW1NLEdBQWpwUyxFQUFvcFMsVUFBUzdJLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUkxQyxJQUFFLFNBQUZBLENBQUUsQ0FBU1QsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFJUyxJQUFFLENBQUMsQ0FBUCxDQUFTLE9BQU8sWUFBVTtBQUFDQSxjQUFJVixFQUFFYSxJQUFGLElBQVNILElBQUUsQ0FBQyxDQUFaLEVBQWNxRCxPQUFPK0UsVUFBUCxDQUFtQixZQUFVO0FBQUNwSSxjQUFFLENBQUMsQ0FBSDtBQUFLLFNBQW5DLEVBQXFDVCxDQUFyQyxDQUFsQjtBQUEyRCxPQUE3RTtBQUE4RSxLQUEzRyxDQUE0R0EsRUFBRXNCLE9BQUYsR0FBVWQsQ0FBVixFQUFZVCxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUF4QjtBQUFnQyxHQUE5MlMsRUFBaTNTLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNWLE1BQUVFLE9BQUYsR0FBVSxFQUFDcUIsU0FBUWIsRUFBRSxFQUFGLENBQVQsRUFBZVksWUFBVyxDQUFDLENBQTNCLEVBQVY7QUFBd0MsR0FBejZTLEVBQTQ2UyxVQUFTdEIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDVixNQUFFRSxPQUFGLEdBQVVRLEVBQUUsQ0FBRixFQUFLK0YsUUFBTCxJQUFlQSxTQUFTc0MsZUFBbEM7QUFBa0QsR0FBOStTLEVBQWkvUyxVQUFTL0ksQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsQ0FBZDtBQUFBLFFBQW9Ca0IsSUFBRWxCLEVBQUUsRUFBRixDQUF0QjtBQUFBLFFBQTRCbUIsSUFBRSxFQUE5QixDQUFpQ25CLEVBQUUsRUFBRixFQUFNbUIsQ0FBTixFQUFRbkIsRUFBRSxFQUFGLEVBQU0sVUFBTixDQUFSLEVBQTJCLFlBQVU7QUFBQyxhQUFPLElBQVA7QUFBWSxLQUFsRCxHQUFxRFYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ1YsUUFBRXdCLFNBQUYsR0FBWWYsRUFBRW9CLENBQUYsRUFBSSxFQUFDbUgsTUFBS3JJLEVBQUUsQ0FBRixFQUFJRCxDQUFKLENBQU4sRUFBSixDQUFaLEVBQStCa0IsRUFBRTVCLENBQUYsRUFBSUMsSUFBRSxXQUFOLENBQS9CO0FBQWtELEtBQWpJO0FBQWtJLEdBQWpyVCxFQUFvclQsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV0MsSUFBRUQsRUFBRSxFQUFGLENBQWI7QUFBQSxRQUFtQmtCLElBQUVsQixFQUFFLEVBQUYsQ0FBckIsQ0FBMkJWLEVBQUVFLE9BQUYsR0FBVVEsRUFBRSxDQUFGLElBQUtPLE9BQU9nSSxnQkFBWixHQUE2QixVQUFTakosQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ1UsUUFBRVgsQ0FBRixFQUFLLEtBQUksSUFBSVUsQ0FBSixFQUFNbUIsSUFBRUQsRUFBRTNCLENBQUYsQ0FBUixFQUFhMEIsSUFBRUUsRUFBRWlFLE1BQWpCLEVBQXdCOUUsSUFBRSxDQUE5QixFQUFnQ1csSUFBRVgsQ0FBbEM7QUFBcUNQLFVBQUU2RCxDQUFGLENBQUl0RSxDQUFKLEVBQU1VLElBQUVtQixFQUFFYixHQUFGLENBQVIsRUFBZWYsRUFBRVMsQ0FBRixDQUFmO0FBQXJDLE9BQTBELE9BQU9WLENBQVA7QUFBUyxLQUE3SDtBQUE4SCxHQUE3MVQsRUFBZzJULFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdDLElBQUVELEVBQUUsRUFBRixDQUFiO0FBQUEsUUFBbUJrQixJQUFFbEIsRUFBRSxFQUFGLEVBQU0sVUFBTixDQUFyQjtBQUFBLFFBQXVDbUIsSUFBRVosT0FBT08sU0FBaEQsQ0FBMER4QixFQUFFRSxPQUFGLEdBQVVlLE9BQU9pSSxjQUFQLElBQXVCLFVBQVNsSixDQUFULEVBQVc7QUFBQyxhQUFPQSxJQUFFVyxFQUFFWCxDQUFGLENBQUYsRUFBT1MsRUFBRVQsQ0FBRixFQUFJNEIsQ0FBSixJQUFPNUIsRUFBRTRCLENBQUYsQ0FBUCxHQUFZLGNBQVksT0FBTzVCLEVBQUVtSixXQUFyQixJQUFrQ25KLGFBQWFBLEVBQUVtSixXQUFqRCxHQUE2RG5KLEVBQUVtSixXQUFGLENBQWMzSCxTQUEzRSxHQUFxRnhCLGFBQWFpQixNQUFiLEdBQW9CWSxDQUFwQixHQUFzQixJQUFySTtBQUEwSSxLQUF2TDtBQUF3TCxHQUFsbVUsRUFBcW1VLFVBQVM3QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsQ0FBZCxDQUFvQlYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBVztBQUFDLGFBQU8sVUFBU0MsQ0FBVCxFQUFXUyxDQUFYLEVBQWE7QUFBQyxZQUFJa0IsQ0FBSjtBQUFBLFlBQU1DLENBQU47QUFBQSxZQUFRRixJQUFFMEIsT0FBTzFDLEVBQUVWLENBQUYsQ0FBUCxDQUFWO0FBQUEsWUFBdUJlLElBQUVQLEVBQUVDLENBQUYsQ0FBekI7QUFBQSxZQUE4QkUsSUFBRWUsRUFBRW1FLE1BQWxDLENBQXlDLE9BQU85RSxJQUFFLENBQUYsSUFBS0EsS0FBR0osQ0FBUixHQUFVWixJQUFFLEVBQUYsR0FBSyxLQUFLLENBQXBCLElBQXVCNEIsSUFBRUQsRUFBRXlILFVBQUYsQ0FBYXBJLENBQWIsQ0FBRixFQUFrQlksSUFBRSxLQUFGLElBQVNBLElBQUUsS0FBWCxJQUFrQlosSUFBRSxDQUFGLEtBQU1KLENBQXhCLElBQTJCLENBQUNpQixJQUFFRixFQUFFeUgsVUFBRixDQUFhcEksSUFBRSxDQUFmLENBQUgsSUFBc0IsS0FBakQsSUFBd0RhLElBQUUsS0FBMUQsR0FBZ0U3QixJQUFFMkIsRUFBRTBILE1BQUYsQ0FBU3JJLENBQVQsQ0FBRixHQUFjWSxDQUE5RSxHQUFnRjVCLElBQUUyQixFQUFFNkUsS0FBRixDQUFReEYsQ0FBUixFQUFVQSxJQUFFLENBQVosQ0FBRixHQUFpQixDQUFDWSxJQUFFLEtBQUYsSUFBUyxFQUFWLEtBQWVDLElBQUUsS0FBakIsSUFBd0IsS0FBbEssQ0FBUDtBQUFnTCxPQUE5TztBQUErTyxLQUFyUTtBQUFzUSxHQUEvNFUsRUFBazVVLFVBQVM3QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsRUFBTSxVQUFOLENBQWQ7QUFBQSxRQUFnQ2tCLElBQUVsQixFQUFFLEVBQUYsQ0FBbEMsQ0FBd0NWLEVBQUVFLE9BQUYsR0FBVVEsRUFBRSxDQUFGLEVBQUs0SSxpQkFBTCxHQUF1QixVQUFTdEosQ0FBVCxFQUFXO0FBQUMsVUFBRyxLQUFLLENBQUwsSUFBUUEsQ0FBWCxFQUFhLE9BQU9BLEVBQUVXLENBQUYsS0FBTVgsRUFBRSxZQUFGLENBQU4sSUFBdUI0QixFQUFFbkIsRUFBRVQsQ0FBRixDQUFGLENBQTlCO0FBQXNDLEtBQWhHO0FBQWlHLEdBQTNpVixFQUE4aVYsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUM2QixPQUFNLEVBQUNELE9BQU0sQ0FBQ0UsTUFBRCxFQUFRa0csTUFBUixDQUFQLEVBQXVCQyxVQUFTLEVBQUNDLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsR0FBckIsRUFBaEMsRUFBMERtSSxVQUFTQyxPQUFuRSxFQUEyRUMsVUFBU0QsT0FBcEYsRUFBNEZFLFdBQVUsQ0FBQ04sTUFBRCxFQUFRbEcsTUFBUixDQUF0RyxFQUFzSDJFLE1BQUszRSxNQUEzSCxFQUFrSXlHLGFBQVl6RyxNQUE5SSxFQUFxSjBHLFVBQVNKLE9BQTlKLEVBQVAsRUFBOEtLLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNDLFNBQVEsQ0FBVCxFQUFOO0FBQWtCLE9BQWhOLEVBQWlOckcsT0FBTSxFQUFDVCxPQUFNLGlCQUFVO0FBQUMsZUFBSytHLFlBQUw7QUFBb0IsU0FBdEMsRUFBdUNSLFVBQVMsb0JBQVU7QUFBQyxlQUFLUyxpQkFBTDtBQUF5QixTQUFwRixFQUFxRlAsVUFBUyxvQkFBVTtBQUFDLGVBQUtRLGlCQUFMO0FBQXlCLFNBQWxJLEVBQW1JTixhQUFZLHVCQUFVO0FBQUMsZUFBS08sb0JBQUw7QUFBNEIsU0FBdEwsRUFBdUxSLFdBQVUscUJBQVU7QUFBQyxlQUFLUyxlQUFMO0FBQXVCLFNBQW5PLEVBQXZOLEVBQTRiQyxTQUFRLEVBQUNELGlCQUFnQiwyQkFBVTtBQUFDLGVBQUtFLGVBQUwsQ0FBcUJDLGFBQXJCLEdBQW1DLEtBQUtaLFNBQUwsR0FBZSxDQUFsRCxFQUFvRCxLQUFLVyxlQUFMLENBQXFCRSxhQUFyQixHQUFtQyxLQUFLYixTQUE1RjtBQUFzRyxTQUFsSSxFQUFtSWMsa0JBQWlCLDRCQUFVO0FBQUMsY0FBSTNLLElBQUUsSUFBTixDQUFXLEtBQUtpSyxPQUFMLElBQWNsRyxPQUFPNkcsWUFBUCxDQUFvQixLQUFLWCxPQUF6QixDQUFkLEVBQWdELEtBQUtBLE9BQUwsR0FBYWxHLE9BQU8rRSxVQUFQLENBQW1CLFlBQVU7QUFBQzlJLGNBQUU2SyxLQUFGLENBQVEsUUFBUixFQUFpQjdLLEVBQUV3RSxHQUFGLENBQU1yQixLQUF2QixHQUE4Qm5ELEVBQUU2SyxLQUFGLENBQVEsT0FBUixFQUFnQjdLLEVBQUV3RSxHQUFGLENBQU1yQixLQUF0QixDQUE5QjtBQUEyRCxXQUF6RixFQUEyRixLQUFLcUcsUUFBaEcsQ0FBN0Q7QUFBdUssU0FBalYsRUFBa1ZzQixnQkFBZSx3QkFBUzlLLENBQVQsRUFBVztBQUFDLGVBQUt3SyxlQUFMLENBQXFCTyxRQUFyQixDQUE4Qi9LLEtBQUcsS0FBS3dFLEdBQUwsQ0FBU3JCLEtBQTFDO0FBQWlELFNBQTlaLEVBQStaZ0gsbUJBQWtCLDZCQUFVO0FBQUMsZUFBS0ssZUFBTCxDQUFxQlEsVUFBckIsR0FBZ0MsS0FBS3RCLFFBQXJDO0FBQThDLFNBQTFlLEVBQTJlVSxtQkFBa0IsNkJBQVU7QUFBQyxlQUFLSSxlQUFMLENBQXFCUyxVQUFyQixHQUFnQyxLQUFLckIsUUFBckM7QUFBOEMsU0FBdGpCLEVBQXVqQlMsc0JBQXFCLGdDQUFVO0FBQUMsZUFBS0csZUFBTCxDQUFxQlUsY0FBckIsR0FBb0MsQ0FBQyxDQUFDLEtBQUtwQixXQUEzQztBQUF1RCxTQUE5b0IsRUFBK29CSSxjQUFhLHdCQUFVO0FBQUMsY0FBSWxLLElBQUUsSUFBTixDQUFXLEtBQUttTCxTQUFMLENBQWdCLFlBQVU7QUFBQyxnQkFBSWxMLElBQUVELEVBQUV3RSxHQUFGLENBQU1yQixLQUFOLElBQWFuRCxFQUFFbUQsS0FBckIsQ0FBMkJuRCxFQUFFOEssY0FBRixDQUFpQjdLLENBQWpCLEdBQW9CRCxFQUFFd0ssZUFBRixDQUFrQlksV0FBbEIsR0FBOEJuTCxJQUFFQSxFQUFFNkYsTUFBSixHQUFXLENBQTdEO0FBQStELFdBQXJIO0FBQXdILFNBQTF5QixFQUEyeUJ1RixTQUFRLG1CQUFVO0FBQUMsZUFBS2IsZUFBTCxLQUF1QixLQUFLQSxlQUFMLENBQXFCYyxTQUFyQixHQUErQixDQUFDLENBQXZEO0FBQTBELFNBQXgzQixFQUF5M0JDLFFBQU8sa0JBQVU7QUFBQyxlQUFLZixlQUFMLENBQXFCYyxTQUFyQixHQUErQixDQUFDLENBQWhDLEVBQWtDLEtBQUtSLGNBQUwsRUFBbEM7QUFBd0QsU0FBbjhCLEVBQW84QlUsU0FBUSxtQkFBVTtBQUFDLGVBQUt0QixZQUFMLElBQW9CLEtBQUtTLGdCQUFMLEVBQXBCO0FBQTRDLFNBQW5nQyxFQUFwYyxFQUEzRCxFQUFxZ0QzSyxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFqaEQ7QUFBeWhELEdBQXBtWSxFQUF1bVksVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ0EsTUFBRSxFQUFGLEdBQU1WLEVBQUVFLE9BQUYsR0FBVVEsRUFBRSxDQUFGLEVBQUtPLE1BQUwsQ0FBWXdLLE1BQTVCO0FBQW1DLEdBQTFwWSxFQUE2cFksVUFBU3pMLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixFQUFNLGFBQU4sQ0FBZDtBQUFBLFFBQW1Da0IsSUFBRSxlQUFhbkIsRUFBRSxZQUFVO0FBQUMsYUFBT29GLFNBQVA7QUFBaUIsS0FBNUIsRUFBRixDQUFsRDtBQUFBLFFBQW9GaEUsSUFBRSxTQUFGQSxDQUFFLENBQVM3QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFVBQUc7QUFBQyxlQUFPRCxFQUFFQyxDQUFGLENBQVA7QUFBWSxPQUFoQixDQUFnQixPQUFNRCxDQUFOLEVBQVEsQ0FBRTtBQUFDLEtBQS9ILENBQWdJQSxFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsVUFBSUMsQ0FBSixFQUFNUyxDQUFOLEVBQVFpQixDQUFSLENBQVUsT0FBTyxLQUFLLENBQUwsS0FBUzNCLENBQVQsR0FBVyxXQUFYLEdBQXVCLFNBQU9BLENBQVAsR0FBUyxNQUFULEdBQWdCLFlBQVUsUUFBT1UsSUFBRW1CLEVBQUU1QixJQUFFZ0IsT0FBT2pCLENBQVAsQ0FBSixFQUFjVyxDQUFkLENBQVQsQ0FBVixHQUFxQ0QsQ0FBckMsR0FBdUNrQixJQUFFbkIsRUFBRVIsQ0FBRixDQUFGLEdBQU8sYUFBVzBCLElBQUVsQixFQUFFUixDQUFGLENBQWIsS0FBb0IsY0FBWSxPQUFPQSxFQUFFeUwsTUFBekMsR0FBZ0QsV0FBaEQsR0FBNEQvSixDQUF4SjtBQUEwSixLQUExTDtBQUEyTCxHQUF4K1ksRUFBMitZLFVBQVMzQixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixDQUFkO0FBQUEsUUFBb0JrQixJQUFFbEIsRUFBRSxFQUFGLENBQXRCO0FBQUEsUUFBNEJtQixJQUFFbkIsRUFBRSxFQUFGLENBQTlCO0FBQUEsUUFBb0NpQixJQUFFakIsRUFBRSxFQUFGLENBQXRDO0FBQUEsUUFBNENNLElBQUVDLE9BQU93SyxNQUFyRCxDQUE0RHpMLEVBQUVFLE9BQUYsR0FBVSxDQUFDYyxDQUFELElBQUlOLEVBQUUsQ0FBRixFQUFNLFlBQVU7QUFBQyxVQUFJVixJQUFFLEVBQU47QUFBQSxVQUFTQyxJQUFFLEVBQVg7QUFBQSxVQUFjUyxJQUFFa0UsUUFBaEI7QUFBQSxVQUF5Qm5FLElBQUUsc0JBQTNCLENBQWtELE9BQU9ULEVBQUVVLENBQUYsSUFBSyxDQUFMLEVBQU9ELEVBQUU4RixLQUFGLENBQVEsRUFBUixFQUFZb0YsT0FBWixDQUFxQixVQUFTM0wsQ0FBVCxFQUFXO0FBQUNDLFVBQUVELENBQUYsSUFBS0EsQ0FBTDtBQUFPLE9BQXhDLENBQVAsRUFBa0QsS0FBR2dCLEVBQUUsRUFBRixFQUFLaEIsQ0FBTCxFQUFRVSxDQUFSLENBQUgsSUFBZU8sT0FBT21GLElBQVAsQ0FBWXBGLEVBQUUsRUFBRixFQUFLZixDQUFMLENBQVosRUFBcUIyTCxJQUFyQixDQUEwQixFQUExQixLQUErQm5MLENBQXZHO0FBQXlHLEtBQTVLLENBQUosR0FBbUwsVUFBU1QsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxXQUFJLElBQUlTLElBQUVtQixFQUFFN0IsQ0FBRixDQUFOLEVBQVdnQixJQUFFNkUsVUFBVUMsTUFBdkIsRUFBOEJsRixJQUFFLENBQWhDLEVBQWtDRyxJQUFFSixFQUFFMkQsQ0FBdEMsRUFBd0M1QixJQUFFZCxFQUFFMEMsQ0FBaEQsRUFBa0R0RCxJQUFFSixDQUFwRDtBQUF1RCxhQUFJLElBQUlFLENBQUosRUFBTXdELElBQUUzQyxFQUFFa0UsVUFBVWpGLEdBQVYsQ0FBRixDQUFSLEVBQTBCYyxJQUFFWCxJQUFFTixFQUFFNkQsQ0FBRixFQUFLMUIsTUFBTCxDQUFZN0IsRUFBRXVELENBQUYsQ0FBWixDQUFGLEdBQW9CN0QsRUFBRTZELENBQUYsQ0FBaEQsRUFBcURjLElBQUUxRCxFQUFFb0UsTUFBekQsRUFBZ0VSLElBQUUsQ0FBdEUsRUFBd0VGLElBQUVFLENBQTFFO0FBQTZFNUMsWUFBRTdCLElBQUYsQ0FBT3lELENBQVAsRUFBU3hELElBQUVZLEVBQUU0RCxHQUFGLENBQVgsTUFBcUI1RSxFQUFFSSxDQUFGLElBQUt3RCxFQUFFeEQsQ0FBRixDQUExQjtBQUE3RTtBQUF2RCxPQUFvSyxPQUFPSixDQUFQO0FBQVMsS0FBOVcsR0FBK1dNLENBQXpYO0FBQTJYLEdBQS83WixFQUFrOFosVUFBU2hCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdDLElBQUVELEVBQUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFbEIsRUFBRSxFQUFGLENBQXBCO0FBQUEsUUFBMEJtQixJQUFFbkIsRUFBRSxFQUFGLENBQTVCO0FBQUEsUUFBa0NpQixJQUFFakIsRUFBRSxDQUFGLEVBQUs0RCxDQUF6QyxDQUEyQ3RFLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVc7QUFBQyxVQUFJQyxJQUFFVSxFQUFFaUUsTUFBRixLQUFXakUsRUFBRWlFLE1BQUYsR0FBU2hELElBQUUsRUFBRixHQUFLbkIsRUFBRW1FLE1BQUYsSUFBVSxFQUFuQyxDQUFOLENBQTZDLE9BQUs1RSxFQUFFcUosTUFBRixDQUFTLENBQVQsQ0FBTCxJQUFrQnJKLEtBQUtDLENBQXZCLElBQTBCMEIsRUFBRTFCLENBQUYsRUFBSUQsQ0FBSixFQUFNLEVBQUNtRCxPQUFNdEIsRUFBRXlDLENBQUYsQ0FBSXRFLENBQUosQ0FBUCxFQUFOLENBQTFCO0FBQWdELEtBQW5IO0FBQW9ILEdBQWpuYSxFQUFvbmEsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDVCxNQUFFcUUsQ0FBRixHQUFJNUQsRUFBRSxFQUFGLENBQUo7QUFBVSxHQUE5b2EsRUFBaXBhLFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTixDQUFZRCxFQUFFQSxFQUFFMEUsQ0FBRixHQUFJMUUsRUFBRXdFLENBQVIsRUFBVSxRQUFWLEVBQW1CLEVBQUN3RyxRQUFPL0ssRUFBRSxFQUFGLENBQVIsRUFBbkI7QUFBbUMsR0FBaHRhLEVBQW10YSxVQUFTVixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJMUMsSUFBRSxXQUFTVCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsVUFBSUQsSUFBRWdHLFNBQVNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBTixDQUF1QzFHLEVBQUU2TCxXQUFGLEdBQWMsV0FBZCxFQUEwQjdMLEVBQUU4TCxNQUFGLEdBQVMsWUFBVTtBQUFDLFlBQUk5TCxJQUFFLENBQU47QUFBQSxZQUFRVSxJQUFFLEtBQUssQ0FBZjtBQUFBLFlBQWlCQyxJQUFFLEtBQUssQ0FBeEI7QUFBQSxZQUEwQmlCLElBQUUsS0FBSyxDQUFqQztBQUFBLFlBQW1DQyxJQUFFLEtBQUssQ0FBMUM7QUFBQSxZQUE0Q0YsSUFBRSxLQUFLLENBQW5EO0FBQUEsWUFBcURYLElBQUUsS0FBSyxDQUE1RDtBQUFBLFlBQThESixJQUFFLEtBQUssQ0FBckUsQ0FBdUVILEVBQUVzTCxLQUFGLEdBQVEsS0FBS0EsS0FBYixFQUFtQnRMLEVBQUV1TCxNQUFGLEdBQVMsS0FBS0EsTUFBakMsRUFBd0N0TCxJQUFFRCxFQUFFd0wsVUFBRixDQUFhLElBQWIsQ0FBMUMsRUFBNkR2TCxFQUFFd0wsU0FBRixDQUFZLElBQVosRUFBaUIsQ0FBakIsRUFBbUIsQ0FBbkIsQ0FBN0QsRUFBbUZ2TCxJQUFFRCxFQUFFeUwsWUFBRixDQUFlLENBQWYsRUFBaUIsQ0FBakIsRUFBbUIxTCxFQUFFc0wsS0FBckIsRUFBMkJ0TCxFQUFFdUwsTUFBN0IsQ0FBckYsRUFBMEhwSyxJQUFFakIsRUFBRXFKLElBQTlILENBQW1JLEtBQUksSUFBSWpKLElBQUUsQ0FBTixFQUFRMkIsSUFBRWQsRUFBRWtFLE1BQWhCLEVBQXVCL0UsSUFBRTJCLENBQXpCLEVBQTJCM0IsS0FBRyxDQUE5QjtBQUFnQ2MsY0FBRUQsRUFBRWIsQ0FBRixDQUFGLEVBQU9ZLElBQUVDLEVBQUViLElBQUUsQ0FBSixDQUFULEVBQWdCQyxJQUFFWSxFQUFFYixJQUFFLENBQUosQ0FBbEIsRUFBeUJILElBQUVvRCxLQUFLZSxLQUFMLENBQVcsQ0FBQ2xELElBQUVGLENBQUYsR0FBSVgsQ0FBTCxJQUFRLENBQW5CLENBQTNCLEVBQWlEaEIsS0FBR1ksQ0FBcEQ7QUFBaEMsU0FBc0ZYLEVBQUUrRCxLQUFLZSxLQUFMLENBQVcvRSxLQUFHLEtBQUsrTCxLQUFMLEdBQVcsS0FBS0MsTUFBbkIsQ0FBWCxDQUFGO0FBQTBDLE9BQXhYLEVBQXlYaE0sRUFBRW9NLE9BQUYsR0FBVTFMLENBQW5ZO0FBQXFZLEtBQWxjLENBQW1jVCxFQUFFc0IsT0FBRixHQUFVZCxDQUFWLEVBQVlULEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXhCO0FBQWdDLEdBQXB3YixFQUF1d2IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUkxQyxJQUFFLFNBQUZBLENBQUUsQ0FBU1QsQ0FBVCxFQUFXO0FBQUMsYUFBT0EsS0FBR0EsRUFBRW1KLFdBQUYsS0FBZ0JrRCxLQUExQjtBQUFnQyxLQUFsRCxDQUFtRHBNLEVBQUVzQixPQUFGLEdBQVVkLENBQVYsRUFBWVQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBeEI7QUFBZ0MsR0FBeDZiLEVBQTI2YixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxPQUFFc0IsVUFBRixHQUFhLENBQUMsQ0FBZCxDQUFnQixJQUFJWCxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CVixFQUFFc0IsT0FBRixHQUFVLFVBQVN2QixDQUFULEVBQVc7QUFBQyxVQUFHcU0sTUFBTUMsT0FBTixDQUFjdE0sQ0FBZCxDQUFILEVBQW9CO0FBQUMsYUFBSSxJQUFJQyxJQUFFLENBQU4sRUFBUVMsSUFBRTJMLE1BQU1yTSxFQUFFOEYsTUFBUixDQUFkLEVBQThCN0YsSUFBRUQsRUFBRThGLE1BQWxDLEVBQXlDN0YsR0FBekM7QUFBNkNTLFlBQUVULENBQUYsSUFBS0QsRUFBRUMsQ0FBRixDQUFMO0FBQTdDLFNBQXVELE9BQU9TLENBQVA7QUFBUyxjQUFNLENBQUMsR0FBRWtCLEVBQUVMLE9BQUwsRUFBY3ZCLENBQWQsQ0FBTjtBQUF1QixLQUFsSTtBQUFtSSxHQUFqcWMsRUFBb3FjLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ0EsTUFBRSxFQUFGLEVBQU0sS0FBSSxJQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTixFQUFXQyxJQUFFRCxFQUFFLEVBQUYsQ0FBYixFQUFtQmtCLElBQUVsQixFQUFFLEVBQUYsQ0FBckIsRUFBMkJtQixJQUFFbkIsRUFBRSxFQUFGLEVBQU0sYUFBTixDQUE3QixFQUFrRGlCLElBQUUsQ0FBQyxVQUFELEVBQVksY0FBWixFQUEyQixXQUEzQixFQUF1QyxnQkFBdkMsRUFBd0QsYUFBeEQsQ0FBcEQsRUFBMkhYLElBQUUsQ0FBakksRUFBbUlBLElBQUUsQ0FBckksRUFBdUlBLEdBQXZJLEVBQTJJO0FBQUMsVUFBSUosSUFBRWUsRUFBRVgsQ0FBRixDQUFOO0FBQUEsVUFBV0QsSUFBRU4sRUFBRUcsQ0FBRixDQUFiO0FBQUEsVUFBa0I4QixJQUFFM0IsS0FBR0EsRUFBRVMsU0FBekIsQ0FBbUNrQixLQUFHLENBQUNBLEVBQUViLENBQUYsQ0FBSixJQUFVbEIsRUFBRStCLENBQUYsRUFBSWIsQ0FBSixFQUFNakIsQ0FBTixDQUFWLEVBQW1CZ0IsRUFBRWhCLENBQUYsSUFBS2dCLEVBQUV5SyxLQUExQjtBQUFnQztBQUFDLEdBQTE0YyxFQUE2NGMsVUFBU3JNLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ1YsTUFBRUUsT0FBRixHQUFVLEVBQUNxQixTQUFRYixFQUFFLEVBQUYsQ0FBVCxFQUFlWSxZQUFXLENBQUMsQ0FBM0IsRUFBVjtBQUF3QyxHQUFyOGMsRUFBdzhjLFVBQVN0QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNBLE1BQUUsRUFBRixHQUFNQSxFQUFFLEVBQUYsQ0FBTixFQUFZVixFQUFFRSxPQUFGLEdBQVVRLEVBQUUsQ0FBRixFQUFLMkwsS0FBTCxDQUFXRSxJQUFqQztBQUFzQyxHQUE5L2MsRUFBaWdkLFVBQVN2TSxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsWUFBVSxDQUFFLENBQXRCO0FBQXVCLEdBQXRpZCxFQUF5aWQsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXQyxJQUFFRCxFQUFFLEVBQUYsQ0FBYixDQUFtQlYsRUFBRUUsT0FBRixHQUFVLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ1QsV0FBS0QsQ0FBTCxHQUFPUyxFQUFFNkQsQ0FBRixDQUFJdEUsQ0FBSixFQUFNQyxDQUFOLEVBQVFVLEVBQUUsQ0FBRixFQUFJRCxDQUFKLENBQVIsQ0FBUCxHQUF1QlYsRUFBRUMsQ0FBRixJQUFLUyxDQUE1QjtBQUE4QixLQUF4RDtBQUF5RCxHQUFscGQsRUFBcXBkLFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixFQUFNLFVBQU4sQ0FBZDtBQUFBLFFBQWdDa0IsSUFBRXlLLE1BQU03SyxTQUF4QyxDQUFrRHhCLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVc7QUFBQyxhQUFPLEtBQUssQ0FBTCxLQUFTQSxDQUFULEtBQWFTLEVBQUU0TCxLQUFGLEtBQVVyTSxDQUFWLElBQWE0QixFQUFFakIsQ0FBRixNQUFPWCxDQUFqQyxDQUFQO0FBQTJDLEtBQWpFO0FBQWtFLEdBQXp4ZCxFQUE0eGQsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsRUFBRixDQUFOLENBQVlWLEVBQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlQyxDQUFmLEVBQWlCO0FBQUMsVUFBRztBQUFDLGVBQU9BLElBQUVWLEVBQUVRLEVBQUVDLENBQUYsRUFBSyxDQUFMLENBQUYsRUFBVUEsRUFBRSxDQUFGLENBQVYsQ0FBRixHQUFrQlQsRUFBRVMsQ0FBRixDQUF6QjtBQUE4QixPQUFsQyxDQUFrQyxPQUFNVCxDQUFOLEVBQVE7QUFBQyxZQUFJMkIsSUFBRTVCLEVBQUV3TSxNQUFSLENBQWUsTUFBTSxLQUFLLENBQUwsS0FBUzVLLENBQVQsSUFBWW5CLEVBQUVtQixFQUFFZixJQUFGLENBQU9iLENBQVAsQ0FBRixDQUFaLEVBQXlCQyxDQUEvQjtBQUFpQztBQUFDLEtBQXhIO0FBQXlILEdBQWo3ZCxFQUFvN2QsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsRUFBRixFQUFNLFVBQU4sQ0FBTjtBQUFBLFFBQXdCQyxJQUFFLENBQUMsQ0FBM0IsQ0FBNkIsSUFBRztBQUFDLFVBQUlpQixJQUFFLENBQUMsQ0FBRCxFQUFJbkIsQ0FBSixHQUFOLENBQWVtQixFQUFFNEssTUFBRixHQUFTLFlBQVU7QUFBQzdMLFlBQUUsQ0FBQyxDQUFIO0FBQUssT0FBekIsRUFBMEIwTCxNQUFNRSxJQUFOLENBQVczSyxDQUFYLEVBQWMsWUFBVTtBQUFDLGNBQU0sQ0FBTjtBQUFRLE9BQWpDLENBQTFCO0FBQThELEtBQWpGLENBQWlGLE9BQU01QixDQUFOLEVBQVEsQ0FBRSxHQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFHLENBQUNBLENBQUQsSUFBSSxDQUFDVSxDQUFSLEVBQVUsT0FBTSxDQUFDLENBQVAsQ0FBUyxJQUFJRCxJQUFFLENBQUMsQ0FBUCxDQUFTLElBQUc7QUFBQyxZQUFJa0IsSUFBRSxDQUFDLENBQUQsQ0FBTjtBQUFBLFlBQVVDLElBQUVELEVBQUVuQixDQUFGLEdBQVosQ0FBbUJvQixFQUFFbUgsSUFBRixHQUFPLFlBQVU7QUFBQyxpQkFBTSxFQUFDSCxNQUFLbkksSUFBRSxDQUFDLENBQVQsRUFBTjtBQUFrQixTQUFwQyxFQUFxQ2tCLEVBQUVuQixDQUFGLElBQUssWUFBVTtBQUFDLGlCQUFPb0IsQ0FBUDtBQUFTLFNBQTlELEVBQStEN0IsRUFBRTRCLENBQUYsQ0FBL0Q7QUFBb0UsT0FBM0YsQ0FBMkYsT0FBTTVCLENBQU4sRUFBUSxDQUFFLFFBQU9VLENBQVA7QUFBUyxLQUFsSztBQUFtSyxHQUEvdGUsRUFBa3VlLFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQU0sRUFBQ2tELE9BQU1sRCxDQUFQLEVBQVM0SSxNQUFLLENBQUMsQ0FBQzdJLENBQWhCLEVBQU47QUFBeUIsS0FBakQ7QUFBa0QsR0FBbHllLEVBQXF5ZSxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsRUFBTWtDLE1BQU4sQ0FBYSxRQUFiLEVBQXNCLFdBQXRCLENBQWQsQ0FBaUQzQyxFQUFFcUUsQ0FBRixHQUFJckQsT0FBT3dMLG1CQUFQLElBQTRCLFVBQVN6TSxDQUFULEVBQVc7QUFBQyxhQUFPUyxFQUFFVCxDQUFGLEVBQUlXLENBQUosQ0FBUDtBQUFjLEtBQTFEO0FBQTJELEdBQWo2ZSxFQUFvNmUsVUFBU1gsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsQ0FBZDtBQUFBLFFBQW9Ca0IsSUFBRWxCLEVBQUUsRUFBRixDQUF0QjtBQUFBLFFBQTRCbUIsSUFBRW5CLEVBQUUsRUFBRixDQUE5QjtBQUFBLFFBQW9DaUIsSUFBRWpCLEVBQUUsRUFBRixDQUF0QztBQUFBLFFBQTRDTSxJQUFFTixFQUFFLEVBQUYsQ0FBOUM7QUFBQSxRQUFvREUsSUFBRUYsRUFBRSxFQUFGLENBQXREO0FBQUEsUUFBNERLLElBQUVMLEVBQUUsRUFBRixDQUE5RCxDQUFvRUMsRUFBRUEsRUFBRXdFLENBQUYsR0FBSXhFLEVBQUVzRSxDQUFGLEdBQUksQ0FBQ3ZFLEVBQUUsRUFBRixFQUFPLFVBQVNWLENBQVQsRUFBVztBQUFDcU0sWUFBTUUsSUFBTixDQUFXdk0sQ0FBWDtBQUFjLEtBQWpDLENBQVgsRUFBK0MsT0FBL0MsRUFBdUQsRUFBQ3VNLE1BQUssY0FBU3ZNLENBQVQsRUFBVztBQUFDLFlBQUlDLENBQUo7QUFBQSxZQUFNUyxDQUFOO0FBQUEsWUFBUUMsQ0FBUjtBQUFBLFlBQVUrQixDQUFWO0FBQUEsWUFBWTVCLElBQUVjLEVBQUU1QixDQUFGLENBQWQ7QUFBQSxZQUFtQnNFLElBQUUsY0FBWSxPQUFPLElBQW5CLEdBQXdCLElBQXhCLEdBQTZCK0gsS0FBbEQ7QUFBQSxZQUF3RDNLLElBQUVtRSxVQUFVQyxNQUFwRTtBQUFBLFlBQTJFVixJQUFFMUQsSUFBRSxDQUFGLEdBQUltRSxVQUFVLENBQVYsQ0FBSixHQUFpQixLQUFLLENBQW5HO0FBQUEsWUFBcUdQLElBQUUsS0FBSyxDQUFMLEtBQVNGLENBQWhIO0FBQUEsWUFBa0hJLElBQUUsQ0FBcEg7QUFBQSxZQUFzSEUsSUFBRTNFLEVBQUVELENBQUYsQ0FBeEgsQ0FBNkgsSUFBR3dFLE1BQUlGLElBQUUzRSxFQUFFMkUsQ0FBRixFQUFJMUQsSUFBRSxDQUFGLEdBQUltRSxVQUFVLENBQVYsQ0FBSixHQUFpQixLQUFLLENBQTFCLEVBQTRCLENBQTVCLENBQU4sR0FBc0MsS0FBSyxDQUFMLElBQVFILENBQVIsSUFBV3BCLEtBQUcrSCxLQUFILElBQVUxSyxFQUFFK0QsQ0FBRixDQUE5RCxFQUFtRSxLQUFJekYsSUFBRWUsRUFBRUYsRUFBRWdGLE1BQUosQ0FBRixFQUFjcEYsSUFBRSxJQUFJNEQsQ0FBSixDQUFNckUsQ0FBTixDQUFwQixFQUE2QkEsSUFBRXVGLENBQS9CLEVBQWlDQSxHQUFqQztBQUFxQzVFLFlBQUVGLENBQUYsRUFBSThFLENBQUosRUFBTUYsSUFBRUYsRUFBRXRFLEVBQUUwRSxDQUFGLENBQUYsRUFBT0EsQ0FBUCxDQUFGLEdBQVkxRSxFQUFFMEUsQ0FBRixDQUFsQjtBQUFyQyxTQUFuRSxNQUFxSSxLQUFJOUMsSUFBRWdELEVBQUU3RSxJQUFGLENBQU9DLENBQVAsQ0FBRixFQUFZSixJQUFFLElBQUk0RCxDQUFKLEVBQWxCLEVBQXdCLENBQUMsQ0FBQzNELElBQUUrQixFQUFFc0csSUFBRixFQUFILEVBQWFILElBQXRDLEVBQTJDckQsR0FBM0M7QUFBK0M1RSxZQUFFRixDQUFGLEVBQUk4RSxDQUFKLEVBQU1GLElBQUV6RCxFQUFFYSxDQUFGLEVBQUkwQyxDQUFKLEVBQU0sQ0FBQ3pFLEVBQUV3QyxLQUFILEVBQVNxQyxDQUFULENBQU4sRUFBa0IsQ0FBQyxDQUFuQixDQUFGLEdBQXdCN0UsRUFBRXdDLEtBQWhDO0FBQS9DLFNBQXNGLE9BQU96QyxFQUFFb0YsTUFBRixHQUFTTixDQUFULEVBQVc5RSxDQUFsQjtBQUFvQixPQUE5WCxFQUF2RDtBQUF3YixHQUE3N2YsRUFBZzhmLFVBQVNWLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLFFBQUlELElBQUVDLEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWUMsSUFBRUQsRUFBRSxFQUFGLENBQWQ7QUFBQSxRQUFvQmtCLElBQUVsQixFQUFFLEVBQUYsQ0FBdEI7QUFBQSxRQUE0Qm1CLElBQUVuQixFQUFFLENBQUYsQ0FBOUIsQ0FBbUNWLEVBQUVFLE9BQUYsR0FBVVEsRUFBRSxFQUFGLEVBQU0yTCxLQUFOLEVBQVksT0FBWixFQUFxQixVQUFTck0sQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxXQUFLMEksRUFBTCxHQUFROUcsRUFBRTdCLENBQUYsQ0FBUixFQUFhLEtBQUs0SSxFQUFMLEdBQVEsQ0FBckIsRUFBdUIsS0FBSzhELEVBQUwsR0FBUXpNLENBQS9CO0FBQWlDLEtBQXBFLEVBQXVFLFlBQVU7QUFBQyxVQUFJRCxJQUFFLEtBQUsySSxFQUFYO0FBQUEsVUFBYzFJLElBQUUsS0FBS3lNLEVBQXJCO0FBQUEsVUFBd0JoTSxJQUFFLEtBQUtrSSxFQUFMLEVBQTFCLENBQW9DLE9BQU0sQ0FBQzVJLENBQUQsSUFBSVUsS0FBR1YsRUFBRThGLE1BQVQsSUFBaUIsS0FBSzZDLEVBQUwsR0FBUSxLQUFLLENBQWIsRUFBZWhJLEVBQUUsQ0FBRixDQUFoQyxJQUFzQyxVQUFRVixDQUFSLEdBQVVVLEVBQUUsQ0FBRixFQUFJRCxDQUFKLENBQVYsR0FBaUIsWUFBVVQsQ0FBVixHQUFZVSxFQUFFLENBQUYsRUFBSVgsRUFBRVUsQ0FBRixDQUFKLENBQVosR0FBc0JDLEVBQUUsQ0FBRixFQUFJLENBQUNELENBQUQsRUFBR1YsRUFBRVUsQ0FBRixDQUFILENBQUosQ0FBbkY7QUFBaUcsS0FBdk4sRUFBeU4sUUFBek4sQ0FBVixFQUE2T2tCLEVBQUUrSyxTQUFGLEdBQVkvSyxFQUFFeUssS0FBM1AsRUFBaVE1TCxFQUFFLE1BQUYsQ0FBalEsRUFBMlFBLEVBQUUsUUFBRixDQUEzUSxFQUF1UkEsRUFBRSxTQUFGLENBQXZSO0FBQW9TLEdBQXB5Z0IsRUFBdXlnQixVQUFTVCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksV0FBWixFQUF3Qi9LLEVBQUVOLE9BQTFCLEdBQW1DdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCOUYsRUFBRU8sT0FBekIsQ0FBbkM7QUFBcUUsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQixDQUFvQzNCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBL2poQixFQUFra2hCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksYUFBWixFQUEwQi9LLEVBQUVOLE9BQTVCO0FBQXFDLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmLENBQW9CNUIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUExeWhCLEVBQTZ5aEIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxlQUFaLEVBQTRCL0ssRUFBRU4sT0FBOUIsR0FBdUN2QixFQUFFNE0sU0FBRixDQUFZLG9CQUFaLEVBQWlDNUwsRUFBRU8sT0FBbkMsQ0FBdkMsRUFBbUZ2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUIvRixFQUFFUSxPQUF6QixDQUFuRjtBQUFxSCxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CO0FBQUEsUUFBb0NmLElBQUVGLEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDSyxJQUFFTixFQUFFRyxDQUFGLENBQS9DLENBQW9EWixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQXJvaUIsRUFBd29pQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFdBQVosRUFBd0IvSyxFQUFFTixPQUExQixHQUFtQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQW5DO0FBQXFFLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQWg2aUIsRUFBbTZpQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLGtCQUFaLEVBQStCL0ssRUFBRU4sT0FBakMsR0FBMEN2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUI5RixFQUFFTyxPQUF6QixDQUExQztBQUE0RSxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CLENBQW9DM0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFsc2pCLEVBQXFzakIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxTQUFaLEVBQXNCL0ssRUFBRU4sT0FBeEIsR0FBaUN2QixFQUFFNE0sU0FBRixDQUFZLGVBQVosRUFBNEI1TCxFQUFFTyxPQUE5QixDQUFqQyxFQUF3RXZCLEVBQUU0TSxTQUFGLENBQVkscUJBQVosRUFBa0M3TCxFQUFFUSxPQUFwQyxDQUF4RSxFQUFxSHZCLEVBQUU0TSxTQUFGLENBQVksdUJBQVosRUFBb0M5TCxFQUFFUyxPQUF0QyxDQUFySCxFQUFvS3ZCLEVBQUU0TSxTQUFGLENBQVksZ0JBQVosRUFBNkJsTCxFQUFFSCxPQUEvQixDQUFwSyxFQUE0TXZCLEVBQUU0TSxTQUFGLENBQVkscUJBQVosRUFBa0N0SCxFQUFFL0QsT0FBcEMsQ0FBNU0sRUFBeVB2QixFQUFFNE0sU0FBRixDQUFZLGlCQUFaLEVBQThCbEgsRUFBRW5FLE9BQWhDLENBQXpQLEVBQWtTdkIsRUFBRTRNLFNBQUYsQ0FBWSxpQkFBWixFQUE4QmhILEVBQUVyRSxPQUFoQyxDQUFsUyxFQUEyVXZCLEVBQUU0TSxTQUFGLENBQVksY0FBWixFQUEyQnRGLEVBQUUvRixPQUE3QixDQUEzVSxFQUFpWHZCLEVBQUU0TSxTQUFGLENBQVksZ0JBQVosRUFBNkJwRixFQUFFakcsT0FBL0IsQ0FBalgsRUFBeVp2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUJZLEVBQUVuRyxPQUF6QixDQUF6WjtBQUEyYixZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CO0FBQUEsUUFBb0NmLElBQUVGLEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDSyxJQUFFTixFQUFFRyxDQUFGLENBQS9DO0FBQUEsUUFBb0Q4QixJQUFFaEMsRUFBRSxHQUFGLENBQXREO0FBQUEsUUFBNkRJLElBQUVMLEVBQUVpQyxDQUFGLENBQS9EO0FBQUEsUUFBb0U0QixJQUFFNUQsRUFBRSxHQUFGLENBQXRFO0FBQUEsUUFBNkVnQixJQUFFakIsRUFBRTZELENBQUYsQ0FBL0U7QUFBQSxRQUFvRmMsSUFBRTFFLEVBQUUsR0FBRixDQUF0RjtBQUFBLFFBQTZGNEUsSUFBRTdFLEVBQUUyRSxDQUFGLENBQS9GO0FBQUEsUUFBb0dJLElBQUU5RSxFQUFFLEdBQUYsQ0FBdEc7QUFBQSxRQUE2R2dGLElBQUVqRixFQUFFK0UsQ0FBRixDQUEvRztBQUFBLFFBQW9IRyxJQUFFakYsRUFBRSxHQUFGLENBQXRIO0FBQUEsUUFBNkhrRixJQUFFbkYsRUFBRWtGLENBQUYsQ0FBL0g7QUFBQSxRQUFvSTBCLElBQUUzRyxFQUFFLEdBQUYsQ0FBdEk7QUFBQSxRQUE2STRHLElBQUU3RyxFQUFFNEcsQ0FBRixDQUEvSTtBQUFBLFFBQW9KRSxJQUFFN0csRUFBRSxHQUFGLENBQXRKO0FBQUEsUUFBNko4RyxJQUFFL0csRUFBRThHLENBQUYsQ0FBL0o7QUFBQSxRQUFvS0UsSUFBRS9HLEVBQUUsR0FBRixDQUF0SztBQUFBLFFBQTZLZ0gsSUFBRWpILEVBQUVnSCxDQUFGLENBQS9LLENBQW9MekgsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFuK2tCLEVBQXMra0IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxhQUFaLEVBQTBCL0ssRUFBRU4sT0FBNUIsR0FBcUN2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUI5RixFQUFFTyxPQUF6QixDQUFyQztBQUF1RSxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CLENBQW9DM0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFod2xCLEVBQW13bEIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxVQUFaLEVBQXVCL0ssRUFBRU4sT0FBekIsR0FBa0N2QixFQUFFNE0sU0FBRixDQUFZLFNBQVosRUFBc0I1TCxFQUFFTyxPQUF4QixDQUFsQyxFQUFtRXZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1Qi9GLEVBQUVRLE9BQXpCLENBQW5FO0FBQXFHLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0I7QUFBQSxRQUFvQ2YsSUFBRUYsRUFBRSxHQUFGLENBQXRDO0FBQUEsUUFBNkNLLElBQUVOLEVBQUVHLENBQUYsQ0FBL0MsQ0FBb0RaLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBM2ttQixFQUE4a21CLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksV0FBWixFQUF3Qi9LLEVBQUVOLE9BQTFCLEdBQW1DdkIsRUFBRTRNLFNBQUYsQ0FBWSxpQkFBWixFQUE4QjVMLEVBQUVPLE9BQWhDLENBQW5DLEVBQTRFdkIsRUFBRTRNLFNBQUYsQ0FBWSxtQkFBWixFQUFnQzdMLEVBQUVRLE9BQWxDLENBQTVFLEVBQXVIdkIsRUFBRTRNLFNBQUYsQ0FBWSxtQkFBWixFQUFnQzlMLEVBQUVTLE9BQWxDLENBQXZILEVBQWtLdkIsRUFBRTRNLFNBQUYsQ0FBWSxpQkFBWixFQUE4QmxMLEVBQUVILE9BQWhDLENBQWxLLEVBQTJNdkIsRUFBRTRNLFNBQUYsQ0FBWSxtQkFBWixFQUFnQ3RILEVBQUUvRCxPQUFsQyxDQUEzTSxFQUFzUHZCLEVBQUU0TSxTQUFGLENBQVksa0JBQVosRUFBK0JsSCxFQUFFbkUsT0FBakMsQ0FBdFAsRUFBZ1N2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUJsQixFQUFFckUsT0FBekIsQ0FBaFM7QUFBa1UsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DZixJQUFFRixFQUFFLEdBQUYsQ0FBdEM7QUFBQSxRQUE2Q0ssSUFBRU4sRUFBRUcsQ0FBRixDQUEvQztBQUFBLFFBQW9EOEIsSUFBRWhDLEVBQUUsR0FBRixDQUF0RDtBQUFBLFFBQTZESSxJQUFFTCxFQUFFaUMsQ0FBRixDQUEvRDtBQUFBLFFBQW9FNEIsSUFBRTVELEVBQUUsR0FBRixDQUF0RTtBQUFBLFFBQTZFZ0IsSUFBRWpCLEVBQUU2RCxDQUFGLENBQS9FO0FBQUEsUUFBb0ZjLElBQUUxRSxFQUFFLEdBQUYsQ0FBdEY7QUFBQSxRQUE2RjRFLElBQUU3RSxFQUFFMkUsQ0FBRixDQUEvRjtBQUFBLFFBQW9HSSxJQUFFOUUsRUFBRSxHQUFGLENBQXRHO0FBQUEsUUFBNkdnRixJQUFFakYsRUFBRStFLENBQUYsQ0FBL0c7QUFBQSxRQUFvSEcsSUFBRWpGLEVBQUUsR0FBRixDQUF0SDtBQUFBLFFBQTZIa0YsSUFBRW5GLEVBQUVrRixDQUFGLENBQS9ILENBQW9JM0YsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFuc25CLEVBQXNzbkIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxZQUFaLEVBQXlCL0ssRUFBRU4sT0FBM0I7QUFBb0MsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWYsQ0FBb0I1QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQTc2bkIsRUFBZzduQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFNBQVosRUFBc0IvSyxFQUFFTixPQUF4QixHQUFpQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQWpDO0FBQW1FLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQXRzb0IsRUFBeXNvQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFNBQVosRUFBc0IvSyxFQUFFTixPQUF4QixHQUFpQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQWpDO0FBQW1FLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQS85b0IsRUFBaytvQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFVBQVosRUFBdUIvSyxFQUFFTixPQUF6QixHQUFrQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQWxDO0FBQW9FLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQXp2cEIsRUFBNHZwQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLG9CQUFaLEVBQWlDL0ssRUFBRU4sT0FBbkMsR0FBNEN2QixFQUFFNE0sU0FBRixDQUFZLFVBQVosRUFBdUI1TCxFQUFFTyxPQUF6QixDQUE1QyxFQUE4RXZCLEVBQUU0TSxTQUFGLENBQVksaUJBQVosRUFBOEI3TCxFQUFFUSxPQUFoQyxDQUE5RSxFQUF1SHZCLEVBQUU0TSxTQUFGLENBQVksYUFBWixFQUEwQjlMLEVBQUVTLE9BQTVCLENBQXZILEVBQTRKdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCcEYsRUFBRUgsT0FBekIsQ0FBNUo7QUFBOEwsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DZixJQUFFRixFQUFFLEdBQUYsQ0FBdEM7QUFBQSxRQUE2Q0ssSUFBRU4sRUFBRUcsQ0FBRixDQUEvQztBQUFBLFFBQW9EOEIsSUFBRWhDLEVBQUUsR0FBRixDQUF0RDtBQUFBLFFBQTZESSxJQUFFTCxFQUFFaUMsQ0FBRixDQUEvRDtBQUFBLFFBQW9FNEIsSUFBRTVELEVBQUUsR0FBRixDQUF0RTtBQUFBLFFBQTZFZ0IsSUFBRWpCLEVBQUU2RCxDQUFGLENBQS9FLENBQW9GdEUsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUE3cnFCLEVBQWdzcUIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxXQUFaLEVBQXdCL0ssRUFBRU4sT0FBMUI7QUFBbUMsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWYsQ0FBb0I1QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQXQ2cUIsRUFBeTZxQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFNBQVosRUFBc0IvSyxFQUFFTixPQUF4QixHQUFpQ3ZCLEVBQUU0TSxTQUFGLENBQVksY0FBWixFQUEyQjVMLEVBQUVPLE9BQTdCLENBQWpDLEVBQXVFdkIsRUFBRTRNLFNBQUYsQ0FBWSxnQkFBWixFQUE2QjdMLEVBQUVRLE9BQS9CLENBQXZFLEVBQStHdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCaEcsRUFBRVMsT0FBekIsQ0FBL0c7QUFBaUosWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DZixJQUFFRixFQUFFLEdBQUYsQ0FBdEM7QUFBQSxRQUE2Q0ssSUFBRU4sRUFBRUcsQ0FBRixDQUEvQztBQUFBLFFBQW9EOEIsSUFBRWhDLEVBQUUsR0FBRixDQUF0RDtBQUFBLFFBQTZESSxJQUFFTCxFQUFFaUMsQ0FBRixDQUEvRCxDQUFvRTFDLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBN3lyQixFQUFnenJCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksU0FBWixFQUFzQi9LLEVBQUVOLE9BQXhCLEdBQWlDdkIsRUFBRTRNLFNBQUYsQ0FBWSxjQUFaLEVBQTJCNUwsRUFBRU8sT0FBN0IsQ0FBakMsRUFBdUV2QixFQUFFNE0sU0FBRixDQUFZLGlCQUFaLEVBQThCN0wsRUFBRVEsT0FBaEMsQ0FBdkUsRUFBZ0h2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUJoRyxFQUFFUyxPQUF6QixDQUFoSDtBQUFrSixZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CO0FBQUEsUUFBb0NmLElBQUVGLEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDSyxJQUFFTixFQUFFRyxDQUFGLENBQS9DO0FBQUEsUUFBb0Q4QixJQUFFaEMsRUFBRSxHQUFGLENBQXREO0FBQUEsUUFBNkRJLElBQUVMLEVBQUVpQyxDQUFGLENBQS9ELENBQW9FMUMsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFycnNCLEVBQXdyc0IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxXQUFaLEVBQXdCL0ssRUFBRU4sT0FBMUIsR0FBbUN2QixFQUFFNE0sU0FBRixDQUFZLFVBQVosRUFBdUI1TCxFQUFFTyxPQUF6QixDQUFuQyxFQUFxRXZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1Qi9GLEVBQUVRLE9BQXpCLENBQXJFO0FBQXVHLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0I7QUFBQSxRQUFvQ2YsSUFBRUYsRUFBRSxHQUFGLENBQXRDO0FBQUEsUUFBNkNLLElBQUVOLEVBQUVHLENBQUYsQ0FBL0MsQ0FBb0RaLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBbGd0QixFQUFxZ3RCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksYUFBWixFQUEwQi9LLEVBQUVOLE9BQTVCLEdBQXFDdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCOUYsRUFBRU8sT0FBekIsQ0FBckM7QUFBdUUsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQixDQUFvQzNCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBL3h0QixFQUFreXRCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksVUFBWixFQUF1Qi9LLEVBQUVOLE9BQXpCLEdBQWtDdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCOUYsRUFBRU8sT0FBekIsQ0FBbEM7QUFBb0UsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQixDQUFvQzNCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBemp1QixFQUE0anVCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksZUFBWixFQUE0Qi9LLEVBQUVOLE9BQTlCLEdBQXVDdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCOUYsRUFBRU8sT0FBekIsQ0FBdkM7QUFBeUUsWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQixDQUFvQzNCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBeDF1QixFQUEyMXVCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksV0FBWixFQUF3Qi9LLEVBQUVOLE9BQTFCLEdBQW1DdkIsRUFBRTRNLFNBQUYsQ0FBWSxXQUFaLEVBQXdCNUwsRUFBRU8sT0FBMUIsQ0FBbkMsRUFBc0V2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUIvRixFQUFFUSxPQUF6QixDQUF0RTtBQUF3RyxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CO0FBQUEsUUFBb0NmLElBQUVGLEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDSyxJQUFFTixFQUFFRyxDQUFGLENBQS9DLENBQW9EWixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQXRxdkIsRUFBeXF2QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFlBQVosRUFBeUIvSyxFQUFFTixPQUEzQixHQUFvQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQXBDO0FBQXNFLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQWw4dkIsRUFBcTh2QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLGFBQVosRUFBMEIvSyxFQUFFTixPQUE1QixHQUFxQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQXJDO0FBQXVFLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQS90d0IsRUFBa3V3QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLGVBQVosRUFBNEIvSyxFQUFFTixPQUE5QixHQUF1Q3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQXZDO0FBQXlFLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQTkvd0IsRUFBaWd4QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFlBQVosRUFBeUIvSyxFQUFFTixPQUEzQixHQUFvQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQXBDO0FBQXNFLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQTF4eEIsRUFBNnh4QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFlBQVosRUFBeUIvSyxFQUFFTixPQUEzQixHQUFvQ3ZCLEVBQUU0TSxTQUFGLENBQVksU0FBWixFQUFzQjVMLEVBQUVPLE9BQXhCLENBQXBDLEVBQXFFdkIsRUFBRTRNLFNBQUYsQ0FBWSwwQkFBWixFQUF1QzdMLEVBQUVRLE9BQXpDLENBQXJFLEVBQXVIdkIsRUFBRTRNLFNBQUYsQ0FBWSxnQkFBWixFQUE2QjlMLEVBQUVTLE9BQS9CLENBQXZILEVBQStKdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCcEYsRUFBRUgsT0FBekIsQ0FBL0o7QUFBaU0sWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DZixJQUFFRixFQUFFLEdBQUYsQ0FBdEM7QUFBQSxRQUE2Q0ssSUFBRU4sRUFBRUcsQ0FBRixDQUEvQztBQUFBLFFBQW9EOEIsSUFBRWhDLEVBQUUsR0FBRixDQUF0RDtBQUFBLFFBQTZESSxJQUFFTCxFQUFFaUMsQ0FBRixDQUEvRDtBQUFBLFFBQW9FNEIsSUFBRTVELEVBQUUsR0FBRixDQUF0RTtBQUFBLFFBQTZFZ0IsSUFBRWpCLEVBQUU2RCxDQUFGLENBQS9FLENBQW9GdEUsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFqdXlCLEVBQW91eUIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxjQUFaLEVBQTJCL0ssRUFBRU4sT0FBN0IsR0FBc0N2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUI5RixFQUFFTyxPQUF6QixDQUF0QztBQUF3RSxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CLENBQW9DM0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUEvL3lCLEVBQWtnekIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxXQUFaLEVBQXdCL0ssRUFBRU4sT0FBMUIsR0FBbUN2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUI5RixFQUFFTyxPQUF6QixDQUFuQztBQUFxRSxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CLENBQW9DM0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUExeHpCLEVBQTZ4ekIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQ0EsUUFBRTRNLFNBQUYsQ0FBWSxVQUFaLEVBQXVCL0ssRUFBRU4sT0FBekIsR0FBa0N2QixFQUFFNE0sU0FBRixDQUFZLGlCQUFaLEVBQThCLEVBQUNuSyxZQUFXLENBQUMsQ0FBYixFQUFlVixRQUFPLGdCQUFTL0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxpQkFBT0QsRUFBRSxPQUFGLEVBQVUsRUFBQytNLGFBQVksaUJBQWIsRUFBVixFQUEwQzlNLEVBQUUrTSxRQUE1QyxDQUFQO0FBQTZELFNBQWpHLEVBQTlCLENBQWxDLEVBQW9LaE4sRUFBRTRNLFNBQUYsQ0FBWSxlQUFaLEVBQTRCLEVBQUNuSyxZQUFXLENBQUMsQ0FBYixFQUFlVixRQUFPLGdCQUFTL0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxpQkFBT0QsRUFBRSxPQUFGLEVBQVUsRUFBQytNLGFBQVksZUFBYixFQUFWLEVBQXdDOU0sRUFBRStNLFFBQTFDLENBQVA7QUFBMkQsU0FBL0YsRUFBNUIsQ0FBcEssRUFBa1NoTixFQUFFNE0sU0FBRixDQUFZLGNBQVosRUFBMkI1TCxFQUFFTyxPQUE3QixDQUFsUyxFQUF3VXZCLEVBQUU0TSxTQUFGLENBQVksZUFBWixFQUE0QjdMLEVBQUVRLE9BQTlCLENBQXhVLEVBQStXdkIsRUFBRTRNLFNBQUYsQ0FBWSxlQUFaLEVBQTRCOUwsRUFBRVMsT0FBOUIsQ0FBL1csRUFBc1p2QixFQUFFNE0sU0FBRixDQUFZLGVBQVosRUFBNEJsTCxFQUFFSCxPQUE5QixDQUF0WixFQUE2YnZCLEVBQUU0TSxTQUFGLENBQVksZUFBWixFQUE0QnRILEVBQUUvRCxPQUE5QixDQUE3YixFQUFvZXZCLEVBQUU0TSxTQUFGLENBQVkscUJBQVosRUFBa0NoSCxFQUFFckUsT0FBcEMsQ0FBcGUsRUFBaWhCdkIsRUFBRTRNLFNBQUYsQ0FBWSwyQkFBWixFQUF3Q2xILEVBQUVuRSxPQUExQyxDQUFqaEIsRUFBb2tCdkIsRUFBRTZNLFFBQUYsQ0FBV0MsTUFBWCxDQUFrQmhHLElBQWxCLENBQXVCUSxFQUFFL0YsT0FBekIsQ0FBcGtCO0FBQXNtQixZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CO0FBQUEsUUFBb0NmLElBQUVGLEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDSyxJQUFFTixFQUFFRyxDQUFGLENBQS9DO0FBQUEsUUFBb0Q4QixJQUFFaEMsRUFBRSxHQUFGLENBQXREO0FBQUEsUUFBNkRJLElBQUVMLEVBQUVpQyxDQUFGLENBQS9EO0FBQUEsUUFBb0U0QixJQUFFNUQsRUFBRSxHQUFGLENBQXRFO0FBQUEsUUFBNkVnQixJQUFFakIsRUFBRTZELENBQUYsQ0FBL0U7QUFBQSxRQUFvRmMsSUFBRTFFLEVBQUUsR0FBRixDQUF0RjtBQUFBLFFBQTZGNEUsSUFBRTdFLEVBQUUyRSxDQUFGLENBQS9GO0FBQUEsUUFBb0dJLElBQUU5RSxFQUFFLEdBQUYsQ0FBdEc7QUFBQSxRQUE2R2dGLElBQUVqRixFQUFFK0UsQ0FBRixDQUEvRztBQUFBLFFBQW9IRyxJQUFFakYsRUFBRSxHQUFGLENBQXRIO0FBQUEsUUFBNkhrRixJQUFFbkYsRUFBRWtGLENBQUYsQ0FBL0g7QUFBQSxRQUFvSTBCLElBQUUzRyxFQUFFLEdBQUYsQ0FBdEk7QUFBQSxRQUE2STRHLElBQUU3RyxFQUFFNEcsQ0FBRixDQUEvSSxDQUFvSnJILEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBdHMxQixFQUF5czFCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksU0FBWixFQUFzQi9LLEVBQUVOLE9BQXhCLEdBQWlDdkIsRUFBRTRNLFNBQUYsQ0FBWSxRQUFaLEVBQXFCNUwsRUFBRU8sT0FBdkIsQ0FBakMsRUFBaUV2QixFQUFFNk0sUUFBRixDQUFXQyxNQUFYLENBQWtCaEcsSUFBbEIsQ0FBdUIvRixFQUFFUSxPQUF6QixDQUFqRTtBQUFtRyxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZjtBQUFBLFFBQW9CRCxJQUFFakIsRUFBRSxHQUFGLENBQXRCO0FBQUEsUUFBNkJNLElBQUVQLEVBQUVrQixDQUFGLENBQS9CO0FBQUEsUUFBb0NmLElBQUVGLEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDSyxJQUFFTixFQUFFRyxDQUFGLENBQS9DLENBQW9EWixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQS9nMkIsRUFBa2gyQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFlBQVosRUFBeUIvSyxFQUFFTixPQUEzQixHQUFvQ3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1QjlGLEVBQUVPLE9BQXpCLENBQXBDO0FBQXNFLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmO0FBQUEsUUFBb0JELElBQUVqQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2Qk0sSUFBRVAsRUFBRWtCLENBQUYsQ0FBL0IsQ0FBb0MzQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFaO0FBQW9CLEdBQTN5MkIsRUFBOHkyQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLFlBQVosRUFBeUIvSyxFQUFFTixPQUEzQjtBQUFvQyxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZixDQUFvQjVCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FBcmgzQixFQUF3aDNCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNBLFFBQUU0TSxTQUFGLENBQVksZUFBWixFQUE0Qi9LLEVBQUVOLE9BQTlCO0FBQXVDLFlBQU9MLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVWixDQUEzRCxDQUE2RCxJQUFJaUIsSUFBRWxCLEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYW1CLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmLENBQW9CNUIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUFsdzNCLEVBQXF3M0IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsY0FBU1csQ0FBVCxDQUFXWCxDQUFYLEVBQWE7QUFBQyxhQUFPVyxFQUFFc00sU0FBRixHQUFZLEtBQUtDLFFBQVFDLElBQVIsQ0FBYSxvQ0FBYixDQUFqQixJQUFxRXhNLEVBQUVzTSxTQUFGLEdBQVksQ0FBQyxDQUFiLEVBQWVqTixFQUFFb04sR0FBRixDQUFNdkwsRUFBRU4sT0FBUixDQUFmLEVBQWdDdkIsRUFBRW9OLEdBQUYsQ0FBTXBNLEVBQUVPLE9BQVIsQ0FBaEMsRUFBaUQsS0FBS3ZCLEVBQUU2TSxRQUFGLENBQVdDLE1BQVgsQ0FBa0JoRyxJQUFsQixDQUF1Qi9GLEVBQUVRLE9BQXpCLENBQTNILENBQVA7QUFBcUssWUFBT0wsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVVaLENBQTNELENBQTZELElBQUlpQixJQUFFbEIsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFhbUIsSUFBRXBCLEVBQUVtQixDQUFGLENBQWY7QUFBQSxRQUFvQkQsSUFBRWpCLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DZixJQUFFRixFQUFFLEdBQUYsQ0FBdEM7QUFBQSxRQUE2Q0ssSUFBRU4sRUFBRUcsQ0FBRixDQUEvQyxDQUFvREYsRUFBRSxHQUFGLEdBQU9WLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQW5CO0FBQTJCLEdBQXBwNEIsRUFBdXA0QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELENBQUosRUFBTUUsQ0FBTixFQUFRaUIsQ0FBUixDQUFVLENBQUUsVUFBU2xCLENBQVQsRUFBV21CLENBQVgsRUFBYTtBQUFDbEIsVUFBRSxDQUFDVixDQUFELEVBQUdELENBQUgsQ0FBRixFQUFRUyxJQUFFb0IsQ0FBVixFQUFZRCxJQUFFLGNBQVksT0FBT25CLENBQW5CLEdBQXFCQSxFQUFFc0YsS0FBRixDQUFROUYsQ0FBUixFQUFVVSxDQUFWLENBQXJCLEdBQWtDRixDQUFoRCxFQUFrRCxFQUFFLEtBQUssQ0FBTCxLQUFTbUIsQ0FBVCxLQUFhNUIsRUFBRUUsT0FBRixHQUFVMEIsQ0FBdkIsQ0FBRixDQUFsRDtBQUErRSxLQUE5RixDQUFnRyxJQUFoRyxFQUFzRyxVQUFTNUIsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQztBQUFhLGVBQVNTLENBQVQsQ0FBV1YsQ0FBWCxFQUFhO0FBQUMsaUJBQVNDLENBQVQsR0FBWTtBQUFDLGNBQUlBLElBQUU4RCxPQUFPc0osZ0JBQVAsQ0FBd0JyTixDQUF4QixFQUEwQixJQUExQixDQUFOLENBQXNDLGVBQWFDLEVBQUVxTixNQUFmLEdBQXNCdE4sRUFBRW9ILEtBQUYsQ0FBUWtHLE1BQVIsR0FBZSxNQUFyQyxHQUE0QyxXQUFTck4sRUFBRXFOLE1BQVgsS0FBb0J0TixFQUFFb0gsS0FBRixDQUFRa0csTUFBUixHQUFlLFlBQW5DLENBQTVDLEVBQTZGdE0sSUFBRSxrQkFBZ0JmLEVBQUVzTixTQUFsQixHQUE0QixFQUFFQyxXQUFXdk4sRUFBRXdOLFVBQWIsSUFBeUJELFdBQVd2TixFQUFFeU4sYUFBYixDQUEzQixDQUE1QixHQUFvRkYsV0FBV3ZOLEVBQUUwTixjQUFiLElBQTZCSCxXQUFXdk4sRUFBRTJOLGlCQUFiLENBQWhOLEVBQWdQNUksTUFBTWhFLENBQU4sTUFBV0EsSUFBRSxDQUFiLENBQWhQLEVBQWdRVyxHQUFoUTtBQUFvUSxrQkFBU2pCLENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsY0FBSVMsSUFBRVYsRUFBRW9ILEtBQUYsQ0FBUTJFLEtBQWQsQ0FBb0IvTCxFQUFFb0gsS0FBRixDQUFRMkUsS0FBUixHQUFjLEtBQWQsRUFBb0IvTCxFQUFFNk4sV0FBdEIsRUFBa0M3TixFQUFFb0gsS0FBRixDQUFRMkUsS0FBUixHQUFjckwsQ0FBaEQsRUFBa0RWLEVBQUVvSCxLQUFGLENBQVEwRyxTQUFSLEdBQWtCN04sQ0FBcEU7QUFBc0Usa0JBQVNRLENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsZUFBSSxJQUFJQyxJQUFFLEVBQVYsRUFBYUQsS0FBR0EsRUFBRStOLFVBQUwsSUFBaUIvTixFQUFFK04sVUFBRixZQUF3QkMsT0FBdEQ7QUFBK0RoTyxjQUFFK04sVUFBRixDQUFhRSxTQUFiLElBQXdCaE8sRUFBRTZHLElBQUYsQ0FBTyxFQUFDb0gsTUFBS2xPLEVBQUUrTixVQUFSLEVBQW1CRSxXQUFVak8sRUFBRStOLFVBQUYsQ0FBYUUsU0FBMUMsRUFBUCxDQUF4QixFQUFxRmpPLElBQUVBLEVBQUUrTixVQUF6RjtBQUEvRCxXQUFtSyxPQUFPOU4sQ0FBUDtBQUFTLGtCQUFTVSxDQUFULEdBQVk7QUFBQyxjQUFJVixJQUFFRCxFQUFFb0gsS0FBRixDQUFRNEUsTUFBZDtBQUFBLGNBQXFCdEwsSUFBRUQsRUFBRVQsQ0FBRixDQUF2QjtBQUFBLGNBQTRCVyxJQUFFOEYsU0FBU3NDLGVBQVQsSUFBMEJ0QyxTQUFTc0MsZUFBVCxDQUF5QmtGLFNBQWpGLENBQTJGak8sRUFBRW9ILEtBQUYsQ0FBUTRFLE1BQVIsR0FBZSxNQUFmLENBQXNCLElBQUlwSyxJQUFFNUIsRUFBRW1PLFlBQUYsR0FBZW5OLENBQXJCLENBQXVCLE9BQU8sTUFBSWhCLEVBQUVtTyxZQUFOLEdBQW1CLE1BQUtuTyxFQUFFb0gsS0FBRixDQUFRNEUsTUFBUixHQUFlL0wsQ0FBcEIsQ0FBbkIsSUFBMkNELEVBQUVvSCxLQUFGLENBQVE0RSxNQUFSLEdBQWVwSyxJQUFFLElBQWpCLEVBQXNCaEIsSUFBRVosRUFBRW9PLFdBQTFCLEVBQXNDMU4sRUFBRWlMLE9BQUYsQ0FBVyxVQUFTM0wsQ0FBVCxFQUFXO0FBQUNBLGNBQUVrTyxJQUFGLENBQU9ELFNBQVAsR0FBaUJqTyxFQUFFaU8sU0FBbkI7QUFBNkIsV0FBcEQsQ0FBdEMsRUFBNkYsTUFBS3ROLE1BQUk4RixTQUFTc0MsZUFBVCxDQUF5QmtGLFNBQXpCLEdBQW1DdE4sQ0FBdkMsQ0FBTCxDQUF4SSxDQUFQO0FBQWdNLGtCQUFTZ0IsQ0FBVCxHQUFZO0FBQUNoQixjQUFJLElBQUlWLElBQUUrRCxLQUFLcUssS0FBTCxDQUFXYixXQUFXeE4sRUFBRW9ILEtBQUYsQ0FBUTRFLE1BQW5CLENBQVgsQ0FBTjtBQUFBLGNBQTZDdkwsSUFBRXNELE9BQU9zSixnQkFBUCxDQUF3QnJOLENBQXhCLEVBQTBCLElBQTFCLENBQS9DO0FBQUEsY0FBK0U0QixJQUFFb0MsS0FBS3FLLEtBQUwsQ0FBV2IsV0FBVy9NLEVBQUV1TCxNQUFiLENBQVgsQ0FBakYsQ0FBa0gsSUFBR3BLLE1BQUkzQixDQUFKLEdBQU0sY0FBWVEsRUFBRXFOLFNBQWQsS0FBMEJwTixFQUFFLFNBQUYsR0FBYUMsR0FBYixFQUFpQmlCLElBQUVvQyxLQUFLcUssS0FBTCxDQUFXYixXQUFXekosT0FBT3NKLGdCQUFQLENBQXdCck4sQ0FBeEIsRUFBMEIsSUFBMUIsRUFBZ0NnTSxNQUEzQyxDQUFYLENBQTdDLENBQU4sR0FBbUgsYUFBV3ZMLEVBQUVxTixTQUFiLEtBQXlCcE4sRUFBRSxRQUFGLEdBQVlDLEdBQVosRUFBZ0JpQixJQUFFb0MsS0FBS3FLLEtBQUwsQ0FBV2IsV0FBV3pKLE9BQU9zSixnQkFBUCxDQUF3QnJOLENBQXhCLEVBQTBCLElBQTFCLEVBQWdDZ00sTUFBM0MsQ0FBWCxDQUEzQyxDQUFuSCxFQUE4TmpMLE1BQUlhLENBQXJPLEVBQXVPO0FBQUNiLGdCQUFFYSxDQUFGLENBQUksSUFBSUQsSUFBRUUsRUFBRSxrQkFBRixDQUFOLENBQTRCLElBQUc7QUFBQzdCLGdCQUFFc08sYUFBRixDQUFnQjNNLENBQWhCO0FBQW1CLGFBQXZCLENBQXVCLE9BQU0zQixDQUFOLEVBQVEsQ0FBRTtBQUFDO0FBQUMsYUFBR0EsS0FBR0EsRUFBRXVPLFFBQUwsSUFBZSxlQUFhdk8sRUFBRXVPLFFBQTlCLElBQXdDLENBQUMzTSxFQUFFNE0sR0FBRixDQUFNeE8sQ0FBTixDQUE1QyxFQUFxRDtBQUFDLGNBQUlnQixJQUFFLElBQU47QUFBQSxjQUFXSixJQUFFWixFQUFFb08sV0FBZjtBQUFBLGNBQTJCck4sSUFBRSxJQUE3QjtBQUFBLGNBQWtDMkIsSUFBRSxTQUFGQSxDQUFFLEdBQVU7QUFBQzFDLGNBQUVvTyxXQUFGLEtBQWdCeE4sQ0FBaEIsSUFBbUJlLEdBQW5CO0FBQXVCLFdBQXRFO0FBQUEsY0FBdUViLElBQUUsVUFBU2IsQ0FBVCxFQUFXO0FBQUM4RCxtQkFBTzBLLG1CQUFQLENBQTJCLFFBQTNCLEVBQW9DL0wsQ0FBcEMsRUFBc0MsQ0FBQyxDQUF2QyxHQUEwQzFDLEVBQUV5TyxtQkFBRixDQUFzQixPQUF0QixFQUE4QjlNLENBQTlCLEVBQWdDLENBQUMsQ0FBakMsQ0FBMUMsRUFBOEUzQixFQUFFeU8sbUJBQUYsQ0FBc0IsT0FBdEIsRUFBOEI5TSxDQUE5QixFQUFnQyxDQUFDLENBQWpDLENBQTlFLEVBQWtIM0IsRUFBRXlPLG1CQUFGLENBQXNCLGtCQUF0QixFQUF5QzNOLENBQXpDLEVBQTJDLENBQUMsQ0FBNUMsQ0FBbEgsRUFBaUtkLEVBQUV5TyxtQkFBRixDQUFzQixpQkFBdEIsRUFBd0M5TSxDQUF4QyxFQUEwQyxDQUFDLENBQTNDLENBQWpLLEVBQStNVixPQUFPbUYsSUFBUCxDQUFZbkcsQ0FBWixFQUFlMEwsT0FBZixDQUF3QixVQUFTakwsQ0FBVCxFQUFXO0FBQUNWLGdCQUFFb0gsS0FBRixDQUFRMUcsQ0FBUixJQUFXVCxFQUFFUyxDQUFGLENBQVg7QUFBZ0IsYUFBcEQsQ0FBL00sRUFBc1FrQixFQUFFOE0sTUFBRixDQUFTMU8sQ0FBVCxDQUF0UTtBQUFrUixXQUE5UixDQUErUjJPLElBQS9SLENBQW9TM08sQ0FBcFMsRUFBc1MsRUFBQ2dNLFFBQU9oTSxFQUFFb0gsS0FBRixDQUFRNEUsTUFBaEIsRUFBdUJzQixRQUFPdE4sRUFBRW9ILEtBQUYsQ0FBUWtHLE1BQXRDLEVBQTZDUSxXQUFVOU4sRUFBRW9ILEtBQUYsQ0FBUTBHLFNBQS9ELEVBQXlFYyxXQUFVNU8sRUFBRW9ILEtBQUYsQ0FBUXdILFNBQTNGLEVBQXFHQyxVQUFTN08sRUFBRW9ILEtBQUYsQ0FBUXlILFFBQXRILEVBQXRTLENBQXpFLENBQWdmN08sRUFBRThPLGdCQUFGLENBQW1CLGtCQUFuQixFQUFzQ2hPLENBQXRDLEVBQXdDLENBQUMsQ0FBekMsR0FBNEMsc0JBQXFCZCxDQUFyQixJQUF3QixhQUFZQSxDQUFwQyxJQUF1Q0EsRUFBRThPLGdCQUFGLENBQW1CLE9BQW5CLEVBQTJCbk4sQ0FBM0IsRUFBNkIsQ0FBQyxDQUE5QixDQUFuRixFQUFvSG9DLE9BQU8rSyxnQkFBUCxDQUF3QixRQUF4QixFQUFpQ3BNLENBQWpDLEVBQW1DLENBQUMsQ0FBcEMsQ0FBcEgsRUFBMkoxQyxFQUFFOE8sZ0JBQUYsQ0FBbUIsT0FBbkIsRUFBMkJuTixDQUEzQixFQUE2QixDQUFDLENBQTlCLENBQTNKLEVBQTRMM0IsRUFBRThPLGdCQUFGLENBQW1CLGlCQUFuQixFQUFxQ25OLENBQXJDLEVBQXVDLENBQUMsQ0FBeEMsQ0FBNUwsRUFBdU8zQixFQUFFb0gsS0FBRixDQUFRd0gsU0FBUixHQUFrQixRQUF6UCxFQUFrUTVPLEVBQUVvSCxLQUFGLENBQVF5SCxRQUFSLEdBQWlCLFlBQW5SLEVBQWdTak4sRUFBRW1OLEdBQUYsQ0FBTS9PLENBQU4sRUFBUSxFQUFDZ1AsU0FBUWxPLENBQVQsRUFBV21PLFFBQU90TixDQUFsQixFQUFSLENBQWhTLEVBQThUMUIsR0FBOVQ7QUFBa1U7QUFBQyxnQkFBU1EsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxZQUFJQyxJQUFFMkIsRUFBRVAsR0FBRixDQUFNckIsQ0FBTixDQUFOLENBQWVDLEtBQUdBLEVBQUUrTyxPQUFGLEVBQUg7QUFBZSxnQkFBU3JPLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUMsWUFBSUMsSUFBRTJCLEVBQUVQLEdBQUYsQ0FBTXJCLENBQU4sQ0FBTixDQUFlQyxLQUFHQSxFQUFFZ1AsTUFBRixFQUFIO0FBQWMsV0FBSXJOLElBQUUsY0FBWSxPQUFPc04sR0FBbkIsR0FBdUIsSUFBSUEsR0FBSixFQUF2QixHQUFnQyxZQUFVO0FBQUMsWUFBSWxQLElBQUUsRUFBTjtBQUFBLFlBQVNDLElBQUUsRUFBWCxDQUFjLE9BQU0sRUFBQ3VPLEtBQUksYUFBU3ZPLENBQVQsRUFBVztBQUFDLG1CQUFPRCxFQUFFbVAsT0FBRixDQUFVbFAsQ0FBVixJQUFhLENBQUMsQ0FBckI7QUFBdUIsV0FBeEMsRUFBeUNvQixLQUFJLGFBQVNYLENBQVQsRUFBVztBQUFDLG1CQUFPVCxFQUFFRCxFQUFFbVAsT0FBRixDQUFVek8sQ0FBVixDQUFGLENBQVA7QUFBdUIsV0FBaEYsRUFBaUZxTyxLQUFJLGFBQVNyTyxDQUFULEVBQVdELENBQVgsRUFBYTtBQUFDVCxjQUFFbVAsT0FBRixDQUFVek8sQ0FBVixNQUFlLENBQUMsQ0FBaEIsS0FBb0JWLEVBQUU4RyxJQUFGLENBQU9wRyxDQUFQLEdBQ3RoL0JULEVBQUU2RyxJQUFGLENBQU9yRyxDQUFQLENBRGtnL0I7QUFDdi8rQixXQURvNStCLEVBQ241K0JpTyxRQUFPLGlCQUFTaE8sQ0FBVCxFQUFXO0FBQUMsZ0JBQUlELElBQUVULEVBQUVtUCxPQUFGLENBQVV6TyxDQUFWLENBQU4sQ0FBbUJELElBQUUsQ0FBQyxDQUFILEtBQU9ULEVBQUVvUCxNQUFGLENBQVMzTyxDQUFULEVBQVcsQ0FBWCxHQUFjUixFQUFFbVAsTUFBRixDQUFTM08sQ0FBVCxFQUFXLENBQVgsQ0FBckI7QUFBb0MsV0FEeTArQixFQUFOO0FBQ2owK0IsT0FEdXkrQixFQUFyQztBQUFBLFVBQzl2K0JvQixJQUFFLFdBQVM3QixDQUFULEVBQVc7QUFBQyxlQUFPLElBQUlxUCxLQUFKLENBQVVyUCxDQUFWLEVBQVksRUFBQ3NQLFNBQVEsQ0FBQyxDQUFWLEVBQVosQ0FBUDtBQUFpQyxPQUQrcytCLENBQzlzK0IsSUFBRztBQUFDLFlBQUlELEtBQUosQ0FBVSxNQUFWO0FBQWtCLE9BQXRCLENBQXNCLE9BQU1yUCxDQUFOLEVBQVE7QUFBQzZCLFlBQUUsV0FBUzdCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUV3RyxTQUFTOEksV0FBVCxDQUFxQixPQUFyQixDQUFOLENBQW9DLE9BQU90UCxFQUFFdVAsU0FBRixDQUFZeFAsQ0FBWixFQUFjLENBQUMsQ0FBZixFQUFpQixDQUFDLENBQWxCLEdBQXFCQyxDQUE1QjtBQUE4QixTQUFoRjtBQUFpRixXQUFJMEIsSUFBRSxJQUFOLENBQVcsZUFBYSxPQUFPb0MsTUFBcEIsSUFBNEIsY0FBWSxPQUFPQSxPQUFPc0osZ0JBQXRELElBQXdFMUwsSUFBRSxXQUFTM0IsQ0FBVCxFQUFXO0FBQUMsZUFBT0EsQ0FBUDtBQUFTLE9BQXZCLEVBQXdCMkIsRUFBRXFOLE9BQUYsR0FBVSxVQUFTaFAsQ0FBVCxFQUFXO0FBQUMsZUFBT0EsQ0FBUDtBQUFTLE9BQXZELEVBQXdEMkIsRUFBRXNOLE1BQUYsR0FBUyxVQUFTalAsQ0FBVCxFQUFXO0FBQUMsZUFBT0EsQ0FBUDtBQUFTLE9BQTlKLEtBQWlLMkIsSUFBRSxXQUFTM0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxlQUFPRCxLQUFHcU0sTUFBTTdLLFNBQU4sQ0FBZ0JtSyxPQUFoQixDQUF3QjlLLElBQXhCLENBQTZCYixFQUFFOEYsTUFBRixHQUFTOUYsQ0FBVCxHQUFXLENBQUNBLENBQUQsQ0FBeEMsRUFBNkMsVUFBU0EsQ0FBVCxFQUFXO0FBQUMsaUJBQU9VLEVBQUVWLENBQUYsRUFBSUMsQ0FBSixDQUFQO0FBQWMsU0FBdkUsQ0FBSCxFQUE2RUQsQ0FBcEY7QUFBc0YsT0FBdEcsRUFBdUcyQixFQUFFcU4sT0FBRixHQUFVLFVBQVNoUCxDQUFULEVBQVc7QUFBQyxlQUFPQSxLQUFHcU0sTUFBTTdLLFNBQU4sQ0FBZ0JtSyxPQUFoQixDQUF3QjlLLElBQXhCLENBQTZCYixFQUFFOEYsTUFBRixHQUFTOUYsQ0FBVCxHQUFXLENBQUNBLENBQUQsQ0FBeEMsRUFBNENTLENBQTVDLENBQUgsRUFBa0RULENBQXpEO0FBQTJELE9BQXhMLEVBQXlMMkIsRUFBRXNOLE1BQUYsR0FBUyxVQUFTalAsQ0FBVCxFQUFXO0FBQUMsZUFBT0EsS0FBR3FNLE1BQU03SyxTQUFOLENBQWdCbUssT0FBaEIsQ0FBd0I5SyxJQUF4QixDQUE2QmIsRUFBRThGLE1BQUYsR0FBUzlGLENBQVQsR0FBVyxDQUFDQSxDQUFELENBQXhDLEVBQTRDVyxDQUE1QyxDQUFILEVBQWtEWCxDQUF6RDtBQUEyRCxPQUExYSxHQUE0YUMsRUFBRUMsT0FBRixHQUFVeUIsQ0FBdGI7QUFBd2IsS0FEZ3Y0QixDQUFEO0FBQzV1NEIsR0FEMkQsRUFDeEQsVUFBUzNCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWY7QUFBQSxRQUFvQmtCLElBQUVuQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2QmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DYixJQUFFTixFQUFFLEdBQUYsQ0FBdEM7QUFBQSxRQUE2Q0UsSUFBRUgsRUFBRU8sQ0FBRixDQUEvQztBQUFBLFFBQW9ERCxJQUFFTCxFQUFFLEdBQUYsQ0FBdEQ7QUFBQSxRQUE2RGdDLElBQUVqQyxFQUFFTSxDQUFGLENBQS9EO0FBQUEsUUFBb0VELElBQUVKLEVBQUUsR0FBRixDQUF0RTtBQUFBLFFBQTZFNEQsSUFBRTdELEVBQUVLLENBQUYsQ0FBL0U7QUFBQSxRQUFvRlksSUFBRWhCLEVBQUUsR0FBRixDQUF0RjtBQUFBLFFBQTZGMEUsSUFBRTNFLEVBQUVpQixDQUFGLENBQS9GO0FBQUEsUUFBb0c0RCxJQUFFNUUsRUFBRSxHQUFGLENBQXRHO0FBQUEsUUFBNkc4RSxJQUFFL0UsRUFBRTZFLENBQUYsQ0FBL0csQ0FBb0hyRixFQUFFc0IsT0FBRixHQUFVLEVBQUNrQixZQUFXLENBQUMsQ0FBYixFQUFlVyxPQUFNLEVBQUNxTSxNQUFLcE0sTUFBTixFQUFhcUcsVUFBU0MsT0FBdEIsRUFBckIsRUFBb0Q1SCxRQUFPLGdCQUFTL0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxZQUFJUyxJQUFFVCxFQUFFK00sUUFBUjtBQUFBLFlBQWlCdk0sSUFBRVIsRUFBRStKLElBQXJCO0FBQUEsWUFBMEJySixJQUFFVixFQUFFbUQsS0FBOUI7QUFBQSxZQUFvQ3ZCLElBQUUsYUFBVTtBQUFDLGNBQUk3QixJQUFFUyxFQUFFaVAsRUFBUjtBQUFBLGNBQVd6UCxJQUFFLENBQUMsYUFBRCxFQUFlLFVBQWYsRUFBMEIsU0FBMUIsRUFBb0MsV0FBcEMsRUFBZ0QsWUFBaEQsRUFBNkQsT0FBN0QsQ0FBYjtBQUFBLGNBQW1GMkIsSUFBRWxCLEVBQUVvRixNQUF2RixDQUE4RixJQUFHbkYsRUFBRThPLElBQUwsRUFBVSxPQUFPL00sRUFBRW5CLE9BQVQsQ0FBaUIsT0FBS0ssR0FBTCxHQUFVO0FBQUMsZ0JBQUlDLElBQUVuQixFQUFFa0IsQ0FBRixFQUFLK04sZ0JBQVgsQ0FBNEIsSUFBRzlOLENBQUgsRUFBSyxJQUFHLHFCQUFtQkEsRUFBRStOLEdBQXhCLEVBQTRCO0FBQUMsa0JBQUk1TyxJQUFHLFlBQVU7QUFBQyxvQkFBSWhCLElBQUVVLEVBQUVrQixDQUFGLENBQU4sQ0FBVyxPQUFPbkIsRUFBRW9QLFdBQUYsR0FBYyxFQUFDQyxRQUFPLGtCQUFVO0FBQUMsMkJBQU85UCxDQUFQO0FBQVMsbUJBQTVCLEVBQWQsRUFBNENVLEVBQUUwTyxNQUFGLENBQVN4TixDQUFULEVBQVcsQ0FBWCxDQUE1QyxFQUEwRCxFQUFDNEQsR0FBRUosRUFBRTdELE9BQUwsRUFBakU7QUFBK0UsZUFBdEcsRUFBTixDQUFnSCxJQUFHLGNBQVksZUFBYSxPQUFPUCxDQUFwQixHQUFzQixXQUF0QixHQUFrQyxDQUFDLEdBQUVXLEVBQUVKLE9BQUwsRUFBY1AsQ0FBZCxDQUE5QyxDQUFILEVBQW1FLE9BQU9BLEVBQUV3RSxDQUFUO0FBQVcsYUFBM04sTUFBZ08sSUFBRyxrQkFBZ0IzRCxFQUFFK04sR0FBckIsRUFBeUIsT0FBT2xQLEVBQUVrQixDQUFGLEVBQUtvSSxJQUFMLENBQVUrQyxXQUFWLEdBQXNCLGtDQUF0QixFQUF5RHpJLEVBQUUvQyxPQUFsRTtBQUEwRSxlQUFHdkIsQ0FBSCxFQUFLLEtBQUksSUFBSWUsSUFBRWQsRUFBRTZGLE1BQVosRUFBbUIvRSxHQUFuQjtBQUF3QixnQkFBR2YsRUFBRUMsRUFBRWMsQ0FBRixDQUFGLENBQUgsRUFBVyxPQUFPSCxFQUFFVyxPQUFUO0FBQW5DLFdBQW9ELE9BQU9pRSxFQUFFakUsT0FBVDtBQUFpQixTQUFubUIsQ0FBb21CLE9BQU92QixFQUFFNkIsR0FBRixFQUFNLENBQUMsR0FBRUQsRUFBRUwsT0FBTCxFQUFjLEVBQUM2QixPQUFNekMsQ0FBUCxFQUFkLEVBQXdCRixDQUF4QixDQUFOLEVBQWlDQyxDQUFqQyxDQUFQO0FBQTJDLE9BQXh0QixFQUFWLEVBQW91QlYsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBaHZCO0FBQXd2QixHQURyN0IsRUFDdzdCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFmO0FBQUEsUUFBb0JrQixJQUFFLElBQUlELEVBQUVMLE9BQU4sQ0FBYyxFQUFDeUksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQytGLFNBQVEsSUFBVCxFQUFOO0FBQXFCLE9BQXRDLEVBQWQsQ0FBdEIsQ0FBNkU5UCxFQUFFc0IsT0FBRixHQUFVTSxDQUFWLEVBQVk3QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUF4QjtBQUFnQyxHQUR0cUMsRUFDeXFDLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CVixFQUFFc0IsT0FBRixHQUFVLEVBQUNrQixZQUFXLENBQUMsQ0FBYixFQUFlVyxPQUFNLEVBQUM0TSxZQUFXLEVBQUN2RyxNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBWixFQUFyQixFQUE0RFEsUUFBTyxnQkFBUy9CLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsWUFBSVMsSUFBRVQsRUFBRStNLFFBQVI7QUFBQSxZQUFpQnZNLElBQUVSLEVBQUVtRCxLQUFyQjtBQUFBLFlBQTJCekMsSUFBRSxTQUFGQSxDQUFFLENBQVNWLENBQVQsRUFBVztBQUFDLGlCQUFPQSxFQUFFZ1EsTUFBRixDQUFVLFVBQVNoUSxDQUFULEVBQVdTLENBQVgsRUFBYUQsQ0FBYixFQUFlRSxDQUFmLEVBQWlCO0FBQUMsZ0JBQUdWLEVBQUU2RyxJQUFGLENBQU9wRyxDQUFQLEdBQVVELElBQUVFLEVBQUVtRixNQUFGLEdBQVMsQ0FBeEIsRUFBMEI7QUFBQyxrQkFBSWpFLElBQUU3QixFQUFFLFlBQUYsRUFBZSxFQUFDa1EsS0FBSSxhQUFXLENBQUMsR0FBRXRPLEVBQUVMLE9BQUwsR0FBaEIsRUFBZixDQUFOLENBQXVEdEIsRUFBRTZHLElBQUYsQ0FBT2pGLENBQVA7QUFBVSxvQkFBTzVCLENBQVA7QUFBUyxXQUFqSSxFQUFtSSxFQUFuSSxDQUFQO0FBQThJLFNBQXZMLENBQXdMLE9BQU9RLEVBQUV1UCxVQUFGLEtBQWV0UCxJQUFFQyxFQUFFRCxDQUFGLENBQWpCLEdBQXVCVixFQUFFLEtBQUYsRUFBUSxFQUFDbVEsT0FBTSwrQkFBUCxFQUFSLEVBQWdEelAsQ0FBaEQsQ0FBOUI7QUFBaUYsT0FBMVYsRUFBVixFQUFzV1YsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBbFg7QUFBMFgsR0FEdnJELEVBQzByRCxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxjQUFTVyxDQUFULENBQVdYLENBQVgsRUFBYTtBQUFDQSxRQUFFNE0sU0FBRixDQUFZLGVBQVosRUFBNEIvSyxFQUFFTixPQUE5QjtBQUF1QyxZQUFPTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVVosQ0FBM0QsQ0FBNkQsSUFBSWlCLElBQUVsQixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFtQixJQUFFcEIsRUFBRW1CLENBQUYsQ0FBZixDQUFvQjVCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQVo7QUFBb0IsR0FEcDZELEVBQ3U2RCxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSTFDLElBQUVSLEVBQUVtUSxtQkFBRixHQUFzQixLQUFLLENBQWpDO0FBQUEsUUFBbUN6UCxJQUFFVixFQUFFb1EscUJBQUYsR0FBd0IsS0FBSyxDQUFsRSxDQUFvRSxhQUFXM1AsRUFBRUQsQ0FBRixDQUFJLEVBQUM2UCxVQUFTLGFBQVYsRUFBSixFQUE4QkMsT0FBekMsS0FBbUR0USxFQUFFbVEsbUJBQUYsR0FBc0IzUCxJQUFFLFdBQVNULENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxVQUFJRCxJQUFFZ0csU0FBUytKLGFBQVQsQ0FBdUIsMEJBQXZCLENBQU4sQ0FBeUQvUCxJQUFFQSxFQUFFZ1EsWUFBRixDQUFlLFNBQWYsRUFBeUJ6USxDQUF6QixDQUFGLElBQStCUyxJQUFFZ0csU0FBU0MsYUFBVCxDQUF1QixNQUF2QixDQUFGLEVBQWlDakcsRUFBRWdRLFlBQUYsQ0FBZSxNQUFmLEVBQXNCLGFBQXRCLENBQWpDLEVBQXNFaFEsRUFBRWdRLFlBQUYsQ0FBZSxTQUFmLEVBQXlCelEsQ0FBekIsQ0FBdEUsRUFBa0d5RyxTQUFTaUssSUFBVCxDQUFjdkksV0FBZCxDQUEwQjFILENBQTFCLENBQWpJLEdBQStKZ0csU0FBU2tLLElBQVQsQ0FBY2pNLFNBQWQsQ0FBd0JrTSxNQUF4QixDQUErQmxRLENBQS9CLENBQS9KLEVBQWlNK0YsU0FBU2tLLElBQVQsQ0FBY2pNLFNBQWQsQ0FBd0JuQyxHQUF4QixDQUE0QnRDLENBQTVCLENBQWpNO0FBQWdPLEtBQWpVLEVBQWtVQSxFQUFFb1EscUJBQUYsR0FBd0IxUCxJQUFFLFdBQVNYLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsVUFBSVMsSUFBRStGLFNBQVNpSyxJQUFmO0FBQUEsVUFBb0JqUSxJQUFFQyxFQUFFOFAsYUFBRixDQUFnQixNQUFJdlEsQ0FBcEIsQ0FBdEIsQ0FBNkMsSUFBR1EsQ0FBSCxFQUFLQSxFQUFFb1EsV0FBRixHQUFjN1EsQ0FBZCxDQUFMLEtBQXlCO0FBQUMsWUFBSVcsSUFBRThGLFNBQVNDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBTixDQUFzQy9GLEVBQUU4SSxJQUFGLEdBQU8sVUFBUCxFQUFrQjlJLEVBQUVtUSxFQUFGLEdBQUs3USxDQUF2QixFQUF5QlUsRUFBRWtRLFdBQUYsR0FBYzdRLENBQXZDLEVBQXlDVSxFQUFFeUgsV0FBRixDQUFjeEgsQ0FBZCxDQUF6QztBQUEwRDtBQUFDLEtBQXJrQjtBQUF1a0IsR0FEaG9GLEVBQ21vRixVQUFTWCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLGNBQVNXLENBQVQsQ0FBV1gsQ0FBWCxFQUFhO0FBQUNrTixjQUFRQyxJQUFSLENBQWEsZ0JBQWNuTixDQUFkLEdBQWdCLGtFQUE3QjtBQUFpRyxjQUFTNEIsQ0FBVCxDQUFXNUIsQ0FBWCxFQUFhQyxDQUFiLEVBQWVTLENBQWYsRUFBaUJELENBQWpCLEVBQW1CO0FBQUMyRSxRQUFFaUwscUJBQUYsS0FBMEJyUSxJQUFFcUgsRUFBRXJILENBQUYsRUFBSUMsQ0FBSixFQUFNUyxDQUFOLENBQUYsRUFBV1YsSUFBRUEsRUFBRStRLE9BQUYsQ0FBVSxhQUFWLEVBQXdCdFEsQ0FBeEIsQ0FBYixFQUF3QyxDQUFDLEdBQUUyRSxFQUFFaUwscUJBQUwsRUFBNEJyUSxDQUE1QixFQUE4QlMsQ0FBOUIsQ0FBbEU7QUFBb0csY0FBU29CLENBQVQsQ0FBVzdCLENBQVgsRUFBYTtBQUFDQSxRQUFFNk0sUUFBRixHQUFXLElBQUk3TSxDQUFKLENBQU0sRUFBQ2dLLE1BQUssRUFBQ3ZHLGNBQWEsU0FBZCxFQUF3QnVOLFdBQVUsQ0FBQyxDQUFuQyxFQUFxQ3JOLFFBQU8sV0FBNUMsRUFBd0RtSixRQUFPLEVBQS9ELEVBQWtFbUUsUUFBTyxFQUFDMVAsU0FBUW1FLENBQVQsRUFBekUsRUFBTixFQUE0RjlCLE9BQU0sRUFBQ2tKLFFBQU8sa0JBQVU7QUFBQyxpQkFBS29FLHFCQUFMO0FBQTZCLFdBQWhELEVBQWxHLEVBQW9KM0csU0FBUSxFQUFDNEcsaUJBQWdCLHlCQUFTblIsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ2MsY0FBRVEsT0FBRixDQUFVdkIsQ0FBVixJQUFhQyxDQUFiO0FBQWUsV0FBOUMsRUFBK0M0RCxVQUFTLGtCQUFTN0QsQ0FBVCxFQUFXO0FBQUMsZ0JBQUcsRUFBRUEsS0FBSzRGLENBQVAsQ0FBSCxFQUFhO0FBQUMsa0JBQUkzRixJQUFFLEtBQUtnUixNQUFMLENBQVlqUixDQUFaLENBQU4sQ0FBcUIsT0FBT0MsS0FBRzJCLEVBQUUsS0FBS2tMLE1BQUwsQ0FBWWxCLElBQVosQ0FBaUIsSUFBakIsQ0FBRixFQUF5QjNMLENBQXpCLEVBQTJCRCxDQUEzQixFQUE2QixLQUFLMkQsTUFBTCxHQUFZM0QsQ0FBekMsR0FBNEM0RixFQUFFNUYsQ0FBRixJQUFLLENBQUMsQ0FBckQsSUFBd0RXLEVBQUVYLENBQUYsQ0FBL0Q7QUFBb0U7QUFBQyxXQUE1SyxFQUE2S2tSLHVCQUFzQixpQ0FBVTtBQUFDLGdCQUFJbFIsSUFBRSxJQUFOO0FBQUEsZ0JBQVdDLElBQUUsS0FBSzZNLE1BQUwsQ0FBWWxCLElBQVosQ0FBaUIsSUFBakIsQ0FBYjtBQUFBLGdCQUFvQ2xMLElBQUUsS0FBS2lELE1BQTNDLENBQWtELENBQUMsR0FBRTNDLEVBQUVPLE9BQUwsRUFBY3FFLENBQWQsRUFBaUIrRixPQUFqQixDQUEwQixVQUFTbEwsQ0FBVCxFQUFXO0FBQUMsa0JBQUlFLElBQUVYLEVBQUVpUixNQUFGLENBQVN4USxDQUFULENBQU4sQ0FBa0JtQixFQUFFM0IsQ0FBRixFQUFJVSxDQUFKLEVBQU1GLENBQU4sRUFBUUMsSUFBRUQsQ0FBVjtBQUFhLGFBQXJFO0FBQXdFLFdBQXhVLEVBQXlVMlEsZUFBYyx1QkFBU3BSLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsZ0JBQUlTLElBQUUsSUFBTixDQUFXLFlBQVUsT0FBT1YsQ0FBakIsR0FBbUIsS0FBS2lSLE1BQUwsQ0FBWWpSLENBQVosSUFBZUMsQ0FBbEMsR0FBb0MsQ0FBQyxHQUFFZSxFQUFFTyxPQUFMLEVBQWN2QixDQUFkLEVBQWlCMkwsT0FBakIsQ0FBMEIsVUFBUzFMLENBQVQsRUFBVztBQUFDLHFCQUFPUyxFQUFFdVEsTUFBRixDQUFTaFIsQ0FBVCxJQUFZRCxFQUFFQyxDQUFGLENBQW5CO0FBQXdCLGFBQTlELENBQXBDO0FBQXFHLFdBQXJkLEVBQXNkb1IsaUJBQWdCLHlCQUFTclIsQ0FBVCxFQUFXO0FBQUMsZ0JBQUdBLE1BQUksS0FBS3lELFlBQVosRUFBeUI7QUFBQyxrQkFBSXhELElBQUUsS0FBSzBELE1BQVgsQ0FBa0IsS0FBS0UsUUFBTCxDQUFjN0QsQ0FBZCxHQUFpQm9GLEVBQUVnTCxtQkFBRixJQUF1QixDQUFDLEdBQUVoTCxFQUFFZ0wsbUJBQUwsRUFBMEJ6SyxFQUFFM0YsQ0FBRixDQUExQixFQUErQkMsSUFBRSxLQUFLd0QsWUFBdEMsRUFBbUR4RCxJQUFFRCxDQUFyRCxDQUF4QyxFQUFnRyxLQUFLeUQsWUFBTCxHQUFrQnpELENBQWxIO0FBQW9IO0FBQUMsV0FBbnBCLEVBQTVKLEVBQU4sQ0FBWCxFQUFvMEJBLEVBQUU0TSxTQUFGLENBQVksVUFBWixFQUF1QmxMLEVBQUVILE9BQXpCLENBQXAwQixFQUFzMkJ2QixFQUFFd0IsU0FBRixDQUFZZ0MsU0FBWixHQUFzQnhELEVBQUU2TSxRQUE5M0I7QUFBdTRCLFlBQU8zTCxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QixJQUFFakIsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZTSxJQUFFUCxFQUFFa0IsQ0FBRixDQUFkLENBQW1CMUIsRUFBRXNCLE9BQUYsR0FBVU0sQ0FBVixDQUFZLElBQUlqQixJQUFFRixFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFLLElBQUVOLEVBQUVHLENBQUYsQ0FBZjtBQUFBLFFBQW9COEIsSUFBRWhDLEVBQUUsR0FBRixDQUF0QjtBQUFBLFFBQTZCSSxJQUFFTCxFQUFFaUMsQ0FBRixDQUEvQjtBQUFBLFFBQW9DNEIsSUFBRTVELEVBQUUsR0FBRixDQUF0QztBQUFBLFFBQTZDZ0IsSUFBRWpCLEVBQUU2RCxDQUFGLENBQS9DO0FBQUEsUUFBb0RjLElBQUUxRSxFQUFFLEdBQUYsQ0FBdEQ7QUFBQSxRQUE2RDRFLElBQUUsQ0FBQyxTQUFELEVBQVcsUUFBWCxFQUFvQixZQUFwQixFQUFpQyxNQUFqQyxFQUF3QyxPQUF4QyxFQUFnRCxPQUFoRCxFQUF3RCxPQUF4RCxDQUEvRDtBQUFBLFFBQWdJRSxJQUFFLElBQUk4TCxNQUFKLENBQVcsTUFBSWhNLEVBQUVzRyxJQUFGLENBQU8sR0FBUCxFQUFZMkYsV0FBWixFQUFKLEdBQThCLCtDQUF6QyxFQUF5RixHQUF6RixDQUFsSTtBQUFBLFFBQWdPN0wsSUFBRSxFQUFDOEwsU0FBUSxRQUFULEVBQWtCQyxRQUFPLE1BQXpCLEVBQWdDQyxZQUFXLE9BQTNDLEVBQW1EdkUsTUFBSyxhQUF4RCxFQUFsTztBQUFBLFFBQXlTeEgsSUFBRSxFQUEzUztBQUFBLFFBQThTQyxJQUFFLEVBQWhUO0FBQUEsUUFBbVR5QixJQUFFLFNBQUZBLENBQUUsQ0FBU3JILENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFPVixFQUFFK1EsT0FBRixDQUFVdkwsQ0FBVixFQUFhLFVBQVN4RixDQUFULEVBQVdTLENBQVgsRUFBYUUsQ0FBYixFQUFlaUIsQ0FBZixFQUFpQkMsQ0FBakIsRUFBbUI7QUFBQyxZQUFJRixJQUFFLEtBQUssQ0FBWDtBQUFBLFlBQWFYLElBQUUsTUFBSSxDQUFDWSxDQUFMLEdBQU8sR0FBUCxHQUFXQSxDQUExQixDQUE0QixJQUFHbkIsSUFBRUEsRUFBRWtSLFdBQUYsRUFBRixFQUFrQjFSLEVBQUVRLENBQUYsSUFBSyxZQUFVLE9BQU9SLEVBQUVRLENBQUYsQ0FBakIsR0FBc0JrQixJQUFFWixFQUFFUSxPQUFGLENBQVV0QixFQUFFUSxDQUFGLENBQVYsQ0FBeEIsSUFBeUNrQixJQUFFWixFQUFFUSxPQUFGLENBQVV0QixFQUFFUSxDQUFGLEVBQUttUixLQUFmLEtBQXVCN1EsRUFBRVEsT0FBRixDQUFVbUUsRUFBRWpGLENBQUYsQ0FBVixDQUF6QixFQUF5Q08sSUFBRSxNQUFJLENBQUNZLENBQUwsR0FBTzNCLEVBQUVRLENBQUYsRUFBS29SLEdBQVosR0FBZ0JqUSxDQUFwRyxDQUFMLEdBQTRHRCxJQUFFWixFQUFFUSxPQUFGLENBQVVtRSxFQUFFakYsQ0FBRixDQUFWLENBQWhJLEVBQWdKLFlBQVVFLENBQTdKLEVBQStKO0FBQUMsY0FBSUMsSUFBRUcsRUFBRVEsT0FBRixDQUFVdEIsRUFBRVEsQ0FBRixDQUFWLENBQU4sQ0FBc0IsT0FBT08sS0FBR0osQ0FBSCxLQUFPLGFBQVdILENBQVgsR0FBYU8sSUFBRSxNQUFmLEdBQXNCLGlCQUFlUCxDQUFmLEtBQW1CTyxJQUFFLEVBQXJCLENBQTdCLEdBQXVELGNBQVlQLENBQVosS0FBZ0JrRixFQUFFakYsQ0FBRixJQUFLaUIsRUFBRVgsQ0FBRixDQUFyQixDQUF2RCxFQUFrRmEsSUFBRSxDQUFDLEdBQUVmLEVBQUVTLE9BQUwsRUFBY0ksRUFBRVgsQ0FBRixDQUFkLEVBQW1CYSxDQUFuQixDQUFGLEdBQXdCRixFQUFFWCxDQUFGLENBQWpIO0FBQXNILGFBQUkwQixJQUFFZixFQUFFbVEsUUFBRixDQUFXM0MsT0FBWCxDQUFtQm5PLENBQW5CLEtBQXVCLENBQTdCLENBQStCLE9BQU9mLEVBQUVRLENBQUYsS0FBTSxZQUFVLE9BQU9SLEVBQUVRLENBQUYsQ0FBdkIsSUFBNkJSLEVBQUVRLENBQUYsRUFBS3NSLFNBQWxDLEtBQThDLFlBQVU5UixFQUFFUSxDQUFGLEVBQUtzUixTQUFmLEdBQXlCclAsSUFBRSxDQUFDLENBQTVCLEdBQThCLFlBQVV6QyxFQUFFUSxDQUFGLEVBQUtzUixTQUFmLEtBQTJCclAsSUFBRSxDQUFDLENBQTlCLENBQTVFLEdBQThHQSxJQUFFYixJQUFFLENBQUMsR0FBRWYsRUFBRVMsT0FBTCxFQUFjLE1BQWQsRUFBcUJNLENBQXJCLENBQUYsR0FBMEIsb0JBQTVCLEdBQWlEQSxJQUFFLENBQUMsR0FBRWYsRUFBRVMsT0FBTCxFQUFjLE1BQWQsRUFBcUJNLENBQXJCLENBQUYsR0FBMEIsMEJBQWhNO0FBQTJOLE9BQW5tQixDQUFQO0FBQTZtQixLQUFsN0IsQ0FBbTdCN0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBWjtBQUFvQixHQUR0MkosRUFDeTJKLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lRLEtBQUksRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SUMsTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsTUFBaEIsQ0FBak4sRUFBTCxFQUErT08sTUFBSyxFQUFDLElBQUcsU0FBSixFQUFjLEtBQUksU0FBbEIsRUFBNEIsS0FBSSxTQUFoQyxFQUEwQyxLQUFJLFNBQTlDLEVBQXdELEtBQUksU0FBNUQsRUFBc0UsS0FBSSxTQUExRSxFQUFvRixLQUFJLFNBQXhGLEVBQWtHLEtBQUksU0FBdEcsRUFBZ0gsS0FBSSxTQUFwSCxFQUE4SCxLQUFJLFNBQWxJLEVBQTRJSixNQUFLLFNBQWpKLEVBQTJKQyxNQUFLLFNBQWhLLEVBQTBLQyxNQUFLLFNBQS9LLEVBQXlMQyxNQUFLLFNBQTlMLEVBQXdNTixVQUFTLENBQUMsRUFBRCxFQUFJLEdBQUosRUFBUSxHQUFSLEVBQVksTUFBWixDQUFqTixFQUFwUCxFQUEwZFEsUUFBTyxFQUFDLElBQUcsU0FBSixFQUFjLEtBQUksU0FBbEIsRUFBNEIsS0FBSSxTQUFoQyxFQUEwQyxLQUFJLFNBQTlDLEVBQXdELEtBQUksU0FBNUQsRUFBc0UsS0FBSSxTQUExRSxFQUFvRixLQUFJLFNBQXhGLEVBQWtHLEtBQUksU0FBdEcsRUFBZ0gsS0FBSSxTQUFwSCxFQUE4SCxLQUFJLFNBQWxJLEVBQTRJTCxNQUFLLFNBQWpKLEVBQTJKQyxNQUFLLFNBQWhLLEVBQTBLQyxNQUFLLFNBQS9LLEVBQXlMQyxNQUFLLFNBQTlMLEVBQXdNTixVQUFTLENBQUMsRUFBRCxFQUFJLEdBQUosRUFBUSxHQUFSLEVBQVksTUFBWixDQUFqTixFQUFqZSxFQUF1c0IsZUFBYyxFQUFDLElBQUcsU0FBSixFQUFjLEtBQUksU0FBbEIsRUFBNEIsS0FBSSxTQUFoQyxFQUEwQyxLQUFJLFNBQTlDLEVBQXdELEtBQUksU0FBNUQsRUFBc0UsS0FBSSxTQUExRSxFQUFvRixLQUFJLFNBQXhGLEVBQWtHLEtBQUksU0FBdEcsRUFBZ0gsS0FBSSxTQUFwSCxFQUE4SCxLQUFJLFNBQWxJLEVBQTRJRyxNQUFLLFNBQWpKLEVBQTJKQyxNQUFLLFNBQWhLLEVBQTBLQyxNQUFLLFNBQS9LLEVBQXlMQyxNQUFLLFNBQTlMLEVBQXdNTixVQUFTLENBQUMsRUFBRCxFQUFJLEdBQUosRUFBUSxHQUFSLEVBQVksTUFBWixDQUFqTixFQUFydEIsRUFBMjdCUyxRQUFPLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNElOLE1BQUssU0FBakosRUFBMkpDLE1BQUssU0FBaEssRUFBMEtDLE1BQUssU0FBL0ssRUFBeUxDLE1BQUssU0FBOUwsRUFBd01OLFVBQVMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxNQUFaLENBQWpOLEVBQWw4QixFQUF3cUNVLE1BQUssRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SVAsTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsR0FBaEIsRUFBb0IsTUFBcEIsQ0FBak4sRUFBN3FDLEVBQTI1QyxjQUFhLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNElHLE1BQUssU0FBakosRUFBMkpDLE1BQUssU0FBaEssRUFBMEtDLE1BQUssU0FBL0ssRUFBeUxDLE1BQUssU0FBOUwsRUFBd01OLFVBQVMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxHQUFaLEVBQWdCLEdBQWhCLEVBQW9CLEdBQXBCLEVBQXdCLE1BQXhCLEVBQStCLE1BQS9CLEVBQXNDLE1BQXRDLENBQWpOLEVBQXg2QyxFQUF3cURXLE1BQUssRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SVIsTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsR0FBaEIsRUFBb0IsR0FBcEIsRUFBd0IsR0FBeEIsRUFBNEIsTUFBNUIsRUFBbUMsTUFBbkMsRUFBMEMsTUFBMUMsRUFBaUQsTUFBakQsQ0FBak4sRUFBN3FELEVBQXc3RFksTUFBSyxFQUFDLElBQUcsU0FBSixFQUFjLEtBQUksU0FBbEIsRUFBNEIsS0FBSSxTQUFoQyxFQUEwQyxLQUFJLFNBQTlDLEVBQXdELEtBQUksU0FBNUQsRUFBc0UsS0FBSSxTQUExRSxFQUFvRixLQUFJLFNBQXhGLEVBQWtHLEtBQUksU0FBdEcsRUFBZ0gsS0FBSSxTQUFwSCxFQUE4SCxLQUFJLFNBQWxJLEVBQTRJVCxNQUFLLFNBQWpKLEVBQTJKQyxNQUFLLFNBQWhLLEVBQTBLQyxNQUFLLFNBQS9LLEVBQXlMQyxNQUFLLFNBQTlMLEVBQXdNTixVQUFTLENBQUMsRUFBRCxFQUFJLEdBQUosRUFBUSxHQUFSLEVBQVksR0FBWixFQUFnQixHQUFoQixFQUFvQixNQUFwQixFQUEyQixNQUEzQixFQUFrQyxNQUFsQyxFQUF5QyxNQUF6QyxDQUFqTixFQUE3N0QsRUFBZ3NFYSxPQUFNLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNElWLE1BQUssU0FBakosRUFBMkpDLE1BQUssU0FBaEssRUFBMEtDLE1BQUssU0FBL0ssRUFBeUxDLE1BQUssU0FBOUwsRUFBd01OLFVBQVMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxHQUFaLEVBQWdCLEdBQWhCLEVBQW9CLEdBQXBCLEVBQXdCLE1BQXhCLEVBQStCLE1BQS9CLEVBQXNDLE1BQXRDLEVBQTZDLE1BQTdDLENBQWpOLEVBQXRzRSxFQUE2OEUsZUFBYyxFQUFDLElBQUcsU0FBSixFQUFjLEtBQUksU0FBbEIsRUFBNEIsS0FBSSxTQUFoQyxFQUEwQyxLQUFJLFNBQTlDLEVBQXdELEtBQUksU0FBNUQsRUFBc0UsS0FBSSxTQUExRSxFQUFvRixLQUFJLFNBQXhGLEVBQWtHLEtBQUksU0FBdEcsRUFBZ0gsS0FBSSxTQUFwSCxFQUE4SCxLQUFJLFNBQWxJLEVBQTRJRyxNQUFLLFNBQWpKLEVBQTJKQyxNQUFLLFNBQWhLLEVBQTBLQyxNQUFLLFNBQS9LLEVBQXlMQyxNQUFLLFNBQTlMLEVBQXdNTixVQUFTLENBQUMsRUFBRCxFQUFJLEdBQUosRUFBUSxHQUFSLEVBQVksR0FBWixFQUFnQixHQUFoQixFQUFvQixHQUFwQixFQUF3QixHQUF4QixFQUE0QixNQUE1QixFQUFtQyxNQUFuQyxFQUEwQyxNQUExQyxFQUFpRCxNQUFqRCxDQUFqTixFQUEzOUUsRUFBc3VGYyxNQUFLLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNElYLE1BQUssU0FBakosRUFBMkpDLE1BQUssU0FBaEssRUFBMEtDLE1BQUssU0FBL0ssRUFBeUxDLE1BQUssU0FBOUwsRUFBd01OLFVBQVMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxHQUFaLEVBQWdCLEdBQWhCLEVBQW9CLEdBQXBCLEVBQXdCLEdBQXhCLEVBQTRCLEdBQTVCLEVBQWdDLEdBQWhDLEVBQW9DLE1BQXBDLEVBQTJDLE1BQTNDLEVBQWtELE1BQWxELEVBQXlELE1BQXpELENBQWpOLEVBQTN1RixFQUE4L0ZlLFFBQU8sRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SVosTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsR0FBaEIsRUFBb0IsR0FBcEIsRUFBd0IsR0FBeEIsRUFBNEIsR0FBNUIsRUFBZ0MsR0FBaEMsRUFBb0MsR0FBcEMsRUFBd0MsTUFBeEMsRUFBK0MsTUFBL0MsRUFBc0QsTUFBdEQsRUFBNkQsTUFBN0QsQ0FBak4sRUFBcmdHLEVBQTR4R2dCLE9BQU0sRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SWIsTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsR0FBaEIsRUFBb0IsR0FBcEIsRUFBd0IsR0FBeEIsRUFBNEIsR0FBNUIsRUFBZ0MsR0FBaEMsRUFBb0MsR0FBcEMsRUFBd0MsTUFBeEMsRUFBK0MsTUFBL0MsRUFBc0QsTUFBdEQsRUFBNkQsTUFBN0QsQ0FBak4sRUFBbHlHLEVBQXlqSGlCLFFBQU8sRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SWQsTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsR0FBaEIsRUFBb0IsR0FBcEIsRUFBd0IsR0FBeEIsRUFBNEIsR0FBNUIsRUFBZ0MsTUFBaEMsRUFBdUMsTUFBdkMsRUFBOEMsTUFBOUMsRUFBcUQsTUFBckQsQ0FBak4sRUFBaGtILEVBQSswSCxlQUFjLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNElHLE1BQUssU0FBakosRUFBMkpDLE1BQUssU0FBaEssRUFBMEtDLE1BQUssU0FBL0ssRUFBeUxDLE1BQUssU0FBOUwsRUFBd01OLFVBQVMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxHQUFaLEVBQWdCLEdBQWhCLEVBQW9CLE1BQXBCLEVBQTJCLE1BQTNCLENBQWpOLEVBQTcxSCxFQUFrbElrQixPQUFNLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNElmLE1BQUssU0FBakosRUFBMkpDLE1BQUssU0FBaEssRUFBMEtDLE1BQUssU0FBL0ssRUFBeUxDLE1BQUssU0FBOUwsRUFBd01OLFVBQVMsQ0FBQyxFQUFELEVBQUksR0FBSixFQUFRLEdBQVIsRUFBWSxNQUFaLEVBQW1CLE1BQW5CLEVBQTBCLE1BQTFCLEVBQWlDLE1BQWpDLENBQWpOLEVBQXhsSSxFQUFtMUltQixNQUFLLEVBQUMsSUFBRyxTQUFKLEVBQWMsS0FBSSxTQUFsQixFQUE0QixLQUFJLFNBQWhDLEVBQTBDLEtBQUksU0FBOUMsRUFBd0QsS0FBSSxTQUE1RCxFQUFzRSxLQUFJLFNBQTFFLEVBQW9GLEtBQUksU0FBeEYsRUFBa0csS0FBSSxTQUF0RyxFQUFnSCxLQUFJLFNBQXBILEVBQThILEtBQUksU0FBbEksRUFBNEloQixNQUFLLE1BQWpKLEVBQXdKQyxNQUFLLFNBQTdKLEVBQXVLQyxNQUFLLFNBQTVLLEVBQXNMQyxNQUFLLFNBQTNMLEVBQXFNTixVQUFTLENBQUMsRUFBRCxFQUFJLEdBQUosRUFBUSxHQUFSLEVBQVksR0FBWixFQUFnQixHQUFoQixFQUFvQixHQUFwQixFQUF3QixNQUF4QixDQUE5TSxFQUF4MUksRUFBdWtKLGFBQVksRUFBQyxJQUFHLFNBQUosRUFBYyxLQUFJLFNBQWxCLEVBQTRCLEtBQUksU0FBaEMsRUFBMEMsS0FBSSxTQUE5QyxFQUF3RCxLQUFJLFNBQTVELEVBQXNFLEtBQUksU0FBMUUsRUFBb0YsS0FBSSxTQUF4RixFQUFrRyxLQUFJLFNBQXRHLEVBQWdILEtBQUksU0FBcEgsRUFBOEgsS0FBSSxTQUFsSSxFQUE0SUcsTUFBSyxTQUFqSixFQUEySkMsTUFBSyxTQUFoSyxFQUEwS0MsTUFBSyxTQUEvSyxFQUF5TEMsTUFBSyxTQUE5TCxFQUF3TU4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsTUFBaEIsRUFBdUIsTUFBdkIsRUFBOEIsTUFBOUIsRUFBcUMsTUFBckMsQ0FBak4sRUFBbmxKLEVBQWsxSm9CLE9BQU0sRUFBQyxJQUFHLE1BQUosRUFBVyxLQUFJLE1BQWYsRUFBc0IsS0FBSSxNQUExQixFQUFpQyxLQUFJLE1BQXJDLEVBQTRDLEtBQUksTUFBaEQsRUFBdUQsS0FBSSxNQUEzRCxFQUFrRSxLQUFJLE1BQXRFLEVBQTZFLEtBQUksTUFBakYsRUFBd0YsS0FBSSxNQUE1RixFQUFtRyxLQUFJLE1BQXZHLEVBQThHakIsTUFBSyxNQUFuSCxFQUEwSEMsTUFBSyxNQUEvSCxFQUFzSUMsTUFBSyxNQUEzSSxFQUFrSkMsTUFBSyxNQUF2SixFQUE4Sk4sVUFBUyxDQUFDLEVBQUQsRUFBSSxHQUFKLEVBQVEsR0FBUixFQUFZLEdBQVosRUFBZ0IsR0FBaEIsRUFBb0IsR0FBcEIsRUFBd0IsR0FBeEIsRUFBNEIsR0FBNUIsRUFBZ0MsR0FBaEMsRUFBb0MsR0FBcEMsRUFBd0MsTUFBeEMsRUFBK0MsTUFBL0MsRUFBc0QsTUFBdEQsRUFBNkQsTUFBN0QsQ0FBdkssRUFBeDFKLEVBQXFrS3FCLE9BQU0sRUFBQyxJQUFHLE1BQUosRUFBVyxLQUFJLE1BQWYsRUFBc0IsS0FBSSxNQUExQixFQUFpQyxLQUFJLE1BQXJDLEVBQTRDLEtBQUksTUFBaEQsRUFBdUQsS0FBSSxNQUEzRCxFQUFrRSxLQUFJLE1BQXRFLEVBQTZFLEtBQUksTUFBakYsRUFBd0YsS0FBSSxNQUE1RixFQUFtRyxLQUFJLE1BQXZHLEVBQThHbEIsTUFBSyxNQUFuSCxFQUEwSEMsTUFBSyxNQUEvSCxFQUFzSUMsTUFBSyxNQUEzSSxFQUFrSkMsTUFBSyxNQUF2SixFQUE4Sk4sVUFBUyxFQUF2SyxFQUEza0ssRUFBM0QsRUFBa3pLOVIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBOXpLO0FBQXMwSyxHQUQ1c1UsRUFDK3NVLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsVUFBSVMsSUFBRSxFQUFOO0FBQUEsVUFBU0QsSUFBRSxFQUFYO0FBQUEsVUFBY0UsSUFBRSxFQUFoQjtBQUFBLFVBQW1CaUIsSUFBRTVCLEVBQUVzRyxRQUFGLEdBQWE4TSxLQUFiLENBQW1CLDZCQUFuQixDQUFyQixDQUF1RSxJQUFHLENBQUN4UixDQUFKLEVBQU0sTUFBTSxJQUFJeVIsS0FBSixDQUFVLGtCQUFnQnJULENBQTFCLENBQU4sQ0FBbUMsSUFBR0EsSUFBRTRCLEVBQUUsQ0FBRixDQUFGLEVBQU8sTUFBSTVCLEVBQUU4RixNQUFoQixFQUF1QnBGLElBQUU0UyxTQUFTdFQsRUFBRXVULFNBQUYsQ0FBWSxDQUFaLEVBQWMsQ0FBZCxDQUFULEVBQTBCLEVBQTFCLENBQUYsRUFBZ0M5UyxJQUFFNlMsU0FBU3RULEVBQUV1VCxTQUFGLENBQVksQ0FBWixFQUFjLENBQWQsQ0FBVCxFQUEwQixFQUExQixDQUFsQyxFQUFnRTVTLElBQUUyUyxTQUFTdFQsRUFBRXVULFNBQUYsQ0FBWSxDQUFaLEVBQWMsQ0FBZCxDQUFULEVBQTBCLEVBQTFCLENBQWxFLENBQXZCLEtBQTRILElBQUcsTUFBSXZULEVBQUU4RixNQUFULEVBQWdCO0FBQUMsWUFBSWpFLElBQUU3QixFQUFFdVQsU0FBRixDQUFZLENBQVosRUFBYyxDQUFkLENBQU47QUFBQSxZQUF1QjVSLElBQUUzQixFQUFFdVQsU0FBRixDQUFZLENBQVosRUFBYyxDQUFkLENBQXpCO0FBQUEsWUFBMEN2UyxJQUFFaEIsRUFBRXVULFNBQUYsQ0FBWSxDQUFaLEVBQWMsQ0FBZCxDQUE1QyxDQUE2RDdTLElBQUU0UyxTQUFTelIsSUFBRUEsQ0FBWCxFQUFhLEVBQWIsQ0FBRixFQUFtQnBCLElBQUU2UyxTQUFTM1IsSUFBRUEsQ0FBWCxFQUFhLEVBQWIsQ0FBckIsRUFBc0NoQixJQUFFMlMsU0FBU3RTLElBQUVBLENBQVgsRUFBYSxFQUFiLENBQXhDO0FBQXlELGNBQU9mLEtBQUdBLElBQUUsQ0FBRixLQUFNQSxLQUFHLEdBQVQsR0FBYyxVQUFRUyxDQUFSLEdBQVUsSUFBVixHQUFlRCxDQUFmLEdBQWlCLElBQWpCLEdBQXNCRSxDQUF0QixHQUF3QixJQUF4QixHQUE2QlYsQ0FBN0IsR0FBK0IsR0FBaEQsSUFBcUQsU0FBT1MsQ0FBUCxHQUFTLElBQVQsR0FBY0QsQ0FBZCxHQUFnQixJQUFoQixHQUFxQkUsQ0FBckIsR0FBdUIsR0FBbkY7QUFBdUYsS0FBbmhCLEVBQW9oQlgsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBaGlCO0FBQXdpQixHQURweFYsRUFDdXhWLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQzZCLE9BQU0sRUFBQ29HLFVBQVMsRUFBQ0MsTUFBS0YsTUFBTixFQUFhaEksU0FBUSxHQUFyQixFQUFWLEVBQW9DbUksVUFBU0MsT0FBN0MsRUFBcUQ2SixPQUFNLEVBQUMvSixNQUFLdkYsUUFBTixFQUEzRCxFQUEyRXVQLFlBQVd2UCxRQUF0RixFQUErRndQLE1BQUssRUFBQ2pLLE1BQUs0QyxLQUFOLEVBQVk5SyxTQUFRLG9CQUFVO0FBQUMsbUJBQU0sRUFBTjtBQUFTLFdBQXhDLEVBQXBHLEVBQThJb1MsVUFBUyxFQUFDbEssTUFBS0YsTUFBTixFQUFhaEksU0FBUSxDQUFyQixFQUF2SixFQUErS3lHLE1BQUszRSxNQUFwTCxFQUEyTHVRLHFCQUFvQjFQLFFBQS9NLEVBQXdOMlAsZ0JBQWUsRUFBQ3BLLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLE1BQXJCLEVBQXZPLEVBQW9RdVMsWUFBVyxFQUFDckssTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsR0FBckIsRUFBL1EsRUFBeVNxSSxVQUFTRCxPQUFsVCxFQUFQLEVBQWtVWSxTQUFRLEVBQUNjLFNBQVEsbUJBQVU7QUFBQyxlQUFLYixlQUFMLEtBQXVCLEtBQUtBLGVBQUwsQ0FBcUJjLFNBQXJCLEdBQStCLENBQUMsQ0FBdkQ7QUFBMEQsU0FBOUUsRUFBK0VDLFFBQU8sa0JBQVU7QUFBQyxlQUFLZixlQUFMLENBQXFCYyxTQUFyQixHQUErQixDQUFDLENBQWhDLEVBQWtDLEtBQUtSLGNBQUwsRUFBbEM7QUFBd0QsU0FBekosRUFBMEppSixhQUFZLHVCQUFVO0FBQUMsaUJBQU8sS0FBS3ZKLGVBQUwsR0FBcUIsS0FBS3dKLFdBQUwsSUFBa0IsS0FBS1AsVUFBdkIsR0FBa0MsS0FBS1EsaUJBQUwsQ0FBdUIsa0VBQXZCLENBQWxDLEdBQTZILENBQUMsS0FBS1QsS0FBTixJQUFhLEtBQUtRLFdBQWxCLEdBQThCLEtBQUtDLGlCQUFMLENBQXVCLHdDQUF2QixDQUE5QixHQUErRixLQUFLLENBQXRQLEdBQXdQLEtBQUtBLGlCQUFMLENBQXVCLHNEQUF2QixDQUEvUDtBQUE4VSxTQUEvZixFQUFnZ0JBLG1CQUFrQiwyQkFBU2pVLENBQVQsRUFBVztBQUFDLGdCQUFNLEtBQUtrVSxRQUFMLElBQWdCLElBQUliLEtBQUosQ0FBVXJULENBQVYsQ0FBdEI7QUFBbUMsU0FBamtCLEVBQTFVLEVBQTNELEVBQXk4QkEsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBcjlCO0FBQTY5QixHQURqeFgsRUFDb3hYLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJMUMsSUFBRSxDQUFOO0FBQUEsUUFBUUUsSUFBRSxTQUFGQSxDQUFFLENBQVNYLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsRUFBRWtVLEdBQUYsSUFBTzFULElBQUU2UyxTQUFTakcsaUJBQWlCck4sQ0FBakIsRUFBb0JvVSxTQUE3QixFQUF1QyxFQUF2QyxDQUFoQjtBQUEyRCxLQUFuRjtBQUFBLFFBQW9GeFMsSUFBRSxTQUFGQSxDQUFFLENBQVM1QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQU9BLEVBQUVrVSxHQUFGLEdBQU1uVSxFQUFFcVUsWUFBUixHQUFxQjVULENBQXJCLElBQXdCc0QsT0FBT3VRLFdBQVAsR0FBbUJoQixTQUFTakcsaUJBQWlCck4sQ0FBakIsRUFBb0JvVSxTQUE3QixFQUF1QyxFQUF2QyxDQUFsRDtBQUE2RixLQUFqTTtBQUFBLFFBQWtNdlMsSUFBRSxTQUFGQSxDQUFFLENBQVM3QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQU9BLEVBQUVzVSxJQUFGLElBQVE5VCxJQUFFNlMsU0FBU2pHLGlCQUFpQnJOLENBQWpCLEVBQW9Cd1UsVUFBN0IsRUFBd0MsRUFBeEMsQ0FBakI7QUFBNkQsS0FBL1E7QUFBQSxRQUFnUjdTLElBQUUsU0FBRkEsQ0FBRSxDQUFTM0IsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxhQUFPQSxFQUFFc1UsSUFBRixHQUFPdlUsRUFBRTZOLFdBQVQsR0FBcUJwTixDQUFyQixJQUF3QnNELE9BQU8wUSxVQUFQLEdBQWtCbkIsU0FBU2pHLGlCQUFpQnJOLENBQWpCLEVBQW9Cd1UsVUFBN0IsRUFBd0MsRUFBeEMsQ0FBakQ7QUFBNkYsS0FBN1g7QUFBQSxRQUE4WHhULElBQUUsU0FBRkEsQ0FBRSxDQUFTaEIsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFJUyxJQUFFMk0saUJBQWlCck4sQ0FBakIsQ0FBTixDQUEwQixPQUFPVyxFQUFFWCxDQUFGLEVBQUlDLENBQUosTUFBU0EsRUFBRWtVLEdBQUYsR0FBTTFULElBQUU2UyxTQUFTNVMsRUFBRTBULFNBQVgsRUFBcUIsRUFBckIsQ0FBakIsR0FBMkN2UyxFQUFFN0IsQ0FBRixFQUFJQyxDQUFKLE1BQVNBLEVBQUVzVSxJQUFGLEdBQU85VCxJQUFFNlMsU0FBUzVTLEVBQUU4VCxVQUFYLEVBQXNCLEVBQXRCLENBQWxCLENBQTNDLEVBQXdGN1MsRUFBRTNCLENBQUYsRUFBSUMsQ0FBSixNQUFTQSxFQUFFc1UsSUFBRixHQUFPeFEsT0FBTzBRLFVBQVAsR0FBa0JoVSxDQUFsQixHQUFvQlQsRUFBRTZOLFdBQXRCLEdBQWtDeUYsU0FBUzVTLEVBQUU4VCxVQUFYLEVBQXNCLEVBQXRCLENBQWxELENBQXhGLEVBQXFLNVMsRUFBRTVCLENBQUYsRUFBSUMsQ0FBSixNQUFTQSxFQUFFa1UsR0FBRixHQUFNcFEsT0FBT3VRLFdBQVAsR0FBbUI3VCxDQUFuQixHQUFxQlQsRUFBRXFVLFlBQXZCLEdBQW9DZixTQUFTNVMsRUFBRTBULFNBQVgsRUFBcUIsRUFBckIsQ0FBbkQsQ0FBckssRUFBa1BuVSxDQUF6UDtBQUEyUCxLQUFucUIsQ0FBb3FCQSxFQUFFc0IsT0FBRixHQUFVUCxDQUFWLEVBQVloQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUF4QjtBQUFnQyxHQUR0aVosRUFDeWlaLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFdBQU4sRUFBa0IwTSxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQXpCLEVBQVYsRUFBZ0R2QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUE1RDtBQUFvRSxHQURod1osRUFDbXdaLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssYUFBTixFQUFvQnVDLFNBQVEsRUFBQy9CLE9BQU0saUJBQVU7QUFBQyxlQUFLcUMsS0FBTCxDQUFXLE9BQVg7QUFBb0IsU0FBdEMsRUFBNUIsRUFBM0QsRUFBZ0k3SyxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUE1STtBQUFvSixHQURwN1osRUFDdTdaLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGVBQU4sRUFBc0I1RSxPQUFNLEVBQUN1UixTQUFRaEwsT0FBVCxFQUE1QixFQUE4QytLLFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBckQsRUFBaUUrQixVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU8sS0FBS0QsT0FBTCxHQUFhLFVBQWIsR0FBd0IsVUFBL0I7QUFBMEMsU0FBOUQsRUFBMUUsRUFBMElwSyxTQUFRLEVBQUNzSyxXQUFVLG1CQUFTN1UsQ0FBVCxFQUFXO0FBQUMsZUFBSzhVLFNBQUwsQ0FBZW5KLE9BQWYsQ0FBd0IsVUFBUzFMLENBQVQsRUFBVztBQUFDQSxjQUFFOFUsTUFBRixHQUFTOVUsTUFBSUQsQ0FBYjtBQUFlLFdBQW5ELEdBQXNELEtBQUs2SyxLQUFMLENBQVcsUUFBWCxFQUFvQixLQUFLaUssU0FBTCxDQUFlRSxTQUFmLENBQTBCLFVBQVMvVSxDQUFULEVBQVc7QUFBQyxtQkFBT0EsTUFBSUQsQ0FBWDtBQUFhLFdBQW5ELENBQXBCLENBQXREO0FBQWlJLFNBQXhKLEVBQWxKLEVBQVYsRUFBdVRBLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQW5VO0FBQTJVLEdBRHI1YSxFQUN3NWEsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxvQkFBTixFQUEyQjVFLE9BQU0sRUFBQzZSLFFBQU81UixNQUFSLEVBQWU2UixXQUFVN1IsTUFBekIsRUFBZ0M4UixXQUFVOVIsTUFBMUMsRUFBaUQrUixVQUFTekwsT0FBMUQsRUFBa0VELFVBQVNDLE9BQTNFLEVBQW1GOEYsTUFBS3BNLE1BQXhGLEVBQWpDLEVBQWlJMkcsTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQytLLFFBQU8sQ0FBQyxDQUFULEVBQU47QUFBa0IsT0FBbkssRUFBb0t6UixVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxhQUFZLEtBQUtHLE1BQWxCLEVBQU47QUFBZ0MsU0FBcEQsRUFBN0ssRUFBbU9uUixPQUFNLEVBQUN3UixVQUFTLGtCQUFTcFYsQ0FBVCxFQUFXO0FBQUMsZUFBSzZVLFNBQUwsQ0FBZTdVLENBQWY7QUFBa0IsU0FBeEMsRUFBek8sRUFBbVJ1SyxTQUFRLEVBQUNzSyxXQUFVLG1CQUFTN1UsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsZUFBRyxLQUFLa0QsT0FBTCxDQUFhMlIsU0FBYixDQUF1QixJQUF2QixDQUFILEVBQWdDNVUsS0FBRyxLQUFLNEssS0FBTCxDQUFXLE9BQVgsRUFBbUI1SyxDQUFuQixDQUFuQztBQUF5RCxTQUFsRixFQUEzUixFQUErV29WLFNBQVEsbUJBQVU7QUFBQyxZQUFHLENBQUMsS0FBS25TLE9BQUwsQ0FBYXNCLEdBQWIsQ0FBaUJFLFNBQWpCLENBQTJCQyxRQUEzQixDQUFvQyxlQUFwQyxDQUFKLEVBQXlELE1BQU0sS0FBS3VQLFFBQUwsSUFBZ0IsSUFBSWIsS0FBSixDQUFVLDJEQUFWLENBQXRCLENBQTZGLEtBQUsrQixRQUFMLEtBQWdCLEtBQUtMLE1BQUwsR0FBWSxDQUFDLENBQTdCO0FBQWdDLE9BQXhqQixFQUEzRCxFQUFxbkIvVSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFqb0I7QUFBeW9CLEdBRDlqYyxFQUNpa2MsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV2tCLElBQUVuQixFQUFFRSxDQUFGLENBQWIsQ0FBa0JWLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssV0FBTixFQUFrQjVFLE9BQU0sRUFBQ3FNLE1BQUtwTSxNQUFOLEVBQWFpUyxRQUFPalMsTUFBcEIsRUFBMkJrUyxLQUFJbFMsTUFBL0IsRUFBc0NvRyxNQUFLLEVBQUNBLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLFFBQXJCLEVBQTNDLEVBQTBFbUksVUFBU0MsT0FBbkYsRUFBeEIsRUFBb0grSyxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQTNILEVBQXVJK0IsVUFBUyxFQUFDa1MsUUFBTyxrQkFBVTtBQUFDLGlCQUFNLGFBQVcsS0FBS0YsTUFBaEIsR0FBdUIsS0FBS0MsR0FBTCxJQUFVLFVBQWpDLEdBQTRDLEtBQUtBLEdBQXZEO0FBQTJELFNBQTlFLEVBQWhKLEVBQVYsRUFBMk92VixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUF2UDtBQUErUCxHQURuOWMsRUFDczljLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFLEtBQUssQ0FBekIsQ0FBMkI1QixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGtCQUFOLEVBQXlCNUUsT0FBTSxFQUFDcVMsVUFBUzlMLE9BQVYsRUFBL0IsRUFBa0QrSyxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQXpELEVBQXFFOFQsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLOFUsU0FBTCxDQUFlbkosT0FBZixDQUF3QixVQUFTMUwsQ0FBVCxFQUFXO0FBQUMsY0FBSVMsSUFBRVQsRUFBRXVFLEdBQVI7QUFBQSxjQUFZL0QsSUFBRSxXQUFkLENBQTBCb0IsSUFBRSxhQUFVO0FBQUM3QixjQUFFeVYsUUFBRixJQUFZelYsRUFBRThVLFNBQUYsQ0FBWW5KLE9BQVosQ0FBcUIsVUFBUzNMLENBQVQsRUFBVztBQUFDQSxnQkFBRXdFLEdBQUYsQ0FBTUUsU0FBTixDQUFnQmtNLE1BQWhCLENBQXVCblEsQ0FBdkI7QUFBMEIsYUFBM0QsR0FBOERDLEVBQUVnRSxTQUFGLENBQVluQyxHQUFaLENBQWdCOUIsQ0FBaEIsQ0FBMUUsSUFBOEZDLEVBQUVnRSxTQUFGLENBQVlnUixNQUFaLENBQW1CalYsQ0FBbkIsQ0FBOUY7QUFBb0gsV0FBakksRUFBa0lDLEtBQUdBLEVBQUVnRSxTQUFGLENBQVlDLFFBQVosQ0FBcUIsV0FBckIsQ0FBSCxJQUFzQ2pFLEVBQUVvTyxnQkFBRixDQUFtQixPQUFuQixFQUEyQmpOLENBQTNCLENBQXhLO0FBQXNNLFNBQXBRO0FBQXVRLE9BQTFXLEVBQTJXOFQsZUFBYyx5QkFBVTtBQUFDLGFBQUtiLFNBQUwsQ0FBZW5KLE9BQWYsQ0FBd0IsVUFBUzNMLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUVELEVBQUV3RSxHQUFSLENBQVl2RSxLQUFHQSxFQUFFeUUsU0FBRixDQUFZQyxRQUFaLENBQXFCLFdBQXJCLENBQUgsSUFBc0MxRSxFQUFFd08sbUJBQUYsQ0FBc0IsT0FBdEIsRUFBOEI1TSxDQUE5QixDQUF0QztBQUF1RSxTQUF2SDtBQUEwSCxPQUE5ZixFQUFWLEVBQTBnQjdCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXRoQjtBQUE4aEIsR0FEaHBlLEVBQ21wZSxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBYixDQUFrQlYsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxTQUFOLEVBQWdCNUUsT0FBTSxFQUFDd1MsYUFBWWpNLE9BQWIsRUFBdEIsRUFBNEMrSyxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQW5ELEVBQStEK0IsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsaUJBQWdCLEtBQUtnQixXQUF0QixFQUFOO0FBQXlDLFNBQTdELEVBQXhFLEVBQVYsRUFBa0o1VixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUE5SjtBQUFzSyxHQUQ1OGUsRUFDKzhlLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssaUJBQU4sRUFBM0QsRUFBb0ZoSSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFoRztBQUF3RyxHQURwbGYsRUFDdWxmLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssY0FBTixFQUFxQjVFLE9BQU0sRUFBQ3lTLFNBQVFsTSxPQUFULEVBQTNCLEVBQTZDckcsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsWUFBVyxLQUFLaUIsT0FBakIsRUFBTjtBQUFnQyxTQUFwRCxFQUF0RCxFQUEzRCxFQUF3SzdWLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXBMO0FBQTRMLEdBRGh6ZixFQUNtemYsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxpQkFBTixFQUEzRCxFQUFvRmhJLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQWhHO0FBQXdHLEdBRHg3ZixFQUMyN2YsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxnQkFBTixFQUF1QmdDLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUM4TCxTQUFRLElBQVQsRUFBY0MsU0FBUSxJQUF0QixFQUFOO0FBQWtDLE9BQXpFLEVBQTBFeEwsU0FBUSxFQUFDbUwsUUFBTyxrQkFBVTtBQUFDLGVBQUtNLEtBQUwsQ0FBV2xHLE1BQVgsQ0FBa0JwTCxTQUFsQixDQUE0QmdSLE1BQTVCLENBQW1DLFdBQW5DO0FBQWdELFNBQW5FLEVBQWxGLEVBQXVKTCxTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsSUFBTixDQUFXK0QsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDOUksWUFBRThWLE9BQUYsR0FBVTlWLEVBQUV3RSxHQUFGLENBQU1nTSxhQUFOLENBQW9CLHFCQUFwQixDQUFWLEVBQXFEeFEsRUFBRStWLE9BQUYsR0FBVS9WLEVBQUV3RSxHQUFGLENBQU1nTSxhQUFOLENBQW9CLGtCQUFwQixDQUEvRCxFQUF1R3hRLEVBQUUrVixPQUFGLElBQVcvVixFQUFFOFYsT0FBRixDQUFVaEgsZ0JBQVYsQ0FBMkIsT0FBM0IsRUFBbUM5TyxFQUFFMFYsTUFBckMsQ0FBbEg7QUFBK0osU0FBN0wsRUFBK0wsR0FBL0w7QUFBb00sT0FBelgsRUFBMFhPLFdBQVUscUJBQVU7QUFBQyxhQUFLRixPQUFMLElBQWMsS0FBS0QsT0FBTCxDQUFhckgsbUJBQWIsQ0FBaUMsT0FBakMsRUFBeUMsS0FBS2lILE1BQTlDLENBQWQ7QUFBb0UsT0FBbmQsRUFBM0QsRUFBZ2hCMVYsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBNWhCO0FBQW9pQixHQUQ1L2dCLEVBQysvZ0IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxnQkFBTixFQUEzRCxFQUFtRmhJLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQS9GO0FBQXVHLEdBRG5vaEIsRUFDc29oQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLHFCQUFOLEVBQTRCcU4sU0FBUSxtQkFBVTtBQUFDLGFBQUthLGFBQUwsR0FBbUIsS0FBS2hULE9BQUwsQ0FBYXNCLEdBQWIsQ0FBaUJFLFNBQXBDLEVBQThDLEtBQUt3UixhQUFMLENBQW1CdlIsUUFBbkIsQ0FBNEIsZ0JBQTVCLE1BQWdELEtBQUt3UixZQUFMLEdBQWtCLENBQUMsQ0FBbkIsRUFBcUIsS0FBS0QsYUFBTCxDQUFtQjNULEdBQW5CLENBQXVCLHFCQUF2QixDQUFyRSxDQUE5QztBQUFrSyxPQUFqTixFQUFrTjBULFdBQVUscUJBQVU7QUFBQyxhQUFLQyxhQUFMLENBQW1CdEYsTUFBbkIsQ0FBMEIscUJBQTFCO0FBQWlELE9BQXhSLEVBQTNELEVBQXFWNVEsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBalc7QUFBeVcsR0FENWdpQixFQUMrZ2lCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssZUFBTixFQUFzQjVFLE9BQU0sRUFBQ2dULFNBQVEvUyxNQUFULEVBQWdCZ1QsVUFBUzFNLE9BQXpCLEVBQWlDMk0sT0FBTTNNLE9BQXZDLEVBQTVCLEVBQTRFckcsVUFBUyxFQUFDc1IsU0FBUSxTQUFTNVUsQ0FBVCxHQUFZO0FBQUMsY0FBSUEsSUFBRSxFQUFOLENBQVMsSUFBRyxLQUFLb1csT0FBUixFQUFnQjtBQUFDLGdCQUFJblcsSUFBRSxFQUFOLENBQVMsS0FBS21XLE9BQUwsQ0FBYWpILE9BQWIsQ0FBcUIsR0FBckIsTUFBNEIsQ0FBQyxDQUE3QixHQUErQmxQLElBQUUsS0FBS21XLE9BQUwsQ0FBYTdQLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBakMsR0FBeUQsS0FBSzZQLE9BQUwsQ0FBYWpILE9BQWIsQ0FBcUIsR0FBckIsTUFBNEIsQ0FBQyxDQUE3QixLQUFpQ2xQLElBQUUsS0FBS21XLE9BQUwsQ0FBYTdQLEtBQWIsQ0FBbUIsR0FBbkIsQ0FBbkMsQ0FBekQsRUFBcUgsTUFBSXRHLEVBQUU2RixNQUFOLEtBQWU5RixFQUFFLFFBQU1DLEVBQUUsQ0FBRixDQUFOLEdBQVcsR0FBWCxHQUFlQSxFQUFFLENBQUYsQ0FBakIsSUFBdUIsQ0FBQyxDQUF2QyxDQUFySDtBQUErSixrQkFBTSxDQUFDLEtBQUtvVyxRQUFMLElBQWUsS0FBS0MsS0FBckIsTUFBOEJ0VyxJQUFFLEVBQUMsYUFBWSxLQUFLcVcsUUFBbEIsRUFBMkIsVUFBUyxLQUFLQyxLQUF6QyxFQUFoQyxHQUFpRnRXLENBQXZGO0FBQXlGLFNBQWpULEVBQXJGLEVBQTNELEVBQW9jQSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFoZDtBQUF3ZCxHQURwZ2pCLEVBQ3VnakIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyx1QkFBTixFQUEzRCxFQUEwRmhJLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXRHO0FBQThHLEdBRGxwakIsRUFDcXBqQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZCxDQUFtQlYsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxxQkFBTixFQUE0QjVFLE9BQU0sRUFBQ21ULGFBQVk1TSxPQUFiLEVBQXFCNk0sU0FBUTdNLE9BQTdCLEVBQWxDLEVBQXdFSyxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDeU0sWUFBVyxFQUFaLEVBQU47QUFBc0IsT0FBOUcsRUFBK0duVCxVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxpQkFBZ0IsS0FBSzJCLFdBQXRCLEVBQWtDLFlBQVcsS0FBS0MsT0FBbEQsRUFBTjtBQUFpRSxTQUFyRixFQUFzRjFKLFFBQU8sa0JBQVU7QUFBQyxpQkFBTSxFQUFDNEUsWUFBVyxLQUFLK0UsVUFBakIsRUFBTjtBQUFtQyxTQUEzSSxFQUF4SCxFQUFxUWxNLFNBQVEsRUFBQ21NLGlCQUFnQix5QkFBUzFXLENBQVQsRUFBVztBQUFDLGVBQUtnVyxLQUFMLENBQVdXLFFBQVgsS0FBc0IsS0FBS0YsVUFBTCxHQUFnQixvRUFBa0V6VyxJQUFFLENBQXBFLEdBQXNFLHVCQUF0RSxHQUE4RkEsQ0FBOUYsR0FBZ0csU0FBdEk7QUFBaUosU0FBOUssRUFBK0s0VyxpQkFBZ0IseUJBQVM1VyxDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLEtBQUt1RSxHQUFMLENBQVNnTSxhQUFULENBQXVCLGVBQXZCLENBQU4sQ0FBOEN2USxNQUFJQSxFQUFFbUgsS0FBRixDQUFRc0ssVUFBUixHQUFtQixtQkFBaUIxUixDQUFqQixHQUFtQixHQUExQztBQUErQyxTQUF4UyxFQUE3USxFQUF1akJxVixTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUUsYUFBVTtBQUFDLGNBQUlBLElBQUU0RixVQUFVQyxNQUFWLEdBQWlCLENBQWpCLElBQW9CLEtBQUssQ0FBTCxLQUFTRCxVQUFVLENBQVYsQ0FBN0IsR0FBMENBLFVBQVUsQ0FBVixDQUExQyxHQUF1RCxFQUE3RCxDQUFnRTdGLEVBQUV1VyxXQUFGLEdBQWN2VyxFQUFFMFcsZUFBRixDQUFrQnpXLENBQWxCLENBQWQsR0FBbUNELEVBQUV3VyxPQUFGLElBQVd4VyxFQUFFNFcsZUFBRixDQUFrQjNXLENBQWxCLENBQTlDO0FBQW1FLFNBQTNKO0FBQUEsWUFBNEpTLElBQUUsS0FBSzhELEdBQUwsQ0FBU2dNLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBOUosQ0FBNEw5UCxNQUFJLEtBQUs2VixXQUFMLElBQWtCLEtBQUtDLE9BQTNCLEtBQXFDLENBQUMsR0FBRTVVLEVBQUVMLE9BQUwsRUFBY2IsQ0FBZCxFQUFpQixVQUFTVixDQUFULEVBQVc7QUFBQyxjQUFJVSxJQUFFLEdBQU47QUFBQSxjQUFVRCxJQUFFLENBQUMsTUFBSXVELEtBQUs2UyxHQUFMLENBQVNuVyxJQUFFVixDQUFYLENBQUosR0FBa0JVLENBQWxCLEdBQW9CLEVBQXJCLElBQXlCLEdBQXJDLENBQXlDRCxLQUFHLEVBQUgsS0FBUUEsSUFBRSxFQUFWLEdBQWNSLEVBQUVRLENBQUYsQ0FBZDtBQUFtQixTQUF6RixFQUEyRlIsQ0FBM0YsQ0FBckM7QUFBbUksT0FBejRCLEVBQVYsRUFBcTVCRCxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFqNkI7QUFBeTZCLEdBRGx0bEIsRUFDcXRsQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBYixDQUFrQlYsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxhQUFOLEVBQW9CNUUsT0FBTSxFQUFDNEUsTUFBSzNFLE1BQU4sRUFBYUYsT0FBTSxDQUFDRSxNQUFELEVBQVFzRyxPQUFSLENBQW5CLEVBQW9DbUgsSUFBR3pOLE1BQXZDLEVBQThDcUcsVUFBU0MsT0FBdkQsRUFBMUIsRUFBMEYrSyxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQWpHLEVBQTZHeUksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQzhNLFNBQVEsS0FBSzNULEtBQUwsSUFBWSxDQUFDLENBQXRCLEVBQU47QUFBK0IsT0FBNUosRUFBNkpHLFVBQVMsRUFBQ3NSLFNBQVEsbUJBQVU7QUFBQyxpQkFBTSxFQUFDLGNBQWEsS0FBS2tDLE9BQW5CLEVBQTJCLGVBQWMsS0FBS3BOLFFBQTlDLEVBQU47QUFBOEQsU0FBbEYsRUFBdEssRUFBMFA5RixPQUFNLEVBQUNULE9BQU0saUJBQVU7QUFBQyxlQUFLMlQsT0FBTCxHQUFhLENBQUMsQ0FBQyxLQUFLM1QsS0FBcEI7QUFBMEIsU0FBNUMsRUFBaFEsRUFBOFNvSCxTQUFRLEVBQUN3TSxhQUFZLHFCQUFTL1csQ0FBVCxFQUFXO0FBQUMsZUFBSzBKLFFBQUwsS0FBZ0IsS0FBS29OLE9BQUwsR0FBYSxDQUFDLEtBQUtBLE9BQW5CLEVBQTJCLEtBQUtqTSxLQUFMLENBQVcsUUFBWCxFQUFvQixLQUFLaU0sT0FBekIsRUFBaUM5VyxDQUFqQyxDQUEzQixFQUErRCxLQUFLNkssS0FBTCxDQUFXLE9BQVgsRUFBbUIsS0FBS2lNLE9BQXhCLEVBQWdDOVcsQ0FBaEMsQ0FBL0U7QUFBbUgsU0FBNUksRUFBdFQsRUFBVixFQUErY0EsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBM2Q7QUFBbWUsR0FEMzBtQixFQUM4MG1CLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFNBQU4sRUFBZ0I1RSxPQUFNLEVBQUNzRyxVQUFTQyxPQUFWLEVBQWtCcU4sYUFBWXJOLE9BQTlCLEVBQXNDc04sWUFBV3ROLE9BQWpELEVBQXRCLEVBQWdGK0ssUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUF2RixFQUFtRytCLFVBQVMsRUFBQ3NSLFNBQVEsbUJBQVU7QUFBQyxpQkFBTSxFQUFDLGdCQUFlLEtBQUtvQyxXQUFyQixFQUFpQyxlQUFjLEtBQUt0TixRQUFwRCxFQUE2RCxlQUFjLEtBQUt1TixVQUFoRixFQUFOO0FBQWtHLFNBQXRILEVBQTVHLEVBQVYsRUFBK09qWCxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEzUDtBQUFtUSxHQURwdW5CLEVBQ3V1bkIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV2tCLElBQUVuQixFQUFFRSxDQUFGLENBQWI7QUFBQSxRQUFrQmtCLElBQUVuQixFQUFFLEVBQUYsQ0FBcEI7QUFBQSxRQUEwQmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE1QixDQUFpQzVCLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssVUFBTixFQUFpQjVFLE9BQU0sRUFBQ0QsT0FBTWtKLEtBQVAsRUFBYTNDLFVBQVNDLE9BQXRCLEVBQThCSCxVQUFTLEVBQUNDLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsR0FBckIsRUFBdkMsRUFBaUUyVixXQUFVN1QsTUFBM0UsRUFBa0Y4VCxhQUFZOVQsTUFBOUYsRUFBcUcrVCxvQkFBbUIvVCxNQUF4SCxFQUErSGdVLGFBQVksRUFBQzVOLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLE1BQXJCLEVBQTNJLEVBQXdLK1YsVUFBUzNOLE9BQWpMLEVBQXlMNE4sT0FBTSxFQUFDOU4sTUFBS0YsTUFBTixFQUFhaEksU0FBUSxJQUFFLENBQXZCLEVBQS9MLEVBQXZCLEVBQWlQbVQsUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUF4UCxFQUFvUXlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUN3TixhQUFZLElBQWIsRUFBa0JDLGVBQWMsS0FBS3RVLEtBQXJDLEVBQTJDdVUsU0FBUSxLQUFLUixTQUFMLElBQWdCLFdBQVMsQ0FBQyxHQUFFdlYsRUFBRUosT0FBTCxHQUE1RSxFQUFOO0FBQW1HLE9BQXZYLEVBQXdYcUMsT0FBTSxFQUFDVCxPQUFNLGVBQVNuRCxDQUFULEVBQVc7QUFBQyxlQUFLeVgsYUFBTCxHQUFtQnpYLENBQW5CO0FBQXFCLFNBQXhDLEVBQTlYLEVBQXdhc0QsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsYUFBWSxLQUFLMEMsUUFBbEIsRUFBMkIsZUFBYyxLQUFLNU4sUUFBOUMsRUFBdUQsWUFBVyxDQUFDLENBQW5FLEVBQU47QUFBNEUsU0FBaEcsRUFBamIsRUFBbWhCYSxTQUFRLEVBQUNvTixpQkFBZ0IsMkJBQVU7QUFBQyxjQUFJM1gsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsY0FBRWdXLEtBQUYsQ0FBUTRCLEtBQVIsQ0FBY3BULEdBQWQsQ0FBa0JxVCxLQUFsQjtBQUEwQixXQUFyRDtBQUF3RCxTQUEvRixFQUFnR0MsU0FBUSxtQkFBVTtBQUFDLGNBQUcsS0FBS04sV0FBTCxJQUFrQixLQUFLQyxhQUFMLENBQW1CM1IsTUFBbkIsR0FBMEIsS0FBS3lSLEtBQXBELEVBQTBEO0FBQUMsZ0JBQUl2WCxJQUFFLEtBQUt3WCxXQUFMLENBQWlCTyxJQUFqQixFQUFOLENBQThCLEtBQUtOLGFBQUwsQ0FBbUJ0SSxPQUFuQixDQUEyQm5QLENBQTNCLElBQThCLENBQTlCLEtBQWtDLEtBQUt5WCxhQUFMLENBQW1CM1EsSUFBbkIsQ0FBd0I5RyxDQUF4QixHQUEyQixLQUFLd1gsV0FBTCxHQUFpQixJQUE1QyxFQUFpRCxLQUFLM00sS0FBTCxDQUFXLE9BQVgsRUFBbUIsS0FBSzRNLGFBQXhCLENBQWpELEVBQXdGLEtBQUs1TSxLQUFMLENBQVcsUUFBWCxFQUFvQixLQUFLNE0sYUFBekIsQ0FBeEYsRUFBZ0ksS0FBS0UsZUFBTCxFQUFsSztBQUEwTDtBQUFDLFNBQXZZLEVBQXdZSyxZQUFXLG9CQUFTaFksQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxLQUFLd1gsYUFBTCxDQUFtQnRJLE9BQW5CLENBQTJCblAsQ0FBM0IsQ0FBTixDQUFvQ0MsS0FBRyxDQUFILElBQU0sS0FBS3dYLGFBQUwsQ0FBbUJySSxNQUFuQixDQUEwQm5QLENBQTFCLEVBQTRCLENBQTVCLENBQU4sRUFBcUMsS0FBSzRLLEtBQUwsQ0FBVyxRQUFYLEVBQW9CLEtBQUs0TSxhQUF6QixDQUFyQyxFQUE2RSxLQUFLRSxlQUFMLEVBQTdFO0FBQW9HLFNBQXZpQixFQUF3aUJNLFVBQVMsa0JBQVNqWSxDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLEtBQUt3WCxhQUFMLENBQW1CdEksT0FBbkIsQ0FBMkJuUCxDQUEzQixDQUFOLENBQW9DQyxLQUFHLENBQUgsSUFBTSxLQUFLd1gsYUFBTCxDQUFtQnJJLE1BQW5CLENBQTBCblAsQ0FBMUIsRUFBNEIsQ0FBNUIsQ0FBTixFQUFxQyxLQUFLdVgsV0FBTCxHQUFpQnhYLENBQXRELEVBQXdELEtBQUs2SyxLQUFMLENBQVcsUUFBWCxFQUFvQixLQUFLNE0sYUFBekIsQ0FBeEQsRUFBZ0csS0FBS0UsZUFBTCxFQUFoRztBQUF1SCxTQUF4dEIsRUFBeXRCTyxnQkFBZSwwQkFBVTtBQUFDLGVBQUtWLFdBQUwsS0FBbUIsS0FBS0MsYUFBTCxDQUFtQlUsR0FBbkIsSUFBeUIsS0FBS3ROLEtBQUwsQ0FBVyxRQUFYLEVBQW9CLEtBQUs0TSxhQUF6QixDQUF6QixFQUFpRSxLQUFLRSxlQUFMLEVBQXBGO0FBQTRHLFNBQS8xQixFQUEzaEIsRUFBVixFQUF1NEMzWCxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFuNUM7QUFBMjVDLEdBRHB5cUIsRUFDdXlxQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBYjtBQUFBLFFBQWtCa0IsSUFBRW5CLEVBQUUsRUFBRixDQUFwQjtBQUFBLFFBQTBCaUIsSUFBRWxCLEVBQUVvQixDQUFGLENBQTVCLENBQWlDNUIsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxXQUFOLEVBQWtCNUUsT0FBTSxFQUFDZ1YsdUJBQXNCLEVBQUMzTyxNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBdkIsRUFBaUQ4VyxjQUFhLEVBQUM1TyxNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBOUQsRUFBd0YrVyxZQUFXLEVBQUM3TyxNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBbkcsRUFBNkhnWCxZQUFXbFYsTUFBeEksRUFBK0ltVixXQUFVblYsTUFBekosRUFBZ0tvVixjQUFhLEVBQUNoUCxNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBN0ssRUFBeEIsRUFBZ09tVCxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQXZPLEVBQW1QeUksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQytLLFFBQU8sQ0FBQyxDQUFULEVBQVcyRCxlQUFjLENBQUMsQ0FBMUIsRUFBNEJDLGlCQUFnQixFQUE1QyxFQUFOO0FBQXNELE9BQXpULEVBQTBUclYsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsYUFBWSxLQUFLRyxNQUFsQixFQUFOO0FBQWdDLFNBQXBELEVBQXFENkQsZUFBYyx5QkFBVTtBQUFDLGlCQUFNLEVBQUMsaUJBQWdCLEtBQUtILFlBQXRCLEVBQW1DLHFCQUFvQixLQUFLQyxhQUE1RCxFQUEwRSxnQkFBZSxLQUFLSCxVQUFMLElBQWlCLEtBQUtDLFNBQS9HLEVBQU47QUFBZ0ksU0FBOU0sRUFBK00xTCxRQUFPLGtCQUFVO0FBQUMsaUJBQU0sRUFBQytMLFdBQVUsS0FBS0YsZUFBaEIsRUFBTjtBQUF1QyxTQUF4USxFQUFuVSxFQUE2a0JwTyxTQUFRLEVBQUN1TyxjQUFhLHdCQUFVO0FBQUNyUyxtQkFBU2tLLElBQVQsQ0FBY2hNLFFBQWQsQ0FBdUIsS0FBS29VLGFBQTVCLEtBQTRDLEtBQUt2VSxHQUFMLENBQVN1SixVQUFULENBQW9CaUwsV0FBcEIsQ0FBZ0MsS0FBS3hVLEdBQXJDLENBQTVDO0FBQXNGLFNBQS9HLEVBQWdIeVUsb0JBQW1CLDRCQUFTalosQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRXdHLFNBQVMrSixhQUFULENBQXVCeFEsQ0FBdkIsQ0FBTixDQUFnQyxJQUFHQyxDQUFILEVBQUs7QUFBQyxnQkFBSVMsSUFBRVQsRUFBRWlaLHFCQUFGLEVBQU47QUFBQSxnQkFBZ0N6WSxJQUFFLEtBQUswWSxrQkFBTCxDQUF3QkQscUJBQXhCLEVBQWxDO0FBQUEsZ0JBQWtGdlksSUFBRUQsRUFBRXFMLEtBQUYsR0FBUXRMLEVBQUVzTCxLQUE5RjtBQUFBLGdCQUFvR25LLElBQUVsQixFQUFFc0wsTUFBRixHQUFTdkwsRUFBRXVMLE1BQWpIO0FBQUEsZ0JBQXdIbkssSUFBRSxFQUFDc1MsS0FBSSxFQUFFMVQsRUFBRTBULEdBQUYsR0FBTXpULEVBQUV5VCxHQUFWLENBQUwsRUFBb0JJLE1BQUssRUFBRTlULEVBQUU4VCxJQUFGLEdBQU83VCxFQUFFNlQsSUFBVCxHQUFjN1QsRUFBRXFMLEtBQWxCLENBQXpCLEVBQTFILENBQTZLckwsRUFBRXlULEdBQUYsR0FBTTFULEVBQUUwVCxHQUFGLEdBQU0xVCxFQUFFdUwsTUFBZCxLQUF1Qm5LLEVBQUVzUyxHQUFGLEdBQU16VCxFQUFFeVQsR0FBRixHQUFNMVQsRUFBRTBULEdBQXJDLEdBQTBDelQsRUFBRTZULElBQUYsR0FBTzlULEVBQUU4VCxJQUFGLEdBQU85VCxFQUFFc0wsS0FBaEIsS0FBd0JsSyxFQUFFMFMsSUFBRixHQUFPN1QsRUFBRTZULElBQUYsR0FBTzlULEVBQUU4VCxJQUFULEdBQWM3VCxFQUFFcUwsS0FBL0MsQ0FBMUMsRUFBZ0csS0FBSzRNLGVBQUwsR0FBcUIsaUJBQWU5VyxFQUFFMFMsSUFBakIsR0FBc0IsTUFBdEIsR0FBNkIxUyxFQUFFc1MsR0FBL0IsR0FBbUMsZUFBbkMsR0FBbUR4VCxDQUFuRCxHQUFxRCxJQUFyRCxHQUEwRGlCLENBQTFELEdBQTRELEdBQWpMO0FBQXFMO0FBQUMsU0FBeGhCLEVBQXloQjBHLE1BQUssZ0JBQVU7QUFBQyxjQUFJdEksSUFBRSxJQUFOLENBQVd5RyxTQUFTa0ssSUFBVCxDQUFjeEksV0FBZCxDQUEwQixLQUFLNFEsYUFBL0IsR0FBOEMsS0FBS0wsYUFBTCxHQUFtQixDQUFDLENBQWxFLEVBQW9FLEtBQUtPLGtCQUFMLENBQXdCLEtBQUtWLFVBQTdCLENBQXBFLEVBQTZHeFUsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDOUksY0FBRStZLGFBQUYsQ0FBZ0JsQixLQUFoQixJQUF3QjdYLEVBQUUwWSxhQUFGLEdBQWdCLENBQUMsQ0FBekMsRUFBMkMxWSxFQUFFK1UsTUFBRixHQUFTLENBQUMsQ0FBckQ7QUFBdUQsV0FBckYsQ0FBN0csRUFBcU0sS0FBS2xLLEtBQUwsQ0FBVyxNQUFYLENBQXJNO0FBQXdOLFNBQTV3QixFQUE2d0J1TyxZQUFXLHNCQUFVO0FBQUMsZUFBS2YsWUFBTCxJQUFtQixLQUFLN1AsS0FBTCxFQUFuQjtBQUFnQyxTQUFuMEIsRUFBbzBCQSxPQUFNLGlCQUFVO0FBQUMsY0FBSXhJLElBQUUsSUFBTixDQUFXeUcsU0FBU2tLLElBQVQsQ0FBY2hNLFFBQWQsQ0FBdUIsS0FBS29VLGFBQTVCLEtBQTRDLEtBQUs1TixTQUFMLENBQWdCLFlBQVU7QUFBQyxnQkFBSWxMLElBQUUsU0FBU0EsQ0FBVCxHQUFZO0FBQUMsa0JBQUlTLElBQUVWLEVBQUUrWSxhQUFGLENBQWdCdkksYUFBaEIsQ0FBOEIsc0JBQTlCLENBQU4sQ0FBNEQ5UCxLQUFHQSxFQUFFZ0UsU0FBRixDQUFZa00sTUFBWixDQUFtQixXQUFuQixDQUFILEVBQW1DNVEsRUFBRW1aLGtCQUFGLENBQXFCMUssbUJBQXJCLENBQXlDOU0sRUFBRUosT0FBM0MsRUFBbUR0QixDQUFuRCxDQUFuQyxFQUF5RndHLFNBQVNrSyxJQUFULENBQWNxSSxXQUFkLENBQTBCaFosRUFBRStZLGFBQTVCLENBQXpGLEVBQW9JL1ksRUFBRTJZLGVBQUYsR0FBa0IsRUFBdEo7QUFBeUosYUFBeE8sQ0FBeU8zWSxFQUFFMFksYUFBRixHQUFnQixDQUFDLENBQWpCLEVBQW1CMVksRUFBRTJZLGVBQUYsR0FBa0IsRUFBckMsRUFBd0MzWSxFQUFFaVosa0JBQUYsQ0FBcUJqWixFQUFFd1ksU0FBdkIsQ0FBeEMsRUFBMEV6VSxPQUFPK0UsVUFBUCxDQUFtQixZQUFVO0FBQUM5SSxnQkFBRTBZLGFBQUYsR0FBZ0IsQ0FBQyxDQUFqQixFQUFtQjFZLEVBQUUrVSxNQUFGLEdBQVMsQ0FBQyxDQUE3QixFQUErQi9VLEVBQUVtWixrQkFBRixDQUFxQnJLLGdCQUFyQixDQUFzQ25OLEVBQUVKLE9BQXhDLEVBQWdEdEIsQ0FBaEQsQ0FBL0I7QUFBa0YsYUFBaEgsQ0FBMUUsRUFBNkxELEVBQUU2SyxLQUFGLENBQVEsT0FBUixDQUE3TDtBQUE4TSxXQUFsZCxDQUE1QztBQUFpZ0IsU0FBajJDLEVBQXJsQixFQUF3N0R3SyxTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsSUFBTixDQUFXLEtBQUttTCxTQUFMLENBQWdCLFlBQVU7QUFBQ25MLFlBQUUrWSxhQUFGLEdBQWdCL1ksRUFBRXdFLEdBQWxCLEVBQXNCeEUsRUFBRW1aLGtCQUFGLEdBQXFCblosRUFBRWdXLEtBQUYsQ0FBUXFELE1BQW5ELEVBQTBEclosRUFBRThZLFlBQUYsRUFBMUQ7QUFBMkUsU0FBdEc7QUFBeUcsT0FBL2pFLEVBQWdrRW5ELGVBQWMseUJBQVU7QUFBQyxhQUFLbUQsWUFBTDtBQUFvQixPQUE3bUUsRUFBVixFQUF5bkU5WSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFyb0U7QUFBNm9FLEdBRHRsdkIsRUFDeWx2QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLG1CQUFOLEVBQTNELEVBQXNGaEksRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBbEc7QUFBMEcsR0FEaHV2QixFQUNtdXZCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssbUJBQU4sRUFBM0QsRUFBc0ZoSSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFsRztBQUEwRyxHQUQxMnZCLEVBQzYydkIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxpQkFBTixFQUEzRCxFQUFvRmhJLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQWhHO0FBQXdHLEdBRGwvdkIsRUFDcS92QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGlCQUFOLEVBQXdCNUUsT0FBTSxFQUFDa1csU0FBUWpXLE1BQVQsRUFBZ0JrVyxXQUFVbFcsTUFBMUIsRUFBaUNtVyxlQUFjblcsTUFBL0MsRUFBc0RvVyxVQUFTLEVBQUNoUSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxJQUFyQixFQUEvRCxFQUE5QixFQUF5SHlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNSLFVBQVMsQ0FBQyxDQUFYLEVBQU47QUFBb0IsT0FBN0osRUFBOEplLFNBQVEsRUFBQ21QLGdCQUFlLDBCQUFVO0FBQUMsZUFBS2xRLFFBQUwsSUFBZSxLQUFLcUIsS0FBTCxDQUFXLE9BQVgsQ0FBZjtBQUFtQyxTQUE5RCxFQUErRHZDLE1BQUssZ0JBQVU7QUFBQyxlQUFLdUMsS0FBTCxDQUFXLE1BQVgsR0FBbUIsS0FBS3JCLFFBQUwsR0FBYyxDQUFDLENBQWxDLEVBQW9DLEtBQUt3TSxLQUFMLENBQVdxRCxNQUFYLENBQWtCL1EsSUFBbEIsRUFBcEM7QUFBNkQsU0FBNUksRUFBNklFLE9BQU0saUJBQVU7QUFBQyxlQUFLa1IsY0FBTCxJQUFzQixLQUFLbFEsUUFBTCxHQUFjLENBQUMsQ0FBckMsRUFBdUMsS0FBS3dNLEtBQUwsQ0FBV3FELE1BQVgsQ0FBa0I3USxLQUFsQixFQUF2QztBQUFpRSxTQUEvTixFQUF0SyxFQUF1WTZNLFNBQVEsbUJBQVU7QUFBQyxZQUFHLENBQUMsS0FBS2tFLFNBQU4sSUFBaUIsQ0FBQyxLQUFLQyxhQUExQixFQUF3QyxNQUFNLElBQUluRyxLQUFKLENBQVUsa0RBQVYsQ0FBTjtBQUFvRSxPQUF0Z0IsRUFBM0QsRUFBbWtCclQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBL2tCO0FBQXVsQixHQUR6bXhCLEVBQzRteEIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxtQkFBTixFQUEwQjVFLE9BQU0sRUFBQ2tXLFNBQVFqVyxNQUFULEVBQWdCa1csV0FBVWxXLE1BQTFCLEVBQWlDbVcsZUFBY25XLE1BQS9DLEVBQXNEb1csVUFBUyxFQUFDaFEsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsSUFBckIsRUFBL0QsRUFBMEZvWSxjQUFhLEVBQUNsUSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxRQUFyQixFQUF2RyxFQUFoQyxFQUF1S3lJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNSLFVBQVMsQ0FBQyxDQUFYLEVBQU47QUFBb0IsT0FBM00sRUFBNE1lLFNBQVEsRUFBQ21QLGdCQUFlLHdCQUFTMVosQ0FBVCxFQUFXO0FBQUMsZUFBS3dKLFFBQUwsSUFBZSxLQUFLcUIsS0FBTCxDQUFXLE9BQVgsRUFBbUI3SyxDQUFuQixDQUFmO0FBQXFDLFNBQWpFLEVBQWtFc0ksTUFBSyxnQkFBVTtBQUFDLGVBQUt1QyxLQUFMLENBQVcsTUFBWCxHQUFtQixLQUFLckIsUUFBTCxHQUFjLENBQUMsQ0FBbEMsRUFBb0MsS0FBS3dNLEtBQUwsQ0FBV3FELE1BQVgsQ0FBa0IvUSxJQUFsQixFQUFwQztBQUE2RCxTQUEvSSxFQUFnSkUsT0FBTSxlQUFTeEksQ0FBVCxFQUFXO0FBQUMsZUFBSzBaLGNBQUwsQ0FBb0IxWixDQUFwQixHQUF1QixLQUFLd0osUUFBTCxHQUFjLENBQUMsQ0FBdEMsRUFBd0MsS0FBS3dNLEtBQUwsQ0FBV3FELE1BQVgsQ0FBa0I3USxLQUFsQixFQUF4QztBQUFrRSxTQUFwTyxFQUFwTixFQUEwYjZNLFNBQVEsbUJBQVU7QUFBQyxZQUFHLENBQUMsS0FBS2tFLFNBQU4sSUFBaUIsQ0FBQyxLQUFLQyxhQUExQixFQUF3QyxNQUFNLElBQUluRyxLQUFKLENBQVUsa0RBQVYsQ0FBTjtBQUFvRSxPQUF6akIsRUFBM0QsRUFBc25CclQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBbG9CO0FBQTBvQixHQURueHlCLEVBQ3N4eUIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxrQkFBTixFQUF5QjVFLE9BQU0sRUFBQ0QsT0FBTSxFQUFDc0csTUFBSyxDQUFDcEcsTUFBRCxFQUFRa0csTUFBUixDQUFOLEVBQXNCSyxVQUFTLENBQUMsQ0FBaEMsRUFBUCxFQUEwQzBQLFNBQVFqVyxNQUFsRCxFQUF5RGtXLFdBQVVsVyxNQUFuRSxFQUEwRW1XLGVBQWNuVyxNQUF4RixFQUErRm9XLFVBQVMsRUFBQ2hRLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLElBQXJCLEVBQXhHLEVBQW1Jb1ksY0FBYSxFQUFDbFEsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsUUFBckIsRUFBaEosRUFBK0syVixXQUFVN1QsTUFBekwsRUFBZ004VCxhQUFZOVQsTUFBNU0sRUFBbU51VyxrQkFBaUIsQ0FBQ3ZXLE1BQUQsRUFBUWtHLE1BQVIsQ0FBcE8sRUFBb1A2TixvQkFBbUIvVCxNQUF2USxFQUEvQixFQUE4UzJHLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNSLFVBQVMsQ0FBQyxDQUFYLEVBQU47QUFBb0IsT0FBbFYsRUFBbVZlLFNBQVEsRUFBQ21QLGdCQUFlLHdCQUFTMVosQ0FBVCxFQUFXO0FBQUMsZUFBS3dKLFFBQUwsSUFBZSxLQUFLcUIsS0FBTCxDQUFXLE9BQVgsRUFBbUI3SyxDQUFuQixDQUFmO0FBQXFDLFNBQWpFLEVBQWtFc0ksTUFBSyxnQkFBVTtBQUFDLGNBQUl0SSxJQUFFLElBQU4sQ0FBVyxLQUFLNkssS0FBTCxDQUFXLE1BQVgsR0FBbUIsS0FBS3JCLFFBQUwsR0FBYyxDQUFDLENBQWxDLEVBQW9DLEtBQUt3TSxLQUFMLENBQVdxRCxNQUFYLENBQWtCL1EsSUFBbEIsRUFBcEMsRUFBNkR2RSxPQUFPK0UsVUFBUCxDQUFtQixZQUFVO0FBQUM5SSxjQUFFZ1csS0FBRixDQUFRNEIsS0FBUixDQUFjcFQsR0FBZCxDQUFrQnFULEtBQWxCO0FBQTBCLFdBQXhELENBQTdEO0FBQXdILFNBQXJOLEVBQXNOclAsT0FBTSxlQUFTeEksQ0FBVCxFQUFXO0FBQUMsZUFBSzBaLGNBQUwsQ0FBb0IxWixDQUFwQixHQUF1QixLQUFLd0osUUFBTCxHQUFjLENBQUMsQ0FBdEMsRUFBd0MsS0FBS3dNLEtBQUwsQ0FBV3FELE1BQVgsQ0FBa0I3USxLQUFsQixFQUF4QztBQUFrRSxTQUExUyxFQUEyU3FSLGNBQWEsd0JBQVU7QUFBQyxlQUFLaFAsS0FBTCxDQUFXLE9BQVgsRUFBbUIsS0FBS21MLEtBQUwsQ0FBVzRCLEtBQVgsQ0FBaUJwVCxHQUFqQixDQUFxQnJCLEtBQXhDLEdBQStDLEtBQUtxRixLQUFMLENBQVcsSUFBWCxDQUEvQztBQUFnRSxTQUFuWSxFQUEzVixFQUEzRCxFQUE0eEJ4SSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUF4eUI7QUFBZ3pCLEdBRG5tMEIsRUFDc20wQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFlBQU4sRUFBM0QsRUFBK0VoSSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEzRjtBQUFtRyxHQUR0dTBCLEVBQ3l1MEIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQ7QUFBQSxRQUFtQmtCLElBQUVuQixFQUFFLEVBQUYsQ0FBckI7QUFBQSxRQUEyQmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE3QixDQUFrQzVCLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssU0FBTixFQUFnQjVFLE9BQU0sRUFBQ0QsT0FBTUUsTUFBUCxFQUFjeU4sSUFBR3pOLE1BQWpCLEVBQXdCMkUsTUFBSzNFLE1BQTdCLEVBQW9DcUcsVUFBU0MsT0FBN0MsRUFBcURDLFVBQVNELE9BQTlELEVBQXNFRyxhQUFZekcsTUFBbEYsRUFBeUZ5VyxRQUFPelcsTUFBaEcsRUFBdUcwVyxVQUFTcFEsT0FBaEgsRUFBdEIsRUFBK0lLLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNnUSxVQUFTLEtBQUs3VyxLQUFmLEVBQU47QUFBNEIsT0FBM0wsRUFBNExTLE9BQU0sRUFBQ1QsT0FBTSxpQkFBVTtBQUFDLGVBQUs2VyxRQUFMLEdBQWMsS0FBSzdXLEtBQW5CO0FBQXlCLFNBQTNDLEVBQWxNLEVBQStPb0gsU0FBUSxFQUFDMFAsaUJBQWdCLHlCQUFTamEsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxFQUFOLENBQVMsT0FBTSxHQUFHMkMsTUFBSCxDQUFVLENBQUMsR0FBRWhCLEVBQUVMLE9BQUwsRUFBY3ZCLENBQWQsQ0FBVixFQUE0QjJMLE9BQTVCLENBQXFDLFVBQVMzTCxDQUFULEVBQVc7QUFBQ0MsY0FBRTZHLElBQUYsQ0FBTzlHLEVBQUVnSSxJQUFUO0FBQWUsV0FBaEUsR0FBbUUvSCxFQUFFMkwsSUFBRixDQUFPLElBQVAsQ0FBekU7QUFBc0YsU0FBNUgsRUFBNkhzTyxZQUFXLHNCQUFVO0FBQUMsZUFBS3hRLFFBQUwsS0FBZ0IsS0FBS3lRLFNBQUwsSUFBaUIsS0FBS25FLEtBQUwsQ0FBV29FLFNBQVgsQ0FBcUJDLEtBQXJCLEVBQWpCLEVBQThDLEtBQUtyRSxLQUFMLENBQVdzRSxTQUFYLENBQXFCOVYsR0FBckIsQ0FBeUJxVCxLQUF6QixFQUE5RDtBQUFnRyxTQUFuUCxFQUFvUHNDLFdBQVUscUJBQVU7QUFBQyxlQUFLM1AsZUFBTCxDQUFxQnJILEtBQXJCLEdBQTJCLEVBQTNCLEVBQThCLEtBQUs2UyxLQUFMLENBQVdvRSxTQUFYLENBQXFCalgsS0FBckIsR0FBMkIsRUFBekQ7QUFBNEQsU0FBclUsRUFBc1VvWCxnQkFBZSx3QkFBU3ZhLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUVELEVBQUVzVixNQUFGLENBQVNrRixLQUFULElBQWdCeGEsRUFBRXlhLFlBQUYsQ0FBZUQsS0FBckMsQ0FBMkN2YSxJQUFFQSxFQUFFNkYsTUFBRixHQUFTLENBQVQsR0FBVyxLQUFLa1UsUUFBTCxHQUFjLEtBQUtDLGVBQUwsQ0FBcUJoYSxDQUFyQixDQUF6QixHQUFpRCxNQUFJQSxFQUFFNkYsTUFBTixHQUFhLEtBQUtrVSxRQUFMLEdBQWMvWixFQUFFLENBQUYsRUFBSytILElBQWhDLEdBQXFDLEtBQUtnUyxRQUFMLEdBQWMsSUFBdEcsR0FBMkcsS0FBS0EsUUFBTCxHQUFjaGEsRUFBRXNWLE1BQUYsQ0FBU25TLEtBQVQsQ0FBZW9ELEtBQWYsQ0FBcUIsSUFBckIsRUFBMkI0UixHQUEzQixFQUF6SCxFQUEwSixLQUFLdE4sS0FBTCxDQUFXLFVBQVgsRUFBc0I1SyxLQUFHRCxFQUFFc1YsTUFBRixDQUFTblMsS0FBbEMsQ0FBMUosRUFBbU0sS0FBSzBILEtBQUwsQ0FBVyxPQUFYLEVBQW1CLEtBQUttUCxRQUF4QixDQUFuTTtBQUFxTyxTQUFqbkIsRUFBdlAsRUFBMDJCM0UsU0FBUSxtQkFBVTtBQUFDLFlBQUcsS0FBSzdLLGVBQUwsR0FBcUIsQ0FBQyxHQUFFN0ksRUFBRUosT0FBTCxFQUFjLEtBQUsyQixPQUFuQixFQUEyQixvQkFBM0IsQ0FBckIsRUFBc0UsQ0FBQyxLQUFLc0gsZUFBL0UsRUFBK0YsTUFBTSxLQUFLMEosUUFBTCxJQUFnQixJQUFJYixLQUFKLENBQVUscURBQVYsQ0FBdEIsQ0FBdUYsS0FBSzdJLGVBQUwsQ0FBcUJrUSxPQUFyQixHQUE2QixDQUFDLENBQTlCO0FBQWdDLE9BQW5sQyxFQUFvbEMvRSxlQUFjLHlCQUFVO0FBQUMsYUFBS25MLGVBQUwsQ0FBcUJrUSxPQUFyQixHQUE2QixDQUFDLENBQTlCO0FBQWdDLE9BQTdvQyxFQUFWLEVBQXlwQzFhLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXJxQztBQUE2cUMsR0FEemozQixFQUM0ajNCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFLEVBQXBCLENBQXVCNUIsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxTQUFOLEVBQWdCNUUsT0FBTSxFQUFDdVgsT0FBTXRYLE1BQVAsRUFBYzhSLFdBQVUsRUFBQzFMLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLGdCQUFyQixFQUF4QixFQUF0QixFQUFzRnlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUM0USxZQUFXLElBQVosRUFBaUJDLFVBQVMsSUFBMUIsRUFBTjtBQUFzQyxPQUE1SSxFQUE2SW5HLFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBcEosRUFBZ0txQyxPQUFNLEVBQUMrVyxPQUFNLGlCQUFVO0FBQUMsZUFBS0MsVUFBTCxHQUFnQixJQUFoQixFQUFxQixLQUFLQyxRQUFMLEdBQWMsSUFBbkMsRUFBd0MsS0FBS0MsUUFBTCxFQUF4QztBQUF3RCxTQUExRSxFQUF0SyxFQUFrUHZRLFNBQVEsRUFBQ3dRLFNBQVEsaUJBQVMvYSxDQUFULEVBQVc7QUFBQyxpQkFBT0EsRUFBRW1QLE9BQUYsQ0FBVSxPQUFWLEtBQW9CLENBQTNCO0FBQTZCLFNBQWxELEVBQW1ENkwsT0FBTSxlQUFTaGIsQ0FBVCxFQUFXO0FBQUMsaUJBQU9BLEVBQUVtUCxPQUFGLENBQVUsS0FBVixLQUFrQixDQUF6QjtBQUEyQixTQUFoRyxFQUFpRzhMLGVBQWMsdUJBQVNqYixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLElBQU4sQ0FBVyxLQUFLMmEsVUFBTCxHQUFnQjVhLENBQWhCLEVBQWtCLEtBQUttTCxTQUFMLENBQWdCLFlBQVU7QUFBQ2xMLGNBQUV1RSxHQUFGLENBQU13SSxRQUFOLENBQWUsQ0FBZixFQUFrQmtPLGVBQWxCLENBQWtDLE1BQWxDO0FBQTBDLFdBQXJFLENBQWxCO0FBQTBGLFNBQWhPLEVBQWlPQyxTQUFRLG1CQUFVO0FBQUMsY0FBR3RaLEVBQUUsS0FBSzhZLEtBQVAsQ0FBSCxFQUFpQixLQUFLTSxhQUFMLENBQW1CcFosRUFBRSxLQUFLOFksS0FBUCxDQUFuQixFQUFqQixLQUF1RDtBQUFDLGdCQUFJM2EsSUFBRSxJQUFJb2IsY0FBSixFQUFOO0FBQUEsZ0JBQXlCbmIsSUFBRSxJQUEzQixDQUFnQ0QsRUFBRXNJLElBQUYsQ0FBTyxLQUFQLEVBQWEsS0FBS3FTLEtBQWxCLEVBQXdCLENBQUMsQ0FBekIsR0FBNEIzYSxFQUFFOEwsTUFBRixHQUFTLFlBQVU7QUFBQyxrQkFBSTlMLElBQUUsS0FBS3FiLGlCQUFMLENBQXVCLGNBQXZCLENBQU4sQ0FBNkMsS0FBS0MsTUFBTCxJQUFhLEdBQWIsSUFBa0IsS0FBS0EsTUFBTCxHQUFZLEdBQTlCLElBQW1DcmIsRUFBRThhLE9BQUYsQ0FBVS9hLENBQVYsQ0FBbkMsR0FBZ0RDLEVBQUUrYSxLQUFGLENBQVFoYixDQUFSLEtBQVk2QixFQUFFNUIsRUFBRTBhLEtBQUosSUFBVyxLQUFLWSxRQUFoQixFQUF5QnRiLEVBQUVnYixhQUFGLENBQWdCLEtBQUtNLFFBQXJCLENBQXJDLElBQXFFdGIsRUFBRXViLFNBQUYsRUFBckgsR0FBbUl0TyxRQUFRQyxJQUFSLENBQWEsY0FBWWxOLEVBQUUwYSxLQUFkLEdBQW9CLHdCQUFqQyxDQUFuSTtBQUE4TCxhQUEzUixFQUE0UjNhLEVBQUV5YixJQUFGLEVBQTVSO0FBQXFTO0FBQUMsU0FBbG5CLEVBQW1uQkQsV0FBVSxxQkFBVTtBQUFDLGVBQUtYLFFBQUwsR0FBYyxLQUFLRixLQUFuQjtBQUF5QixTQUFqcUIsRUFBa3FCRyxVQUFTLG9CQUFVO0FBQUMsZUFBS0gsS0FBTCxLQUFhLEtBQUtBLEtBQUwsQ0FBV3hMLE9BQVgsQ0FBbUIsTUFBbkIsS0FBNEIsQ0FBNUIsR0FBOEIsS0FBS2dNLE9BQUwsRUFBOUIsR0FBNkMsS0FBS0ssU0FBTCxFQUExRDtBQUE0RSxTQUFsd0IsRUFBMVAsRUFBOC9CbkcsU0FBUSxtQkFBVTtBQUFDLGFBQUt5RixRQUFMO0FBQWdCLE9BQWppQyxFQUFWLEVBQTZpQzlhLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXpqQztBQUFpa0MsR0FEcng1QixFQUN3eDVCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFVBQU4sRUFBaUI1RSxPQUFNLEVBQUN1WCxPQUFNdFgsTUFBUCxFQUF2QixFQUFzQzJHLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUMwUixRQUFPLENBQUMsQ0FBVCxFQUFXQyxZQUFXLENBQUMsQ0FBdkIsRUFBeUJDLGNBQWEsSUFBdEMsRUFBTjtBQUFrRCxPQUF4RyxFQUF5R2hZLE9BQU0sRUFBQytXLE9BQU0saUJBQVU7QUFBQyxlQUFLa0IsV0FBTDtBQUFtQixTQUFyQyxFQUEvRyxFQUFzSnZZLFVBQVMsRUFBQ3NSLFNBQVEsbUJBQVU7QUFBQyxpQkFBTSxFQUFDLGFBQVksS0FBSzhHLE1BQWxCLEVBQXlCLG1CQUFrQixLQUFLQyxVQUFoRCxFQUFOO0FBQWtFLFNBQXRGLEVBQS9KLEVBQXVQcFIsU0FBUSxFQUFDdVIsa0JBQWlCLDBCQUFTOWIsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxJQUFOO0FBQUEsY0FBV1MsSUFBRSxTQUFGQSxDQUFFLEdBQVU7QUFBQ1QsY0FBRXliLE1BQUYsR0FBUyxDQUFDLENBQVY7QUFBWSxXQUFwQyxDQUFxQyxDQUFDLEdBQUU5WixFQUFFTCxPQUFMLEVBQWN2QixDQUFkLEVBQWlCLFVBQVNBLENBQVQsRUFBVztBQUFDLGdCQUFJUyxJQUFFLEdBQU47QUFBQSxnQkFBVUUsSUFBRSxDQUFDLE1BQUlxRCxLQUFLNlMsR0FBTCxDQUFTcFcsSUFBRVQsQ0FBWCxDQUFKLEdBQWtCUyxDQUFsQixHQUFvQixFQUFyQixJQUF5QixHQUFyQyxDQUF5Q0UsS0FBRyxFQUFILEtBQVFWLEVBQUUwYixVQUFGLEdBQWEsQ0FBQyxDQUF0QixHQUF5QjFiLEVBQUVrTCxTQUFGLENBQVl6SyxDQUFaLENBQXpCO0FBQXdDLFdBQTlHLEVBQWdIQSxDQUFoSDtBQUFtSCxTQUF0TCxFQUF1TG1iLGFBQVksdUJBQVU7QUFBQyxlQUFLSCxNQUFMLEdBQVksQ0FBQyxDQUFiLEVBQWUsS0FBS0MsVUFBTCxHQUFnQixDQUFDLENBQWhDLEVBQWtDLEtBQUtDLFlBQUwsR0FBa0IsSUFBcEQsRUFBeUQsS0FBS2pCLEtBQUwsS0FBYSxLQUFLaUIsWUFBTCxHQUFrQm5WLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBbEIsRUFBZ0QsS0FBS2tWLFlBQUwsQ0FBa0IvUCxXQUFsQixHQUE4QixFQUE5RSxFQUFpRixLQUFLK1AsWUFBTCxDQUFrQnhULEdBQWxCLEdBQXNCLEtBQUt1UyxLQUE1RyxFQUFrSCxLQUFLbUIsZ0JBQUwsQ0FBc0IsS0FBS0YsWUFBM0IsQ0FBL0gsQ0FBekQ7QUFBa08sU0FBaGIsRUFBL1AsRUFBaXJCRyxTQUFRLG1CQUFVO0FBQUMsYUFBS0YsV0FBTDtBQUFtQixPQUF2dEIsRUFBVixFQUFtdUI3YixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEvdUI7QUFBdXZCLEdBRG5xN0IsRUFDc3E3QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFha0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZjtBQUFBLFFBQW9Ca0IsSUFBRW5CLEVBQUUsRUFBRixDQUF0QjtBQUFBLFFBQTRCaUIsSUFBRWxCLEVBQUVvQixDQUFGLENBQTlCO0FBQUEsUUFBbUNiLElBQUVOLEVBQUUsR0FBRixDQUFyQztBQUFBLFFBQTRDRSxJQUFFSCxFQUFFTyxDQUFGLENBQTlDO0FBQUEsUUFBbURELElBQUVMLEVBQUUsRUFBRixDQUFyRDtBQUFBLFFBQTJEZ0MsSUFBRWpDLEVBQUVNLENBQUYsQ0FBN0Q7QUFBQSxRQUFrRUQsSUFBRUosRUFBRSxFQUFGLENBQXBFO0FBQUEsUUFBMEU0RCxJQUFFN0QsRUFBRUssQ0FBRixDQUE1RSxDQUFpRmIsRUFBRXNCLE9BQUYsR0FBVSxFQUFDbVQsUUFBTyxDQUFDaFMsRUFBRW5CLE9BQUgsRUFBV1gsRUFBRVcsT0FBYixDQUFSLEVBQThCeUksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQ2dTLE9BQU0sRUFBUCxFQUFVQyxTQUFRLENBQUMsQ0FBbkIsRUFBcUJDLE9BQU0sRUFBM0IsRUFBOEJDLFVBQVMsSUFBdkMsRUFBNENsUyxTQUFRLENBQXBELEVBQXNETyxpQkFBZ0IsSUFBdEUsRUFBMkU0UixjQUFhLElBQXhGLEVBQU47QUFBb0csT0FBbEosRUFBbUo5WSxVQUFTLEVBQUMwUSxhQUFZLHVCQUFVO0FBQUMsaUJBQU8sTUFBSSxLQUFLTixJQUFMLENBQVU1TixNQUFyQjtBQUE0QixTQUFwRCxFQUE1SixFQUFrTmxDLE9BQU0sRUFBQzhQLE1BQUssY0FBUzFULENBQVQsRUFBVztBQUFDLGVBQUtnYyxLQUFMLEdBQVcsQ0FBQyxHQUFFcmEsRUFBRUosT0FBTCxFQUFjLEVBQWQsRUFBaUJ2QixDQUFqQixDQUFYO0FBQStCLFNBQWpELEVBQWtEa2MsT0FBTSxlQUFTbGMsQ0FBVCxFQUFXO0FBQUMsZUFBS2dXLEtBQUwsQ0FBVzRCLEtBQVgsQ0FBaUJ6VSxLQUFqQixHQUF1Qm5ELENBQXZCLEVBQXlCLEtBQUtxYyxvQkFBTCxDQUEwQnJjLENBQTFCLENBQXpCO0FBQXNELFNBQTFILEVBQTJIbUQsT0FBTSxlQUFTbkQsQ0FBVCxFQUFXO0FBQUMsZUFBS2tjLEtBQUwsR0FBV2xjLENBQVgsRUFBYSxLQUFLcWMsb0JBQUwsQ0FBMEJyYyxDQUExQixDQUFiO0FBQTBDLFNBQXZMLEVBQXhOLEVBQWladUssU0FBUSxFQUFDK1IsZ0JBQWUsMEJBQVU7QUFBQyxjQUFJdGMsSUFBRSxJQUFOLENBQVcsS0FBS3dMLE9BQUwsSUFBZSxLQUFLdkIsT0FBTCxJQUFjbEcsT0FBTzZHLFlBQVAsQ0FBb0IsS0FBS1gsT0FBekIsQ0FBN0IsRUFBK0QsS0FBS0EsT0FBTCxHQUFhbEcsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDLG1CQUFPOUksRUFBRWdVLFdBQUYsR0FBYyxLQUFLaFUsRUFBRWlQLE1BQUYsRUFBbkIsR0FBOEIsS0FBS2pQLEVBQUV1YyxrQkFBRixFQUExQztBQUFpRSxXQUEvRixFQUFpRyxLQUFLL1MsUUFBdEcsQ0FBNUU7QUFBNEwsU0FBbE8sRUFBbU9nVCxLQUFJLGFBQVN4YyxDQUFULEVBQVc7QUFBQyxlQUFLa2MsS0FBTCxHQUFXbGMsRUFBRSxLQUFLNlQsY0FBUCxDQUFYLEVBQWtDLEtBQUttQyxLQUFMLENBQVc0QixLQUFYLENBQWlCelUsS0FBakIsR0FBdUJuRCxFQUFFLEtBQUs2VCxjQUFQLENBQXpELEVBQWdGLEtBQUtzSSxRQUFMLEdBQWNuYyxDQUE5RixFQUFnRyxLQUFLd0wsT0FBTCxFQUFoRyxFQUErRyxLQUFLWCxLQUFMLENBQVcsVUFBWCxFQUFzQixLQUFLc1IsUUFBM0IsRUFBb0MsS0FBS25HLEtBQUwsQ0FBVzRCLEtBQVgsQ0FBaUJ6VSxLQUFyRCxDQUEvRztBQUMxdytCLFNBRHVoK0IsRUFDdGgrQnNaLGtCQUFpQiwwQkFBU3pjLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsSUFBTixDQUFXLE9BQU8sS0FBS3VULEtBQUwsQ0FBV3hULENBQVgsRUFBYzBjLElBQWQsQ0FBb0IsVUFBUzFjLENBQVQsRUFBVztBQUFDLGdCQUFJVSxJQUFFVixLQUFHQSxFQUFFZ0ssSUFBTCxJQUFXaEssRUFBRTJRLElBQW5CLENBQXdCalEsSUFBRVQsRUFBRTJULG1CQUFGLEdBQXNCM1QsRUFBRTJULG1CQUFGLENBQXNCbFQsQ0FBdEIsQ0FBdEIsR0FBK0NBLENBQWpELEVBQW1EVCxFQUFFK2IsS0FBRixHQUFRL2IsRUFBRTBjLEtBQUYsR0FBUWpjLEVBQUU4RixLQUFGLENBQVEsQ0FBUixFQUFVdkcsRUFBRTBjLEtBQVosQ0FBUixHQUEyQmpjLENBQXRGLEVBQXdGVCxFQUFFZ2MsT0FBRixHQUFVLENBQUMsQ0FBbkcsRUFBcUdoYyxFQUFFMmMsVUFBRixFQUFyRztBQUFvSCxXQUE1SyxDQUFQO0FBQXNMLFNBRHd6OUIsRUFDdno5QnZSLFNBQVEsbUJBQVU7QUFBQyxlQUFLYixlQUFMLEtBQXVCLEtBQUtBLGVBQUwsQ0FBcUJjLFNBQXJCLEdBQStCLENBQUMsQ0FBdkQsR0FBMEQsS0FBSzBLLEtBQUwsQ0FBVzRCLEtBQVgsQ0FBaUJDLEtBQWpCLEVBQTFEO0FBQW1GLFNBRGl0OUIsRUFDaHQ5QnJNLFNBQVEsbUJBQVU7QUFBQyxlQUFLdEIsWUFBTCxJQUFvQixLQUFLVyxLQUFMLENBQVcsUUFBWCxFQUFvQixLQUFLbUwsS0FBTCxDQUFXNEIsS0FBWCxDQUFpQnpVLEtBQXJDLENBQXBCLEVBQWdFLEtBQUswSCxLQUFMLENBQVcsT0FBWCxFQUFtQixLQUFLbUwsS0FBTCxDQUFXNEIsS0FBWCxDQUFpQnpVLEtBQXBDLENBQWhFO0FBQTJHLFNBRGtsOUIsRUFDamw5Qm9aLG9CQUFtQiw4QkFBVTtBQUFDLGVBQUs5SSxVQUFMLEtBQWtCLEtBQUt1SSxLQUFMLEdBQVcsS0FBS3ZJLFVBQUwsQ0FBZ0IsQ0FBQyxHQUFFOVIsRUFBRUosT0FBTCxFQUFjLEVBQWQsRUFBaUIsS0FBS21TLElBQXRCLENBQWhCLEVBQTRDLEtBQUt3SSxLQUFqRCxDQUE3QixHQUFzRixLQUFLVSxVQUFMLEVBQXRGO0FBQXdHLFNBRDI4OEIsRUFDMTg4QkMsT0FBTSxpQkFBVTtBQUFDLGVBQUtiLEtBQUwsR0FBVyxFQUFYLEVBQWMsS0FBS0UsS0FBTCxHQUFXLEVBQXpCLEVBQTRCLEtBQUtELE9BQUwsR0FBYSxDQUFDLENBQTFDO0FBQTRDLFNBRDY0OEIsRUFDNTQ4Qm5SLGdCQUFlLHdCQUFTOUssQ0FBVCxFQUFXO0FBQUMsZUFBS3dLLGVBQUwsQ0FBcUJPLFFBQXJCLENBQThCL0ssS0FBRyxLQUFLZ1csS0FBTCxDQUFXNEIsS0FBWCxDQUFpQnpVLEtBQWxEO0FBQXlELFNBRHd6OEIsRUFDdno4QmdILG1CQUFrQiw2QkFBVTtBQUFDLGVBQUtLLGVBQUwsQ0FBcUJRLFVBQXJCLEdBQWdDLEtBQUt0QixRQUFyQztBQUE4QyxTQUQ0dThCLEVBQzN1OEJVLG1CQUFrQiw2QkFBVTtBQUFDLGVBQUtJLGVBQUwsQ0FBcUJTLFVBQXJCLEdBQWdDLEtBQUtyQixRQUFyQztBQUE4QyxTQURncThCLEVBQy9wOEJTLHNCQUFxQixnQ0FBVTtBQUFDLGVBQUtHLGVBQUwsQ0FBcUJVLGNBQXJCLEdBQW9DLENBQUMsQ0FBQyxLQUFLcEIsV0FBM0M7QUFBdUQsU0FEd2s4QixFQUN2azhCdVMsc0JBQXFCLDhCQUFTcmMsQ0FBVCxFQUFXO0FBQUMsZUFBSzhLLGNBQUwsQ0FBb0I5SyxDQUFwQixHQUF1QixLQUFLa0ssWUFBTCxDQUFrQmxLLENBQWxCLENBQXZCO0FBQTRDLFNBRDAvN0IsRUFDei83QjhjLGlCQUFnQiwyQkFBVTtBQUFDLGVBQUtWLFlBQUwsR0FBa0IsS0FBSzVSLGVBQUwsQ0FBcUJoRyxHQUFyQixDQUF5QmdNLGFBQXpCLENBQXVDLDBCQUF2QyxDQUFsQixFQUFxRixLQUFLNEwsWUFBTCxJQUFtQixLQUFLQSxZQUFMLENBQWtCdE4sZ0JBQWxCLENBQW1DLE9BQW5DLEVBQTJDLEtBQUsyTixnQkFBaEQsQ0FBeEc7QUFBMEssU0FEb3o3QixFQUNuejdCeE4sUUFBTyxrQkFBVTtBQUFDLGNBQUcsQ0FBQyxLQUFLaU4sS0FBTixJQUFhLENBQUMsS0FBS3hJLElBQUwsQ0FBVTVOLE1BQTNCLEVBQWtDLE9BQU8sS0FBSytXLEtBQUwsRUFBUCxDQUFvQixJQUFHLEVBQUUsS0FBS2xKLFFBQUwsSUFBZSxLQUFLdUksS0FBTCxDQUFXcFcsTUFBWCxHQUFrQixLQUFLNk4sUUFBeEMsQ0FBSCxFQUFxRDtBQUFDLGlCQUFLc0ksT0FBTCxHQUFhLENBQUMsQ0FBZCxDQUFnQixJQUFJamMsSUFBRSxDQUFDLEdBQUU0QixFQUFFTCxPQUFMLEVBQWMsRUFBZCxFQUFpQixLQUFLdVMsVUFBdEIsRUFBaUMsS0FBS29JLEtBQXRDLENBQU4sQ0FBbUQsT0FBTyxLQUFLTyxnQkFBTCxDQUFzQnpjLENBQXRCLENBQVA7QUFBZ0M7QUFBQyxTQURpbDdCLEVBQ2hsN0I0YyxZQUFXLHNCQUFVO0FBQUMsZUFBS1osS0FBTCxDQUFXbFcsTUFBWCxJQUFtQixLQUFLa1EsS0FBTCxDQUFXK0csSUFBWCxDQUFnQnJILE1BQWhCLEVBQW5CO0FBQTRDLFNBRDhnN0IsRUFDN2c3QnhMLGNBQWEsc0JBQVNsSyxDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFRCxLQUFHLEtBQUtnVyxLQUFMLENBQVc0QixLQUFYLENBQWlCelUsS0FBcEIsSUFBMkIsS0FBS0EsS0FBdEMsQ0FBNEMsS0FBSzJILGNBQUwsQ0FBb0I3SyxDQUFwQixHQUF1QixLQUFLdUssZUFBTCxDQUFxQlksV0FBckIsR0FBaUNuTCxJQUFFQSxFQUFFNkYsTUFBSixHQUFXLENBQW5FO0FBQXFFLFNBRG00NkIsRUFBelosRUFDeCs1QjZQLGVBQWMseUJBQVU7QUFBQyxhQUFLeUcsWUFBTCxJQUFtQixLQUFLQSxZQUFMLENBQWtCM04sbUJBQWxCLENBQXNDLE9BQXRDLEVBQThDLEtBQUtnTyxnQkFBbkQsQ0FBbkI7QUFBd0YsT0FEdTM1QixFQUN0MzVCcEgsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLbUwsU0FBTCxDQUFnQixZQUFVO0FBQUNuTCxZQUFFd0ssZUFBRixHQUFrQixDQUFDLEdBQUVsRyxFQUFFL0MsT0FBTCxFQUFjdkIsRUFBRWtELE9BQWhCLEVBQXdCLG9CQUF4QixDQUFsQixFQUFnRWxELEVBQUVnVSxXQUFGLEtBQWdCaFUsRUFBRWdjLEtBQUYsR0FBUSxDQUFDLEdBQUVyYSxFQUFFSixPQUFMLEVBQWMsRUFBZCxFQUFpQnZCLEVBQUUwVCxJQUFuQixDQUF4QixDQUFoRSxFQUFrSDFULEVBQUVrYyxLQUFGLEdBQVFsYyxFQUFFbUQsS0FBNUgsRUFBa0luRCxFQUFFK1QsV0FBRixFQUFsSSxFQUFrSi9ULEVBQUU4YyxlQUFGLEVBQWxKLEVBQXNLOWMsRUFBRW1LLGlCQUFGLEVBQXRLLEVBQTRMbkssRUFBRW9LLGlCQUFGLEVBQTVMLEVBQWtOcEssRUFBRXFLLG9CQUFGLEVBQWxOLEVBQTJPckssRUFBRXNLLGVBQUYsRUFBM08sRUFBK1B0SyxFQUFFa0ssWUFBRixFQUEvUDtBQUFnUixTQUEzUztBQUE4UyxPQUQwaTVCLEVBQVYsRUFDOWg1QmxLLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BRGtoNUI7QUFDMWc1QixHQUY5MkMsRUFFaTNDLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkO0FBQUEsUUFBbUJrQixJQUFFbkIsRUFBRSxFQUFGLENBQXJCO0FBQUEsUUFBMkJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBN0IsQ0FBa0M1QixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFVBQU4sRUFBaUI1RSxPQUFNLEVBQUNxRyxNQUFLLEVBQUNBLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLE1BQXJCLEVBQU4sRUFBdkIsRUFBMkRtVCxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQWxFLEVBQThFOFQsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLbUwsU0FBTCxDQUFnQixZQUFVO0FBQUMsY0FBR25MLEVBQUV3SyxlQUFGLEdBQWtCLENBQUMsR0FBRTdJLEVBQUVKLE9BQUwsRUFBY3ZCLEVBQUVrRCxPQUFoQixFQUF3QixvQkFBeEIsQ0FBbEIsRUFBZ0UsQ0FBQ2xELEVBQUV3SyxlQUF0RSxFQUFzRixNQUFNeEssRUFBRWtVLFFBQUYsSUFBYSxJQUFJYixLQUFKLENBQVUsc0RBQVYsQ0FBbkIsQ0FBcUZyVCxFQUFFd0ssZUFBRixDQUFrQndTLGFBQWxCLEdBQWdDaGQsQ0FBaEMsRUFBa0NBLEVBQUVtSyxpQkFBRixFQUFsQyxFQUF3RG5LLEVBQUVvSyxpQkFBRixFQUF4RCxFQUE4RXBLLEVBQUVxSyxvQkFBRixFQUE5RSxFQUF1R3JLLEVBQUVzSyxlQUFGLEVBQXZHLEVBQTJIdEssRUFBRWtLLFlBQUYsRUFBM0g7QUFBNEksU0FBbFY7QUFBcVYsT0FBamMsRUFBVixFQUE2Y2xLLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXpkO0FBQWllLEdBRnIvRCxFQUV3L0QsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV2tCLElBQUVuQixFQUFFRSxDQUFGLENBQWI7QUFBQSxRQUFrQmtCLElBQUVuQixFQUFFLEVBQUYsQ0FBcEI7QUFBQSxRQUEwQmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE1QixDQUFpQzVCLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssb0JBQU4sRUFBMkI1RSxPQUFNLEVBQUM2WixVQUFTdFQsT0FBVixFQUFrQnVULGVBQWN2VCxPQUFoQyxFQUF3Q3dULGFBQVl4VCxPQUFwRCxFQUFqQyxFQUE4RitLLFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBckcsRUFBaUh5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDN0csT0FBTSxFQUFQLEVBQVV5VSxPQUFNLENBQUMsQ0FBakIsRUFBbUJvRixlQUFjLElBQWpDLEVBQXNDSSxjQUFhLENBQUMsQ0FBcEQsRUFBc0QzUyxlQUFjLENBQUMsQ0FBckUsRUFBdUU0UyxXQUFVLENBQUMsQ0FBbEYsRUFBb0ZuUyxnQkFBZSxDQUFDLENBQXBHLEVBQXNHd1AsU0FBUSxDQUFDLENBQS9HLEVBQWlIMVAsWUFBVyxDQUFDLENBQTdILEVBQStIQyxZQUFXLENBQUMsQ0FBM0ksRUFBNklLLFdBQVUsQ0FBQyxDQUF4SixFQUEwSlosZUFBYyxDQUF4SyxFQUEwS1UsYUFBWSxDQUF0TCxFQUFOO0FBQStMLE9BQWhVLEVBQWlVOUgsVUFBUyxFQUFDZ2EsVUFBUyxvQkFBVTtBQUFDLGlCQUFNLENBQUMsR0FBRTNiLEVBQUVKLE9BQUwsRUFBYyxLQUFLNEIsS0FBbkIsSUFBMEIsS0FBS0EsS0FBTCxDQUFXMkMsTUFBWCxHQUFrQixDQUE1QyxHQUE4QzZELFFBQVEsS0FBS3hHLEtBQWIsQ0FBcEQ7QUFBd0UsU0FBN0YsRUFBOEZ5UixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxtQkFBa0IsS0FBS3FJLFFBQXhCLEVBQWlDLG1CQUFrQixLQUFLQyxhQUF4RCxFQUFzRSxnQkFBZSxLQUFLQyxXQUExRixFQUFzRyxpQkFBZ0IsS0FBS0UsU0FBM0gsRUFBcUksZUFBYyxLQUFLM0MsT0FBeEosRUFBZ0ssZ0JBQWUsS0FBSzRDLFFBQXBMLEVBQTZMLHdCQUF1QixLQUFLcFMsY0FBek4sRUFBd08scUJBQW9CLEtBQUtGLFVBQWpRLEVBQTRRLHFCQUFvQixLQUFLQyxVQUFyUyxFQUFnVCxvQkFBbUIsS0FBS0ssU0FBeFUsRUFBTjtBQUF5VixTQUExYyxFQUExVSxFQUFzeEJmLFNBQVEsRUFBQ2dULFNBQVEsbUJBQVU7QUFBQyxpQkFBTyxLQUFLM0YsS0FBTCxJQUFZLFlBQVUsS0FBS0EsS0FBTCxDQUFXNEYsT0FBWCxDQUFtQjdMLFdBQW5CLEVBQTdCO0FBQThELFNBQWxGLEVBQW1GOEwsb0JBQW1CLDhCQUFVO0FBQUMsZUFBS0YsT0FBTCxPQUFpQixlQUFhLEtBQUszRixLQUFMLENBQVduTyxJQUF4QixJQUE4QixLQUFLbU8sS0FBTCxDQUFXbk8sSUFBWCxHQUFnQixNQUFoQixFQUF1QixLQUFLMlQsWUFBTCxHQUFrQixDQUFDLENBQXhFLEtBQTRFLEtBQUt4RixLQUFMLENBQVduTyxJQUFYLEdBQWdCLFVBQWhCLEVBQTJCLEtBQUsyVCxZQUFMLEdBQWtCLENBQUMsQ0FBMUgsR0FBNkgsS0FBS3hGLEtBQUwsQ0FBV0MsS0FBWCxFQUE5STtBQUFrSyxTQUFuUixFQUFvUjZGLFlBQVcsc0JBQVU7QUFBQyxlQUFLVixhQUFMLENBQW1CeFksR0FBbkIsQ0FBdUJyQixLQUF2QixHQUE2QixFQUE3QixFQUFnQyxLQUFLNlosYUFBTCxDQUFtQm5TLEtBQW5CLENBQXlCLE9BQXpCLEVBQWlDLEVBQWpDLENBQWhDLEVBQXFFLEtBQUtFLFFBQUwsQ0FBYyxFQUFkLENBQXJFO0FBQXVGLFNBQWpZLEVBQWtZQSxVQUFTLGtCQUFTL0ssQ0FBVCxFQUFXO0FBQUMsZUFBS21ELEtBQUwsR0FBV25ELENBQVg7QUFBYSxTQUFwYSxFQUE5eEIsRUFBb3NDcVYsU0FBUSxtQkFBVTtBQUFDLFlBQUcsS0FBS3VDLEtBQUwsR0FBVyxLQUFLcFQsR0FBTCxDQUFTbVosZ0JBQVQsQ0FBMEIsbUNBQTFCLEVBQStELENBQS9ELENBQVgsRUFBNkUsQ0FBQyxLQUFLL0YsS0FBdEYsRUFBNEYsTUFBTSxLQUFLMUQsUUFBTCxJQUFnQixJQUFJYixLQUFKLENBQVUseURBQVYsQ0FBdEI7QUFBMkYsT0FBOTRDLEVBQVYsRUFBMDVDclQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBdDZDO0FBQTg2QyxHQUZ4a0gsRUFFMmtILFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEdBQUYsQ0FBTjtBQUFBLFFBQWFrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFmO0FBQUEsUUFBb0JrQixJQUFFbkIsRUFBRSxFQUFGLENBQXRCO0FBQUEsUUFBNEJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBOUI7QUFBQSxRQUFtQ2IsSUFBRU4sRUFBRSxFQUFGLENBQXJDO0FBQUEsUUFBMkNFLElBQUVILEVBQUVPLENBQUYsQ0FBN0MsQ0FBa0RmLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssYUFBTixFQUFvQjBNLFFBQU8sQ0FBQy9TLEVBQUVKLE9BQUgsQ0FBM0IsRUFBdUNxQyxPQUFNLEVBQUNULE9BQU0saUJBQVU7QUFBQyxjQUFJbkQsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDLG1CQUFPdkosRUFBRUwsT0FBRixDQUFVME4sTUFBVixDQUFpQmpQLEVBQUV3RSxHQUFuQixDQUFQO0FBQStCLFdBQTFEO0FBQTZELFNBQTFGLEVBQTdDLEVBQXlJNlEsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLbUwsU0FBTCxDQUFnQixZQUFVO0FBQUMsY0FBR25MLEVBQUV3SyxlQUFGLEdBQWtCLENBQUMsR0FBRTVKLEVBQUVXLE9BQUwsRUFBY3ZCLEVBQUVrRCxPQUFoQixFQUF3QixvQkFBeEIsQ0FBbEIsRUFBZ0UsQ0FBQ2xELEVBQUV3SyxlQUF0RSxFQUFzRixNQUFNeEssRUFBRWtVLFFBQUYsSUFBYSxJQUFJYixLQUFKLENBQVUseURBQVYsQ0FBbkIsQ0FBd0ZyVCxFQUFFd0ssZUFBRixDQUFrQndTLGFBQWxCLEdBQWdDaGQsQ0FBaEMsRUFBa0NBLEVBQUVtSyxpQkFBRixFQUFsQyxFQUF3RG5LLEVBQUVvSyxpQkFBRixFQUF4RCxFQUE4RXBLLEVBQUVxSyxvQkFBRixFQUE5RSxFQUF1R3JLLEVBQUVzSyxlQUFGLEVBQXZHLEVBQTJIdEssRUFBRWtLLFlBQUYsRUFBM0gsRUFBNElsSyxFQUFFd0UsR0FBRixDQUFNb1osWUFBTixDQUFtQixNQUFuQixLQUE0QjVkLEVBQUV3RSxHQUFGLENBQU1pTSxZQUFOLENBQW1CLE1BQW5CLEVBQTBCLEdBQTFCLENBQXhLLEVBQXVNLENBQUMsR0FBRTdPLEVBQUVMLE9BQUwsRUFBY3ZCLEVBQUV3RSxHQUFoQixDQUF2TSxFQUE0TnNFLFdBQVksWUFBVTtBQUFDLG1CQUFPbEgsRUFBRUwsT0FBRixDQUFVME4sTUFBVixDQUFpQmpQLEVBQUV3RSxHQUFuQixDQUFQO0FBQStCLFdBQXRELEVBQXdELEdBQXhELENBQTVOO0FBQXlSLFNBQWxlO0FBQXFlLE9BQTVvQixFQUE2b0JtUixlQUFjLHlCQUFVO0FBQUMvVCxVQUFFTCxPQUFGLENBQVV5TixPQUFWLENBQWtCLEtBQUt4SyxHQUF2QjtBQUE0QixPQUFsc0IsRUFBVixFQUE4c0J4RSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUExdEI7QUFBa3VCLEdBRmgrSSxFQUVtK0ksVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxXQUFOLEVBQWtCNUUsT0FBTSxFQUFDeWEsT0FBTSxFQUFDcFUsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsS0FBckIsRUFBUCxFQUFtQ3VjLE9BQU1uVSxPQUF6QyxFQUFpRG9VLGFBQVlwVSxPQUE3RCxFQUFxRXFVLFlBQVdyVSxPQUFoRixFQUF3RnNVLGFBQVl0VSxPQUFwRyxFQUE0R3VVLFlBQVd2VSxPQUF2SCxFQUErSHdVLGFBQVl4VSxPQUEzSSxFQUFtSnlVLFVBQVN6VSxPQUE1SixFQUFvSzBVLGdCQUFlMVUsT0FBbkwsRUFBMkwyVSxlQUFjM1UsT0FBek0sRUFBaU40VSxnQkFBZTVVLE9BQWhPLEVBQXdPNlUsZUFBYzdVLE9BQXRQLEVBQThQOFUsZ0JBQWU5VSxPQUE3USxFQUFxUitVLGNBQWEvVSxPQUFsUyxFQUEwU2dWLGFBQVloVixPQUF0VCxFQUE4VGlWLGNBQWFqVixPQUEzVSxFQUFtVmtWLGFBQVlsVixPQUEvVixFQUF1V21WLGNBQWFuVixPQUFwWCxFQUE0WG9WLG1CQUFrQnBWLE9BQTlZLEVBQXNacVYsa0JBQWlCclYsT0FBdmEsRUFBK2FzVixtQkFBa0J0VixPQUFqYyxFQUF5Y3VWLGtCQUFpQnZWLE9BQTFkLEVBQWtld1YsbUJBQWtCeFYsT0FBcGYsRUFBNGZ5VixVQUFTLENBQUMvYixNQUFELEVBQVFrRyxNQUFSLEVBQWVJLE9BQWYsQ0FBcmdCLEVBQTZoQjBWLFNBQVFoYyxNQUFyaUIsRUFBNGlCaWMsZUFBY2pjLE1BQTFqQixFQUFpa0JrYyxjQUFhbGMsTUFBOWtCLEVBQXFsQm1jLGVBQWNuYyxNQUFubUIsRUFBMG1Cb2MsY0FBYXBjLE1BQXZuQixFQUE4bkJxYyxlQUFjcmMsTUFBNW9CLEVBQW1wQnNjLGlCQUFnQnRjLE1BQW5xQixFQUEwcUJ1Yyx1QkFBc0J2YyxNQUFoc0IsRUFBdXNCd2Msc0JBQXFCeGMsTUFBNXRCLEVBQW11QnljLHVCQUFzQnpjLE1BQXp2QixFQUFnd0IwYyxzQkFBcUIxYyxNQUFyeEIsRUFBNHhCMmMsdUJBQXNCM2MsTUFBbHpCLEVBQXl6QjRjLFFBQU8sQ0FBQzVjLE1BQUQsRUFBUWtHLE1BQVIsRUFBZUksT0FBZixDQUFoMEIsRUFBdzFCdVcsY0FBYSxDQUFDN2MsTUFBRCxFQUFRa0csTUFBUixFQUFlSSxPQUFmLENBQXIyQixFQUE2M0J3VyxhQUFZLENBQUM5YyxNQUFELEVBQVFrRyxNQUFSLEVBQWVJLE9BQWYsQ0FBejRCLEVBQWk2QnlXLGNBQWEsQ0FBQy9jLE1BQUQsRUFBUWtHLE1BQVIsRUFBZUksT0FBZixDQUE5NkIsRUFBczhCMFcsYUFBWSxDQUFDaGQsTUFBRCxFQUFRa0csTUFBUixFQUFlSSxPQUFmLENBQWw5QixFQUEwK0IyVyxjQUFhLENBQUNqZCxNQUFELEVBQVFrRyxNQUFSLEVBQWVJLE9BQWYsQ0FBdi9CLEVBQStnQzRXLGNBQWEsQ0FBQ2xkLE1BQUQsRUFBUWtHLE1BQVIsRUFBZUksT0FBZixDQUE1aEMsRUFBb2pDNlcsb0JBQW1CLENBQUNuZCxNQUFELEVBQVFrRyxNQUFSLEVBQWVJLE9BQWYsQ0FBdmtDLEVBQStsQzhXLG1CQUFrQixDQUFDcGQsTUFBRCxFQUFRa0csTUFBUixFQUFlSSxPQUFmLENBQWpuQyxFQUF5b0MrVyxvQkFBbUIsQ0FBQ3JkLE1BQUQsRUFBUWtHLE1BQVIsRUFBZUksT0FBZixDQUE1cEMsRUFBb3JDZ1gsbUJBQWtCLENBQUN0ZCxNQUFELEVBQVFrRyxNQUFSLEVBQWVJLE9BQWYsQ0FBdHNDLEVBQTh0Q2lYLG9CQUFtQixDQUFDdmQsTUFBRCxFQUFRa0csTUFBUixFQUFlSSxPQUFmLENBQWp2QyxFQUF4QixFQUFreUNyRyxVQUFTLEVBQUNzUixTQUFRLFNBQVM1VSxDQUFULEdBQVk7QUFBQyxjQUFJQSxJQUFFLEVBQUMsVUFBUyxLQUFLOGQsS0FBZixFQUFxQixpQkFBZ0IsS0FBS0MsV0FBMUMsRUFBc0QsZ0JBQWUsS0FBS0MsVUFBMUUsRUFBcUYsaUJBQWdCLEtBQUtDLFdBQTFHLEVBQXNILGdCQUFlLEtBQUtDLFVBQTFJLEVBQXFKLGlCQUFnQixLQUFLQyxXQUExSyxFQUFzTCxhQUFZLEtBQUtDLFFBQXZNLEVBQWdOLG9CQUFtQixLQUFLQyxjQUF4TyxFQUF1UCxtQkFBa0IsS0FBS0MsYUFBOVEsRUFBNFIsb0JBQW1CLEtBQUtDLGNBQXBULEVBQW1VLG1CQUFrQixLQUFLQyxhQUExVixFQUF3VyxvQkFBbUIsS0FBS0MsY0FBaFksRUFBK1ksa0JBQWlCLEtBQUtDLFlBQXJhLEVBQWtiLGlCQUFnQixLQUFLQyxXQUF2YyxFQUFtZCxrQkFBaUIsS0FBS0MsWUFBemUsRUFBc2YsaUJBQWdCLEtBQUtDLFdBQTNnQixFQUF1aEIsa0JBQWlCLEtBQUtDLFlBQTdpQixFQUEwakIseUJBQXdCLEtBQUtDLGlCQUF2bEIsRUFBeW1CLHdCQUF1QixLQUFLQyxnQkFBcm9CLEVBQXNwQix5QkFBd0IsS0FBS0MsaUJBQW5yQixFQUFxc0Isd0JBQXVCLEtBQUtDLGdCQUFqdUIsRUFBa3ZCLHlCQUF3QixLQUFLQyxpQkFBL3dCLEVBQU4sQ0FBd3lCLE9BQU8sS0FBS0MsUUFBTCxLQUFnQixhQUFXLE9BQU8sS0FBS0EsUUFBdkIsR0FBZ0NwZixFQUFFLFdBQUYsSUFBZSxDQUFDLENBQWhELEdBQWtELEtBQUtvZixRQUFMLEtBQWdCcGYsRUFBRSxlQUFhLEtBQUtvZixRQUFwQixJQUE4QixDQUFDLENBQS9DLENBQWxFLEdBQXFILEtBQUt5QixtQkFBTCxDQUF5QixTQUF6QixFQUFtQyxFQUFuQyxFQUFzQyxRQUF0QyxFQUErQzdnQixDQUEvQyxDQUFySCxFQUF1SyxLQUFLNmdCLG1CQUFMLENBQXlCLFNBQXpCLEVBQW1DLFFBQW5DLEVBQTRDLGNBQTVDLEVBQTJEN2dCLENBQTNELENBQXZLLEVBQXFPLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsU0FBekIsRUFBbUMsT0FBbkMsRUFBMkMsYUFBM0MsRUFBeUQ3Z0IsQ0FBekQsQ0FBck8sRUFBaVMsS0FBSzZnQixtQkFBTCxDQUF5QixTQUF6QixFQUFtQyxRQUFuQyxFQUE0QyxjQUE1QyxFQUEyRDdnQixDQUEzRCxDQUFqUyxFQUErVixLQUFLNmdCLG1CQUFMLENBQXlCLFNBQXpCLEVBQW1DLE9BQW5DLEVBQTJDLGFBQTNDLEVBQXlEN2dCLENBQXpELENBQS9WLEVBQTJaLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsU0FBekIsRUFBbUMsUUFBbkMsRUFBNEMsY0FBNUMsRUFBMkQ3Z0IsQ0FBM0QsQ0FBM1osRUFBeWQsS0FBSzZnQixtQkFBTCxDQUF5QixnQkFBekIsRUFBMEMsRUFBMUMsRUFBNkMsY0FBN0MsRUFBNEQ3Z0IsQ0FBNUQsQ0FBemQsRUFBd2hCLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsZ0JBQXpCLEVBQTBDLFFBQTFDLEVBQW1ELG9CQUFuRCxFQUF3RTdnQixDQUF4RSxDQUF4aEIsRUFBbW1CLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsZ0JBQXpCLEVBQTBDLE9BQTFDLEVBQWtELG1CQUFsRCxFQUFzRTdnQixDQUF0RSxDQUFubUIsRUFBNHFCLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsZ0JBQXpCLEVBQTBDLFFBQTFDLEVBQW1ELG9CQUFuRCxFQUF3RTdnQixDQUF4RSxDQUE1cUIsRUFBdXZCLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsZ0JBQXpCLEVBQTBDLE9BQTFDLEVBQWtELG1CQUFsRCxFQUFzRTdnQixDQUF0RSxDQUF2dkIsRUFBZzBCLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsZ0JBQXpCLEVBQTBDLFFBQTFDLEVBQW1ELG9CQUFuRCxFQUF3RTdnQixDQUF4RSxDQUFoMEIsRUFBMjRCLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsVUFBekIsRUFBb0MsRUFBcEMsRUFBdUMsU0FBdkMsRUFBaUQ3Z0IsQ0FBakQsQ0FBMzRCLEVBQSs3QixLQUFLNmdCLG1CQUFMLENBQXlCLFVBQXpCLEVBQW9DLFFBQXBDLEVBQTZDLGVBQTdDLEVBQTZEN2dCLENBQTdELENBQS83QixFQUErL0IsS0FBSzZnQixtQkFBTCxDQUF5QixVQUF6QixFQUFvQyxPQUFwQyxFQUE0QyxjQUE1QyxFQUEyRDdnQixDQUEzRCxDQUEvL0IsRUFBNmpDLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsVUFBekIsRUFBb0MsUUFBcEMsRUFBNkMsZUFBN0MsRUFBNkQ3Z0IsQ0FBN0QsQ0FBN2pDLEVBQTZuQyxLQUFLNmdCLG1CQUFMLENBQXlCLFVBQXpCLEVBQW9DLE9BQXBDLEVBQTRDLGNBQTVDLEVBQTJEN2dCLENBQTNELENBQTduQyxFQUEyckMsS0FBSzZnQixtQkFBTCxDQUF5QixVQUF6QixFQUFvQyxRQUFwQyxFQUE2QyxlQUE3QyxFQUE2RDdnQixDQUE3RCxDQUEzckMsRUFBMnZDLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsbUJBQXpCLEVBQTZDLEVBQTdDLEVBQWdELGlCQUFoRCxFQUFrRTdnQixDQUFsRSxDQUEzdkMsRUFBZzBDLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsbUJBQXpCLEVBQTZDLFFBQTdDLEVBQXNELHVCQUF0RCxFQUE4RTdnQixDQUE5RSxDQUFoMEMsRUFBaTVDLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsbUJBQXpCLEVBQTZDLE9BQTdDLEVBQXFELHNCQUFyRCxFQUE0RTdnQixDQUE1RSxDQUFqNUMsRUFBZytDLEtBQUs2Z0IsbUJBQUwsQ0FBeUIsbUJBQXpCLEVBQTZDLFFBQTdDLEVBQXNELHVCQUF0RCxFQUE4RTdnQixDQUE5RSxDQUFoK0MsRUFBaWpELEtBQUs2Z0IsbUJBQUwsQ0FBeUIsbUJBQXpCLEVBQTZDLE9BQTdDLEVBQXFELHNCQUFyRCxFQUE0RTdnQixDQUE1RSxDQUFqakQsRUFBZ29ELEtBQUs2Z0IsbUJBQUwsQ0FBeUIsbUJBQXpCLEVBQTZDLFFBQTdDLEVBQXNELHVCQUF0RCxFQUE4RTdnQixDQUE5RSxDQUFob0QsRUFBaXREQSxDQUF4dEQ7QUFBMHRELFNBQXhoRixFQUEzeUMsRUFBcTBIdUssU0FBUSxFQUFDc1cscUJBQW9CLDZCQUFTN2dCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWVELENBQWYsRUFBaUI7QUFBQ1IsZ0JBQUlBLElBQUUsTUFBSUEsQ0FBVixHQUFhLEtBQUtTLENBQUwsTUFBVSxhQUFXLE9BQU8sS0FBS0EsQ0FBTCxDQUFsQixHQUEwQixLQUFLQSxDQUFMLElBQVFELEVBQUVULElBQUVDLENBQUosSUFBTyxDQUFDLENBQWhCLEdBQWtCUSxFQUFFVCxJQUFFQyxDQUFGLEdBQUksT0FBTixJQUFlLENBQUMsQ0FBNUQsR0FBOERRLEVBQUVULElBQUVDLENBQUYsR0FBSSxHQUFKLEdBQVEsS0FBS1MsQ0FBTCxDQUFWLElBQW1CLENBQUMsQ0FBNUYsQ0FBYjtBQUE0RyxTQUFuSixFQUE3MEgsRUFBaytIcUIsUUFBTyxnQkFBUy9CLENBQVQsRUFBVztBQUFDLGVBQU9BLEVBQUUsS0FBSzZkLEtBQVAsRUFBYSxFQUFDOVEsYUFBWSxXQUFiLEVBQXlCb0QsT0FBTSxLQUFLeUUsT0FBcEMsRUFBYixFQUEwRCxLQUFLa00sTUFBTCxDQUFZdmYsT0FBdEUsQ0FBUDtBQUFzRixPQUEza0ksRUFBM0QsRUFBd29JdkIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBcHBJO0FBQTRwSSxHQUY1cFIsRUFFK3BSLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFNBQU4sRUFBZ0IwTSxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQXZCLEVBQVYsRUFBOEN2QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUExRDtBQUFrRSxHQUZwM1IsRUFFdTNSLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssZ0JBQU4sRUFBM0QsRUFBbUZoSSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEvRjtBQUF1RyxHQUYzL1IsRUFFOC9SLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssY0FBTixFQUFxQjVFLE9BQU0sRUFBQ3NHLFVBQVNDLE9BQVYsRUFBM0IsRUFBOENyRyxVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxlQUFjLEtBQUtsTCxRQUFwQixFQUFOO0FBQW9DLFNBQXhELEVBQXZELEVBQTNELEVBQTZLMUosRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBekw7QUFBaU0sR0FGNXRTLEVBRSt0UyxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGNBQU4sRUFBM0QsRUFBaUZoSSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUE3RjtBQUFxRyxHQUZqMlMsRUFFbzJTLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGNBQU4sRUFBcUI1RSxPQUFNLEVBQUNzRyxVQUFTQyxPQUFWLEVBQWtCb1gsa0JBQWlCcFgsT0FBbkMsRUFBM0IsRUFBdUVLLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNnWCxZQUFXLENBQUMsQ0FBYixFQUFlak0sUUFBTyxDQUFDLENBQXZCLEVBQXlCL0ksUUFBTyxDQUFoQyxFQUFrQ2lWLGlCQUFnQixJQUFsRCxFQUF1RHZJLGVBQWMsQ0FBQyxDQUF0RSxFQUFOO0FBQStFLE9BQXRLLEVBQXVLcFYsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsZUFBYyxLQUFLbEwsUUFBcEIsRUFBNkIsYUFBWSxLQUFLcUwsTUFBOUMsRUFBTjtBQUE0RCxTQUFoRixFQUFpRm1NLGVBQWMseUJBQVU7QUFBQyxpQkFBTSxFQUFDLHFCQUFvQixLQUFLeEksYUFBMUIsRUFBTjtBQUErQyxTQUF6SixFQUEwSnlJLGNBQWEsd0JBQVU7QUFBQyxpQkFBTSxFQUFDLGlCQUFnQixLQUFLblYsTUFBdEIsRUFBTjtBQUFvQyxTQUF0TixFQUFoTCxFQUF3WXpCLFNBQVEsRUFBQzZXLGVBQWMseUJBQVU7QUFBQyxjQUFJcGhCLElBQUUsSUFBTixDQUFXLEtBQUtnaEIsVUFBTCxDQUFnQmxNLFNBQWhCLENBQTBCbkosT0FBMUIsQ0FBbUMsVUFBUzFMLENBQVQsRUFBVztBQUFDQSxjQUFFdUUsR0FBRixLQUFReEUsRUFBRXdFLEdBQVYsSUFBZXZFLEVBQUV1RSxHQUFGLENBQU1FLFNBQU4sQ0FBZ0JDLFFBQWhCLENBQXlCLHFCQUF6QixDQUFmLEtBQWlFMUUsRUFBRThVLE1BQUYsR0FBUyxDQUFDLENBQTNFO0FBQThFLFdBQTdIO0FBQWdJLFNBQXJLLEVBQXNLc00sa0JBQWlCLDRCQUFVO0FBQUMsY0FBSXJoQixJQUFFLElBQU4sQ0FBVytELE9BQU91ZCxxQkFBUCxDQUE4QixZQUFVO0FBQUN0aEIsY0FBRWdNLE1BQUYsR0FBUyxDQUFDaE0sRUFBRXdFLEdBQUYsQ0FBTTJKLFlBQVAsR0FBb0IsSUFBN0IsRUFBa0NwSyxPQUFPK0UsVUFBUCxDQUFtQixZQUFVO0FBQUM5SSxnQkFBRTBZLGFBQUYsR0FBZ0IsQ0FBQyxDQUFqQjtBQUFtQixhQUFqRCxDQUFsQztBQUFzRixXQUEvSDtBQUFrSSxTQUEvVSxFQUFnVjZJLGtCQUFpQiwwQkFBU3ZoQixDQUFULEVBQVc7QUFBQyxlQUFLK2dCLGdCQUFMLElBQXVCLEtBQUtLLGFBQUwsRUFBdkIsRUFBNEMsS0FBS0MsZ0JBQUwsRUFBNUMsRUFBb0UsS0FBS3RNLE1BQUwsR0FBWSxDQUFDLEtBQUtBLE1BQXRGLEVBQTZGLEtBQUtsSyxLQUFMLENBQVcsT0FBWCxFQUFtQjdLLENBQW5CLENBQTdGO0FBQW1ILFNBQWhlLEVBQWlld2hCLHdCQUF1QixrQ0FBVTtBQUFDLGVBQUs5SSxhQUFMLEdBQW1CLENBQUMsQ0FBcEIsRUFBc0IsS0FBSzJJLGdCQUFMLEVBQXRCO0FBQThDLFNBQWpqQixFQUFrakJJLHFCQUFvQiwrQkFBVTtBQUFDLGVBQUtSLGVBQUwsR0FBcUIsSUFBSVMsZ0JBQUosQ0FBcUIsS0FBS0Ysc0JBQTFCLENBQXJCLEVBQXVFLEtBQUtQLGVBQUwsQ0FBcUJVLE9BQXJCLENBQTZCLEtBQUszTCxLQUFMLENBQVdsRyxNQUF4QyxFQUErQyxFQUFDOFIsV0FBVSxDQUFDLENBQVosRUFBY0MsZUFBYyxDQUFDLENBQTdCLEVBQStCQyxTQUFRLENBQUMsQ0FBeEMsRUFBL0MsQ0FBdkU7QUFBa0ssU0FBbnZCLEVBQWhaLEVBQXFvQ3pNLFNBQVEsbUJBQVU7QUFBQyxZQUFJclYsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsWUFBRWdoQixVQUFGLEdBQWEsQ0FBQyxHQUFFcGYsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRWtELE9BQWhCLEVBQXdCLFNBQXhCLENBQWIsRUFBZ0RsRCxFQUFFcWhCLGdCQUFGLEVBQWhELEVBQXFFcmhCLEVBQUV5aEIsbUJBQUYsRUFBckUsRUFBNkYxZCxPQUFPK0ssZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBaUM5TyxFQUFFd2hCLHNCQUFuQyxDQUE3RjtBQUF3SixTQUFuTDtBQUFzTCxPQUF6MUMsRUFBMDFDN0wsZUFBYyx5QkFBVTtBQUFDLGFBQUtzTCxlQUFMLElBQXNCLEtBQUtBLGVBQUwsQ0FBcUJjLFVBQXJCLEVBQXRCLEVBQXdEaGUsT0FBTzBLLG1CQUFQLENBQTJCLFFBQTNCLEVBQW9DLEtBQUsrUyxzQkFBekMsQ0FBeEQ7QUFBeUgsT0FBNStDLEVBQVYsRUFBdy9DeGhCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXBnRDtBQUE0Z0QsR0FGcGdXLEVBRXVnVyxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGNBQU4sRUFBcUI1RSxPQUFNLEVBQUNxTSxNQUFLcE0sTUFBTixFQUFhaVMsUUFBT2pTLE1BQXBCLEVBQTJCcUcsVUFBU0MsT0FBcEMsRUFBM0IsRUFBd0VyRyxVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxlQUFjLEtBQUtsTCxRQUFwQixFQUFOO0FBQW9DLFNBQXhELEVBQWpGLEVBQTNELEVBQXVNMUosRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBbk47QUFBMk4sR0FGL3ZXLEVBRWt3VyxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsR0FBaURsRCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGNBQU4sRUFBcUI1RSxPQUFNLEVBQUNzRyxVQUFTQyxPQUFWLEVBQTNCLEVBQThDckcsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsZUFBYyxLQUFLbEwsUUFBcEIsRUFBTjtBQUFvQyxTQUF4RCxFQUF2RCxFQUEzRCxFQUE2SzFKLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXpMO0FBQWlNLEdBRmgrVyxFQUVtK1csVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQ7QUFBQSxRQUFtQmtCLElBQUVuQixFQUFFLEdBQUYsQ0FBckI7QUFBQSxRQUE0QmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE5QixDQUFtQzVCLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssU0FBTixFQUFnQjVFLE9BQU0sRUFBQzRlLFFBQU8sRUFBQ3ZZLE1BQUssQ0FBQ0YsTUFBRCxFQUFRbEcsTUFBUixDQUFOLEVBQXNCOUIsU0FBUSxDQUE5QixFQUFSLEVBQXlDMGdCLGFBQVksRUFBQ3hZLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLGNBQXJCLEVBQXJELEVBQTBGMmdCLGdCQUFlLEVBQUN6WSxNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBekcsRUFBbUk0Z0IsV0FBVSxFQUFDMVksTUFBSyxDQUFDRixNQUFELEVBQVFsRyxNQUFSLENBQU4sRUFBc0I5QixTQUFRLENBQTlCLEVBQTdJLEVBQThLNmdCLFdBQVUsRUFBQzNZLE1BQUssQ0FBQ0YsTUFBRCxFQUFRbEcsTUFBUixDQUFOLEVBQXNCOUIsU0FBUSxDQUE5QixFQUF4TCxFQUF5TjhnQixpQkFBZ0IsRUFBQzVZLE1BQUtFLE9BQU4sRUFBY3BJLFNBQVEsQ0FBQyxDQUF2QixFQUF6TyxFQUF0QixFQUEwUnlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUMrSyxRQUFPLENBQUMsQ0FBVCxFQUFOO0FBQWtCLE9BQTVULEVBQTZUblIsT0FBTSxFQUFDb2UsUUFBTyxnQkFBU2hpQixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxlQUFHLENBQUgsSUFBTUEsS0FBRyxDQUFULEtBQWEsS0FBS3NpQiw4QkFBTCxDQUFvQ3JpQixDQUFwQyxHQUF1QyxLQUFLc2lCLDBCQUFMLENBQWdDdmlCLENBQWhDLENBQXBEO0FBQXdGLFNBQTlHLEVBQStHaWlCLGFBQVkscUJBQVNqaUIsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxlQUFLdWlCLG1DQUFMLENBQXlDdmlCLENBQXpDLEdBQTRDLEtBQUt3aUIsK0JBQUwsQ0FBcUN6aUIsQ0FBckMsQ0FBNUM7QUFBb0YsU0FBN04sRUFBOE5raUIsZ0JBQWUsd0JBQVNsaUIsQ0FBVCxFQUFXO0FBQUMsZUFBSzBpQix1QkFBTCxDQUE2QjFpQixDQUE3QjtBQUFnQyxTQUF6UixFQUFuVSxFQUE4bEJ1SyxTQUFRLEVBQUNvWSxjQUFhLHdCQUFVO0FBQUMsY0FBRyxDQUFDLEtBQUtDLFdBQVQsRUFBcUIsTUFBTSxLQUFLMU8sUUFBTCxJQUFnQixJQUFJYixLQUFKLENBQVUsbURBQVYsQ0FBdEIsQ0FBcUYsSUFBRyxDQUFDLEtBQUt3UCxXQUFULEVBQXFCLE1BQU0sS0FBSzNPLFFBQUwsSUFBZ0IsSUFBSWIsS0FBSixDQUFVLDZFQUFWLENBQXRCO0FBQStHLFNBQXZRLEVBQXdRaVAsZ0NBQStCLHdDQUFTdGlCLENBQVQsRUFBVztBQUFDLGVBQUs0aUIsV0FBTCxDQUFpQmxlLFNBQWpCLENBQTJCa00sTUFBM0IsQ0FBa0MsYUFBVzVRLENBQTdDO0FBQWdELFNBQW5XLEVBQW9Xd2lCLHFDQUFvQyw2Q0FBU3hpQixDQUFULEVBQVc7QUFBQyxlQUFLNGlCLFdBQUwsQ0FBaUJsZSxTQUFqQixDQUEyQmtNLE1BQTNCLENBQWtDLGtCQUFnQjVRLEVBQUUrUSxPQUFGLENBQVUsSUFBVixFQUFlLEdBQWYsQ0FBbEQ7QUFBdUUsU0FBM2QsRUFBNGR3Uiw0QkFBMkIsb0NBQVN2aUIsQ0FBVCxFQUFXO0FBQUMsZUFBSzRpQixXQUFMLENBQWlCbGUsU0FBakIsQ0FBMkJuQyxHQUEzQixDQUErQixhQUFXdkMsQ0FBMUM7QUFBNkMsU0FBaGpCLEVBQWlqQnlpQixpQ0FBZ0MseUNBQVN6aUIsQ0FBVCxFQUFXO0FBQUMsZUFBSzRpQixXQUFMLENBQWlCbGUsU0FBakIsQ0FBMkJuQyxHQUEzQixDQUErQixrQkFBZ0J2QyxFQUFFK1EsT0FBRixDQUFVLElBQVYsRUFBZSxHQUFmLENBQS9DO0FBQW9FLFNBQWpxQixFQUFrcUIyUix5QkFBd0IsaUNBQVMxaUIsQ0FBVCxFQUFXO0FBQUNBLGVBQUcsS0FBSzRpQixXQUFMLENBQWlCbGUsU0FBakIsQ0FBMkJuQyxHQUEzQixDQUErQixrQkFBL0IsQ0FBSDtBQUFzRCxTQUE1dkIsRUFBNnZCdWdCLGFBQVkscUJBQVM5aUIsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxjQUFJUyxJQUFFLEtBQUttaUIsV0FBTCxDQUFpQjNKLHFCQUFqQixFQUFOO0FBQUEsY0FBK0N6WSxJQUFFLFVBQVFULENBQVIsR0FBVVUsRUFBRXlULEdBQUYsR0FBTXpULEVBQUVzTCxNQUFSLEdBQWUsS0FBSzRXLFdBQUwsQ0FBaUJ2TyxZQUExQyxHQUF1RDNULEVBQUV5VCxHQUExRztBQUFBLGNBQThHeFQsSUFBRSxXQUFTVixDQUFULEdBQVdTLEVBQUU2VCxJQUFGLEdBQU8sS0FBS3FPLFdBQUwsQ0FBaUIvVSxXQUF4QixHQUFvQ25OLEVBQUVxTCxLQUFqRCxHQUF1RHJMLEVBQUU2VCxJQUF6SyxDQUE4SyxPQUFPOVQsS0FBRzZTLFNBQVMsS0FBSzhPLFNBQWQsRUFBd0IsRUFBeEIsQ0FBSCxFQUErQnpoQixLQUFHMlMsU0FBUyxLQUFLNk8sU0FBZCxFQUF3QixFQUF4QixDQUFsQyxFQUE4RCxLQUFLRCxjQUFMLEtBQXNCLFVBQVFsaUIsQ0FBUixHQUFVUyxLQUFHQyxFQUFFc0wsTUFBRixHQUFTLEVBQXRCLEdBQXlCdkwsS0FBR0MsRUFBRXNMLE1BQUYsR0FBUyxFQUEzRCxDQUE5RCxFQUE2SCxFQUFDbUksS0FBSTFULENBQUwsRUFBTzhULE1BQUs1VCxDQUFaLEVBQXBJO0FBQW1KLFNBQXhsQyxFQUF5bENvaUIseUJBQXdCLG1DQUFVO0FBQUMsY0FBSS9pQixJQUFFLEtBQUssQ0FBWCxDQUFhQSxJQUFFLEtBQUtpaUIsV0FBTCxHQUFpQixLQUFLYSxXQUFMLENBQWlCL2MsS0FBakIsQ0FBdUIsSUFBdkIsRUFBNEIsS0FBS2tjLFdBQUwsQ0FBaUJsSyxJQUFqQixHQUF3QnhSLEtBQXhCLENBQThCLEdBQTlCLENBQTVCLENBQWpCLEdBQWlGLEtBQUt1YyxXQUFMLENBQWlCLFFBQWpCLEVBQTBCLE9BQTFCLENBQW5GLEVBQXNIOWlCLElBQUUsQ0FBQyxHQUFFMkIsRUFBRUosT0FBTCxFQUFjLEtBQUtxaEIsV0FBbkIsRUFBK0I1aUIsQ0FBL0IsQ0FBeEgsRUFBMEosS0FBSzRpQixXQUFMLENBQWlCeGIsS0FBakIsQ0FBdUIrTSxHQUF2QixHQUEyQm5VLEVBQUVtVSxHQUFGLEdBQU1wUSxPQUFPaWYsV0FBYixHQUF5QixJQUE5TSxFQUFtTixLQUFLSixXQUFMLENBQWlCeGIsS0FBakIsQ0FBdUJtTixJQUF2QixHQUE0QnZVLEVBQUV1VSxJQUFGLEdBQU94USxPQUFPa2YsV0FBZCxHQUEwQixJQUF6UTtBQUE4USxTQUF2NUMsRUFBdzVDQyxxQkFBb0IsK0JBQVU7QUFBQ25mLGlCQUFPdWQscUJBQVAsQ0FBNkIsS0FBS3lCLHVCQUFsQztBQUEyRCxTQUFsL0MsRUFBbS9DemEsTUFBSyxnQkFBVTtBQUFDN0IsbUJBQVNrSyxJQUFULENBQWNoTSxRQUFkLENBQXVCLEtBQUtpZSxXQUE1QixLQUEwQ25jLFNBQVNrSyxJQUFULENBQWNxSSxXQUFkLENBQTBCLEtBQUs0SixXQUEvQixDQUExQyxFQUFzRm5jLFNBQVNrSyxJQUFULENBQWN4SSxXQUFkLENBQTBCLEtBQUt5YSxXQUEvQixDQUF0RixFQUFrSW5jLFNBQVNrSyxJQUFULENBQWN4SSxXQUFkLENBQTBCLEtBQUtnYixlQUEvQixDQUFsSSxFQUFrTHBmLE9BQU8rSyxnQkFBUCxDQUF3QixRQUF4QixFQUFpQyxLQUFLb1UsbUJBQXRDLENBQWxMLEVBQTZPLEtBQUtILHVCQUFMLEVBQTdPLEVBQTRRMVYsaUJBQWlCLEtBQUt1VixXQUF0QixFQUFtQ3pPLEdBQS9TLEVBQW1ULEtBQUt5TyxXQUFMLENBQWlCbGUsU0FBakIsQ0FBMkJuQyxHQUEzQixDQUErQixXQUEvQixDQUFuVCxFQUErVixLQUFLcWdCLFdBQUwsQ0FBaUIvSyxLQUFqQixFQUEvVixFQUF3WCxLQUFLOUMsTUFBTCxHQUFZLENBQUMsQ0FBclksRUFBdVksS0FBS2xLLEtBQUwsQ0FBVyxNQUFYLENBQXZZO0FBQTBaLFNBQTc1RCxFQUE4NURyQyxPQUFNLFNBQVN4SSxDQUFULEdBQVk7QUFBQyxjQUFJQyxJQUFFLElBQU47QUFBQSxjQUFXRCxJQUFFLFNBQVNBLENBQVQsQ0FBV1UsQ0FBWCxFQUFhO0FBQUMsZ0JBQUdULEVBQUUyaUIsV0FBRixJQUFlbGlCLEVBQUU0VSxNQUFGLEtBQVdyVixFQUFFMmlCLFdBQS9CLEVBQTJDO0FBQUMsa0JBQUluaUIsSUFBRVIsRUFBRTJpQixXQUFGLENBQWNwUyxhQUFkLENBQTRCLHNCQUE1QixDQUFOLENBQTBEdlEsRUFBRTJpQixXQUFGLENBQWNuVSxtQkFBZCxDQUFrQzdNLEVBQUVMLE9BQXBDLEVBQTRDdkIsQ0FBNUMsR0FBK0NDLEVBQUU0aUIsV0FBRixDQUFjaEwsS0FBZCxFQUEvQyxFQUFxRTVYLEVBQUU4VSxNQUFGLEdBQVMsQ0FBQyxDQUEvRSxFQUFpRnRVLEtBQUdBLEVBQUVpRSxTQUFGLENBQVlrTSxNQUFaLENBQW1CLFdBQW5CLENBQXBGLEVBQW9IbkssU0FBU2tLLElBQVQsQ0FBY3FJLFdBQWQsQ0FBMEIvWSxFQUFFMmlCLFdBQTVCLENBQXBILEVBQTZKbmMsU0FBU2tLLElBQVQsQ0FBY3FJLFdBQWQsQ0FBMEIvWSxFQUFFa2pCLGVBQTVCLENBQTdKLEVBQTBNcGYsT0FBTzBLLG1CQUFQLENBQTJCLFFBQTNCLEVBQW9DeE8sRUFBRWlqQixtQkFBdEMsQ0FBMU07QUFBcVE7QUFBQyxXQUF2WSxDQUF3WSxLQUFLTixXQUFMLENBQWlCOVQsZ0JBQWpCLENBQWtDbE4sRUFBRUwsT0FBcEMsRUFBNEN2QixDQUE1QyxHQUErQyxLQUFLNGlCLFdBQUwsQ0FBaUJsZSxTQUFqQixDQUEyQmtNLE1BQTNCLENBQWtDLFdBQWxDLENBQS9DLEVBQThGLEtBQUsvRixLQUFMLENBQVcsT0FBWCxDQUE5RjtBQUFrSCxTQUEzNkUsRUFBNDZFNkssUUFBTyxrQkFBVTtBQUFDLGVBQUtYLE1BQUwsR0FBWSxLQUFLdk0sS0FBTCxFQUFaLEdBQXlCLEtBQUtGLElBQUwsRUFBekI7QUFBcUMsU0FBbitFLEVBQXRtQixFQUEya0crTSxTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsSUFBTixDQUFXLEtBQUttTCxTQUFMLENBQWdCLFlBQVU7QUFBQ25MLFlBQUU2aUIsV0FBRixHQUFjN2lCLEVBQUV3RSxHQUFGLENBQU1nTSxhQUFOLENBQW9CLG1CQUFwQixDQUFkLEVBQXVEeFEsRUFBRTRpQixXQUFGLEdBQWM1aUIsRUFBRXdFLEdBQUYsQ0FBTWdNLGFBQU4sQ0FBb0Isa0JBQXBCLENBQXJFLEVBQTZHeFEsRUFBRW1qQixlQUFGLEdBQWtCbmpCLEVBQUVnVyxLQUFGLENBQVFXLFFBQVIsQ0FBaUJuUyxHQUFoSixFQUFvSnhFLEVBQUUyaUIsWUFBRixFQUFwSixFQUFxSzNpQixFQUFFMGlCLHVCQUFGLENBQTBCMWlCLEVBQUVraUIsY0FBNUIsQ0FBckssRUFBaU5saUIsRUFBRXVpQiwwQkFBRixDQUE2QnZpQixFQUFFZ2lCLE1BQS9CLENBQWpOLEVBQXdQaGlCLEVBQUV5aUIsK0JBQUYsQ0FBa0N6aUIsRUFBRWlpQixXQUFwQyxDQUF4UCxFQUF5U2ppQixFQUFFd0UsR0FBRixDQUFNd1UsV0FBTixDQUFrQmhaLEVBQUVnVyxLQUFGLENBQVFXLFFBQVIsQ0FBaUJuUyxHQUFuQyxDQUF6UyxFQUFpVnhFLEVBQUU0aUIsV0FBRixDQUFjN1UsVUFBZCxDQUF5QmlMLFdBQXpCLENBQXFDaFosRUFBRTRpQixXQUF2QyxDQUFqVixFQUFxWTVpQixFQUFFNmlCLFdBQUYsQ0FBYy9ULGdCQUFkLENBQStCLE9BQS9CLEVBQXVDOU8sRUFBRTBWLE1BQXpDLENBQXJZO0FBQXNiLFNBQWpkO0FBQW9kLE9BQTdqSCxFQUE4akhDLGVBQWMseUJBQVU7QUFBQ2xQLGlCQUFTa0ssSUFBVCxDQUFjaE0sUUFBZCxDQUF1QixLQUFLaWUsV0FBNUIsTUFBMkNuYyxTQUFTa0ssSUFBVCxDQUFjcUksV0FBZCxDQUEwQixLQUFLNEosV0FBL0IsR0FBNENuYyxTQUFTa0ssSUFBVCxDQUFjcUksV0FBZCxDQUEwQixLQUFLbUssZUFBL0IsQ0FBdkYsR0FBd0ksS0FBS04sV0FBTCxDQUFpQnBVLG1CQUFqQixDQUFxQyxPQUFyQyxFQUE2QyxLQUFLaUgsTUFBbEQsQ0FBeEksRUFBa00zUixPQUFPMEssbUJBQVAsQ0FBMkIsUUFBM0IsRUFBb0MsS0FBS3lVLG1CQUF6QyxDQUFsTTtBQUFnUSxPQUF2MUgsRUFBVixFQUFtMkhsakIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBLzJIO0FBQXUzSCxHQUY5L2UsRUFFaWdmLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssaUJBQU4sRUFBd0JnQyxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDb1osY0FBYSxDQUFDLENBQWYsRUFBaUJDLGFBQVksQ0FBQyxDQUE5QixFQUFnQ0MsYUFBWSxDQUE1QyxFQUFOO0FBQXFELE9BQTdGLEVBQThGL1ksU0FBUSxFQUFDL0IsT0FBTSxpQkFBVTtBQUFDLGVBQUs2YSxXQUFMLEdBQWlCLENBQUMsQ0FBbEIsRUFBb0IsS0FBS25nQixPQUFMLENBQWFzRixLQUFiLEVBQXBCO0FBQXlDLFNBQTNELEVBQTREK2EsZUFBYyx1QkFBU3ZqQixDQUFULEVBQVc7QUFBQyxlQUFLb2pCLFlBQUwsR0FBa0IsS0FBS0MsV0FBdkIsRUFBbUMsU0FBT3JqQixDQUFQLEtBQVcsTUFBSSxLQUFLcWpCLFdBQVQsR0FBcUIsS0FBS0EsV0FBTCxHQUFpQixLQUFLQyxXQUEzQyxHQUF1RCxLQUFLRCxXQUFMLEVBQWxFLENBQW5DLEVBQXlILFdBQVNyakIsQ0FBVCxLQUFhLEtBQUtxakIsV0FBTCxLQUFtQixLQUFLQyxXQUF4QixHQUFvQyxLQUFLRCxXQUFMLEdBQWlCLENBQXJELEdBQXVELEtBQUtBLFdBQUwsRUFBcEUsQ0FBekg7QUFBaU4sU0FBdlMsRUFBd1NHLFdBQVUscUJBQVU7QUFBQyxlQUFLSCxXQUFMLEdBQWlCLENBQWpCLElBQW9CLEtBQUtJLFVBQUwsR0FBa0IsS0FBS0osV0FBTCxHQUFpQixDQUFuQyxFQUFzQzdlLEdBQXRDLENBQTBDNlYsS0FBMUMsRUFBcEI7QUFBc0UsU0FBblksRUFBb1lvSixZQUFXLHNCQUFVO0FBQUMsaUJBQU8sS0FBSzNPLFNBQUwsQ0FBZSxDQUFmLEVBQWtCQSxTQUFsQixDQUE0QjRPLE1BQTVCLENBQW9DLFVBQVMxakIsQ0FBVCxFQUFXO0FBQUMsbUJBQU9BLEVBQUV3RSxHQUFGLENBQU1FLFNBQU4sQ0FBZ0JDLFFBQWhCLENBQXlCLFdBQXpCLENBQVA7QUFBNkMsV0FBN0YsQ0FBUDtBQUF1RyxTQUFqZ0IsRUFBdEcsRUFBeW1CMFEsU0FBUSxtQkFBVTtBQUFDLFlBQUcsQ0FBQyxLQUFLblMsT0FBTCxDQUFhc0IsR0FBYixDQUFpQkUsU0FBakIsQ0FBMkJDLFFBQTNCLENBQW9DLFNBQXBDLENBQUosRUFBbUQsTUFBTSxLQUFLdVAsUUFBTCxJQUFnQixJQUFJYixLQUFKLENBQVUsZ0RBQVYsQ0FBdEI7QUFBa0YsT0FBandCLEVBQTNELEVBQTh6QnJULEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQTEwQjtBQUFrMUIsR0FGaDNnQixFQUVtM2dCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CRCxFQUFFLEdBQUYsR0FBT1QsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxjQUFOLEVBQXFCNUUsT0FBTSxFQUFDcU0sTUFBS3BNLE1BQU4sRUFBYWlTLFFBQU9qUyxNQUFwQixFQUEyQnFHLFVBQVNDLE9BQXBDLEVBQTNCLEVBQXdFSyxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDMlosZUFBYyxFQUFmLEVBQWtCQyxPQUFNLENBQXhCLEVBQU47QUFBaUMsT0FBekgsRUFBMEh0Z0IsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsa0JBQWlCLEtBQUt5TyxXQUF2QixFQUFOO0FBQTBDLFNBQTlELEVBQStEQSxhQUFZLHVCQUFVO0FBQUMsaUJBQU8sS0FBS08sS0FBTCxLQUFhLEtBQUtELGFBQUwsQ0FBbUJOLFdBQWhDLEtBQThDLEtBQUszWixRQUFMLEtBQWdCLEtBQUtpYSxhQUFMLENBQW1CUCxZQUFuQixHQUFnQyxLQUFLTyxhQUFMLENBQW1CTixXQUFuRCxHQUErRCxLQUFLTSxhQUFMLENBQW1CTixXQUFuQixFQUEvRCxHQUFnRyxLQUFLTSxhQUFMLENBQW1CTixXQUFuQixFQUFoSCxHQUFrSixNQUFJLEtBQUtPLEtBQVQsR0FBZSxLQUFLRCxhQUFMLENBQW1CbmYsR0FBbkIsQ0FBdUJ5SixTQUF2QixHQUFpQyxDQUFoRCxHQUFrRCxLQUFLMlYsS0FBTCxLQUFhLEtBQUtELGFBQUwsQ0FBbUJMLFdBQWhDLEdBQTRDLEtBQUtLLGFBQUwsQ0FBbUJuZixHQUFuQixDQUF1QnlKLFNBQXZCLEdBQWlDLEtBQUswVixhQUFMLENBQW1CbmYsR0FBbkIsQ0FBdUIySixZQUFwRyxHQUFpSCxLQUFLM0osR0FBTCxDQUFTcWYsc0JBQVQsQ0FBZ0MsQ0FBQyxDQUFqQyxDQUFyVCxFQUF5VixDQUFDLENBQXhZLENBQVA7QUFBa1osU0FBeGUsRUFBbkksRUFBNm1CdFosU0FBUSxFQUFDL0IsT0FBTSxlQUFTeEksQ0FBVCxFQUFXO0FBQUMsZUFBSzBKLFFBQUwsS0FBZ0IsS0FBS29hLFVBQUwsQ0FBZ0J6QixlQUFoQixJQUFpQyxLQUFLc0IsYUFBTCxDQUFtQm5iLEtBQW5CLEVBQWpDLEVBQTRELEtBQUtxQyxLQUFMLENBQVcsT0FBWCxFQUFtQjdLLENBQW5CLENBQTVELEVBQWtGLEtBQUs2SyxLQUFMLENBQVcsVUFBWCxFQUFzQjdLLENBQXRCLENBQWxHO0FBQTRILFNBQS9JLEVBQXJuQixFQUFzd0JxVixTQUFRLG1CQUFVO0FBQUMsWUFBRyxLQUFLc08sYUFBTCxHQUFtQixDQUFDLEdBQUUvaEIsRUFBRUwsT0FBTCxFQUFjLEtBQUsyQixPQUFuQixFQUEyQixpQkFBM0IsQ0FBbkIsRUFBaUUsS0FBSzRnQixVQUFMLEdBQWdCLENBQUMsR0FBRWxpQixFQUFFTCxPQUFMLEVBQWMsS0FBSzJCLE9BQW5CLEVBQTJCLFNBQTNCLENBQWpGLEVBQXVILENBQUMsS0FBS3lnQixhQUFoSSxFQUE4SSxNQUFNLEtBQUt6UCxRQUFMLElBQWdCLElBQUliLEtBQUosQ0FBVSxxREFBVixDQUF0QixDQUF1RixLQUFLc1EsYUFBTCxDQUFtQkwsV0FBbkIsSUFBaUMsS0FBS00sS0FBTCxHQUFXLEtBQUtELGFBQUwsQ0FBbUJMLFdBQS9EO0FBQTJFLE9BQXprQyxFQUFqQixFQUE0bEN0akIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBeG1DO0FBQWduQyxHQUZ2bmpCLEVBRTBuakIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQ7QUFBQSxRQUFtQmtCLElBQUVuQixFQUFFLEVBQUYsQ0FBckI7QUFBQSxRQUEyQmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE3QixDQUFrQzVCLEVBQUVzQixPQUFGLEdBQVUsRUFBQzZCLE9BQU0sRUFBQzBOLElBQUcsQ0FBQ3pOLE1BQUQsRUFBUWtHLE1BQVIsQ0FBSixFQUFvQndhLFNBQVEsQ0FBQzFnQixNQUFELEVBQVFrRyxNQUFSLENBQTVCLEVBQTRDMEwsUUFBTzVSLE1BQW5ELEVBQTBEK1IsVUFBU3pMLE9BQW5FLEVBQTJFcWEsWUFBV3JhLE9BQXRGLEVBQThGc2EsV0FBVTVnQixNQUF4RyxFQUErRzZnQixnQkFBZSxFQUFDemEsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsR0FBckIsRUFBOUgsRUFBd0o0aUIsb0JBQW1CLEVBQUMxYSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxRQUFyQixFQUEzSyxFQUFQLEVBQWtOeUksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQ3FMLFNBQVEsQ0FBQyxDQUFWLEVBQVkrTyxTQUFRLEtBQUt0VCxFQUFMLElBQVMsV0FBUyxDQUFDLEdBQUVsUCxFQUFFTCxPQUFMLEdBQXRDLEVBQXNEd0ssT0FBTSxLQUE1RCxFQUFrRXdJLE1BQUssS0FBdkUsRUFBTjtBQUFvRixPQUF0VCxFQUF1VDNRLE9BQU0sRUFBQ3dSLFVBQVMsb0JBQVU7QUFBQyxlQUFLaVAsZUFBTDtBQUF1QixTQUE1QyxFQUE2Q0wsWUFBVyxzQkFBVTtBQUFDLGVBQUtLLGVBQUw7QUFBdUIsU0FBMUYsRUFBMkZwUCxRQUFPLGtCQUFVO0FBQUMsZUFBS29QLGVBQUw7QUFBdUIsU0FBcEksRUFBcUlOLFNBQVEsbUJBQVU7QUFBQyxlQUFLTSxlQUFMO0FBQXVCLFNBQS9LLEVBQWdMSixXQUFVLHFCQUFVO0FBQUMsZUFBS0ksZUFBTDtBQUF1QixTQUE1TixFQUE2TkgsZ0JBQWUsMEJBQVU7QUFBQyxlQUFLRyxlQUFMO0FBQXVCLFNBQTlRLEVBQStRRixvQkFBbUIsOEJBQVU7QUFBQyxlQUFLRSxlQUFMO0FBQXVCLFNBQXBVLEVBQTdULEVBQW1vQi9nQixVQUFTLEVBQUN3SixRQUFPLGtCQUFVO0FBQUMsaUJBQU0sRUFBQ2YsT0FBTSxLQUFLQSxLQUFaLEVBQWtCd0ksTUFBSyxLQUFLQSxJQUE1QixFQUFOO0FBQXdDLFNBQTNELEVBQTVvQixFQUF5c0JoSyxTQUFRLEVBQUMrWixjQUFhLHdCQUFVO0FBQUMsaUJBQU0sRUFBQ3hULElBQUcsS0FBS3NULE9BQVQsRUFBaUJHLE9BQU0sS0FBS1IsT0FBNUIsRUFBb0NTLE1BQUssS0FBS3ZQLE1BQTlDLEVBQXFERixRQUFPLEtBQUtLLFFBQWpFLEVBQTBFMUwsVUFBUyxLQUFLc2EsVUFBeEYsRUFBbUdTLFNBQVEsS0FBS1IsU0FBaEgsRUFBMEhTLGNBQWEsS0FBS1IsY0FBNUksRUFBMkpTLGtCQUFpQixLQUFLUixrQkFBakwsRUFBb01TLEtBQUksSUFBeE0sRUFBTjtBQUFvTixTQUE3TyxFQUE4T1AsaUJBQWdCLDJCQUFVO0FBQUMsZUFBS1EsWUFBTCxDQUFrQkMsV0FBbEIsQ0FBOEIsS0FBS1IsWUFBTCxFQUE5QjtBQUFtRCxTQUE1VCxFQUFqdEIsRUFBK2dDalAsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLEtBQUtza0IsWUFBTCxFQUFOLENBQTBCLElBQUcsS0FBS08sWUFBTCxHQUFrQixDQUFDLEdBQUVsakIsRUFBRUosT0FBTCxFQUFjLEtBQUsyQixPQUFuQixFQUEyQixXQUEzQixDQUFsQixFQUEwRCxDQUFDLEtBQUsyaEIsWUFBbkUsRUFBZ0YsTUFBTSxJQUFJeFIsS0FBSixDQUFVLDJDQUFWLENBQU4sQ0FBNkQsS0FBS2dDLE9BQUwsR0FBYSxDQUFDLENBQWQsRUFBZ0IsS0FBS3dQLFlBQUwsQ0FBa0JDLFdBQWxCLENBQThCOWtCLENBQTlCLENBQWhCLEVBQWlELEtBQUtvVixRQUFMLElBQWUsS0FBS3lQLFlBQUwsQ0FBa0JFLGNBQWxCLENBQWlDL2tCLENBQWpDLENBQWhFO0FBQW9HLE9BQTd5QyxFQUE4eUMyVixlQUFjLHlCQUFVO0FBQUMsYUFBS2tQLFlBQUwsQ0FBa0JHLGVBQWxCLENBQWtDLEtBQUtWLFlBQUwsRUFBbEM7QUFBdUQsT0FBOTNDLEVBQVYsRUFBMDRDdGtCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQXQ1QztBQUE4NUMsR0FGM3JtQixFQUU4cm1CLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkO0FBQUEsUUFBbUJrQixJQUFFbkIsRUFBRSxDQUFGLENBQXJCO0FBQUEsUUFBMEJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBNUI7QUFBQSxRQUFpQ2IsSUFBRU4sRUFBRSxFQUFGLENBQW5DO0FBQUEsUUFBeUNFLElBQUVILEVBQUVPLENBQUYsQ0FBM0MsQ0FBZ0RmLEVBQUVzQixPQUFGLEdBQVUsRUFBQzZCLE9BQU0sRUFBQzZoQixTQUFRdGIsT0FBVCxFQUFpQnViLFlBQVd2YixPQUE1QixFQUFvQ3diLFNBQVF4YixPQUE1QyxFQUFvRHliLGlCQUFnQixFQUFDM2IsTUFBS0UsT0FBTixFQUFjcEksU0FBUSxDQUFDLENBQXZCLEVBQXBFLEVBQThGOGpCLGFBQVksRUFBQzViLE1BQUssQ0FBQ3BHLE1BQUQsRUFBUWtHLE1BQVIsQ0FBTixFQUFzQmhJLFNBQVEsQ0FBOUIsRUFBMUcsRUFBMkkrakIsUUFBTyxFQUFDN2IsTUFBS0UsT0FBTixFQUFjcEksU0FBUSxDQUFDLENBQXZCLEVBQWxKLEVBQTRLZ2tCLFlBQVcsRUFBQzliLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsR0FBckIsRUFBdkwsRUFBaU5pa0IsWUFBVyxFQUFDL2IsTUFBS0UsT0FBTixFQUFjcEksU0FBUSxDQUFDLENBQXZCLEVBQTVOLEVBQXNQa2tCLFlBQVcsRUFBQ2hjLE1BQUtFLE9BQU4sRUFBY3BJLFNBQVEsQ0FBQyxDQUF2QixFQUFqUSxFQUEyUm1rQixhQUFZL2IsT0FBdlMsRUFBK1NnYyxpQkFBZ0IsRUFBQ2xjLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsR0FBckIsRUFBL1QsRUFBUCxFQUFpV21ULFFBQU8sQ0FBQy9TLEVBQUVKLE9BQUgsQ0FBeFcsRUFBb1h5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDNGIsV0FBVSxFQUFYLEVBQWNDLGFBQVksSUFBMUIsRUFBK0JDLG1CQUFrQixDQUFqRCxFQUFtREMsVUFBUyxDQUFDLENBQTdELEVBQStEQyxVQUFTLENBQUMsQ0FBekUsRUFBMkVDLG1CQUFrQixJQUE3RixFQUFrR3ZOLGVBQWMsQ0FBQyxDQUFqSCxFQUFtSHdOLGVBQWMsS0FBakksRUFBdUlDLGNBQWEsS0FBcEosRUFBMEpDLGdCQUFlLElBQXpLLEVBQU47QUFBcUwsT0FBempCLEVBQTBqQjlpQixVQUFTLEVBQUMraUIsY0FBYSx3QkFBVTtBQUFDLGlCQUFNLEVBQUMscUJBQW9CLEtBQUtqQixlQUExQixFQUEwQyxxQkFBb0IsS0FBSzFNLGFBQW5FLEVBQU47QUFBd0YsU0FBakgsRUFBa0g0TixtQkFBa0IsNkJBQVU7QUFBQyxpQkFBTSxFQUFDLGVBQWMsS0FBS1AsUUFBcEIsRUFBNkIsZ0JBQWUsS0FBS0MsUUFBakQsRUFBMEQsWUFBVyxLQUFLZixPQUExRSxFQUFrRixZQUFXLENBQUMsS0FBS0MsVUFBTixJQUFrQixLQUFLQyxPQUFwSCxFQUE0SCxlQUFjLEtBQUtELFVBQUwsSUFBaUIsS0FBS0QsT0FBaEssRUFBTjtBQUErSyxTQUE5VCxFQUErVHNCLGtCQUFpQiw0QkFBVTtBQUFDLGNBQUl2bUIsSUFBRSxLQUFLd21CLG1CQUFMLEdBQXlCLEtBQUtWLGlCQUFwQyxDQUFzRCxPQUFPLEtBQUtVLG1CQUFMLEdBQXlCLEtBQUtWLGlCQUE5QixFQUFnRCxFQUFDLHFCQUFvQixLQUFLcE4sYUFBMUIsRUFBd0MsZUFBYyxDQUFDMVksQ0FBdkQsRUFBeUQsY0FBYUEsQ0FBdEUsRUFBdkQ7QUFBZ0ksU0FBamhCLEVBQW5rQixFQUFzbEN1SyxTQUFRLEVBQUNrYyxnQkFBZSx3QkFBU3ptQixDQUFULEVBQVc7QUFBQyxpQkFBTSxFQUFDLGFBQVksS0FBSzZsQixXQUFMLEtBQW1CN2xCLEVBQUU4USxFQUFsQyxFQUFxQyxlQUFjOVEsRUFBRTBKLFFBQXJELEVBQU47QUFBcUUsU0FBakcsRUFBa0dnZCxlQUFjLHVCQUFTMW1CLENBQVQsRUFBVztBQUFDLGVBQUs0bEIsU0FBTCxDQUFlNWxCLEVBQUU4USxFQUFqQixJQUFxQjlRLENBQXJCO0FBQXVCLFNBQW5KLEVBQW9KZ2xCLGlCQUFnQix5QkFBU2hsQixDQUFULEVBQVc7QUFBQyxpQkFBTyxLQUFLNGxCLFNBQUwsQ0FBZTVsQixFQUFFOFEsRUFBakIsQ0FBUDtBQUE0QixTQUE1TSxFQUE2TWdVLGFBQVkscUJBQVM5a0IsQ0FBVCxFQUFXO0FBQUMsY0FBRyxLQUFLMG1CLGFBQUwsQ0FBbUIxbUIsQ0FBbkIsR0FBc0JBLEVBQUUrVSxNQUEzQixFQUFrQyxJQUFHL1UsRUFBRTBKLFFBQUwsRUFBYztBQUFDLGdCQUFHLENBQUMsR0FBRTlILEVBQUVMLE9BQUwsRUFBYyxLQUFLcWtCLFNBQW5CLEVBQThCOWYsTUFBakMsRUFBd0M7QUFBQyxrQkFBSTdGLElBQUUsQ0FBQyxHQUFFMkIsRUFBRUwsT0FBTCxFQUFjLEtBQUtxa0IsU0FBbkIsQ0FBTjtBQUFBLGtCQUFvQ2xsQixJQUFFVCxFQUFFa1AsT0FBRixDQUFVblAsRUFBRThRLEVBQVosSUFBZ0IsQ0FBdEQ7QUFBQSxrQkFBd0RyUSxJQUFFUixFQUFFUyxDQUFGLENBQTFELENBQStERCxJQUFFLEtBQUtza0IsY0FBTCxDQUFvQixLQUFLYSxTQUFMLENBQWVubEIsQ0FBZixDQUFwQixDQUFGLEdBQXlDLEtBQUtza0IsY0FBTCxDQUFvQixLQUFLYSxTQUFMLENBQWUsQ0FBZixDQUFwQixDQUF6QztBQUFnRjtBQUFDLFdBQXhNLE1BQTZNLEtBQUtiLGNBQUwsQ0FBb0Iva0IsQ0FBcEI7QUFBdUIsU0FBM2UsRUFBNGUybUIsdUJBQXNCLGlDQUFVO0FBQUMsZUFBS0MsY0FBTCxHQUFvQixJQUFJbEYsZ0JBQUosQ0FBcUIsQ0FBQyxHQUFFOWdCLEVBQUVXLE9BQUwsRUFBYyxLQUFLc2xCLGdCQUFuQixFQUFvQyxFQUFwQyxDQUFyQixDQUFwQixFQUFrRixLQUFLRCxjQUFMLENBQW9CakYsT0FBcEIsQ0FBNEIsS0FBSzNMLEtBQUwsQ0FBVzhRLGFBQXZDLEVBQXFELEVBQUNsRixXQUFVLENBQUMsQ0FBWixFQUFjbUYsWUFBVyxDQUFDLENBQTFCLEVBQTRCakYsU0FBUSxDQUFDLENBQXJDLEVBQXJELENBQWxGO0FBQWdMLFNBQTdyQixFQUE4ckJrRixlQUFjLHVCQUFTaG5CLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsQ0FBQyxHQUFFMkIsRUFBRUwsT0FBTCxFQUFjLEtBQUtxa0IsU0FBbkIsQ0FBTixDQUFvQyxPQUFPM2xCLEVBQUVrUCxPQUFGLENBQVVuUCxDQUFWLENBQVA7QUFBb0IsU0FBaHhCLEVBQWl4QmluQix1QkFBc0IsaUNBQVU7QUFBQyxjQUFHLEtBQUtqUixLQUFMLENBQVdrUixXQUFYLElBQXdCLEtBQUtsUixLQUFMLENBQVdrUixXQUFYLENBQXVCLEtBQUtwQixpQkFBNUIsQ0FBM0IsRUFBMEU7QUFBQyxnQkFBSTlsQixJQUFFLEtBQUt3RSxHQUFMLENBQVNxSixXQUFmO0FBQUEsZ0JBQTJCNU4sSUFBRSxLQUFLK1YsS0FBTCxDQUFXa1IsV0FBWCxDQUF1QixLQUFLcEIsaUJBQTVCLENBQTdCO0FBQUEsZ0JBQTRFcGxCLElBQUVULEVBQUVrbkIsVUFBaEY7QUFBQSxnQkFBMkYxbUIsSUFBRVQsSUFBRVUsQ0FBRixHQUFJVCxFQUFFNE4sV0FBbkcsQ0FBK0csS0FBS21JLEtBQUwsQ0FBV29SLFNBQVgsQ0FBcUJoZ0IsS0FBckIsQ0FBMkJtTixJQUEzQixHQUFnQzdULElBQUUsSUFBbEMsRUFBdUMsS0FBS3NWLEtBQUwsQ0FBV29SLFNBQVgsQ0FBcUJoZ0IsS0FBckIsQ0FBMkJpZ0IsS0FBM0IsR0FBaUM1bUIsSUFBRSxJQUExRTtBQUErRTtBQUFDLFNBQTVqQyxFQUE2akM2bUIsaUNBQWdDLDJDQUFVO0FBQUMsY0FBSXRuQixJQUFFLEtBQUt3RSxHQUFMLENBQVNxSixXQUFmO0FBQUEsY0FBMkI1TixJQUFFLENBQTdCLENBQStCLEtBQUtrbUIsWUFBTCxHQUFrQm5tQixJQUFFLEtBQUs4bEIsaUJBQVAsR0FBeUIsSUFBM0MsQ0FBZ0QsS0FBSSxJQUFJcGxCLENBQVIsSUFBYSxLQUFLa2xCLFNBQWxCLEVBQTRCO0FBQUMsZ0JBQUlubEIsSUFBRSxLQUFLbWxCLFNBQUwsQ0FBZWxsQixDQUFmLENBQU4sQ0FBd0JELEVBQUVta0IsR0FBRixDQUFNN1ksS0FBTixHQUFZL0wsSUFBRSxJQUFkLEVBQW1CUyxFQUFFbWtCLEdBQUYsQ0FBTXJRLElBQU4sR0FBV3ZVLElBQUVDLENBQUYsR0FBSSxJQUFsQyxFQUF1Q0EsR0FBdkM7QUFBMkM7QUFBQyxTQUF4eEMsRUFBeXhDc25CLHdCQUF1QixrQ0FBVTtBQUFDLGNBQUl2bkIsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDLGdCQUFHLENBQUMsR0FBRXZKLEVBQUVMLE9BQUwsRUFBY3ZCLEVBQUU0bEIsU0FBaEIsRUFBMkI5ZixNQUE5QixFQUFxQztBQUFDLGtCQUFJN0YsSUFBRUQsRUFBRTRsQixTQUFGLENBQVk1bEIsRUFBRTZsQixXQUFkLEVBQTJCakIsR0FBM0IsQ0FBK0JwZ0IsR0FBL0IsQ0FBbUM2UCxZQUF6QyxDQUFzRHJVLEVBQUVrbUIsYUFBRixHQUFnQmptQixJQUFFLElBQWxCO0FBQXVCO0FBQUMsV0FBL0k7QUFBa0osU0FBeDlDLEVBQXk5Q3VuQixtQkFBa0IsNkJBQVU7QUFBQyxjQUFJeG5CLElBQUUsSUFBTixDQUFXK0QsT0FBT3VkLHFCQUFQLENBQThCLFlBQVU7QUFBQ3RoQixjQUFFaW5CLHFCQUFGLElBQTBCam5CLEVBQUVzbkIsK0JBQUYsRUFBMUIsRUFBOER0bkIsRUFBRXVuQixzQkFBRixFQUE5RDtBQUF5RixXQUFsSTtBQUFxSSxTQUF0b0QsRUFBdW9ERSxvQkFBbUIsOEJBQVU7QUFBQyxjQUFJem5CLElBQUUsSUFBTixDQUFXK0QsT0FBTzZHLFlBQVAsQ0FBb0IsS0FBS3FiLGlCQUF6QixHQUE0QyxLQUFLQSxpQkFBTCxHQUF1QmxpQixPQUFPK0UsVUFBUCxDQUFtQixZQUFVO0FBQUM5SSxjQUFFd25CLGlCQUFGLElBQXNCeG5CLEVBQUUwWSxhQUFGLEdBQWdCLENBQUMsQ0FBdkM7QUFBeUMsV0FBdkUsRUFBeUUsR0FBekUsQ0FBbkU7QUFBaUosU0FBajBELEVBQWswRG1PLGtCQUFpQiw0QkFBVTtBQUFDLGVBQUtXLGlCQUFMLElBQXlCLEtBQUtDLGtCQUFMLEVBQXpCO0FBQW1ELFNBQWo1RCxFQUFrNURDLG1CQUFrQiw2QkFBVTtBQUFDLGVBQUtoUCxhQUFMLEdBQW1CLENBQUMsQ0FBcEIsRUFBc0IsS0FBS21PLGdCQUFMLEVBQXRCO0FBQThDLFNBQTc5RCxFQUE4OURjLE9BQU0saUJBQVU7QUFBQyxjQUFJM25CLElBQUUsSUFBTixDQUFXLEtBQUtvbUIsY0FBTCxJQUFxQnJpQixPQUFPNmpCLGFBQVAsQ0FBcUIsS0FBS3hCLGNBQTFCLENBQXJCLEVBQStELEtBQUtBLGNBQUwsR0FBb0JyaUIsT0FBTzhqQixXQUFQLENBQW9CLFlBQVU7QUFBQzduQixjQUFFOG5CLGFBQUY7QUFBa0IsV0FBakQsRUFBbUQsS0FBS3ZDLFVBQXhELENBQW5GO0FBQXVKLFNBQWpwRSxFQUFrcEVSLGdCQUFlLHdCQUFTL2tCLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsZUFBS3FsQixNQUFMLElBQWFybEIsQ0FBYixJQUFnQixLQUFLMG5CLEtBQUwsRUFBaEIsRUFBNkIsS0FBSzVCLFFBQUwsR0FBYyxDQUFDLENBQUMvbEIsRUFBRXdrQixJQUEvQyxFQUFvRCxLQUFLd0IsUUFBTCxHQUFjLENBQUMsQ0FBQ2htQixFQUFFdWtCLEtBQXRFLEVBQTRFLEtBQUtzQixXQUFMLEdBQWlCN2xCLEVBQUU4USxFQUEvRixFQUFrRyxLQUFLZ1YsaUJBQUwsR0FBdUIsS0FBS2tCLGFBQUwsQ0FBbUIsS0FBS25CLFdBQXhCLENBQXpILEVBQThKLEtBQUsyQixpQkFBTCxFQUE5SixFQUF1TCxLQUFLM2MsS0FBTCxDQUFXLFFBQVgsRUFBb0IsS0FBS2liLGlCQUF6QixDQUF2TDtBQUFtTyxTQUFsNUUsRUFBbTVFaUMsZUFBYyx5QkFBVTtBQUFDLGNBQUkvbkIsSUFBRSxDQUFDLEdBQUU0QixFQUFFTCxPQUFMLEVBQWMsS0FBS3FrQixTQUFuQixDQUFOO0FBQUEsY0FBb0MzbEIsSUFBRUQsRUFBRW1QLE9BQUYsQ0FBVSxLQUFLMFcsV0FBZixJQUE0QixDQUFsRTtBQUFBLGNBQW9FbmxCLElBQUVWLEVBQUVDLENBQUYsQ0FBdEUsQ0FBMkUsSUFBR1MsQ0FBSCxFQUFLLEtBQUtxa0IsY0FBTCxDQUFvQixLQUFLYSxTQUFMLENBQWVsbEIsQ0FBZixDQUFwQixFQUFzQyxDQUFDLENBQXZDLEVBQUwsS0FBb0QsSUFBRyxLQUFLK2tCLFVBQVIsRUFBbUI7QUFBQyxnQkFBSWhsQixJQUFFLENBQUMsR0FBRW1CLEVBQUVMLE9BQUwsRUFBYyxLQUFLcWtCLFNBQW5CLEVBQThCLENBQUMsR0FBRWhrQixFQUFFTCxPQUFMLEVBQWMsS0FBS3FrQixTQUFuQixFQUE4QjlmLE1BQTlCLEdBQXFDLENBQW5FLENBQU4sQ0FBNEUsS0FBS2lmLGNBQUwsQ0FBb0IsS0FBS2EsU0FBTCxDQUFlbmxCLENBQWYsQ0FBcEIsRUFBc0MsQ0FBQyxDQUF2QztBQUEwQztBQUFDLFNBQXRyRixFQUF1ckZxbkIsZUFBYyx5QkFBVTtBQUFDLGNBQUk5bkIsSUFBRSxDQUFDLEdBQUU0QixFQUFFTCxPQUFMLEVBQWMsS0FBS3FrQixTQUFuQixDQUFOO0FBQUEsY0FBb0MzbEIsSUFBRUQsRUFBRW1QLE9BQUYsQ0FBVSxLQUFLMFcsV0FBZixJQUE0QixDQUFsRTtBQUFBLGNBQW9FbmxCLElBQUVWLEVBQUVDLENBQUYsQ0FBdEUsQ0FBMkUsSUFBR1MsQ0FBSCxFQUFLLEtBQUtxa0IsY0FBTCxDQUFvQixLQUFLYSxTQUFMLENBQWVsbEIsQ0FBZixDQUFwQixFQUFzQyxDQUFDLENBQXZDLEVBQUwsS0FBb0QsSUFBRyxLQUFLK2tCLFVBQVIsRUFBbUI7QUFBQyxnQkFBSWhsQixJQUFFLENBQUMsR0FBRW1CLEVBQUVMLE9BQUwsRUFBYyxLQUFLcWtCLFNBQW5CLEVBQThCLENBQTlCLENBQU4sQ0FBdUMsS0FBS2IsY0FBTCxDQUFvQixLQUFLYSxTQUFMLENBQWVubEIsQ0FBZixDQUFwQixFQUFzQyxDQUFDLENBQXZDO0FBQTBDO0FBQUMsU0FBcjdGLEVBQXM3RnVuQixzQkFBcUIsOEJBQVNob0IsQ0FBVCxFQUFXO0FBQUMsaUJBQU9BLElBQUUsS0FBS2lvQixXQUFMLENBQWlCMVQsSUFBbkIsSUFBeUJ2VSxJQUFFLEtBQUtpb0IsV0FBTCxDQUFpQjFULElBQWpCLEdBQXNCLEtBQUswVCxXQUFMLENBQWlCbGMsS0FBekU7QUFBK0UsU0FBdGlHLEVBQXVpR21jLG9CQUFtQiw0QkFBU2xvQixDQUFULEVBQVc7QUFBQyxpQkFBT0EsSUFBRSxLQUFLaW9CLFdBQUwsQ0FBaUI5VCxHQUFuQixJQUF3Qm5VLElBQUUsS0FBS2lvQixXQUFMLENBQWlCOVQsR0FBakIsR0FBcUIsS0FBSzhULFdBQUwsQ0FBaUJqYyxNQUF2RTtBQUE4RSxTQUFwcEcsRUFBcXBHbWMsa0JBQWlCLDBCQUFTbm9CLENBQVQsRUFBVztBQUFDLGVBQUtpb0IsV0FBTCxHQUFpQixLQUFLalMsS0FBTCxDQUFXOFEsYUFBWCxDQUF5QjVOLHFCQUF6QixFQUFqQixDQUFrRSxJQUFJalosSUFBRUQsRUFBRW9vQixjQUFGLENBQWlCLENBQWpCLEVBQW9CQyxPQUExQjtBQUFBLGNBQWtDM25CLElBQUVWLEVBQUVvb0IsY0FBRixDQUFpQixDQUFqQixFQUFvQkUsT0FBeEQsQ0FBZ0UsS0FBS04sb0JBQUwsQ0FBMEIvbkIsQ0FBMUIsS0FBOEIsS0FBS2lvQixrQkFBTCxDQUF3QnhuQixDQUF4QixDQUE5QixLQUEyRCxLQUFLNm5CLG9CQUFMLEdBQTBCdG9CLENBQTFCLEVBQTRCLEtBQUt1b0IsT0FBTCxHQUFhLENBQUMsQ0FBckc7QUFBd0csU0FBNTVHLEVBQTY1R0MsZ0JBQWUsd0JBQVN6b0IsQ0FBVCxFQUFXO0FBQUMsY0FBRyxLQUFLd29CLE9BQVIsRUFBZ0I7QUFBQyxnQkFBSXZvQixJQUFFRCxFQUFFb29CLGNBQUYsQ0FBaUIsQ0FBakIsRUFBb0JDLE9BQTFCO0FBQUEsZ0JBQWtDM25CLElBQUUsS0FBSzZuQixvQkFBTCxHQUEwQnRvQixDQUE5RDtBQUFBLGdCQUFnRVEsSUFBRUMsSUFBRSxDQUFGLEdBQUksZUFBSixHQUFvQixlQUF0RixDQUFzR3NELEtBQUs2UyxHQUFMLENBQVNuVyxDQUFULElBQVksS0FBS2lsQixlQUFqQixJQUFrQyxLQUFLbGxCLENBQUwsR0FBbEMsRUFBNEMsS0FBSytuQixPQUFMLEdBQWEsQ0FBQyxDQUExRCxFQUE0RCxLQUFLRCxvQkFBTCxHQUEwQixJQUF0RjtBQUEyRjtBQUFDLFNBQTNvSCxFQUE5bEMsRUFBMnVKbFQsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLbUwsU0FBTCxDQUFnQixZQUFVO0FBQUMsY0FBR25MLEVBQUUybUIscUJBQUYsSUFBMEI1aUIsT0FBTytLLGdCQUFQLENBQXdCLFFBQXhCLEVBQWlDOU8sRUFBRTBuQixpQkFBbkMsQ0FBMUIsRUFBZ0YsQ0FBQyxHQUFFOWxCLEVBQUVMLE9BQUwsRUFBY3ZCLEVBQUU0bEIsU0FBaEIsRUFBMkI5ZixNQUEzQixJQUFtQyxDQUFDOUYsRUFBRTZsQixXQUF6SCxFQUFxSTtBQUFDLGdCQUFJNWxCLElBQUUsQ0FBQyxHQUFFMkIsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRTRsQixTQUFoQixFQUEyQixDQUEzQixDQUFOLENBQW9DNWxCLEVBQUUra0IsY0FBRixDQUFpQi9rQixFQUFFNGxCLFNBQUYsQ0FBWTNsQixDQUFaLENBQWpCO0FBQWlDLGFBQUV5bEIsV0FBRixLQUFnQjFsQixFQUFFaW9CLFdBQUYsR0FBY2pvQixFQUFFZ1csS0FBRixDQUFROFEsYUFBUixDQUFzQjVOLHFCQUF0QixFQUFkLEVBQTREbFosRUFBRXVvQixvQkFBRixHQUF1QixJQUFuRixFQUF3RnZvQixFQUFFd29CLE9BQUYsR0FBVSxDQUFDLENBQW5HLEVBQXFHL2hCLFNBQVNxSSxnQkFBVCxDQUEwQixZQUExQixFQUF1QzlPLEVBQUVtb0IsZ0JBQXpDLENBQXJHLEVBQWdLMWhCLFNBQVNxSSxnQkFBVCxDQUEwQixVQUExQixFQUFxQzlPLEVBQUV5b0IsY0FBdkMsQ0FBaEwsR0FBd096b0IsRUFBRXNsQixNQUFGLElBQVV0bEIsRUFBRTJuQixLQUFGLEVBQWxQO0FBQTRQLFNBQWxlO0FBQXFlLE9BQTl1SyxFQUErdUtoUyxlQUFjLHlCQUFVO0FBQUMsYUFBS2lSLGNBQUwsSUFBcUIsS0FBS0EsY0FBTCxDQUFvQjdFLFVBQXBCLEVBQXJCLEVBQXNELEtBQUtxRSxjQUFMLElBQXFCcmlCLE9BQU82RyxZQUFQLENBQW9CLEtBQUt3YixjQUF6QixDQUEzRSxFQUFvSHJpQixPQUFPMEssbUJBQVAsQ0FBMkIsUUFBM0IsRUFBb0MsS0FBS2laLGlCQUF6QyxDQUFwSCxFQUFnTCxLQUFLaEMsV0FBTCxLQUFtQmpmLFNBQVNnSSxtQkFBVCxDQUE2QixZQUE3QixFQUEwQyxLQUFLMFosZ0JBQS9DLEdBQWlFMWhCLFNBQVNnSSxtQkFBVCxDQUE2QixVQUE3QixFQUF3QyxLQUFLZ2EsY0FBN0MsQ0FBcEYsQ0FBaEw7QUFBa1UsT0FBMWtMLEVBQVYsRUFBc2xMem9CLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQWxtTDtBQUEwbUwsR0FGejl4QixFQUU0OXhCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGFBQU4sRUFBb0I1RSxPQUFNLEVBQUNzbEIsaUJBQWdCL2UsT0FBakIsRUFBeUJnZixZQUFXLEVBQUNsZixNQUFLRixNQUFOLEVBQWFoSSxTQUFRLENBQXJCLEVBQXBDLEVBQTFCLEVBQXVGbVQsUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUE5RixFQUEwRytCLFVBQVMsRUFBQ3NSLFNBQVEsbUJBQVU7QUFBQyxpQkFBTSxFQUFDLG9CQUFtQixLQUFLOFQsZUFBekIsRUFBTjtBQUFnRCxTQUFwRSxFQUFxRTViLFFBQU8sa0JBQVU7QUFBQyxjQUFHLENBQUMsS0FBSzRiLGVBQVQsRUFBeUIsT0FBTSxFQUFDM2MsT0FBTSxLQUFLNGMsVUFBTCxHQUFnQixHQUF2QixFQUFOO0FBQWtDLFNBQWxKLEVBQW5ILEVBQVYsRUFBa1Izb0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBOVI7QUFBc1MsR0FGcjV5QixFQUV3NXlCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFVBQU4sRUFBaUI1RSxPQUFNLEVBQUM0RSxNQUFLM0UsTUFBTixFQUFheU4sSUFBR3pOLE1BQWhCLEVBQXVCRixPQUFNLENBQUNFLE1BQUQsRUFBUXNHLE9BQVIsRUFBZ0JKLE1BQWhCLENBQTdCLEVBQXFEcWYsU0FBUSxFQUFDbmYsTUFBSyxDQUFDcEcsTUFBRCxFQUFRc0csT0FBUixFQUFnQkosTUFBaEIsQ0FBTixFQUE4QkssVUFBUyxDQUFDLENBQXhDLEVBQTdELEVBQXdHRixVQUFTQyxPQUFqSCxFQUF2QixFQUFpSitLLFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBeEosRUFBb0srQixVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxjQUFhLGVBQWEsT0FBTyxLQUFLelIsS0FBekIsSUFBZ0MsU0FBTyxLQUFLQSxLQUE1QyxJQUFtRCxLQUFLeWxCLE9BQUwsQ0FBYXRpQixRQUFiLE9BQTBCLEtBQUtuRCxLQUFMLENBQVdtRCxRQUFYLEVBQTNGLEVBQWlILGVBQWMsS0FBS29ELFFBQXBJLEVBQU47QUFBb0osU0FBeEssRUFBN0ssRUFBdVZhLFNBQVEsRUFBQ3dNLGFBQVkscUJBQVMvVyxDQUFULEVBQVc7QUFBQyxlQUFLMEosUUFBTCxLQUFnQixLQUFLbUIsS0FBTCxDQUFXLFFBQVgsRUFBb0IsS0FBSytkLE9BQXpCLEVBQWlDNW9CLENBQWpDLEdBQW9DLEtBQUs2SyxLQUFMLENBQVcsT0FBWCxFQUFtQixLQUFLK2QsT0FBeEIsRUFBZ0M1b0IsQ0FBaEMsQ0FBcEQ7QUFBd0YsU0FBakgsRUFBL1YsRUFBVixFQUE2ZEEsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBemU7QUFBaWYsR0FGNWgwQixFQUUraDBCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFLEVBQXBCLENBQXVCNUIsRUFBRXNCLE9BQUYsR0FBVSxFQUFDNkIsT0FBTSxFQUFDeWxCLGFBQVksRUFBQ3BmLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsQ0FBckIsRUFBYixFQUFxQ21JLFVBQVNDLE9BQTlDLEVBQXNEeEcsT0FBTSxFQUFDc0csTUFBS0YsTUFBTixFQUFhaEksU0FBUSxDQUFyQixFQUE1RCxFQUFvRnVuQixZQUFXLEVBQUNyZixNQUFLRixNQUFOLEVBQWFoSSxTQUFRLENBQXJCLEVBQS9GLEVBQXVId25CLGVBQWMxbEIsTUFBckksRUFBNEkybEIsZ0JBQWUzbEIsTUFBM0osRUFBa0s0bEIsWUFBVyxFQUFDeGYsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsTUFBckIsRUFBN0ssRUFBME0ybkIsYUFBWSxFQUFDemYsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsTUFBckIsRUFBdE4sRUFBUCxFQUEyUG1ULFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBbFEsRUFBOFF5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDbWYsYUFBWSxJQUFiLEVBQWtCQyxjQUFhLElBQS9CLEVBQW9DQyxRQUFPLEtBQUtsbUIsS0FBaEQsRUFBTjtBQUE2RCxPQUEzVixFQUE0VmtTLFNBQVEsbUJBQVU7QUFBQyxhQUFLOFQsV0FBTCxHQUFpQixLQUFLck8sUUFBTCxDQUFjLEtBQUttTyxVQUFuQixDQUFqQixFQUFnRCxLQUFLRyxZQUFMLEdBQWtCLEtBQUt0TyxRQUFMLENBQWMsS0FBS29PLFdBQW5CLENBQWxFO0FBQWtHLE9BQWpkLEVBQWtkNWxCLFVBQVMsRUFBQ2dtQixXQUFVLHFCQUFVO0FBQUMsaUJBQU8sS0FBS04sY0FBTCxHQUFvQixFQUFwQixHQUF1QixLQUFLRSxXQUFuQztBQUErQyxTQUFyRSxFQUFzRUssVUFBUyxvQkFBVTtBQUFDLGlCQUFPLEtBQUtSLGFBQUwsR0FBbUIsRUFBbkIsR0FBc0IsS0FBS0UsVUFBbEM7QUFBNkMsU0FBdkksRUFBd0lPLGFBQVksdUJBQVU7QUFBQyxjQUFJeHBCLElBQUUsRUFBTixDQUFTLE9BQU8sS0FBSzhvQixVQUFMLEtBQWtCOW9CLEVBQUUsYUFBVyxLQUFLOG9CLFVBQWhCLEdBQTJCLEdBQTdCLElBQWtDLENBQUMsQ0FBckQsR0FBd0Q5b0IsQ0FBL0Q7QUFBaUUsU0FBek8sRUFBME95cEIsZUFBYyx5QkFBVTtBQUFDLGlCQUFNLEVBQUMxZCxPQUFNLE1BQUksS0FBSzhjLFdBQVQsR0FBcUIsS0FBS1EsTUFBMUIsR0FBaUMsR0FBeEMsRUFBNEMsZUFBYyxDQUFDeG5CLENBQUQsR0FBRyxLQUFLaW5CLFVBQVIsR0FBbUIsS0FBS0QsV0FBeEIsR0FBb0MsSUFBOUYsRUFBTjtBQUEwRyxTQUE3VyxFQUEzZCxFQUEwMEJqbEIsT0FBTSxFQUFDcWxCLFlBQVcsc0JBQVU7QUFBQyxlQUFLRSxXQUFMLEdBQWlCLEtBQUtyTyxRQUFMLENBQWMsS0FBS21PLFVBQW5CLENBQWpCO0FBQWdELFNBQXZFLEVBQXdFQyxhQUFZLHVCQUFVO0FBQUMsZUFBS0UsWUFBTCxHQUFrQixLQUFLdE8sUUFBTCxDQUFjLEtBQUtvTyxXQUFuQixDQUFsQjtBQUFrRCxTQUFqSixFQUFrSi9sQixPQUFNLGlCQUFVO0FBQUMsZUFBS2ttQixNQUFMLEdBQVksS0FBS2xtQixLQUFqQjtBQUF1QixTQUExTCxFQUFoMUIsRUFBNGdDb0gsU0FBUSxFQUFDbWYsWUFBVyxvQkFBUzFwQixDQUFULEVBQVc7QUFBQyxlQUFLMEosUUFBTCxLQUFnQixLQUFLMmYsTUFBTCxHQUFZLEtBQUtNLFlBQUwsQ0FBa0IzcEIsRUFBRTRwQixhQUFwQixDQUFaLEVBQStDLEtBQUsvZSxLQUFMLENBQVcsT0FBWCxFQUFtQixLQUFLd2UsTUFBeEIsQ0FBL0Q7QUFBZ0csU0FBeEgsRUFBeUhRLFlBQVcsb0JBQVM3cEIsQ0FBVCxFQUFXO0FBQUMsY0FBRyxDQUFDLEtBQUswSixRQUFULEVBQWtCO0FBQUMsZ0JBQUl6SixJQUFFLEtBQUswcEIsWUFBTCxDQUFrQjNwQixFQUFFNHBCLGFBQXBCLENBQU4sQ0FBeUMsS0FBSy9lLEtBQUwsQ0FBVyxPQUFYLEVBQW1CNUssQ0FBbkIsR0FBc0IsS0FBSzRLLEtBQUwsQ0FBVyxRQUFYLEVBQW9CNUssQ0FBcEIsQ0FBdEI7QUFBNkM7QUFBQyxTQUExUCxFQUEyUDBwQixjQUFhLHNCQUFTM3BCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsSUFBTjtBQUFBLGNBQVdTLElBQUUsS0FBSzhELEdBQUwsQ0FBU21aLGdCQUFULENBQTBCLHFEQUExQixDQUFiO0FBQUEsY0FBOEZsZCxJQUFFLENBQUMsQ0FBakcsQ0FBbUcsT0FBT0MsSUFBRTJMLE1BQU03SyxTQUFOLENBQWdCZ0YsS0FBaEIsQ0FBc0IzRixJQUF0QixDQUEyQkgsQ0FBM0IsQ0FBRixFQUFnQ0EsRUFBRW9wQixJQUFGLENBQVEsVUFBU3BwQixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGdCQUFHRCxNQUFJVixDQUFQLEVBQVMsT0FBT1MsSUFBRSxDQUFDRSxJQUFFLENBQUgsSUFBTVYsRUFBRTRvQixXQUFWLEVBQXNCcG9CLElBQUVBLElBQUVBLENBQUYsR0FBSVIsRUFBRTRvQixXQUE5QixFQUEwQyxDQUFDLENBQWxEO0FBQW9ELFdBQW5GLENBQWhDLEVBQXNIcG9CLENBQTdIO0FBQStILFNBQXRmLEVBQXVmcWEsVUFBUyxrQkFBUzlhLENBQVQsRUFBVztBQUFDLGlCQUFPQSxLQUFHLGdCQUFnQitwQixJQUFoQixDQUFxQi9wQixDQUFyQixDQUFILEdBQTJCQSxDQUEzQixHQUE2QixJQUFwQztBQUF5QyxTQUFyakIsRUFBc2pCZ3FCLFlBQVcsc0JBQVU7QUFBQyxlQUFLWCxNQUFMLEdBQVksS0FBS2xtQixLQUFqQjtBQUF1QixTQUFubUIsRUFBcGhDLEVBQVYsRUFBb29EbkQsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBaHBEO0FBQXdwRCxHQUYvMDNCLEVBRWsxM0IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQsQ0FBbUJWLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssV0FBTixFQUFrQjVFLE9BQU0sRUFBQ0QsT0FBTSxDQUFDRSxNQUFELEVBQVFzRyxPQUFSLEVBQWdCSixNQUFoQixFQUF1QnRJLE1BQXZCLENBQVAsRUFBeEIsRUFBK0QrSSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDaWdCLGNBQWEsRUFBZCxFQUFpQkMsT0FBTSxDQUFDLENBQXhCLEVBQTBCdEcsT0FBTSxDQUFoQyxFQUFOO0FBQXlDLE9BQXhILEVBQXlIdGdCLFVBQVMsRUFBQzZtQixZQUFXLHNCQUFVO0FBQUMsY0FBRyxLQUFLaG5CLEtBQUwsSUFBWSxLQUFLOG1CLFlBQUwsQ0FBa0I5bUIsS0FBakMsRUFBdUM7QUFBQyxnQkFBSW5ELElBQUUsS0FBS21ELEtBQUwsQ0FBV21ELFFBQVgsRUFBTixDQUE0QixPQUFPLEtBQUsyakIsWUFBTCxDQUFrQmxRLFFBQWxCLEdBQTJCLEtBQUtrUSxZQUFMLENBQWtCOW1CLEtBQWxCLENBQXdCZ00sT0FBeEIsQ0FBZ0NuUCxDQUFoQyxLQUFvQyxDQUEvRCxHQUFpRSxLQUFLbUQsS0FBTCxJQUFZLEtBQUs4bUIsWUFBTCxDQUFrQjltQixLQUE5QixJQUFxQ25ELE1BQUksS0FBS2lxQixZQUFMLENBQWtCOW1CLEtBQWxCLENBQXdCbUQsUUFBeEIsRUFBakg7QUFBb0osa0JBQU0sQ0FBQyxDQUFQO0FBQVMsU0FBeFAsRUFBeVBzTyxTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxlQUFjLEtBQUt1VixVQUFwQixFQUErQixjQUFhLEtBQUtELEtBQWpELEVBQU47QUFBOEQsU0FBMVUsRUFBbEksRUFBOGMzZixTQUFRLEVBQUM2ZixZQUFXLHNCQUFVO0FBQUMsaUJBQU8sS0FBS0gsWUFBTCxDQUFrQmxRLFFBQXpCO0FBQWtDLFNBQXpELEVBQTBEc1EsaUJBQWdCLDJCQUFVO0FBQUMsZUFBS0QsVUFBTCxLQUFrQixLQUFLRixLQUFMLEdBQVcsQ0FBQyxLQUFLQSxLQUFuQyxHQUF5QyxLQUFLRCxZQUFMLENBQWtCSyxZQUFsQixDQUErQixLQUFLbm5CLEtBQXBDLEVBQTBDLEtBQUs2UyxLQUFMLENBQVd1VSxJQUFYLENBQWdCMVosV0FBMUQsRUFBc0UsS0FBS3JNLEdBQTNFLENBQXpDO0FBQXlILFNBQTlNLEVBQStNOGxCLGNBQWEsc0JBQVN0cUIsQ0FBVCxFQUFXO0FBQUMsZUFBSzBKLFFBQUwsS0FBZ0IsS0FBSzJnQixlQUFMLElBQXVCLEtBQUt4ZixLQUFMLENBQVcsVUFBWCxFQUFzQjdLLENBQXRCLENBQXZDO0FBQWlFLFNBQXpTLEVBQXRkLEVBQWl3QjRELE9BQU0sRUFBQ3VtQixZQUFXLG9CQUFTbnFCLENBQVQsRUFBVztBQUFDLGVBQUtvcUIsVUFBTCxPQUFvQixLQUFLRixLQUFMLEdBQVdscUIsQ0FBL0I7QUFBa0MsU0FBMUQsRUFBMkRrcUIsT0FBTSxlQUFTbHFCLENBQVQsRUFBVztBQUFDQSxjQUFFLEtBQUtpcUIsWUFBTCxDQUFrQk8sY0FBbEIsQ0FBaUMsS0FBSzVHLEtBQXRDLEVBQTRDLEtBQUt6Z0IsS0FBakQsRUFBdUQsS0FBSzZTLEtBQUwsQ0FBV3VVLElBQVgsQ0FBZ0IxWixXQUF2RSxDQUFGLEdBQXNGLEtBQUtvWixZQUFMLENBQWtCTyxjQUFsQixDQUFpQyxLQUFLNUcsS0FBdEMsQ0FBdEY7QUFBbUksU0FBaE4sRUFBdndCLEVBQXk5QnZPLFNBQVEsbUJBQVU7QUFBQyxZQUFHLEtBQUs0VSxZQUFMLEdBQWtCLENBQUMsR0FBRXJvQixFQUFFTCxPQUFMLEVBQWMsS0FBSzJCLE9BQW5CLEVBQTJCLFdBQTNCLENBQWxCLEVBQTBELEtBQUt5Z0IsYUFBTCxHQUFtQixDQUFDLEdBQUUvaEIsRUFBRUwsT0FBTCxFQUFjLEtBQUsyQixPQUFuQixFQUEyQixpQkFBM0IsQ0FBN0UsRUFBMkgsQ0FBQyxLQUFLK21CLFlBQXBJLEVBQWlKLE1BQU0sSUFBSTVXLEtBQUosQ0FBVSw0Q0FBVixDQUFOLENBQThELEtBQUs0VyxZQUFMLENBQWtCUSxhQUFsQixJQUFrQyxLQUFLN0csS0FBTCxHQUFXLEtBQUtxRyxZQUFMLENBQWtCUSxhQUEvRCxFQUE2RSxLQUFLUixZQUFMLENBQWtCUyxlQUFsQixDQUFrQyxLQUFLOUcsS0FBdkMsSUFBOEMsRUFBM0gsRUFBOEgsS0FBS3FHLFlBQUwsQ0FBa0Jub0IsT0FBbEIsQ0FBMEIsS0FBSzhoQixLQUEvQixJQUFzQyxJQUFwSyxFQUF5SyxDQUFDLEtBQUt3RyxVQUFMLE1BQW1CLEtBQUtILFlBQUwsQ0FBa0I5bUIsS0FBbEIsQ0FBd0JnTSxPQUF4QixDQUFnQyxLQUFLaE0sS0FBckMsS0FBNkMsQ0FBaEUsSUFBbUUsS0FBSzhtQixZQUFMLENBQWtCOW1CLEtBQWxCLEtBQTBCLEtBQUtBLEtBQW5HLEtBQTJHLEtBQUtrbkIsZUFBTCxFQUFwUjtBQUEyUyxPQUF0K0MsRUFBdStDMVUsZUFBYyx5QkFBVTtBQUFDLGFBQUtzVSxZQUFMLEtBQW9CLE9BQU8sS0FBS0EsWUFBTCxDQUFrQm5vQixPQUFsQixDQUEwQixLQUFLOGhCLEtBQS9CLENBQVAsRUFBNkMsT0FBTyxLQUFLcUcsWUFBTCxDQUFrQlMsZUFBbEIsQ0FBa0MsS0FBSzlHLEtBQXZDLENBQXhFO0FBQXVILE9BQXZuRCxFQUFWLEVBQW1vRDVqQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEvb0Q7QUFBdXBELEdBRjduN0IsRUFFZ283QixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZDtBQUFBLFFBQW1Ca0IsSUFBRW5CLEVBQUUsQ0FBRixDQUFyQjtBQUFBLFFBQTBCaUIsSUFBRWxCLEVBQUVvQixDQUFGLENBQTVCO0FBQUEsUUFBaUNiLElBQUVOLEVBQUUsRUFBRixDQUFuQztBQUFBLFFBQXlDRSxJQUFFSCxFQUFFTyxDQUFGLENBQTNDO0FBQUEsUUFBZ0RELElBQUVMLEVBQUUsRUFBRixDQUFsRDtBQUFBLFFBQXdEZ0MsSUFBRWpDLEVBQUVNLENBQUYsQ0FBMUQsQ0FBK0RkLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssV0FBTixFQUFrQjVFLE9BQU0sRUFBQzRFLE1BQUszRSxNQUFOLEVBQWF5TixJQUFHek4sTUFBaEIsRUFBdUJ1RyxVQUFTRCxPQUFoQyxFQUF3Q29RLFVBQVNwUSxPQUFqRCxFQUF5RHhHLE9BQU0sQ0FBQ0UsTUFBRCxFQUFRa0csTUFBUixFQUFlOEMsS0FBZixDQUEvRCxFQUFxRjNDLFVBQVNDLE9BQTlGLEVBQXNHRyxhQUFZekcsTUFBbEgsRUFBeUhzbkIsYUFBWXRuQixNQUFySSxFQUE0SXVuQixlQUFjM3BCLE1BQTFKLEVBQXhCLEVBQTBMeVQsUUFBTyxDQUFDL1MsRUFBRUosT0FBSCxDQUFqTSxFQUE2TXlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUM2Z0IsY0FBYSxJQUFkLEVBQW1CQyxlQUFjLElBQWpDLEVBQXNDQyxjQUFhLElBQW5ELEVBQXdETCxpQkFBZ0IsRUFBeEUsRUFBMkU1b0IsU0FBUSxFQUFuRixFQUFzRjJvQixlQUFjLENBQXBHLEVBQU47QUFBNkcsT0FBMVUsRUFBMlVubkIsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsZUFBYyxLQUFLbEwsUUFBcEIsRUFBNkIsa0JBQWlCLEtBQUtzaEIsT0FBbkQsRUFBTjtBQUFrRSxTQUF0RixFQUF1RkMsZ0JBQWUsMEJBQVU7QUFBQyxpQkFBTyxLQUFLbFIsUUFBTCxHQUFjLGlCQUFlLEtBQUs0USxXQUFsQyxHQUE4QyxLQUFLQSxXQUExRDtBQUFzRSxTQUF2TCxFQUF3TEssU0FBUSxtQkFBVTtBQUFDLGlCQUFPLEtBQUtsSyxNQUFMLENBQVkwRCxJQUFuQjtBQUF3QixTQUFuTyxFQUFvTzBHLFlBQVcsc0JBQVU7QUFBQyxpQkFBTyxLQUFLRixPQUFMLEdBQWEsRUFBQzlpQixTQUFRLE1BQVQsRUFBYixHQUE4QixFQUFyQztBQUF3QyxTQUFsUyxFQUFwVixFQUF3bkJ0RSxPQUFNLEVBQUNULE9BQU0sZUFBU25ELENBQVQsRUFBVztBQUFDLGVBQUttckIsZUFBTCxDQUFxQm5yQixDQUFyQixHQUF3QixLQUFLK1osUUFBTCxJQUFlLEtBQUtxUixhQUFMLENBQW1CcHJCLENBQW5CLENBQXZDO0FBQTZELFNBQWhGLEVBQWlGMEosVUFBUyxvQkFBVTtBQUFDLGVBQUtTLGlCQUFMO0FBQXlCLFNBQTlILEVBQStIUCxVQUFTLG9CQUFVO0FBQ3YxK0IsZUFBS1EsaUJBQUw7QUFBeUIsU0FENHErQixFQUMzcStCTixhQUFZLHVCQUFVO0FBQUMsZUFBS08sb0JBQUw7QUFBNEIsU0FEd24rQixFQUE5bkIsRUFDeC84QkUsU0FBUSxFQUFDOGdCLFFBQU8sa0JBQVU7QUFBQyxlQUFLUixZQUFMLElBQW1CLEtBQUtBLFlBQUwsQ0FBa0JoSCxzQkFBbEIsQ0FBeUMsQ0FBQyxDQUExQyxDQUFuQixFQUFnRSxLQUFLaFosS0FBTCxDQUFXLFFBQVgsQ0FBaEU7QUFBcUYsU0FBeEcsRUFBeUdWLG1CQUFrQiw2QkFBVTtBQUFDLGVBQUtLLGVBQUwsQ0FBcUJRLFVBQXJCLEdBQWdDLEtBQUt0QixRQUFyQztBQUE4QyxTQUFwTCxFQUFxTFUsbUJBQWtCLDZCQUFVO0FBQUMsZUFBS0ksZUFBTCxDQUFxQlMsVUFBckIsR0FBZ0MsS0FBS3JCLFFBQXJDO0FBQThDLFNBQWhRLEVBQWlRUyxzQkFBcUIsZ0NBQVU7QUFBQyxlQUFLRyxlQUFMLENBQXFCVSxjQUFyQixHQUFvQyxDQUFDLENBQUMsS0FBS3BCLFdBQTNDO0FBQXVELFNBQXhWLEVBQXlWc2hCLGVBQWMsdUJBQVNwckIsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxJQUFOO0FBQUEsY0FBV1MsSUFBRSxDQUFDLEdBQUVrQixFQUFFTCxPQUFMLEVBQWMsS0FBS08sT0FBbkIsRUFBNEJ3cEIsR0FBNUIsQ0FBaUMsVUFBU3RyQixDQUFULEVBQVc7QUFBQyxtQkFBT0MsRUFBRTZCLE9BQUYsQ0FBVTlCLENBQVYsQ0FBUDtBQUFvQixXQUFqRSxDQUFiLENBQWlGVSxLQUFHQSxFQUFFb0YsTUFBTCxJQUFhcEYsRUFBRWdqQixNQUFGLENBQVUsVUFBU3pqQixDQUFULEVBQVc7QUFBQyxtQkFBT0QsRUFBRW1QLE9BQUYsQ0FBVWxQLEVBQUVrRCxLQUFaLE1BQXFCLENBQUMsQ0FBN0I7QUFBK0IsV0FBckQsRUFBd0R3SSxPQUF4RCxDQUFpRSxVQUFTM0wsQ0FBVCxFQUFXO0FBQUNBLGNBQUVrcUIsS0FBRixHQUFRLENBQUMsQ0FBVDtBQUFXLFdBQXhGLENBQWI7QUFBd0csU0FBNWlCLEVBQTZpQnFCLGdCQUFlLHdCQUFTdnJCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsSUFBTjtBQUFBLGNBQVdTLElBQUUsRUFBYixDQUFnQixPQUFNLENBQUMsR0FBRWtCLEVBQUVMLE9BQUwsRUFBYyxLQUFLTyxPQUFuQixFQUE0QjZKLE9BQTVCLENBQXFDLFVBQVNsTCxDQUFULEVBQVc7QUFBQyxnQkFBSUUsSUFBRVYsRUFBRTZCLE9BQUYsQ0FBVXJCLENBQVYsQ0FBTixDQUFtQkUsRUFBRXdDLEtBQUYsS0FBVW5ELENBQVYsS0FBY1UsRUFBRXlDLEtBQUYsR0FBUW5ELENBQVIsRUFBVVUsRUFBRThxQixJQUFGLEdBQU83cUIsRUFBRXFWLEtBQUYsQ0FBUXVVLElBQVIsQ0FBYTFaLFdBQTlCLEVBQTBDblEsRUFBRStxQixFQUFGLEdBQUs5cUIsRUFBRXFWLEtBQUYsQ0FBUXVVLElBQXJFO0FBQTJFLFdBQS9JLEdBQWtKN3BCLENBQXhKO0FBQTBKLFNBQWx2QixFQUFtdkJnckIsa0JBQWlCLDBCQUFTMXJCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsSUFBTixDQUFXLElBQUcsQ0FBQyxHQUFFeUMsRUFBRW5CLE9BQUwsRUFBYyxLQUFLNEIsS0FBbkIsQ0FBSCxFQUE2QjtBQUFDLGdCQUFJekMsSUFBRSxFQUFOLENBQVMsT0FBT1YsRUFBRTJMLE9BQUYsQ0FBVyxVQUFTM0wsQ0FBVCxFQUFXO0FBQUMsZUFBQyxHQUFFNEIsRUFBRUwsT0FBTCxFQUFjdEIsRUFBRTZCLE9BQWhCLEVBQXlCNkosT0FBekIsQ0FBa0MsVUFBU2xMLENBQVQsRUFBVztBQUFDLG9CQUFJRSxJQUFFVixFQUFFNkIsT0FBRixDQUFVckIsQ0FBVixDQUFOLENBQW1CLElBQUdFLEVBQUV3QyxLQUFGLEtBQVVuRCxDQUFiLEVBQWU7QUFBQyxzQkFBSTRCLElBQUVqQixFQUFFcVYsS0FBRixDQUFRdVUsSUFBUixDQUFhMVosV0FBbkIsQ0FBK0I1USxFQUFFeXFCLGVBQUYsQ0FBa0JqcUIsQ0FBbEIsSUFBcUIsRUFBQzBDLE9BQU1uRCxDQUFQLEVBQVN3ckIsTUFBSzVwQixDQUFkLEVBQXJCLEVBQXNDbEIsRUFBRW9HLElBQUYsQ0FBT2xGLENBQVAsQ0FBdEM7QUFBZ0Q7QUFBQyxlQUFqSztBQUFvSyxhQUEzTCxHQUE4TCxFQUFDdUIsT0FBTW5ELENBQVAsRUFBU3dyQixNQUFLOXFCLEVBQUVrTCxJQUFGLENBQU8sSUFBUCxDQUFkLEVBQXJNO0FBQWlPLGtCQUFNLEVBQU47QUFBUyxTQUE1aUMsRUFBNmlDdWYsaUJBQWdCLHlCQUFTbnJCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsS0FBSzhaLFFBQUwsR0FBYyxLQUFLMlIsZ0JBQUwsQ0FBc0IxckIsQ0FBdEIsQ0FBZCxHQUF1QyxLQUFLdXJCLGNBQUwsQ0FBb0J2ckIsQ0FBcEIsQ0FBN0MsQ0FBb0UsS0FBSzhxQixhQUFMLEdBQW1CN3FCLEVBQUVrRCxLQUFyQixFQUEyQixLQUFLNG5CLFlBQUwsR0FBa0I5cUIsRUFBRXVyQixJQUEvQyxFQUFvRCxLQUFLWCxZQUFMLEdBQWtCNXFCLEVBQUV3ckIsRUFBeEUsRUFBMkUsS0FBS2poQixlQUFMLElBQXNCLEtBQUtBLGVBQUwsQ0FBcUJPLFFBQXJCLENBQThCLEtBQUtnZ0IsWUFBbkMsQ0FBakc7QUFBa0osU0FBL3hDLEVBQWd5Q1ksYUFBWSxxQkFBUzNyQixDQUFULEVBQVc7QUFBQyxlQUFLNkssS0FBTCxDQUFXLE9BQVgsRUFBbUI3SyxDQUFuQixHQUFzQixLQUFLNkssS0FBTCxDQUFXLFFBQVgsRUFBb0I3SyxDQUFwQixDQUF0QixFQUE2QyxLQUFLNkssS0FBTCxDQUFXLFVBQVgsRUFBc0I3SyxDQUF0QixDQUE3QztBQUFzRSxTQUE5M0MsRUFBKzNDd3FCLGdCQUFlLHdCQUFTeHFCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxjQUFJRCxJQUFFLEVBQU4sQ0FBUyxLQUFLaXFCLGVBQUwsQ0FBcUIxcUIsQ0FBckIsSUFBd0IsRUFBQ21ELE9BQU1sRCxDQUFQLEVBQVN1ckIsTUFBSzlxQixDQUFkLEVBQXhCLENBQXlDLEtBQUksSUFBSUMsQ0FBUixJQUFhLEtBQUsrcEIsZUFBbEI7QUFBa0MsaUJBQUtBLGVBQUwsQ0FBcUJqcEIsY0FBckIsQ0FBb0NkLENBQXBDLEtBQXdDLEtBQUsrcEIsZUFBTCxDQUFxQi9wQixDQUFyQixFQUF3QndDLEtBQWhFLElBQXVFMUMsRUFBRXFHLElBQUYsQ0FBTyxLQUFLNGpCLGVBQUwsQ0FBcUIvcEIsQ0FBckIsRUFBd0J3QyxLQUEvQixDQUF2RTtBQUFsQyxXQUErSSxLQUFLd29CLFdBQUwsQ0FBaUJsckIsQ0FBakI7QUFBb0IsU0FBbm5ELEVBQW9uRDZwQixjQUFhLHNCQUFTdHFCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxlQUFLbXFCLFlBQUwsR0FBa0JucUIsQ0FBbEIsRUFBb0IsS0FBS3FxQixZQUFMLEdBQWtCOXFCLENBQXRDLEVBQXdDLEtBQUtrckIsZUFBTCxDQUFxQm5yQixDQUFyQixDQUF4QyxFQUFnRSxLQUFLMnJCLFdBQUwsQ0FBaUIzckIsQ0FBakIsQ0FBaEU7QUFBb0YsU0FBcnVELEVBRGcvOEIsRUFDenc1QnFWLFNBQVEsbUJBQVU7QUFBQyxhQUFLN0ssZUFBTCxHQUFxQixDQUFDLEdBQUU1SixFQUFFVyxPQUFMLEVBQWMsS0FBSzJCLE9BQW5CLEVBQTJCLG9CQUEzQixDQUFyQixFQUFzRSxLQUFLc0gsZUFBTCxLQUF1QixLQUFLTCxpQkFBTCxJQUF5QixLQUFLQyxpQkFBTCxFQUF6QixFQUFrRCxLQUFLQyxvQkFBTCxFQUFsRCxFQUE4RSxLQUFLRyxlQUFMLENBQXFCNlMsU0FBckIsR0FBK0IsQ0FBQyxDQUFySSxDQUF0RSxFQUE4TSxLQUFLOE4sZUFBTCxDQUFxQixLQUFLaG9CLEtBQTFCLENBQTlNO0FBQStPLE9BRHVnNUIsRUFDdGc1QndTLGVBQWMseUJBQVU7QUFBQyxhQUFLbkwsZUFBTCxLQUF1QixLQUFLQSxlQUFMLENBQXFCTyxRQUFyQixDQUE4QixFQUE5QixHQUFrQyxLQUFLUCxlQUFMLENBQXFCNlMsU0FBckIsR0FBK0IsQ0FBQyxDQUF6RjtBQUE0RixPQURpNTRCLEVBQVYsRUFDcjQ0QnJkLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BRHkzNEI7QUFDajM0QixHQUgvOEMsRUFHazlDLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFlBQU4sRUFBbUJnQyxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDNGhCLFdBQVUsQ0FBQyxDQUFaLEVBQU47QUFBcUIsT0FBeEQsRUFBeURsWCxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQWhFLEVBQTRFNkIsT0FBTSxFQUFDc2lCLGFBQVkvYixPQUFiLEVBQXFCa2lCLGtCQUFpQixFQUFDcGlCLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsRUFBckIsRUFBdEMsRUFBK0Rva0IsaUJBQWdCLEVBQUNsYyxNQUFLRixNQUFOLEVBQWFoSSxTQUFRLEdBQXJCLEVBQS9FLEVBQWxGLEVBQTRMK0IsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFPLEtBQUtnWCxTQUFMLElBQWdCLFdBQXZCO0FBQW1DLFNBQXZELEVBQXJNLEVBQThQcmhCLFNBQVEsRUFBQ3VoQixNQUFLLGdCQUFVO0FBQUMsZUFBS3hqQixJQUFMO0FBQVksU0FBN0IsRUFBOEJBLE1BQUssZ0JBQVU7QUFBQyxlQUFLc2pCLFNBQUwsR0FBZSxDQUFDLENBQWhCLEVBQWtCLEtBQUtwbkIsR0FBTCxDQUFTcVQsS0FBVCxFQUFsQixFQUFtQyxLQUFLaE4sS0FBTCxDQUFXLE1BQVgsQ0FBbkM7QUFBc0QsU0FBcEcsRUFBcUdyQyxPQUFNLGlCQUFVO0FBQUMsZUFBS29qQixTQUFMLEdBQWUsQ0FBQyxDQUFoQixFQUFrQixLQUFLcG5CLEdBQUwsQ0FBU3VuQixJQUFULEVBQWxCLEVBQWtDLEtBQUtsaEIsS0FBTCxDQUFXLE9BQVgsQ0FBbEM7QUFBc0QsU0FBNUssRUFBNks2SyxRQUFPLGtCQUFVO0FBQUMsZUFBS2tXLFNBQUwsR0FBZSxLQUFLcGpCLEtBQUwsRUFBZixHQUE0QixLQUFLRixJQUFMLEVBQTVCO0FBQXdDLFNBQXZPLEVBQXdPMGYsc0JBQXFCLDhCQUFTaG9CLENBQVQsRUFBVztBQUFDLGlCQUFPQSxJQUFFLENBQUYsSUFBS0EsSUFBRSxLQUFLaW9CLFdBQUwsQ0FBaUIxVCxJQUFqQixHQUFzQixLQUFLMFQsV0FBTCxDQUFpQmxjLEtBQXJEO0FBQTJELFNBQXBVLEVBQXFVbWMsb0JBQW1CLDRCQUFTbG9CLENBQVQsRUFBVztBQUFDLGlCQUFPQSxJQUFFLENBQUYsSUFBS0EsSUFBRSxLQUFLaW9CLFdBQUwsQ0FBaUI5VCxHQUFqQixHQUFxQixLQUFLOFQsV0FBTCxDQUFpQmpjLE1BQXBEO0FBQTJELFNBQS9aLEVBQWdhZ2dCLHVCQUFzQiwrQkFBU2hzQixDQUFULEVBQVc7QUFBQyxpQkFBTSxDQUFDLENBQUMsS0FBSzRyQixTQUFQLElBQWtCNXJCLElBQUUsS0FBSzZyQixnQkFBL0I7QUFBZ0QsU0FBbGYsRUFBbWYxRCxrQkFBaUIsMEJBQVNub0IsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRUQsRUFBRWlzQixPQUFGLENBQVUsQ0FBVixFQUFhNUQsT0FBYixHQUFxQixLQUFLSixXQUFMLENBQWlCMVQsSUFBNUM7QUFBQSxjQUFpRDdULElBQUVWLEVBQUVpc0IsT0FBRixDQUFVLENBQVYsRUFBYTNELE9BQWIsR0FBcUIsS0FBS0wsV0FBTCxDQUFpQjlULEdBQXpGLENBQTZGLEtBQUs2VCxvQkFBTCxDQUEwQi9uQixDQUExQixLQUE4QixLQUFLaW9CLGtCQUFMLENBQXdCeG5CLENBQXhCLENBQTlCLElBQTBELEtBQUtzckIscUJBQUwsQ0FBMkIvckIsQ0FBM0IsQ0FBMUQsS0FBMEYsS0FBS3NvQixvQkFBTCxHQUEwQnRvQixDQUExQixFQUE0QixLQUFLdW9CLE9BQUwsR0FBYSxDQUFDLENBQXBJO0FBQXVJLFNBQXB2QixFQUFxdkJDLGdCQUFlLDBCQUFVO0FBQUMsZUFBS0QsT0FBTCxHQUFhLENBQUMsQ0FBZCxFQUFnQixLQUFLRCxvQkFBTCxHQUEwQixJQUExQztBQUErQyxTQUE5ekIsRUFBK3pCMkQsaUJBQWdCLHlCQUFTbHNCLENBQVQsRUFBVztBQUFDLGNBQUcsS0FBS3dvQixPQUFSLEVBQWdCO0FBQUMsZ0JBQUl2b0IsSUFBRUQsRUFBRWlzQixPQUFGLENBQVUsQ0FBVixFQUFhNUQsT0FBbkI7QUFBQSxnQkFBMkIzbkIsSUFBRSxLQUFLa3JCLFNBQUwsR0FBZSxLQUFLckQsb0JBQUwsR0FBMEJ0b0IsQ0FBekMsR0FBMkNBLElBQUUsS0FBS3NvQixvQkFBL0U7QUFBQSxnQkFBb0c5bkIsSUFBRSxLQUFLbXJCLFNBQUwsR0FBZSxPQUFmLEdBQXVCLE1BQTdILENBQW9JbHJCLElBQUUsS0FBS2lsQixlQUFQLElBQXdCLEtBQUtsbEIsQ0FBTCxHQUF4QjtBQUFrQztBQUFDLFNBQW5oQyxFQUF0USxFQUEyeEM0VSxTQUFRLG1CQUFVO0FBQUMsYUFBS3FRLFdBQUwsS0FBbUIsS0FBS3VDLFdBQUwsR0FBaUIsS0FBS2pTLEtBQUwsQ0FBV1csUUFBWCxDQUFvQm5TLEdBQXBCLENBQXdCMFUscUJBQXhCLEVBQWpCLEVBQWlFLEtBQUtxUCxvQkFBTCxHQUEwQixJQUEzRixFQUFnRyxLQUFLQyxPQUFMLEdBQWEsQ0FBQyxDQUE5RyxFQUFnSC9oQixTQUFTcUksZ0JBQVQsQ0FBMEIsWUFBMUIsRUFBdUMsS0FBS3FaLGdCQUE1QyxDQUFoSCxFQUE4SzFoQixTQUFTcUksZ0JBQVQsQ0FBMEIsVUFBMUIsRUFBcUMsS0FBSzJaLGNBQTFDLENBQTlLLEVBQXdPaGlCLFNBQVNxSSxnQkFBVCxDQUEwQixXQUExQixFQUFzQyxLQUFLb2QsZUFBM0MsQ0FBM1A7QUFBd1QsT0FBdG1ELEVBQXVtRHZXLGVBQWMseUJBQVU7QUFBQyxhQUFLK1AsV0FBTCxLQUFtQmpmLFNBQVNnSSxtQkFBVCxDQUE2QixZQUE3QixFQUEwQyxLQUFLMFosZ0JBQS9DLEdBQWlFMWhCLFNBQVNnSSxtQkFBVCxDQUE2QixVQUE3QixFQUF3QyxLQUFLZ2EsY0FBN0MsQ0FBakUsRUFBOEhoaUIsU0FBU2dJLG1CQUFULENBQTZCLFdBQTdCLEVBQXlDLEtBQUt5ZCxlQUE5QyxDQUFqSjtBQUFpTixPQUFqMUQsRUFBVixFQUE2MURsc0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBejJEO0FBQWkzRCxHQUh0OUcsRUFHeTlHLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkO0FBQUEsUUFBbUJrQixJQUFFbkIsRUFBRSxFQUFGLENBQXJCO0FBQUEsUUFBMkJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBN0I7QUFBQSxRQUFrQ2IsSUFBRU4sRUFBRSxDQUFGLENBQXBDO0FBQUEsUUFBeUNFLElBQUVILEVBQUVPLENBQUYsQ0FBM0M7QUFBQSxRQUFnREQsSUFBRUwsRUFBRSxHQUFGLENBQWxEO0FBQUEsUUFBeURnQyxJQUFFakMsRUFBRU0sQ0FBRixDQUEzRCxDQUFnRWQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxhQUFOLEVBQW9CNUUsT0FBTSxFQUFDME4sSUFBRyxDQUFDek4sTUFBRCxFQUFRa0csTUFBUixDQUFKLEVBQW9CNGlCLFlBQVcsRUFBQzFpQixNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxlQUFyQixFQUEvQixFQUFxRWdrQixZQUFXLEVBQUM5YixNQUFLLENBQUNwRyxNQUFELEVBQVFrRyxNQUFSLENBQU4sRUFBc0JoSSxTQUFRLEdBQTlCLEVBQWhGLEVBQTFCLEVBQThJbVQsUUFBTyxDQUFDOVQsRUFBRVcsT0FBSCxDQUFySixFQUFpS3lJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNvaUIsWUFBVyxLQUFLdGIsRUFBTCxJQUFTLGNBQVksQ0FBQyxHQUFFbFAsRUFBRUwsT0FBTCxHQUFqQyxFQUFpRHdULFFBQU8sQ0FBQyxDQUF6RCxFQUEyRHNYLGFBQVksRUFBdkUsRUFBMEVDLGlCQUFnQixFQUExRixFQUE2RkMsZ0JBQWUsSUFBNUcsRUFBaUhDLGNBQWEsSUFBOUgsRUFBTjtBQUEwSSxPQUEzVCxFQUE0VGxwQixVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsY0FBSTVVLElBQUUsRUFBQyxhQUFZLEtBQUsrVSxNQUFsQixFQUFOLENBQWdDLE9BQU8sS0FBS3dYLGNBQUwsR0FBb0IsS0FBS0osVUFBTCxDQUFnQnBiLE9BQWhCLENBQXdCLElBQXhCLEVBQTZCLEdBQTdCLENBQXBCLEVBQXNEL1EsRUFBRSxpQkFBZSxLQUFLdXNCLGNBQXRCLElBQXNDLENBQUMsQ0FBN0YsRUFBK0Z2c0IsQ0FBdEc7QUFBd0csU0FBNUosRUFBclUsRUFBbWU0RCxPQUFNLEVBQUNtUixRQUFPLGdCQUFTL1UsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxrQkFBZ0IsS0FBS3NzQixjQUEzQjtBQUFBLGNBQTBDN3JCLElBQUUsY0FBNUMsQ0FBMkRWLEtBQUd5RyxTQUFTa0ssSUFBVCxDQUFjak0sU0FBZCxDQUF3Qm5DLEdBQXhCLENBQTRCdEMsQ0FBNUIsR0FBK0J3RyxTQUFTa0ssSUFBVCxDQUFjak0sU0FBZCxDQUF3Qm5DLEdBQXhCLENBQTRCN0IsQ0FBNUIsQ0FBbEMsS0FBbUUrRixTQUFTa0ssSUFBVCxDQUFjak0sU0FBZCxDQUF3QmtNLE1BQXhCLENBQStCM1EsQ0FBL0IsR0FBa0N3RyxTQUFTa0ssSUFBVCxDQUFjak0sU0FBZCxDQUF3QmtNLE1BQXhCLENBQStCbFEsQ0FBL0IsQ0FBckc7QUFBd0ksU0FBdk4sRUFBemUsRUFBa3NCNkosU0FBUSxFQUFDa2lCLGVBQWMseUJBQVU7QUFBQyxjQUFHaG1CLFNBQVNrSyxJQUFULENBQWNoTSxRQUFkLENBQXVCLEtBQUsybkIsZUFBNUIsQ0FBSCxFQUFnRDtBQUFDLGdCQUFJdHNCLElBQUUsS0FBS3NzQixlQUFMLENBQXFCOWIsYUFBckIsQ0FBbUMsc0JBQW5DLENBQU4sQ0FBaUV4USxLQUFHQSxFQUFFMEUsU0FBRixDQUFZa00sTUFBWixDQUFtQixXQUFuQixDQUFILEVBQW1DbkssU0FBU2tLLElBQVQsQ0FBY3FJLFdBQWQsQ0FBMEIsS0FBS3NULGVBQS9CLENBQW5DO0FBQW1GO0FBQUMsU0FBaE8sRUFBaU9oa0IsTUFBSyxnQkFBVTtBQUFDNUYsWUFBRW5CLE9BQUYsQ0FBVXdPLE9BQVYsSUFBbUJyTixFQUFFbkIsT0FBRixDQUFVd08sT0FBVixDQUFrQnZILEtBQWxCLEVBQW5CLEVBQTZDOUYsRUFBRW5CLE9BQUYsQ0FBVXdPLE9BQVYsR0FBa0IsSUFBL0QsRUFBb0V0SixTQUFTa0ssSUFBVCxDQUFjeEksV0FBZCxDQUEwQixLQUFLbWtCLGVBQS9CLENBQXBFLEVBQW9Idm9CLE9BQU9zSixnQkFBUCxDQUF3QixLQUFLMkksS0FBTCxDQUFXMFcsU0FBbkMsRUFBOENDLGVBQWxLLEVBQWtMLEtBQUs1WCxNQUFMLEdBQVksQ0FBQyxDQUEvTCxFQUFpTSxLQUFLbEssS0FBTCxDQUFXLE1BQVgsQ0FBak0sRUFBb04sS0FBSzJoQixZQUFMLEdBQWtCem9CLE9BQU8rRSxVQUFQLENBQWtCLEtBQUtOLEtBQXZCLEVBQTZCLEtBQUsrYyxVQUFsQyxDQUF0TyxFQUFvUixLQUFLcUgsZ0JBQUwsR0FBc0JDLEtBQUtDLEdBQUwsRUFBMVM7QUFBcVQsU0FBdGlCLEVBQXVpQnRrQixPQUFNLGlCQUFVO0FBQUMsY0FBSXhJLElBQUUsSUFBTixDQUFXLElBQUcsS0FBS2dXLEtBQUwsQ0FBVzBXLFNBQWQsRUFBd0I7QUFBQyxnQkFBSXpzQixJQUFFLFNBQVNBLENBQVQsR0FBWTtBQUFDRCxnQkFBRWdXLEtBQUYsQ0FBUTBXLFNBQVIsQ0FBa0JqZSxtQkFBbEIsQ0FBc0M5TSxFQUFFSixPQUF4QyxFQUFnRHRCLENBQWhELEdBQW1ERCxFQUFFeXNCLGFBQUYsRUFBbkQ7QUFBcUUsYUFBeEYsQ0FBeUYvcEIsRUFBRW5CLE9BQUYsQ0FBVXdPLE9BQVYsR0FBa0IsSUFBbEIsRUFBdUIsS0FBS2dGLE1BQUwsR0FBWSxDQUFDLENBQXBDLEVBQXNDLEtBQUtsSyxLQUFMLENBQVcsT0FBWCxDQUF0QyxFQUEwRCxLQUFLbUwsS0FBTCxDQUFXMFcsU0FBWCxDQUFxQmplLG1CQUFyQixDQUF5QzlNLEVBQUVKLE9BQTNDLEVBQW1EdEIsQ0FBbkQsQ0FBMUQsRUFBZ0gsS0FBSytWLEtBQUwsQ0FBVzBXLFNBQVgsQ0FBcUI1ZCxnQkFBckIsQ0FBc0NuTixFQUFFSixPQUF4QyxFQUFnRHRCLENBQWhELENBQWhILEVBQW1LOEQsT0FBTzZHLFlBQVAsQ0FBb0IsS0FBSzRoQixZQUF6QixDQUFuSyxFQUEwTSxLQUFLTyxlQUFMLEdBQXFCLEtBQUt4SCxVQUFwTztBQUErTztBQUFDLFNBQXI2QixFQUFzNkJ5SCxjQUFhLHdCQUFVO0FBQUMsZUFBS0QsZUFBTCxHQUFxQixLQUFLQSxlQUFMLElBQXNCRixLQUFLQyxHQUFMLEtBQVcsS0FBS0YsZ0JBQXRDLENBQXJCLEVBQTZFLEtBQUtBLGdCQUFMLEdBQXNCLENBQW5HLEVBQXFHN29CLE9BQU82RyxZQUFQLENBQW9CLEtBQUs0aEIsWUFBekIsQ0FBckc7QUFBNEksU0FBMWtDLEVBQTJrQ1MsZUFBYyx5QkFBVTtBQUFDLGVBQUtMLGdCQUFMLEdBQXNCQyxLQUFLQyxHQUFMLEVBQXRCLEVBQWlDLEtBQUtOLFlBQUwsR0FBa0J6b0IsT0FBTytFLFVBQVAsQ0FBa0IsS0FBS04sS0FBdkIsRUFBNkIsS0FBS3VrQixlQUFsQyxDQUFuRDtBQUFzRyxTQUExc0MsRUFBMXNCLEVBQXM1RDFYLFNBQVEsbUJBQVU7QUFBQyxZQUFJclYsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsWUFBRXNzQixlQUFGLEdBQWtCdHNCLEVBQUV3RSxHQUFwQixFQUF3QnhFLEVBQUVzc0IsZUFBRixDQUFrQnZlLFVBQWxCLENBQTZCaUwsV0FBN0IsQ0FBeUNoWixFQUFFc3NCLGVBQTNDLENBQXhCLEVBQW9GdHNCLEVBQUU0c0IsZ0JBQUYsR0FBbUIsQ0FBdkcsRUFBeUc1c0IsRUFBRStzQixlQUFGLEdBQWtCL3NCLEVBQUV1bEIsVUFBN0g7QUFBd0ksU0FBbks7QUFBc0ssT0FBMWxFLEVBQTJsRTVQLGVBQWMseUJBQVU7QUFBQzVSLGVBQU82RyxZQUFQLENBQW9CLEtBQUs0aEIsWUFBekIsR0FBdUMsS0FBS0MsYUFBTCxFQUF2QztBQUE0RCxPQUFockUsRUFBVixFQUE0ckV6c0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBeHNFO0FBQWd0RSxHQUgxMkwsRUFHNjJMLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGVBQU4sRUFBc0I1RSxPQUFNLEVBQUM4cEIsUUFBTyxFQUFDempCLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLE9BQXJCLEVBQVIsRUFBc0M0ckIsUUFBTyxFQUFDMWpCLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLE9BQXJCLEVBQTdDLEVBQTJFMGdCLGFBQVksRUFBQ3hZLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLEtBQXJCLEVBQXZGLEVBQTVCLEVBQWdKbVQsUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUF2SixFQUFtS3lJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNvakIsWUFBVyxJQUFaLEVBQWlCclksUUFBTyxDQUFDLENBQXpCLEVBQU47QUFBa0MsT0FBck4sRUFBc056UixVQUFTLEVBQUNzUixTQUFRLFNBQVM1VSxDQUFULEdBQVk7QUFBQyxjQUFJQSxJQUFFLEVBQUMsYUFBWSxLQUFLK1UsTUFBbEIsRUFBTixDQUFnQyxPQUFPL1UsRUFBRSxhQUFXLEtBQUttdEIsTUFBbEIsSUFBMEIsQ0FBQyxDQUEzQixFQUE2Qm50QixFQUFFLGtCQUFnQixLQUFLaWlCLFdBQXZCLElBQW9DLENBQUMsQ0FBbEUsRUFBb0VqaUIsQ0FBM0U7QUFBNkUsU0FBbkksRUFBL04sRUFBb1d1SyxTQUFRLEVBQUM4aUIsZ0JBQWUsd0JBQVNydEIsQ0FBVCxFQUFXO0FBQUMsV0FBQ0EsRUFBRXNWLE1BQUgsS0FBWSxLQUFLOFgsVUFBakIsSUFBNkIsS0FBS0EsVUFBTCxDQUFnQnpvQixRQUFoQixDQUF5QjNFLEVBQUVzVixNQUEzQixDQUE3QixLQUFrRSxLQUFLUCxNQUFMLEdBQVksQ0FBQyxDQUFiLEVBQWV0TyxTQUFTa0ssSUFBVCxDQUFjbEMsbUJBQWQsQ0FBa0MsT0FBbEMsRUFBMEMsS0FBSzRlLGNBQS9DLENBQWpGO0FBQWlKLFNBQTdLLEVBQThLQyxpQkFBZ0IsMkJBQVU7QUFBQyxjQUFJdHRCLElBQUUsSUFBTixDQUFXLEtBQUsrVSxNQUFMLEdBQVksQ0FBQyxLQUFLQSxNQUFsQixFQUF5QmhSLE9BQU8rRSxVQUFQLENBQW1CLFlBQVU7QUFBQ3JDLHFCQUFTa0ssSUFBVCxDQUFjN0IsZ0JBQWQsQ0FBK0IsT0FBL0IsRUFBdUM5TyxFQUFFcXRCLGNBQXpDO0FBQXlELFdBQXZGLEVBQXlGLEVBQXpGLENBQXpCO0FBQXNILFNBQTFVLEVBQTVXLEVBQXdyQmhZLFNBQVEsbUJBQVU7QUFBQyxZQUFJclYsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsWUFBRW90QixVQUFGLEdBQWFwdEIsRUFBRXdFLEdBQUYsQ0FBTWdNLGFBQU4sQ0FBb0Isa0JBQXBCLENBQWIsRUFBcUQsWUFBVXhRLEVBQUVrdEIsTUFBWixHQUFtQmx0QixFQUFFb3RCLFVBQUYsQ0FBYXRlLGdCQUFiLENBQThCLE9BQTlCLEVBQXNDOU8sRUFBRXN0QixlQUF4QyxDQUFuQixJQUE2RXR0QixFQUFFd0UsR0FBRixDQUFNc0ssZ0JBQU4sQ0FBdUIsWUFBdkIsRUFBb0M5TyxFQUFFc3RCLGVBQXRDLEdBQXVEdHRCLEVBQUV3RSxHQUFGLENBQU1zSyxnQkFBTixDQUF1QixZQUF2QixFQUFvQzlPLEVBQUVxdEIsY0FBdEMsQ0FBcEksQ0FBckQ7QUFBZ1AsU0FBM1E7QUFBOFEsT0FBcCtCLEVBQXErQjFYLGVBQWMseUJBQVU7QUFBQyxhQUFLeVgsVUFBTCxDQUFnQjNlLG1CQUFoQixDQUFvQyxPQUFwQyxFQUE0QyxLQUFLNmUsZUFBakQsR0FBa0U3bUIsU0FBU2tLLElBQVQsQ0FBY2xDLG1CQUFkLENBQWtDLE9BQWxDLEVBQTBDLEtBQUs0ZSxjQUEvQyxDQUFsRTtBQUFpSSxPQUEvbkMsRUFBVixFQUEyb0NydEIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBdnBDO0FBQStwQyxHQUgvcE8sRUFHa3FPLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFlBQU4sRUFBbUI1RSxPQUFNLEVBQUM0ZSxRQUFPLEVBQUN2WSxNQUFLRixNQUFOLEVBQWFoSSxTQUFRLEVBQXJCLEVBQVIsRUFBaUNnc0IsVUFBUyxFQUFDOWpCLE1BQUtGLE1BQU4sRUFBYWhJLFNBQVEsR0FBckIsRUFBMUMsRUFBb0VtbkIsaUJBQWdCL2UsT0FBcEYsRUFBNEZnZixZQUFXLEVBQUNsZixNQUFLRixNQUFOLEVBQWFoSSxTQUFRLENBQXJCLEVBQXZHLEVBQXpCLEVBQXlKbVQsUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUFoSyxFQUE0SytCLFVBQVMsRUFBQ3NSLFNBQVEsbUJBQVU7QUFBQyxpQkFBTSxFQUFDLG9CQUFtQixLQUFLOFQsZUFBekIsRUFBTjtBQUFnRCxTQUFwRSxFQUFxRTViLFFBQU8sa0JBQVU7QUFBQyxjQUFJOU0sSUFBRSxLQUFLZ2lCLE1BQUwsR0FBWSxJQUFsQixDQUF1QixPQUFNLEVBQUNqVyxPQUFNL0wsQ0FBUCxFQUFTZ00sUUFBT2hNLENBQWhCLEVBQU47QUFBeUIsU0FBdkksRUFBd0l3dEIsY0FBYSx3QkFBVTtBQUFDLGNBQUl4dEIsSUFBRSxNQUFJLEtBQUsyb0IsVUFBVCxHQUFvQixHQUExQixDQUE4QixPQUFNLENBQUMsS0FBS0QsZUFBTixLQUF3QjFvQixLQUFHLEdBQUgsS0FBU0EsSUFBRSxHQUFYLEdBQWdCQSxJQUFFLE9BQTFDLENBQU47QUFBeUQsU0FBdlAsRUFBckwsRUFBVixFQUF5YkEsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBcmM7QUFBNmMsR0FIbHdQLEVBR3F3UCxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZDtBQUFBLFFBQW1Ca0IsSUFBRW5CLEVBQUUsRUFBRixDQUFyQjtBQUFBLFFBQTJCaUIsSUFBRWxCLEVBQUVvQixDQUFGLENBQTdCLENBQWtDNUIsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxTQUFOLEVBQWdCNUUsT0FBTSxFQUFDME4sSUFBRyxDQUFDek4sTUFBRCxFQUFRa0csTUFBUixDQUFKLEVBQW9CNkwsVUFBU3pMLE9BQTdCLEVBQXFDOGpCLGNBQWEsRUFBQ2hrQixNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxNQUFyQixFQUFsRCxFQUErRW1zQixrQkFBaUIsRUFBQ2prQixNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxVQUFyQixFQUFoRyxFQUFpSW9zQixZQUFXLEVBQUNsa0IsTUFBS0UsT0FBTixFQUFjcEksU0FBUSxDQUFDLENBQXZCLEVBQTVJLEVBQXNLeWlCLFlBQVdyYSxPQUFqTCxFQUF5THNOLFlBQVcsRUFBQ3hOLE1BQUtFLE9BQU4sRUFBY3BJLFNBQVEsQ0FBQyxDQUF2QixFQUFwTSxFQUE4TjBULFFBQU81UixNQUFyTyxFQUE0TzBnQixTQUFRLENBQUMxZ0IsTUFBRCxFQUFRa0csTUFBUixDQUFwUCxFQUFvUXFrQixXQUFVLENBQUN2cUIsTUFBRCxDQUE5USxFQUF1UndxQixXQUFVeHFCLE1BQWpTLEVBQXdTNmdCLGdCQUFlLEVBQUN6YSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxHQUFyQixFQUF2VCxFQUFpVjRpQixvQkFBbUIsRUFBQzFhLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLFFBQXJCLEVBQXBXLEVBQXRCLEVBQTBaeUksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQzRaLE9BQU0sQ0FBUCxFQUFTclAsTUFBSyxLQUFkLEVBQW9CYyxTQUFRLENBQUMsQ0FBN0IsRUFBK0J5WSxlQUFjLEtBQUssQ0FBbEQsRUFBb0RDLFFBQU8sS0FBS2pkLEVBQUwsSUFBUyxVQUFRLENBQUMsR0FBRWxQLEVBQUVMLE9BQUwsR0FBNUUsRUFBNEZ5c0IsVUFBUyxDQUFDLENBQXRHLEVBQXdHamlCLE9BQU0sS0FBOUcsRUFBTjtBQUEySCxPQUFyaUIsRUFBc2lCbkksT0FBTSxFQUFDd1IsVUFBUyxvQkFBVTtBQUFDLGVBQUs2WSxjQUFMO0FBQXNCLFNBQTNDLEVBQTRDTixZQUFXLHNCQUFVO0FBQUMsZUFBS00sY0FBTDtBQUFzQixTQUF4RixFQUF5RmhYLFlBQVcsc0JBQVU7QUFBQyxlQUFLZ1gsY0FBTDtBQUFzQixTQUFySSxFQUFzSWpLLFlBQVcsc0JBQVU7QUFBQyxlQUFLaUssY0FBTDtBQUFzQixTQUFsTCxFQUFtTGhaLFFBQU8sa0JBQVU7QUFBQyxlQUFLZ1osY0FBTDtBQUFzQixTQUEzTixFQUE0TmxLLFNBQVEsbUJBQVU7QUFBQyxlQUFLa0ssY0FBTDtBQUFzQixTQUFyUSxFQUFzUUwsV0FBVSxxQkFBVTtBQUFDLGVBQUtLLGNBQUw7QUFBc0IsU0FBalQsRUFBa1RKLFdBQVUscUJBQVU7QUFBQyxlQUFLSSxjQUFMO0FBQXNCLFNBQTdWLEVBQThWL0osZ0JBQWUsMEJBQVU7QUFBQyxlQUFLK0osY0FBTDtBQUFzQixTQUE5WSxFQUErWTlKLG9CQUFtQiw4QkFBVTtBQUFDLGVBQUs4SixjQUFMO0FBQXNCLFNBQW5jLEVBQTVpQixFQUFpL0IzcUIsVUFBUyxFQUFDNHFCLFdBQVUscUJBQVU7QUFBQyxjQUFHLE1BQUksS0FBS3RLLEtBQVosRUFBa0IsT0FBTSxDQUFDLENBQVAsQ0FBUyxJQUFHLENBQUMsS0FBS2tLLGFBQVQsRUFBdUIsT0FBTSxDQUFDLENBQVAsQ0FBUyxJQUFJOXRCLElBQUUsS0FBSzh0QixhQUFMLENBQW1CSyxlQUFuQixDQUFtQyxLQUFLSixNQUF4QyxDQUFOLENBQXNELE9BQU0sRUFBRSxLQUFLLENBQUwsS0FBUy90QixDQUFULElBQVksQ0FBQ0EsRUFBRW91QixRQUFqQixDQUFOO0FBQWlDLFNBQXhLLEVBQXlLQyxjQUFhLHdCQUFVO0FBQUMsaUJBQU8sS0FBS1AsYUFBTCxJQUFvQixLQUFLbEssS0FBTCxHQUFXLENBQVgsS0FBZSxLQUFLa0ssYUFBTCxDQUFtQlEsYUFBbkIsRUFBbkMsSUFBdUUsZUFBYSxLQUFLWixnQkFBekYsR0FBMEcsUUFBMUcsR0FBbUgsS0FBS0EsZ0JBQS9IO0FBQWdKLFNBQWpWLEVBQWtWYSxlQUFjLHlCQUFVO0FBQUMsaUJBQU8sS0FBSzNLLEtBQUwsS0FBYSxLQUFLa0ssYUFBTCxDQUFtQlUsZ0JBQXZDO0FBQXdELFNBQW5hLEVBQW9hMWhCLFFBQU8sa0JBQVU7QUFBQyxpQkFBTyxLQUFLa2hCLFFBQUwsR0FBYyxFQUFkLEdBQWlCLEVBQUNqaUIsT0FBTSxLQUFLQSxLQUFaLEVBQWtCd0ksTUFBSyxLQUFLQSxJQUE1QixFQUF4QjtBQUEwRCxTQUFoZixFQUExL0IsRUFBNCtDaEssU0FBUSxFQUFDa2tCLGFBQVksdUJBQVU7QUFBQyxpQkFBTSxFQUFDM2QsSUFBRyxLQUFLaWQsTUFBVCxFQUFnQnhKLE9BQU0sS0FBS1IsT0FBM0IsRUFBbUMySyxTQUFRLEtBQUtkLFNBQWhELEVBQTBEcEosTUFBSyxLQUFLdlAsTUFBcEUsRUFBMkVGLFFBQU8sS0FBS0ssUUFBdkYsRUFBZ0d1WixVQUFTLEtBQUtoQixVQUE5RyxFQUF5SFMsVUFBUyxLQUFLblgsVUFBdkksRUFBa0p2TixVQUFTLEtBQUtzYSxVQUFoSyxFQUEySzRLLFNBQVEsS0FBS2YsU0FBeEwsRUFBa01uSixjQUFhLEtBQUtSLGNBQXBOLEVBQW1PUyxrQkFBaUIsS0FBS1Isa0JBQXpQLEVBQTRRUyxLQUFJLElBQWhSLEVBQU47QUFBNFIsU0FBcFQsRUFBcVRpSyxjQUFhLHdCQUFVO0FBQUMsZUFBS2YsYUFBTCxDQUFtQmUsWUFBbkI7QUFBa0MsU0FBL1csRUFBZ1hDLGtCQUFpQiw0QkFBVTtBQUFDLGVBQUtoQixhQUFMLENBQW1CZ0IsZ0JBQW5CO0FBQXNDLFNBQWxiLEVBQW1iQyxlQUFjLHlCQUFVO0FBQUMsZUFBS2pCLGFBQUwsQ0FBbUJpQixhQUFuQixDQUFpQyxLQUFLTixXQUFMLEVBQWpDO0FBQXFELFNBQWpnQixFQUFrZ0JSLGdCQUFlLDBCQUFVO0FBQUMsZUFBS0gsYUFBTCxDQUFtQmtCLFVBQW5CLENBQThCLEtBQUtQLFdBQUwsRUFBOUI7QUFBa0QsU0FBOWtCLEVBQXAvQyxFQUFva0VwWixTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsS0FBS3l1QixXQUFMLEVBQU4sQ0FBeUIsSUFBRyxLQUFLWCxhQUFMLEdBQW1CLENBQUMsR0FBRW5zQixFQUFFSixPQUFMLEVBQWMsS0FBSzJCLE9BQW5CLEVBQTJCLFlBQTNCLENBQW5CLEVBQTRELENBQUMsS0FBSzRxQixhQUFyRSxFQUFtRixNQUFNLElBQUl6YSxLQUFKLENBQVUsMkNBQVYsQ0FBTixDQUE2RCxLQUFLZ0MsT0FBTCxHQUFhLENBQUMsQ0FBZCxFQUFnQixLQUFLeVksYUFBTCxDQUFtQmtCLFVBQW5CLENBQThCaHZCLENBQTlCLENBQWhCLEVBQWlELEtBQUtvVixRQUFMLElBQWUsS0FBSzBZLGFBQUwsQ0FBbUJpQixhQUFuQixDQUFpQy91QixDQUFqQyxDQUFoRSxFQUFvRyxLQUFLZ3VCLFFBQUwsR0FBYyxLQUFLRixhQUFMLENBQW1COWQsVUFBckksRUFBZ0osS0FBSzRULEtBQUwsR0FBVyxLQUFLa0ssYUFBTCxDQUFtQm1CLFlBQW5CLENBQWdDLEtBQUtsQixNQUFyQyxDQUEzSjtBQUF3TSxPQUF4OEUsRUFBeThFcFksZUFBYyx5QkFBVTtBQUFDLGFBQUttWSxhQUFMLENBQW1Cb0IsY0FBbkIsQ0FBa0MsS0FBS1QsV0FBTCxFQUFsQztBQUFzRCxPQUF4aEYsRUFBVixFQUFvaUZ6dUIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBaGpGO0FBQXdqRixHQUhoK1UsRUFHbStVLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CVixFQUFFc0IsT0FBRixHQUFVLEVBQUM2QixPQUFNLEVBQUMrckIsTUFBS2x1QixNQUFOLEVBQWFtdUIsbUJBQWtCemxCLE9BQS9CLEVBQVAsRUFBK0NLLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUM0WixPQUFNcmEsTUFBUCxFQUFjdWtCLGVBQWMsRUFBNUIsRUFBTjtBQUFzQyxPQUFyRyxFQUFzR3hxQixVQUFTLEVBQUMrckIsYUFBWSx1QkFBVTtBQUFDLGlCQUFPLEtBQUt6TCxLQUFMLEdBQVcsS0FBS2tLLGFBQUwsQ0FBbUJVLGdCQUFyQztBQUFzRCxTQUE5RSxFQUErRWMsa0JBQWlCLDRCQUFVO0FBQUMsaUJBQU0sRUFBQyxhQUFZLEtBQUt4QixhQUFMLENBQW1CeUIsVUFBbkIsS0FBZ0MsS0FBS0osSUFBTCxDQUFVcmUsRUFBdkQsRUFBMEQsdUJBQXNCLEtBQUtzZSxpQkFBckYsRUFBdUcsZUFBYyxLQUFLRCxJQUFMLENBQVV6bEIsUUFBL0gsRUFBd0ksc0JBQXFCLEtBQUt5bEIsSUFBTCxDQUFVVCxPQUF2SyxFQUErSyxjQUFhLEtBQUtXLFdBQWpNLEVBQU47QUFBb04sU0FBL1QsRUFBZ1U3SyxNQUFLLGdCQUFVO0FBQUMsaUJBQU0sQ0FBQyxLQUFLMkssSUFBTCxDQUFVemxCLFFBQVgsSUFBcUIsS0FBS3lsQixJQUFMLENBQVVmLFFBQS9CLElBQXlDLEtBQUtpQixXQUE5QyxHQUEwRCxXQUExRCxHQUFzRSxDQUFDLEtBQUtGLElBQUwsQ0FBVXpsQixRQUFYLElBQXFCLEtBQUsybEIsV0FBMUIsR0FBc0MsT0FBdEMsR0FBOEMsS0FBS0YsSUFBTCxDQUFVM0ssSUFBcEk7QUFBeUksU0FBemQsRUFBMGRnTCxZQUFXLHNCQUFVO0FBQUMsaUJBQU8sS0FBSzVMLEtBQUwsR0FBVyxDQUFsQjtBQUFvQixTQUFwZ0IsRUFBL0csRUFBcW5Cdk8sU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLbUwsU0FBTCxDQUFnQixZQUFVO0FBQUMsY0FBR25MLEVBQUU4dEIsYUFBRixHQUFnQixDQUFDLEdBQUVsc0IsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRWtELE9BQWhCLEVBQXdCLFlBQXhCLENBQWhCLEVBQXNELENBQUNsRCxFQUFFOHRCLGFBQTVELEVBQTBFLE1BQU05dEIsRUFBRWtVLFFBQUYsSUFBYSxJQUFJYixLQUFKLENBQVUsb0RBQVYsQ0FBbkIsQ0FBbUZyVCxFQUFFNGpCLEtBQUYsR0FBUTVqQixFQUFFOHRCLGFBQUYsQ0FBZ0JtQixZQUFoQixDQUE2Qmp2QixFQUFFbXZCLElBQUYsQ0FBT3JlLEVBQXBDLENBQVI7QUFBZ0QsU0FBeE87QUFBMk8sT0FBOTNCLEVBQVYsRUFBMDRCOVEsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBdDVCO0FBQTg1QixHQUhyaFgsRUFHd2hYLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkO0FBQUEsUUFBbUJrQixJQUFFbkIsRUFBRSxDQUFGLENBQXJCO0FBQUEsUUFBMEJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBNUI7QUFBQSxRQUFpQ2IsSUFBRU4sRUFBRSxFQUFGLENBQW5DO0FBQUEsUUFBeUNFLElBQUVILEVBQUVPLENBQUYsQ0FBM0MsQ0FBZ0RmLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssWUFBTixFQUFtQjVFLE9BQU0sRUFBQ2dzQixtQkFBa0IsRUFBQzNsQixNQUFLRSxPQUFOLEVBQWNwSSxTQUFRLENBQUMsQ0FBdkIsRUFBbkIsRUFBNkM4akIsYUFBWSxFQUFDNWIsTUFBSyxDQUFDcEcsTUFBRCxFQUFRa0csTUFBUixDQUFOLEVBQXNCaEksU0FBUSxDQUE5QixFQUF6RCxFQUEwRnlPLFlBQVcsRUFBQ3ZHLE1BQUtFLE9BQU4sRUFBY3BJLFNBQVEsQ0FBQyxDQUF2QixFQUFyRyxFQUF6QixFQUF5Sm1ULFFBQU8sQ0FBQy9TLEVBQUVKLE9BQUgsQ0FBaEssRUFBNEt5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDeWxCLFVBQVMsRUFBVixFQUFhRixZQUFXLElBQXhCLEVBQTZCZixrQkFBaUIsQ0FBOUMsRUFBZ0R0SSxlQUFjLEtBQTlELEVBQW9FQyxjQUFhLEtBQWpGLEVBQU47QUFBOEYsT0FBMVIsRUFBMlI3aUIsVUFBUyxFQUFDZ2pCLG1CQUFrQiw2QkFBVTtBQUFDLGlCQUFNLEVBQUMsdUJBQXNCLEtBQUs4SSxpQkFBNUIsRUFBTjtBQUFxRCxTQUFuRixFQUFvRk0sY0FBYSx3QkFBVTtBQUFDLGlCQUFNLEVBQUMscUJBQW9CLEtBQUsxZixVQUExQixFQUFOO0FBQTRDLFNBQXhKLEVBQXBTLEVBQThiekYsU0FBUSxFQUFDb2xCLGFBQVkscUJBQVMzdkIsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxLQUFLZ3ZCLFlBQUwsQ0FBa0JqdkIsQ0FBbEIsQ0FBTixDQUEyQixJQUFHQyxNQUFJLEtBQUt3dkIsUUFBTCxDQUFjM3BCLE1BQXJCLEVBQTRCO0FBQUMsZ0JBQUlwRixJQUFFLENBQUMsR0FBRWtCLEVBQUVMLE9BQUwsRUFBYyxLQUFLa3VCLFFBQW5CLEVBQTZCeHZCLElBQUUsQ0FBL0IsQ0FBTjtBQUFBLGdCQUF3Q1EsSUFBRSxLQUFLZ3ZCLFFBQUwsQ0FBYy91QixDQUFkLENBQTFDLENBQTJELE9BQU9ELENBQVA7QUFBUztBQUFDLFNBQXRKLEVBQXVKMHRCLGlCQUFnQix5QkFBU251QixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLEtBQUtndkIsWUFBTCxDQUFrQmp2QixDQUFsQixDQUFOLENBQTJCLElBQUcsTUFBSUMsQ0FBUCxFQUFTO0FBQUMsZ0JBQUlTLElBQUUsQ0FBQyxHQUFFa0IsRUFBRUwsT0FBTCxFQUFjLEtBQUtrdUIsUUFBbkIsRUFBNkJ4dkIsSUFBRSxDQUEvQixDQUFOO0FBQUEsZ0JBQXdDUSxJQUFFLEtBQUtndkIsUUFBTCxDQUFjL3VCLENBQWQsQ0FBMUMsQ0FBMkQsT0FBT0QsQ0FBUDtBQUFTO0FBQUMsU0FBN1IsRUFBOFI2dEIsZUFBYyx5QkFBVTtBQUFDLGNBQUl0dUIsSUFBRSxDQUFDLEdBQUU0QixFQUFFTCxPQUFMLEVBQWMsS0FBS2t1QixRQUFuQixDQUFOLENBQW1DLE9BQU96dkIsRUFBRThGLE1BQVQ7QUFBZ0IsU0FBMVcsRUFBMldtcEIsY0FBYSxzQkFBU2p2QixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLENBQUMsR0FBRTJCLEVBQUVMLE9BQUwsRUFBYyxLQUFLa3VCLFFBQW5CLENBQU4sQ0FBbUMsT0FBT3h2QixFQUFFa1AsT0FBRixDQUFVblAsQ0FBVixDQUFQO0FBQW9CLFNBQTNiLEVBQTRiNHZCLGNBQWEsc0JBQVM1dkIsQ0FBVCxFQUFXO0FBQUMsZUFBSzZ2QixJQUFMLENBQVUsS0FBS0osUUFBZixFQUF3Qnp2QixFQUFFOFEsRUFBMUIsRUFBNkI5USxDQUE3QjtBQUFnQyxTQUFyZixFQUFzZjZ1QixjQUFhLHdCQUFVO0FBQUMsY0FBRyxLQUFLTCxnQkFBTCxHQUFzQixLQUFLRixhQUFMLEtBQXFCLENBQTlDLEVBQWdEO0FBQUMsZ0JBQUl0dUIsSUFBRSxLQUFLMnZCLFdBQUwsQ0FBaUIsS0FBS0osVUFBdEIsQ0FBTixDQUF3QyxLQUFLUixhQUFMLENBQW1CL3VCLENBQW5CO0FBQXNCLFdBQS9HLE1BQW9ILEtBQUs2SyxLQUFMLENBQVcsV0FBWDtBQUF3QixTQUExcEIsRUFBMnBCaWtCLGtCQUFpQiw0QkFBVTtBQUFDLGNBQUcsS0FBS04sZ0JBQUwsR0FBc0IsQ0FBdEIsSUFBeUIsS0FBS0EsZ0JBQUwsR0FBc0IsS0FBS0YsYUFBTCxFQUFsRCxFQUF1RTtBQUFDLGdCQUFJdHVCLElBQUUsS0FBS211QixlQUFMLENBQXFCLEtBQUtvQixVQUExQixDQUFOLENBQTRDLEtBQUtSLGFBQUwsQ0FBbUIvdUIsQ0FBbkI7QUFBc0I7QUFBQyxTQUFsMEIsRUFBbTBCK3VCLGVBQWMsdUJBQVMvdUIsQ0FBVCxFQUFXO0FBQUMsZUFBS3d1QixnQkFBTCxHQUFzQixLQUFLUyxZQUFMLENBQWtCanZCLEVBQUU4USxFQUFwQixDQUF0QixJQUErQyxDQUFDOVEsRUFBRW91QixRQUFsRCxLQUE2RCxLQUFLbUIsVUFBTCxHQUFnQnZ2QixFQUFFOFEsRUFBbEIsRUFBcUIsS0FBSzBkLGdCQUFMLEdBQXNCLEtBQUtTLFlBQUwsQ0FBa0IsS0FBS00sVUFBdkIsQ0FBM0MsRUFBOEUsS0FBSy9ILGlCQUFMLEVBQTlFLEVBQXVHLEtBQUszYyxLQUFMLENBQVcsUUFBWCxFQUFvQixLQUFLMmpCLGdCQUF6QixDQUFwSztBQUFnTixTQUE3aUMsRUFBOGlDVSxnQkFBZSx3QkFBU2x2QixDQUFULEVBQVc7QUFBQyxlQUFLOHZCLE9BQUwsQ0FBYSxLQUFLTCxRQUFsQixFQUEyQnp2QixFQUFFOFEsRUFBN0I7QUFBaUMsU0FBMW1DLEVBQTJtQ2tlLFlBQVcsb0JBQVNodkIsQ0FBVCxFQUFXO0FBQUMsY0FBRyxLQUFLNHZCLFlBQUwsQ0FBa0I1dkIsQ0FBbEIsR0FBcUJBLEVBQUUrVSxNQUExQixFQUFpQyxJQUFHL1UsRUFBRTBKLFFBQUwsRUFBYztBQUFDLGdCQUFHLENBQUMsR0FBRTlILEVBQUVMLE9BQUwsRUFBYyxLQUFLa3VCLFFBQW5CLEVBQTZCM3BCLE1BQWhDLEVBQXVDO0FBQUMsa0JBQUk3RixJQUFFLENBQUMsR0FBRTJCLEVBQUVMLE9BQUwsRUFBYyxLQUFLa3VCLFFBQW5CLENBQU47QUFBQSxrQkFBbUMvdUIsSUFBRVQsRUFBRWtQLE9BQUYsQ0FBVW5QLEVBQUU4USxFQUFaLElBQWdCLENBQXJEO0FBQUEsa0JBQXVEclEsSUFBRVIsRUFBRVMsQ0FBRixDQUF6RCxDQUE4REQsSUFBRSxLQUFLc3VCLGFBQUwsQ0FBbUIsS0FBS1UsUUFBTCxDQUFjaHZCLENBQWQsQ0FBbkIsQ0FBRixHQUF1QyxLQUFLc3VCLGFBQUwsQ0FBbUIsS0FBS1UsUUFBTCxDQUFjLENBQWQsQ0FBbkIsQ0FBdkM7QUFBNEU7QUFBQyxXQUFsTSxNQUF1TSxLQUFLVixhQUFMLENBQW1CL3VCLENBQW5CO0FBQXNCLFNBQWg0QyxFQUFpNEMybUIsdUJBQXNCLGlDQUFVO0FBQUMsZUFBS0MsY0FBTCxHQUFvQixJQUFJbEYsZ0JBQUosQ0FBcUIsQ0FBQyxHQUFFOWdCLEVBQUVXLE9BQUwsRUFBYyxLQUFLc2xCLGdCQUFuQixFQUFvQyxFQUFwQyxDQUFyQixDQUFwQixFQUFrRixLQUFLRCxjQUFMLENBQW9CakYsT0FBcEIsQ0FBNEIsS0FBSzNMLEtBQUwsQ0FBVytaLFdBQXZDLEVBQW1ELEVBQUNuTyxXQUFVLENBQUMsQ0FBWixFQUFjbUYsWUFBVyxDQUFDLENBQTFCLEVBQTRCakYsU0FBUSxDQUFDLENBQXJDLEVBQW5ELENBQWxGO0FBQThLLFNBQWhsRCxFQUFpbERrTyxnQ0FBK0IsMENBQVU7QUFBQyxjQUFHLEtBQUtoZ0IsVUFBUixFQUFtQixLQUFLbVcsWUFBTCxHQUFrQixTQUFsQixDQUFuQixLQUFtRDtBQUFDLGdCQUFJbm1CLElBQUUsS0FBS3dFLEdBQUwsQ0FBU3FKLFdBQWY7QUFBQSxnQkFBMkI1TixJQUFFLENBQTdCLENBQStCLEtBQUtrbUIsWUFBTCxHQUFrQm5tQixJQUFFLEtBQUt3dUIsZ0JBQVAsR0FBd0IsSUFBMUMsQ0FBK0MsS0FBSSxJQUFJOXRCLENBQVIsSUFBYSxLQUFLK3VCLFFBQWxCLEVBQTJCO0FBQUMsa0JBQUlodkIsSUFBRSxLQUFLZ3ZCLFFBQUwsQ0FBYy91QixDQUFkLENBQU4sQ0FBdUJELEVBQUVta0IsR0FBRixDQUFNN1ksS0FBTixHQUFZL0wsSUFBRSxJQUFkLEVBQW1CUyxFQUFFbWtCLEdBQUYsQ0FBTXJRLElBQU4sR0FBV3ZVLElBQUVDLENBQUYsR0FBSSxJQUFsQyxFQUF1Q0EsR0FBdkM7QUFBMkM7QUFBQztBQUFDLFNBQTcxRCxFQUE4MURzbkIsd0JBQXVCLGtDQUFVO0FBQUMsY0FBSXZuQixJQUFFLElBQU4sQ0FBVyxLQUFLbUwsU0FBTCxDQUFnQixZQUFVO0FBQUMsZ0JBQUcsQ0FBQ25MLEVBQUVnUSxVQUFILElBQWUsQ0FBQyxHQUFFcE8sRUFBRUwsT0FBTCxFQUFjdkIsRUFBRXl2QixRQUFoQixFQUEwQjNwQixNQUE1QyxFQUFtRDtBQUFDLGtCQUFJN0YsSUFBRUQsRUFBRXl2QixRQUFGLENBQVd6dkIsRUFBRXV2QixVQUFiLEVBQXlCM0ssR0FBekIsQ0FBNkJwZ0IsR0FBN0IsQ0FBaUM2UCxZQUF2QyxDQUFvRHJVLEVBQUVrbUIsYUFBRixHQUFnQmptQixJQUFFLElBQWxCO0FBQXVCLGFBQS9ILE1BQW9JRCxFQUFFa21CLGFBQUYsR0FBZ0IsU0FBaEI7QUFBMEIsV0FBekw7QUFBNEwsU0FBdmtFLEVBQXdrRXNCLG1CQUFrQiw2QkFBVTtBQUFDLGNBQUl4bkIsSUFBRSxJQUFOLENBQVcrRCxPQUFPdWQscUJBQVAsQ0FBOEIsWUFBVTtBQUFDdGhCLGNBQUVnd0IsOEJBQUYsSUFBbUNod0IsRUFBRXVuQixzQkFBRixFQUFuQztBQUE4RCxXQUF2RztBQUEwRyxTQUExdEUsRUFBMnRFRSxvQkFBbUIsOEJBQVU7QUFBQyxjQUFJem5CLElBQUUsSUFBTixDQUFXK0QsT0FBTzZHLFlBQVAsQ0FBb0IsS0FBS3FiLGlCQUF6QixHQUE0QyxLQUFLQSxpQkFBTCxHQUF1QmxpQixPQUFPK0UsVUFBUCxDQUFtQixZQUFVO0FBQUM5SSxjQUFFd25CLGlCQUFGLElBQXNCeG5CLEVBQUUwWSxhQUFGLEdBQWdCLENBQUMsQ0FBdkM7QUFBeUMsV0FBdkUsRUFBeUUsR0FBekUsQ0FBbkU7QUFBaUosU0FBcjVFLEVBQXM1RW1PLGtCQUFpQiw0QkFBVTtBQUFDLGVBQUtXLGlCQUFMLElBQXlCLEtBQUtDLGtCQUFMLEVBQXpCO0FBQW1ELFNBQXIrRSxFQUFzK0VDLG1CQUFrQiw2QkFBVTtBQUFDLGVBQUtoUCxhQUFMLEdBQW1CLENBQUMsQ0FBcEIsRUFBc0IsS0FBS21PLGdCQUFMLEVBQXRCO0FBQThDLFNBQWpqRixFQUF0YyxFQUF5L0Z4UixTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsSUFBTixDQUFXLEtBQUttTCxTQUFMLENBQWdCLFlBQVU7QUFBQyxjQUFHbkwsRUFBRTJtQixxQkFBRixJQUEwQjVpQixPQUFPK0ssZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBaUM5TyxFQUFFMG5CLGlCQUFuQyxDQUExQixFQUFnRixDQUFDLEdBQUU5bEIsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRXl2QixRQUFoQixFQUEwQjNwQixNQUExQixJQUFrQyxDQUFDOUYsRUFBRXV2QixVQUF4SCxFQUFtSTtBQUFDLGdCQUFJdHZCLElBQUUsQ0FBQyxHQUFFMkIsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRXl2QixRQUFoQixFQUEwQixDQUExQixDQUFOLENBQW1DenZCLEVBQUUrdUIsYUFBRixDQUFnQi91QixFQUFFeXZCLFFBQUYsQ0FBV3h2QixDQUFYLENBQWhCO0FBQStCO0FBQUMsU0FBbE87QUFBcU8sT0FBNXZHLEVBQTZ2RzBWLGVBQWMseUJBQVU7QUFBQyxhQUFLaVIsY0FBTCxJQUFxQixLQUFLQSxjQUFMLENBQW9CN0UsVUFBcEIsRUFBckIsRUFBc0RoZSxPQUFPMEssbUJBQVAsQ0FBMkIsUUFBM0IsRUFBb0MsS0FBS2laLGlCQUF6QyxDQUF0RDtBQUFrSCxPQUF4NEcsRUFBVixFQUFvNUcxbkIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBaDZHO0FBQXc2RyxHQUhqbmUsRUFHb25lLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiLENBQWtCVixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLGNBQU4sRUFBcUIwTSxRQUFPLENBQUM5UyxFQUFFTCxPQUFILENBQTVCLEVBQVYsRUFBbUR2QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEvRDtBQUF1RSxHQUg5MGUsRUFHaTFlLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFLEVBQXBCO0FBQUEsUUFBdUJGLElBQUUsTUFBekIsQ0FBZ0MxQixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFdBQU4sRUFBa0I1RSxPQUFNLEVBQUM0RSxNQUFLM0UsTUFBTixFQUFhRixPQUFNd0csT0FBbkIsRUFBMkJtSCxJQUFHek4sTUFBOUIsRUFBcUNxRyxVQUFTQyxPQUE5QyxFQUFzREYsTUFBSyxFQUFDQSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxRQUFyQixFQUEzRCxFQUF4QixFQUFtSG1ULFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBMUgsRUFBc0l5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDaW1CLFNBQVF0dUIsQ0FBVCxFQUFXbVYsU0FBUW5OLFFBQVEsS0FBS3hHLEtBQWIsQ0FBbkIsRUFBTjtBQUE4QyxPQUFwTSxFQUFxTUcsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsY0FBYSxLQUFLa0MsT0FBbkIsRUFBMkIsZUFBYyxLQUFLcE4sUUFBOUMsRUFBTjtBQUE4RCxTQUFsRixFQUFtRm9ELFFBQU8sa0JBQVU7QUFBQyxpQkFBTSxFQUFDK0wsV0FBVSxpQkFBZSxLQUFLb1gsT0FBcEIsR0FBNEIsWUFBdkMsRUFBTjtBQUEyRCxTQUFoSyxFQUE5TSxFQUFnWHJzQixPQUFNLEVBQUNrVCxTQUFRLG1CQUFVO0FBQUMsZUFBS29aLFdBQUw7QUFBbUIsU0FBdkMsRUFBd0Mvc0IsT0FBTSxlQUFTbkQsQ0FBVCxFQUFXO0FBQUMsZUFBS213QixXQUFMLENBQWlCbndCLENBQWpCO0FBQW9CLFNBQTlFLEVBQXRYLEVBQXNjdUssU0FBUSxFQUFDMmxCLGFBQVksdUJBQVU7QUFBQyxlQUFLRCxPQUFMLEdBQWEsS0FBS25aLE9BQUwsR0FBYWpWLElBQUUsR0FBZixHQUFtQkYsQ0FBaEM7QUFBa0MsU0FBMUQsRUFBMkR3dUIsYUFBWSxxQkFBU253QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLHlCQUFhLE9BQU9BLENBQXBCLElBQXVCLEtBQUs0SyxLQUFMLENBQVcsUUFBWCxFQUFvQjdLLENBQXBCLEVBQXNCQyxDQUF0QixHQUF5QkEsRUFBRW13QixnQkFBRixLQUFxQixLQUFLdFosT0FBTCxHQUFhOVcsQ0FBbEMsQ0FBekIsRUFBOEQsS0FBSzZLLEtBQUwsQ0FBVyxPQUFYLEVBQW1CLEtBQUtpTSxPQUF4QixFQUFnQzdXLENBQWhDLENBQXJGLElBQXlILEtBQUs2VyxPQUFMLEdBQWE5VyxDQUF0STtBQUF3SSxTQUE3TixFQUE4TjBWLFFBQU8sZ0JBQVMxVixDQUFULEVBQVc7QUFBQyxlQUFLMEosUUFBTCxJQUFlLEtBQUt5bUIsV0FBTCxDQUFpQixDQUFDLEtBQUtyWixPQUF2QixFQUErQjlXLENBQS9CLENBQWY7QUFBaUQsU0FBbFMsRUFBOWMsRUFBa3ZCcVYsU0FBUSxtQkFBVTtBQUFDLGFBQUtsSyxTQUFMLENBQWUsS0FBSytrQixXQUFwQjtBQUFpQyxPQUF0eUIsRUFBVixFQUFrekJsd0IsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBOXpCO0FBQXMwQixHQUh4emdCLEVBRzJ6Z0IsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQ7QUFBQSxRQUFtQmtCLElBQUVuQixFQUFFLENBQUYsQ0FBckI7QUFBQSxRQUEwQmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE1QjtBQUFBLFFBQWlDYixJQUFFTixFQUFFLEVBQUYsQ0FBbkM7QUFBQSxRQUF5Q0UsSUFBRUgsRUFBRU8sQ0FBRixDQUEzQyxDQUFnRGYsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxVQUFOLEVBQWlCNUUsT0FBTSxFQUFDaXRCLFlBQVdodEIsTUFBWixFQUFtQml0QixRQUFPanRCLE1BQTFCLEVBQXZCLEVBQXlEcVIsUUFBTyxDQUFDL1MsRUFBRUosT0FBSCxDQUFoRSxFQUE0RXlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUN1bUIsVUFBUyxLQUFLRixVQUFmLEVBQTBCRyxRQUFPLEtBQUtGLE1BQXRDLEVBQTZDRyxpQkFBZ0IsQ0FBQyxDQUE5RCxFQUFnRXptQixNQUFLLEVBQXJFLEVBQXdFMG1CLGNBQWEsRUFBckYsRUFBTjtBQUErRixPQUEzTCxFQUE0THB0QixVQUFTLEVBQUNxdEIsY0FBYSx3QkFBVTtBQUFDLGlCQUFPLEtBQUszbUIsSUFBTCxHQUFVLEtBQUtBLElBQUwsQ0FBVWxFLE1BQXBCLEdBQTJCLENBQWxDO0FBQW9DLFNBQTdELEVBQThEOHFCLGtCQUFpQiw0QkFBVTtBQUFDLGlCQUFPLEtBQUtGLFlBQUwsR0FBa0IsS0FBS0EsWUFBTCxDQUFrQjVxQixNQUFwQyxHQUEyQyxDQUFsRDtBQUFvRCxTQUE5SSxFQUFyTSxFQUFxVnlFLFNBQVEsRUFBQ3NtQixVQUFTLGtCQUFTN3dCLENBQVQsRUFBVztBQUFDLGVBQUt3d0IsTUFBTCxHQUFZeHdCLENBQVosRUFBYyxLQUFLNkssS0FBTCxDQUFXLE1BQVgsRUFBa0IsRUFBQzdDLE1BQUtoSSxDQUFOLEVBQVF5SixNQUFLLEtBQUs4bUIsUUFBbEIsRUFBbEIsQ0FBZDtBQUE2RCxTQUFuRixFQUFvRk8sZUFBYyx5QkFBVTtBQUFDLGVBQUtqbUIsS0FBTCxDQUFXLFFBQVgsRUFBb0IsS0FBSzZsQixZQUF6QjtBQUF1QyxTQUFwSixFQUFxSkssV0FBVSxtQkFBUy93QixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFNEYsVUFBVUMsTUFBVixHQUFpQixDQUFqQixJQUFvQixLQUFLLENBQUwsS0FBU0QsVUFBVSxDQUFWLENBQTdCLEdBQTBDQSxVQUFVLENBQVYsQ0FBMUMsR0FBdUQsSUFBN0Q7QUFBQSxjQUFrRW5GLElBQUVULEtBQUcsS0FBSytKLElBQTVFO0FBQUEsY0FBaUZ2SixJQUFFQyxFQUFFeU8sT0FBRixDQUFVblAsQ0FBVixDQUFuRixDQUFnR1MsTUFBSSxDQUFDLENBQUwsSUFBUUMsRUFBRTBPLE1BQUYsQ0FBUzNPLENBQVQsRUFBVyxDQUFYLENBQVI7QUFBc0IsU0FBalMsRUFBa1N1d0IsaUJBQWdCLHlCQUFTaHhCLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsaUJBQU9ELElBQUUsS0FBSyxLQUFLMHdCLFlBQUwsQ0FBa0I1cEIsSUFBbEIsQ0FBdUI3RyxDQUF2QixDQUFQLEdBQWlDLEtBQUssS0FBSzh3QixTQUFMLENBQWU5d0IsQ0FBZixFQUFpQixLQUFLeXdCLFlBQXRCLENBQTdDO0FBQWlGLFNBQWpaLEVBQWtaTyx5QkFBd0IsaUNBQVNqeEIsQ0FBVCxFQUFXO0FBQUMsZUFBSzB3QixZQUFMLEdBQWtCMXdCLElBQUUsQ0FBQyxHQUFFNEIsRUFBRUwsT0FBTCxFQUFjLEVBQWQsRUFBaUIsS0FBS3lJLElBQXRCLENBQUYsR0FBOEIsRUFBaEQ7QUFBbUQsU0FBemUsRUFBN1YsRUFBdzBCcEcsT0FBTSxFQUFDMHNCLFFBQU8sa0JBQVU7QUFBQyxlQUFLRSxNQUFMLEdBQVksS0FBS0YsTUFBakIsRUFBd0IsS0FBS3psQixLQUFMLENBQVcsV0FBWCxDQUF4QjtBQUFnRCxTQUFuRSxFQUFvRXdsQixZQUFXLHNCQUFVO0FBQUMsZUFBS0UsUUFBTCxHQUFjLEtBQUtGLFVBQW5CLEVBQThCLEtBQUt4bEIsS0FBTCxDQUFXLFdBQVgsQ0FBOUI7QUFBc0QsU0FBaEosRUFBOTBCLEVBQWcrQndLLFNBQVEsbUJBQVU7QUFBQyxhQUFLNmIsVUFBTCxHQUFnQixDQUFDLEdBQUV0d0IsRUFBRVcsT0FBTCxFQUFjLEtBQUsyQixPQUFuQixFQUEyQixlQUEzQixDQUFoQixFQUE0RCxLQUFLZ3VCLFVBQUwsS0FBa0IsS0FBS0EsVUFBTCxDQUFnQkMsYUFBaEIsR0FBOEIsSUFBaEQsQ0FBNUQ7QUFBa0gsT0FBcm1DLEVBQVYsRUFBaW5DbnhCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQTduQztBQUFxb0MsR0FIam5qQixFQUdvbmpCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFiO0FBQUEsUUFBa0JrQixJQUFFbkIsRUFBRSxFQUFGLENBQXBCO0FBQUEsUUFBMEJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBNUIsQ0FBaUM1QixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLDJCQUFOLEVBQWtDME0sUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUF6QyxFQUFxRDZCLE9BQU0sRUFBQ2d1QixpQkFBZ0IsRUFBQzNuQixNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxVQUFyQixFQUFqQixFQUEzRCxFQUE4R3lJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUM0SyxTQUFRLEVBQVQsRUFBWXVjLGVBQWMsRUFBMUIsRUFBTjtBQUFvQyxPQUFsSyxFQUFtSzd0QixVQUFTLEVBQUNzdEIsa0JBQWlCLDRCQUFVO0FBQUMsaUJBQU8sS0FBS08sYUFBTCxDQUFtQlAsZ0JBQW5CLElBQXFDLENBQTVDO0FBQThDLFNBQTNFLEVBQTVLLEVBQXlQdmIsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLa3hCLFVBQUwsR0FBZ0IsQ0FBQyxHQUFFdnZCLEVBQUVKLE9BQUwsRUFBYyxLQUFLMkIsT0FBbkIsRUFBMkIsZUFBM0IsQ0FBaEIsRUFBNEQsS0FBS2lJLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsWUFBRW14QixhQUFGLEdBQWdCbnhCLEVBQUVreEIsVUFBRixDQUFhQyxhQUE3QixFQUEyQ254QixFQUFFcXhCLE1BQUYsQ0FBUyxnQ0FBVCxFQUEyQyxZQUFVO0FBQUNyeEIsY0FBRWdXLEtBQUYsQ0FBUXNiLE9BQVIsQ0FBZ0J6Z0IsV0FBaEIsR0FBNEI3USxFQUFFbXhCLGFBQUYsQ0FBZ0JQLGdCQUE1QyxFQUE2RDV3QixFQUFFNFUsT0FBRixHQUFVLEVBQUMsYUFBWTVVLEVBQUVteEIsYUFBRixDQUFnQlAsZ0JBQWhCLEdBQWlDLENBQTlDLEVBQXZFO0FBQXdILFdBQTlLLENBQTNDO0FBQTROLFNBQXZQLENBQTVEO0FBQXNULE9BQTdrQixFQUFWLEVBQXlsQjV3QixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFybUI7QUFBNm1CLEdBSG40a0IsRUFHczRrQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxDQUFGLENBQU47QUFBQSxRQUFXa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBYixDQUFrQlYsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxlQUFOLEVBQXNCME0sUUFBTyxDQUFDOVMsRUFBRUwsT0FBSCxDQUE3QixFQUFWLEVBQW9EdkIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBaEU7QUFBd0UsR0FIam1sQixFQUdvbWxCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssZUFBTixFQUFzQjVFLE9BQU0sRUFBQ211QixXQUFVNW5CLE9BQVgsRUFBNUIsRUFBZ0RLLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUN3bkIsV0FBVSxDQUFDLENBQVosRUFBTjtBQUFxQixPQUFyRixFQUFzRmx1QixVQUFTLEVBQUNzUixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxjQUFhLEtBQUsyYyxTQUFuQixFQUE2QixpQkFBZ0IsS0FBS0MsU0FBbEQsRUFBTjtBQUFtRSxTQUF2RixFQUEvRixFQUF3TG5jLFNBQVEsbUJBQVU7QUFBQyxhQUFLUCxTQUFMLENBQWVoUCxNQUFmLEdBQXNCLENBQXRCLEtBQTBCLEtBQUswckIsU0FBTCxHQUFlLENBQUMsQ0FBMUM7QUFBNkMsT0FBeFAsRUFBM0QsRUFBcVR4eEIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBalU7QUFBeVUsR0FIMThsQixFQUc2OGxCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYU8sV0FBT0MsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxHQUFpRGxELEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssZUFBTixFQUFzQjVFLE9BQU0sRUFBQ0QsT0FBTSxDQUFDRSxNQUFELEVBQVFrRyxNQUFSLENBQVAsRUFBdUJrb0IsU0FBUTluQixPQUEvQixFQUF1QytuQixNQUFLcnVCLE1BQTVDLEVBQW1ESixRQUFPSSxNQUExRCxFQUFpRXN1QixlQUFjdHVCLE1BQS9FLEVBQXNGdXVCLGFBQVksQ0FBQ3JvQixNQUFELEVBQVFsRyxNQUFSLENBQWxHLEVBQTVCLEVBQStJMkcsTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQytLLFFBQU8sQ0FBQyxDQUFULEVBQU47QUFBa0IsT0FBakwsRUFBa0x6UixVQUFTLEVBQUN1dUIsZ0JBQWUsMEJBQVU7QUFBQyxpQkFBTSxFQUFDLGFBQVksS0FBSzF1QixLQUFsQixFQUFOO0FBQStCLFNBQTFELEVBQTJEeVYsZUFBYyx5QkFBVTtBQUFDLGlCQUFNLEVBQUMsYUFBWSxLQUFLN0QsTUFBbEIsRUFBeUIsWUFBVyxLQUFLMGMsT0FBekMsRUFBTjtBQUF3RCxTQUE1SSxFQUE2SUssV0FBVSxxQkFBVTtBQUFDNWtCLGtCQUFRNmtCLEdBQVIsQ0FBWSxLQUFLNXVCLEtBQWpCO0FBQXdCLFNBQTFMLEVBQTNMLEVBQXVYb0gsU0FBUSxFQUFDeW5CLFlBQVcsc0JBQVU7QUFBQyxlQUFLamQsTUFBTCxHQUFZLENBQUMsQ0FBYixFQUFlLEtBQUtpQixLQUFMLENBQVc0QixLQUFYLENBQWlCcFQsR0FBakIsQ0FBcUJxVCxLQUFyQixFQUFmLEVBQTRDcFIsU0FBU3FJLGdCQUFULENBQTBCLE9BQTFCLEVBQWtDLEtBQUttakIscUJBQXZDLENBQTVDO0FBQTBHLFNBQWpJLEVBQWtJQyxhQUFZLHVCQUFVO0FBQUMsZUFBS25kLE1BQUwsS0FBYyxLQUFLQSxNQUFMLEdBQVksQ0FBQyxDQUFiLEVBQWUsS0FBS2lCLEtBQUwsQ0FBVzRCLEtBQVgsQ0FBaUJwVCxHQUFqQixDQUFxQnVuQixJQUFyQixFQUFmLEVBQTJDdGxCLFNBQVNnSSxtQkFBVCxDQUE2QixPQUE3QixFQUFxQyxLQUFLd2pCLHFCQUExQyxDQUF6RDtBQUEySCxTQUFwUixFQUFxUkEsdUJBQXNCLCtCQUFTanlCLENBQVQsRUFBVztBQUFDLGVBQUtnVyxLQUFMLENBQVdxRCxNQUFYLENBQWtCMVUsUUFBbEIsQ0FBMkIzRSxFQUFFc1YsTUFBN0IsS0FBc0MsS0FBSzRjLFdBQUwsRUFBdEM7QUFBeUQsU0FBaFgsRUFBaVhDLGVBQWMseUJBQVU7QUFBQyxjQUFJbnlCLElBQUUsS0FBS2dXLEtBQUwsQ0FBVzRCLEtBQVgsQ0FBaUJwVCxHQUFqQixDQUFxQnJCLEtBQTNCLENBQWlDLEtBQUsrdUIsV0FBTCxJQUFtQixLQUFLcm5CLEtBQUwsQ0FBVyxPQUFYLEVBQW1CN0ssQ0FBbkIsQ0FBbkIsRUFBeUMsS0FBSzZLLEtBQUwsQ0FBVyxRQUFYLEVBQW9CN0ssQ0FBcEIsQ0FBekM7QUFBZ0UsU0FBM2UsRUFBL1gsRUFBM0QsRUFBdzZCQSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUFwN0I7QUFBNDdCLEdBSHQ2bkIsRUFHeTZuQixVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZa0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZCxDQUFtQlYsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxlQUFOLEVBQXNCNUUsT0FBTSxFQUFDbXVCLFdBQVU1bkIsT0FBWCxFQUFtQnlvQixVQUFTL3VCLE1BQTVCLEVBQW1DNGdCLFdBQVU1Z0IsTUFBN0MsRUFBNUIsRUFBaUYyRyxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDdW1CLFVBQVMsSUFBVixFQUFlOEIsUUFBTyxDQUFDLENBQXZCLEVBQXlCQyxhQUFZLEVBQXJDLEVBQU47QUFBK0MsT0FBaEosRUFBaUpodkIsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGNBQUk1VSxJQUFFLEtBQUt1eUIsWUFBTCxFQUFOLENBQTBCLE9BQU92eUIsTUFBSSxLQUFLcXlCLE1BQUwsR0FBWSxDQUFDLENBQWpCLEdBQW9CLEVBQUMsY0FBYSxLQUFLZCxTQUFuQixFQUE2QixlQUFjLEtBQUthLFFBQWhELEVBQXlELGFBQVlweUIsS0FBRyxLQUFLcXlCLE1BQTdFLEVBQW9GLHdCQUF1QnJ5QixLQUFHLFdBQVMsS0FBS3V3QixRQUE1SCxFQUEzQjtBQUFpSyxTQUEvTSxFQUExSixFQUEyV2htQixTQUFRLEVBQUNnb0IsY0FBYSx3QkFBVTtBQUFDLGlCQUFPLEtBQUtELFdBQUwsQ0FBaUI5QixNQUFqQixLQUEwQixLQUFLNEIsUUFBdEM7QUFBK0MsU0FBeEUsRUFBeUVJLFlBQVcsc0JBQVU7QUFBQyxlQUFLSixRQUFMLEtBQWdCLFVBQVEsS0FBSzdCLFFBQWIsSUFBdUIsS0FBSzhCLE1BQTVCLEdBQW1DLEtBQUs5QixRQUFMLEdBQWMsTUFBakQsR0FBd0QsS0FBS0EsUUFBTCxHQUFjLEtBQXRFLEVBQTRFLEtBQUs4QixNQUFMLEdBQVksQ0FBQyxDQUF6RixFQUEyRixLQUFLQyxXQUFMLENBQWlCL0IsUUFBakIsR0FBMEIsS0FBS0EsUUFBMUgsRUFBbUksS0FBSytCLFdBQUwsQ0FBaUJ6QixRQUFqQixDQUEwQixLQUFLdUIsUUFBL0IsQ0FBbko7QUFBNkwsU0FBNVIsRUFBNlJLLFVBQVMsb0JBQVU7QUFBQyxlQUFLRixZQUFMLE9BQXNCLEtBQUtGLE1BQUwsR0FBWSxDQUFDLENBQWIsRUFBZSxLQUFLOUIsUUFBTCxHQUFjLEtBQUsrQixXQUFMLENBQWlCL0IsUUFBakIsSUFBMkIsS0FBOUU7QUFBcUYsU0FBdFksRUFBblgsRUFBMnZCbGIsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVyxLQUFLc3lCLFdBQUwsR0FBaUIsQ0FBQyxHQUFFMXdCLEVBQUVMLE9BQUwsRUFBYyxLQUFLMkIsT0FBbkIsRUFBMkIsVUFBM0IsQ0FBakIsRUFBd0QsS0FBS3V2QixRQUFMLEVBQXhELEVBQXdFLEtBQUtILFdBQUwsQ0FBaUJJLEdBQWpCLENBQXFCLFdBQXJCLEVBQWtDLFlBQVU7QUFBQzF5QixZQUFFeXlCLFFBQUY7QUFBYSxTQUExRCxDQUF4RTtBQUFxSSxPQUE5NUIsRUFBVixFQUEwNkJ6eUIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBdDdCO0FBQTg3QixHQUgzL3BCLEVBRzgvcEIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWYsQ0FBb0JWLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUsscUJBQU4sRUFBNEI1RSxPQUFNLEVBQUM0ZSxRQUFPLEVBQUN2WSxNQUFLLENBQUNGLE1BQUQsRUFBUWxHLE1BQVIsQ0FBTixFQUFzQjlCLFNBQVEsRUFBOUIsRUFBUixFQUEwQ294QixlQUFjLEVBQUNscEIsTUFBSyxDQUFDNEMsS0FBRCxFQUFPMUMsT0FBUCxDQUFOLEVBQXNCcEksU0FBUSxvQkFBVTtBQUFDLG1CQUFNLENBQUMsRUFBRCxFQUFJLEVBQUosRUFBTyxFQUFQLEVBQVUsR0FBVixDQUFOO0FBQXFCLFdBQTlELEVBQXhELEVBQXdIcXhCLFFBQU8sRUFBQ25wQixNQUFLLENBQUNGLE1BQUQsRUFBUWxHLE1BQVIsQ0FBTixFQUFzQjlCLFNBQVEsQ0FBOUIsRUFBL0gsRUFBZ0tzeEIsU0FBUSxFQUFDcHBCLE1BQUssQ0FBQ0YsTUFBRCxFQUFRbEcsTUFBUixDQUFOLEVBQXNCOUIsU0FBUSxNQUE5QixFQUF4SyxFQUE4TXdpQixTQUFRLEVBQUN0YSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxlQUFyQixFQUF0TixFQUE0UHV4QixhQUFZLEVBQUNycEIsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsSUFBckIsRUFBeFEsRUFBbEMsRUFBc1V5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDK29CLFlBQVcsQ0FBWixFQUFjQyxhQUFZLENBQTFCLEVBQTRCQyxhQUFZM2YsU0FBUyxLQUFLME8sTUFBZCxFQUFxQixFQUFyQixDQUF4QyxFQUFOO0FBQXdFLE9BQTlaLEVBQStacGUsT0FBTSxFQUFDaXZCLFNBQVEsaUJBQVM3eUIsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxLQUFLK3lCLFdBQUwsR0FBaUIsS0FBS0MsV0FBNUIsQ0FBd0MsS0FBS0MsUUFBTCxHQUFjanpCLElBQUVELENBQUYsR0FBSUEsQ0FBSixHQUFNQyxDQUFwQixFQUFzQixLQUFLOHlCLFVBQUwsR0FBZ0IvdEIsTUFBTWhGLENBQU4sSUFBUzRCLEVBQUVMLE9BQVgsR0FBbUIrUixTQUFTdFQsQ0FBVCxFQUFXLEVBQVgsQ0FBekQ7QUFBd0UsU0FBckksRUFBc0lnaUIsUUFBTyxnQkFBU2hpQixDQUFULEVBQVc7QUFBQyxlQUFLaXpCLFdBQUwsR0FBaUIzZixTQUFTdFQsQ0FBVCxFQUFXLEVBQVgsQ0FBakI7QUFBZ0MsU0FBekwsRUFBMEw0eUIsUUFBTyxnQkFBUzV5QixDQUFULEVBQVc7QUFBQyxlQUFLZ3pCLFdBQUwsR0FBaUIxZixTQUFTdFQsQ0FBVCxFQUFXLEVBQVgsQ0FBakI7QUFBZ0MsU0FBN08sRUFBcmEsRUFBb3BCc0QsVUFBUyxFQUFDNnZCLFVBQVMsb0JBQVU7QUFBQyxpQkFBTSxDQUFDLENBQVA7QUFBUyxTQUE5QixFQUErQkMsZUFBYyx5QkFBVTtBQUFDLGlCQUFPLEtBQUtILFdBQUwsR0FBaUIsS0FBS0QsV0FBdEIsSUFBbUMsS0FBS0QsVUFBL0M7QUFBMEQsU0FBbEgsRUFBbUhHLFVBQVMsb0JBQVU7QUFBQyxjQUFJbHpCLElBQUUsS0FBS2d6QixXQUFMLEdBQWlCLEtBQUtDLFdBQTVCLENBQXdDLE9BQU9qekIsSUFBRSxLQUFLNnlCLE9BQVAsR0FBZSxLQUFLQSxPQUFwQixHQUE0Qjd5QixDQUFuQztBQUFxQyxTQUFwTixFQUE3cEIsRUFBbTNCdUssU0FBUSxFQUFDOG9CLHFCQUFvQiwrQkFBVTtBQUFDLGVBQUtDLGFBQUwsSUFBb0IsS0FBS3pvQixLQUFMLENBQVcsWUFBWCxFQUF3QixFQUFDMG9CLE1BQUssS0FBS04sV0FBWCxFQUF1Qk8sTUFBSyxLQUFLUixXQUFqQyxFQUF4QixDQUFwQjtBQUEyRixTQUEzSCxFQUE0SFMsWUFBVyxzQkFBVTtBQUFDLGVBQUtILGFBQUwsS0FBcUIsS0FBS3pvQixLQUFMLENBQVcsTUFBWCxFQUFrQixLQUFLb29CLFdBQXZCLEdBQW9DLEtBQUtJLG1CQUFMLEVBQXpEO0FBQXFGLFNBQXZPLEVBQXdPSyxjQUFhLHdCQUFVO0FBQUMsZUFBS0osYUFBTCxLQUFxQixLQUFLTixXQUFMLElBQW1CLEtBQUtub0IsS0FBTCxDQUFXLE1BQVgsRUFBa0IsS0FBS21vQixXQUF2QixDQUFuQixFQUF1RCxLQUFLSyxtQkFBTCxFQUE1RTtBQUF3RyxTQUF4VyxFQUF5V00sVUFBUyxvQkFBVTtBQUFDLGVBQUtMLGFBQUwsS0FBcUIsS0FBS04sV0FBTCxJQUFtQixLQUFLbm9CLEtBQUwsQ0FBVyxNQUFYLEVBQWtCLEtBQUttb0IsV0FBdkIsQ0FBbkIsRUFBdUQsS0FBS0ssbUJBQUwsRUFBNUU7QUFBd0csU0FBcmUsRUFBMzNCLEVBQWsyQ2hlLFNBQVEsbUJBQVU7QUFBQyxZQUFJclYsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsWUFBRTJ5QixhQUFGLEdBQWdCM3lCLEVBQUVpekIsV0FBRixHQUFjanpCLEVBQUUyeUIsYUFBRixDQUFnQmlCLFFBQWhCLENBQXlCNXpCLEVBQUVpekIsV0FBM0IsSUFBd0NqekIsRUFBRWl6QixXQUExQyxHQUFzRGp6QixFQUFFMnlCLGFBQUYsQ0FBZ0IsQ0FBaEIsQ0FBcEYsR0FBdUczeUIsRUFBRWl6QixXQUFGLEdBQWMsQ0FBckgsRUFBdUhqekIsRUFBRXN6QixhQUFGLEdBQWdCLENBQUMsQ0FBeEk7QUFBMEksU0FBcks7QUFBd0ssT0FBeGlELEVBQVYsRUFBb2pEdHpCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQWhrRDtBQUF3a0QsR0FIM3R0QixFQUc4dHRCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkO0FBQUEsUUFBbUJrQixJQUFFbkIsRUFBRSxFQUFGLENBQXJCO0FBQUEsUUFBMkJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBN0I7QUFBQSxRQUFrQ2IsSUFBRSxtQkFBcEMsQ0FBd0RmLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssY0FBTixFQUFxQjVFLE9BQU0sRUFBQ3l3QixjQUFhbHFCLE9BQWQsRUFBc0JtcUIsYUFBWW5xQixPQUFsQyxFQUEwQ29xQixRQUFPOXlCLE1BQWpELEVBQTNCLEVBQW9GK0ksTUFBSyxnQkFBVTtBQUFDLGVBQU0sRUFBQ3NvQixhQUFZLEVBQWIsRUFBZ0IwQixTQUFRLENBQUMsQ0FBekIsRUFBMkJDLFVBQVMsQ0FBQyxDQUFyQyxFQUF1Q3JRLE9BQU0sQ0FBN0MsRUFBK0NzUSxNQUFLLGdCQUFjLENBQUMsR0FBRXZ5QixFQUFFSixPQUFMLEdBQWxFLEVBQU47QUFBeUYsT0FBN0wsRUFBOEwrQixVQUFTLEVBQUMwSCxZQUFXLHNCQUFVO0FBQUMsaUJBQU0sQ0FBQyxLQUFLOG9CLFdBQU4sSUFBbUIsQ0FBQyxLQUFLRSxPQUEvQjtBQUF1QyxTQUE5RCxFQUErREcsY0FBYSx3QkFBVTtBQUFDLGlCQUFPLEtBQUtMLFdBQUwsSUFBa0IsS0FBS0UsT0FBTCxJQUFjLEtBQUsxQixXQUFMLENBQWlCN0IsZUFBeEQ7QUFBd0UsU0FBL0osRUFBZ0s3YixTQUFRLG1CQUFVO0FBQUMsaUJBQU0sRUFBQyxlQUFjLEtBQUtxZixRQUFwQixFQUFOO0FBQW9DLFNBQXZOLEVBQXZNLEVBQWdhcndCLE9BQU0sRUFBQ213QixRQUFPLGdCQUFTL3pCLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUMsZUFBS3F5QixXQUFMLENBQWlCdG9CLElBQWpCLENBQXNCLEtBQUs0WixLQUEzQixJQUFrQyxLQUFLbVEsTUFBdkMsRUFBOEMsS0FBS0ssdUJBQUwsQ0FBNkJwMEIsTUFBSUMsQ0FBakMsQ0FBOUM7QUFBa0YsU0FBeEcsRUFBdGEsRUFBZ2hCc0ssU0FBUSxFQUFDeW1CLGlCQUFnQix5QkFBU2h4QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGVBQUtxeUIsV0FBTCxDQUFpQnRCLGVBQWpCLENBQWlDaHhCLENBQWpDLEVBQW1DQyxDQUFuQztBQUFzQyxTQUFyRSxFQUFzRW8wQix1QkFBc0IsK0JBQVNyMEIsQ0FBVCxFQUFXO0FBQUMsZUFBS3N5QixXQUFMLENBQWlCdEIsZUFBakIsQ0FBaUNoeEIsQ0FBakMsRUFBbUMsS0FBSyt6QixNQUF4QyxHQUFnRCxLQUFLekIsV0FBTCxDQUFpQnhkLFNBQWpCLENBQTJCLENBQTNCLEVBQThCbWYsUUFBOUIsR0FBdUMsS0FBSzNCLFdBQUwsQ0FBaUIxQixnQkFBakIsS0FBb0MsS0FBSzBCLFdBQUwsQ0FBaUIzQixZQUE1STtBQUF5SixTQUFqUSxFQUFrUXlELHlCQUF3QixpQ0FBU3AwQixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLElBQU4sQ0FBVyxLQUFLcXlCLFdBQUwsQ0FBaUIzQixZQUFqQixHQUE4QixFQUE5QixJQUFrQyxLQUFLMkIsV0FBTCxDQUFpQjl0QixHQUFqQixDQUFxQkUsU0FBckIsQ0FBK0JuQyxHQUEvQixDQUFtQ3ZCLENBQW5DLENBQWxDLEVBQXdFLEtBQUtzeEIsV0FBTCxDQUFpQnhkLFNBQWpCLENBQTJCbkosT0FBM0IsQ0FBb0MsVUFBUzFMLENBQVQsRUFBVztBQUFDQSxjQUFFZzBCLFFBQUYsR0FBV2owQixDQUFYO0FBQWEsV0FBN0QsQ0FBeEUsRUFBd0ksS0FBS3N5QixXQUFMLENBQWlCckIsdUJBQWpCLENBQXlDanhCLENBQXpDLENBQXhJLEVBQW9MK0QsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDLG1CQUFPN0ksRUFBRXF5QixXQUFGLENBQWM5dEIsR0FBZCxDQUFrQkUsU0FBbEIsQ0FBNEJrTSxNQUE1QixDQUFtQzVQLENBQW5DLENBQVA7QUFBNkMsV0FBM0UsRUFBNkUsR0FBN0UsQ0FBcEw7QUFBc1EsU0FBdmpCLEVBQXdqQnN6QixRQUFPLGdCQUFTdDBCLENBQVQsRUFBVztBQUFDLGVBQUttMEIsWUFBTCxLQUFvQixLQUFLSCxPQUFMLEdBQWEsS0FBS0ksdUJBQUwsQ0FBNkJwMEIsQ0FBN0IsQ0FBYixHQUE2QyxLQUFLcTBCLHFCQUFMLENBQTJCcjBCLENBQTNCLENBQTdDLEVBQTJFLEtBQUtzeUIsV0FBTCxDQUFpQnhCLGFBQWpCLEVBQTNFLEVBQTRHLEtBQUtqbUIsS0FBTCxDQUFXN0ssSUFBRSxVQUFGLEdBQWEsWUFBeEIsRUFBcUNBLENBQXJDLENBQWhJO0FBQXlLLFNBQXB2QixFQUFxdkJ1MEIsWUFBVyxzQkFBVTtBQUFDLGVBQUtWLFlBQUwsSUFBbUIsS0FBS00sWUFBeEIsS0FBdUMsS0FBS0YsUUFBTCxHQUFjLENBQUMsS0FBS0EsUUFBcEIsRUFBNkIsS0FBS0kscUJBQUwsQ0FBMkIsS0FBS0osUUFBaEMsQ0FBN0IsRUFBdUUsS0FBSzNCLFdBQUwsQ0FBaUJ4QixhQUFqQixFQUE5RztBQUFnSixTQUEzNUIsRUFBNDVCMEQsZUFBYyx5QkFBVTtBQUFDLGNBQUcsS0FBS2xDLFdBQUwsR0FBaUIsQ0FBQyxHQUFFMXdCLEVBQUVMLE9BQUwsRUFBYyxLQUFLMkIsT0FBbkIsRUFBMkIsVUFBM0IsQ0FBakIsRUFBd0QsWUFBVSxLQUFLc0IsR0FBTCxDQUFTdUosVUFBVCxDQUFvQnlQLE9BQXBCLENBQTRCN0wsV0FBNUIsRUFBckUsRUFBK0csS0FBS3FpQixPQUFMLEdBQWEsQ0FBQyxDQUFkLENBQS9HLEtBQW1JO0FBQUMsZ0JBQUcsQ0FBQyxLQUFLRCxNQUFOLElBQWMsS0FBS0QsV0FBdEIsRUFBa0MsTUFBTSxJQUFJemdCLEtBQUosQ0FBVSxzSEFBVixDQUFOLENBQXdJLEtBQUt5Z0IsV0FBTCxLQUFtQixLQUFLeEIsV0FBTCxDQUFpQjdCLGVBQWpCLEdBQWlDLENBQUMsQ0FBckQsR0FBd0QsS0FBSzZCLFdBQUwsQ0FBaUJ0b0IsSUFBakIsQ0FBc0JsRCxJQUF0QixDQUEyQixLQUFLaXRCLE1BQWhDLENBQXhEO0FBQWdHO0FBQUMsU0FBcDBDLEVBQXhoQixFQUE4MUQ5ZCxXQUFVLHFCQUFVO0FBQUMsYUFBS3FjLFdBQUwsQ0FBaUJ2QixTQUFqQixDQUEyQixLQUFLZ0QsTUFBaEM7QUFBd0MsT0FBMzVELEVBQTQ1RDFlLFNBQVEsbUJBQVU7QUFBQyxhQUFLbWYsYUFBTDtBQUFxQixPQUFwOEQsRUFBVixFQUFnOUR4MEIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBNTlEO0FBQW8rRCxHQUgzM3hCLEVBRzgzeEIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQ7QUFBQSxRQUFtQmtCLElBQUVuQixFQUFFLEVBQUYsQ0FBckI7QUFBQSxRQUEyQmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE3QixDQUFrQzVCLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssUUFBTixFQUFlNUUsT0FBTSxFQUFDME4sSUFBRyxDQUFDek4sTUFBRCxFQUFRa0csTUFBUixDQUFKLEVBQW9Cd2EsU0FBUSxDQUFDMWdCLE1BQUQsRUFBUWtHLE1BQVIsQ0FBNUIsRUFBNEMwTCxRQUFPNVIsTUFBbkQsRUFBMEQ4UixXQUFVOVIsTUFBcEUsRUFBMkUrUixVQUFTekwsT0FBcEYsRUFBNEZxYSxZQUFXcmEsT0FBdkcsRUFBK0c4cUIsV0FBVSxFQUFDbHpCLFNBQVEsS0FBSyxDQUFkLEVBQXpILEVBQTBJMGlCLFdBQVU1Z0IsTUFBcEosRUFBMko2Z0IsZ0JBQWUsRUFBQ3phLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLEdBQXJCLEVBQTFLLEVBQW9NNGlCLG9CQUFtQixFQUFDMWEsTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsUUFBckIsRUFBdk4sRUFBckIsRUFBNFF5SSxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDcUwsU0FBUSxDQUFDLENBQVYsRUFBWXFmLE9BQU0sS0FBSzVqQixFQUFMLElBQVMsU0FBTyxDQUFDLEdBQUVsUCxFQUFFTCxPQUFMLEdBQWxDLEVBQWtEd0ssT0FBTSxLQUF4RCxFQUE4RHdJLE1BQUssS0FBbkUsRUFBTjtBQUFnRixPQUE1VyxFQUE2VzNRLE9BQU0sRUFBQ3dSLFVBQVMsb0JBQVU7QUFBQyxlQUFLdWYsYUFBTDtBQUFxQixTQUExQyxFQUEyQzNRLFlBQVcsc0JBQVU7QUFBQyxlQUFLMlEsYUFBTDtBQUFxQixTQUF0RixFQUF1RjFmLFFBQU8sa0JBQVU7QUFBQyxlQUFLMGYsYUFBTDtBQUFxQixTQUE5SCxFQUErSHhmLFdBQVUscUJBQVU7QUFBQyxlQUFLd2YsYUFBTDtBQUFxQixTQUF6SyxFQUEwS0YsV0FBVSxFQUFDRyxNQUFLLENBQUMsQ0FBUCxFQUFTQyxTQUFRLG1CQUFVO0FBQUMsaUJBQUtGLGFBQUw7QUFBcUIsV0FBakQsRUFBcEwsRUFBdU81USxTQUFRLG1CQUFVO0FBQUMsZUFBSzRRLGFBQUw7QUFBcUIsU0FBL1EsRUFBZ1IxUSxXQUFVLHFCQUFVO0FBQUMsZUFBSzBRLGFBQUw7QUFBcUIsU0FBMVQsRUFBMlR6USxnQkFBZSwwQkFBVTtBQUFDLGVBQUt5USxhQUFMO0FBQXFCLFNBQTFXLEVBQTJXeFEsb0JBQW1CLDhCQUFVO0FBQUMsZUFBS3dRLGFBQUw7QUFBcUIsU0FBOVosRUFBblgsRUFBbXhCcnhCLFVBQVMsRUFBQ3dKLFFBQU8sa0JBQVU7QUFBQyxpQkFBTSxFQUFDZixPQUFNLEtBQUtBLEtBQVosRUFBa0J3SSxNQUFLLEtBQUtBLElBQTVCLEVBQU47QUFBd0MsU0FBM0QsRUFBNXhCLEVBQXkxQmhLLFNBQVEsRUFBQ3VxQixZQUFXLHNCQUFVO0FBQUMsaUJBQU0sRUFBQ2hrQixJQUFHLEtBQUs0akIsS0FBVCxFQUFlblEsT0FBTSxLQUFLUixPQUExQixFQUFrQ1MsTUFBSyxLQUFLdlAsTUFBNUMsRUFBbUQ4ZixTQUFRLEtBQUs1ZixTQUFoRSxFQUEwRXJULFNBQVEsS0FBSzJ5QixTQUF2RixFQUFpRzFmLFFBQU8sS0FBS0ssUUFBN0csRUFBc0gxTCxVQUFTLEtBQUtzYSxVQUFwSSxFQUErSVMsU0FBUSxLQUFLUixTQUE1SixFQUFzS1MsY0FBYSxLQUFLUixjQUF4TCxFQUF1TVMsa0JBQWlCLEtBQUtSLGtCQUE3TixFQUFnUFMsS0FBSSxJQUFwUCxFQUFOO0FBQWdRLFNBQXZSLEVBQXdSK1AsZUFBYyx5QkFBVTtBQUFDLGVBQUtLLFVBQUwsQ0FBZ0JDLFNBQWhCLENBQTBCLEtBQUtILFVBQUwsRUFBMUI7QUFBNkMsU0FBOVYsRUFBajJCLEVBQWlzQ3pmLFNBQVEsbUJBQVU7QUFBQyxZQUFJclYsSUFBRSxLQUFLODBCLFVBQUwsRUFBTixDQUF3QixJQUFHLEtBQUtFLFVBQUwsR0FBZ0IsQ0FBQyxHQUFFcnpCLEVBQUVKLE9BQUwsRUFBYyxLQUFLMkIsT0FBbkIsRUFBMkIsU0FBM0IsQ0FBaEIsRUFBc0QsQ0FBQyxLQUFLOHhCLFVBQS9ELEVBQTBFLE1BQU0sSUFBSTNoQixLQUFKLENBQVUsdUNBQVYsQ0FBTixDQUF5RCxLQUFLZ0MsT0FBTCxHQUFhLENBQUMsQ0FBZCxFQUFnQixLQUFLMmYsVUFBTCxDQUFnQkMsU0FBaEIsQ0FBMEJqMUIsQ0FBMUIsQ0FBaEIsRUFBNkMsS0FBS29WLFFBQUwsSUFBZSxLQUFLNGYsVUFBTCxDQUFnQkUsWUFBaEIsQ0FBNkJsMUIsQ0FBN0IsQ0FBNUQ7QUFBNEYsT0FBMzhDLEVBQTQ4QzJWLGVBQWMseUJBQVU7QUFBQyxhQUFLcWYsVUFBTCxDQUFnQkcsYUFBaEIsQ0FBOEIsS0FBS0wsVUFBTCxFQUE5QjtBQUFpRCxPQUF0aEQsRUFBVixFQUFraUQ5MEIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBOWlEO0FBQXNqRCxHQUh2bDFCLEVBRzBsMUIsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsRUFBRixDQUFOO0FBQUEsUUFBWWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWQ7QUFBQSxRQUFtQmtCLElBQUVuQixFQUFFLEdBQUYsQ0FBckI7QUFBQSxRQUE0QmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUE5QjtBQUFBLFFBQW1DYixJQUFFTixFQUFFLENBQUYsQ0FBckM7QUFBQSxRQUEwQ0UsSUFBRUgsRUFBRU8sQ0FBRixDQUE1QztBQUFBLFFBQWlERCxJQUFFTCxFQUFFLEVBQUYsQ0FBbkQ7QUFBQSxRQUF5RGdDLElBQUVqQyxFQUFFTSxDQUFGLENBQTNELENBQWdFZCxFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFNBQU4sRUFBZ0I1RSxPQUFNLEVBQUM2aEIsU0FBUXRiLE9BQVQsRUFBaUJ1YixZQUFXdmIsT0FBNUIsRUFBb0N3YixTQUFReGIsT0FBNUMsRUFBb0R5ckIsY0FBYSxFQUFDM3JCLE1BQUtFLE9BQU4sRUFBY3BJLFNBQVEsQ0FBQyxDQUF2QixFQUFqRSxFQUEyRjZqQixpQkFBZ0IsRUFBQzNiLE1BQUtFLE9BQU4sRUFBY3BJLFNBQVEsQ0FBQyxDQUF2QixFQUEzRyxFQUFxSThqQixhQUFZLEVBQUM1YixNQUFLLENBQUNwRyxNQUFELEVBQVFrRyxNQUFSLENBQU4sRUFBc0JoSSxTQUFRLENBQTlCLEVBQWpKLEVBQXRCLEVBQXlNbVQsUUFBTyxDQUFDOVQsRUFBRVcsT0FBSCxDQUFoTixFQUE0TnlJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUNxckIsU0FBUSxFQUFULEVBQVlDLFdBQVUsSUFBdEIsRUFBMkJDLGlCQUFnQixDQUEzQyxFQUE2Q3hQLFVBQVMsQ0FBQyxDQUF2RCxFQUF5REMsVUFBUyxDQUFDLENBQW5FLEVBQXFFd1AscUJBQW9CLENBQUMsQ0FBMUYsRUFBNEZDLHFCQUFvQixDQUFDLENBQWpILEVBQW1IQyxtQkFBa0IsQ0FBQyxDQUF0SSxFQUF3SXpQLG1CQUFrQixJQUExSixFQUErSnZOLGVBQWMsQ0FBQyxDQUE5SyxFQUFnTHdOLGVBQWMsS0FBOUwsRUFBb01DLGNBQWEsS0FBak4sRUFBTjtBQUE4TixPQUExYyxFQUEyYzdpQixVQUFTLEVBQUNxeUIsWUFBVyxzQkFBVTtBQUFDLGlCQUFNLEVBQUMscUJBQW9CLEtBQUt2USxlQUExQixFQUEwQyxxQkFBb0IsS0FBSzFNLGFBQW5FLEVBQU47QUFBd0YsU0FBL0csRUFBZ0g0TixtQkFBa0IsNkJBQVU7QUFBQyxpQkFBTSxFQUFDLGVBQWMsS0FBS1AsUUFBcEIsRUFBNkIsZ0JBQWUsS0FBS0MsUUFBakQsRUFBMEQsWUFBVyxLQUFLZixPQUExRSxFQUFrRixZQUFXLENBQUMsS0FBS0MsVUFBTixJQUFrQixLQUFLQyxPQUFwSCxFQUE0SCxlQUFjLEtBQUtELFVBQUwsSUFBaUIsS0FBS0QsT0FBaEssRUFBd0ssNEJBQTJCLEtBQUt1USxtQkFBeE0sRUFBTjtBQUFtTyxTQUFoWCxFQUFpWGpQLGtCQUFpQiw0QkFBVTtBQUFDLGNBQUl2bUIsSUFBRSxLQUFLd21CLG1CQUFMLEdBQXlCLEtBQUsrTyxlQUFwQyxDQUFvRCxPQUFPLEtBQUsvTyxtQkFBTCxHQUF5QixLQUFLK08sZUFBOUIsRUFBOEMsRUFBQyxxQkFBb0IsS0FBSzdjLGFBQTFCLEVBQXdDLGVBQWMsQ0FBQzFZLENBQXZELEVBQXlELGNBQWFBLENBQXRFLEVBQXJEO0FBQThILFNBQS9qQixFQUFna0I0MUIsNkJBQTRCLHVDQUFVO0FBQUMsaUJBQU0sRUFBQyxlQUFjLEtBQUtILG1CQUFwQixFQUFOO0FBQStDLFNBQXRwQixFQUF1cEJJLDhCQUE2Qix3Q0FBVTtBQUFDLGlCQUFNLEVBQUMsZUFBYyxLQUFLSCxpQkFBcEIsRUFBTjtBQUE2QyxTQUE1dUIsRUFBcGQsRUFBa3NDbnJCLFNBQVEsRUFBQ2tjLGdCQUFlLHdCQUFTem1CLENBQVQsRUFBVztBQUFDLGlCQUFNLEVBQUMsYUFBWSxLQUFLczFCLFNBQUwsS0FBaUJ0MUIsRUFBRThRLEVBQWhDLEVBQW1DLGVBQWM5USxFQUFFMEosUUFBbkQsRUFBTjtBQUFtRSxTQUEvRixFQUFnR29zQixhQUFZLHFCQUFTOTFCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsQ0FBQyxDQUFQO0FBQUEsY0FBU1MsSUFBRSxDQUFDLENBQVo7QUFBQSxjQUFjRCxJQUFFLENBQUMsQ0FBakI7QUFBQSxjQUFtQkUsSUFBRSxLQUFLLENBQTFCLENBQTRCLElBQUc7QUFBQyxpQkFBSSxJQUFJa0IsQ0FBSixFQUFNYixJQUFFLENBQUMsR0FBRVcsRUFBRUosT0FBTCxFQUFjLENBQUMsR0FBRUssRUFBRUwsT0FBTCxFQUFjLEtBQUs4ekIsT0FBbkIsQ0FBZCxDQUFaLEVBQXVELEVBQUUzMEIsSUFBRSxDQUFDbUIsSUFBRWIsRUFBRWdJLElBQUYsRUFBSCxFQUFhSCxJQUFqQixDQUF2RCxFQUE4RW5JLElBQUUsQ0FBQyxDQUFqRixFQUFtRjtBQUFDLGtCQUFJRSxJQUFFaUIsRUFBRXNCLEtBQVIsQ0FBYyxJQUFHLEtBQUtreUIsT0FBTCxDQUFhejBCLENBQWIsRUFBZ0JtVSxNQUFuQixFQUEwQjtBQUFDOVUsb0JBQUUsQ0FBQyxDQUFILENBQUs7QUFBTTtBQUFDO0FBQUMsV0FBOUksQ0FBOEksT0FBTUQsQ0FBTixFQUFRO0FBQUNTLGdCQUFFLENBQUMsQ0FBSCxFQUFLRSxJQUFFWCxDQUFQO0FBQVMsV0FBaEssU0FBdUs7QUFBQyxnQkFBRztBQUFDLGVBQUNVLENBQUQsSUFBSU0sRUFBRXdMLE1BQU4sSUFBY3hMLEVBQUV3TCxNQUFGLEVBQWQ7QUFBeUIsYUFBN0IsU0FBb0M7QUFBQyxrQkFBRy9MLENBQUgsRUFBSyxNQUFNRSxDQUFOO0FBQVE7QUFBQyxnQkFBS2t2QixJQUFMLENBQVUsS0FBS3dGLE9BQWYsRUFBdUJyMUIsRUFBRThRLEVBQXpCLEVBQTRCOVEsQ0FBNUIsR0FBK0JDLE1BQUksS0FBS28xQixPQUFMLENBQWFyMUIsRUFBRThRLEVBQWYsRUFBbUJpRSxNQUFuQixHQUEwQixDQUFDLENBQS9CLENBQS9CO0FBQWlFLFNBQWhiLEVBQWlib2dCLGVBQWMsdUJBQVNuMUIsQ0FBVCxFQUFXO0FBQUMsZUFBSzh2QixPQUFMLENBQWEsS0FBS3VGLE9BQWxCLEVBQTBCcjFCLEVBQUU4USxFQUE1QjtBQUFnQyxTQUEzZSxFQUE0ZW1rQixXQUFVLG1CQUFTajFCLENBQVQsRUFBVztBQUFDLGNBQUcsS0FBSzgxQixXQUFMLENBQWlCOTFCLENBQWpCLEdBQW9CQSxFQUFFK1UsTUFBekIsRUFBZ0MsSUFBRy9VLEVBQUUwSixRQUFMLEVBQWM7QUFBQyxnQkFBRyxDQUFDLEdBQUU5SCxFQUFFTCxPQUFMLEVBQWMsS0FBSzh6QixPQUFuQixFQUE0QnZ2QixNQUEvQixFQUFzQztBQUFDLGtCQUFJN0YsSUFBRSxDQUFDLEdBQUUyQixFQUFFTCxPQUFMLEVBQWMsS0FBSzh6QixPQUFuQixDQUFOO0FBQUEsa0JBQWtDMzBCLElBQUVULEVBQUVrUCxPQUFGLENBQVVuUCxFQUFFOFEsRUFBWixJQUFnQixDQUFwRDtBQUFBLGtCQUFzRHJRLElBQUVSLEVBQUVTLENBQUYsQ0FBeEQsQ0FBNkRELElBQUUsS0FBS3kwQixZQUFMLENBQWtCLEtBQUtHLE9BQUwsQ0FBYTUwQixDQUFiLENBQWxCLENBQUYsR0FBcUMsS0FBS3kwQixZQUFMLENBQWtCLEtBQUtHLE9BQUwsQ0FBYSxDQUFiLENBQWxCLENBQXJDO0FBQXdFO0FBQUMsV0FBNUwsTUFBaU0sS0FBS0gsWUFBTCxDQUFrQmwxQixDQUFsQjtBQUFxQixTQUF4dkIsRUFBeXZCMm1CLHVCQUFzQixpQ0FBVTtBQUFDLGVBQUtDLGNBQUwsR0FBb0IsSUFBSWxGLGdCQUFKLENBQXFCLENBQUMsR0FBRWhmLEVBQUVuQixPQUFMLEVBQWMsS0FBS3NsQixnQkFBbkIsRUFBb0MsRUFBcEMsQ0FBckIsQ0FBcEIsRUFBa0YsS0FBS0QsY0FBTCxDQUFvQmpGLE9BQXBCLENBQTRCLEtBQUszTCxLQUFMLENBQVcrZixVQUF2QyxFQUFrRCxFQUFDblUsV0FBVSxDQUFDLENBQVosRUFBY21GLFlBQVcsQ0FBQyxDQUExQixFQUE0QmpGLFNBQVEsQ0FBQyxDQUFyQyxFQUFsRCxDQUFsRjtBQUE2SyxTQUF2OEIsRUFBdzhCa1UsYUFBWSxxQkFBU2gyQixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLENBQUMsR0FBRTJCLEVBQUVMLE9BQUwsRUFBYyxLQUFLOHpCLE9BQW5CLENBQU4sQ0FBa0MsT0FBT3AxQixFQUFFa1AsT0FBRixDQUFVblAsQ0FBVixDQUFQO0FBQW9CLFNBQXRoQyxFQUF1aENpbkIsdUJBQXNCLGlDQUFVO0FBQUMsY0FBRyxLQUFLalIsS0FBTCxDQUFXaWdCLFNBQVgsSUFBc0IsS0FBS2pnQixLQUFMLENBQVdpZ0IsU0FBWCxDQUFxQixLQUFLVixlQUExQixDQUF6QixFQUFvRTtBQUFDLGdCQUFJdjFCLElBQUUsS0FBS3dFLEdBQUwsQ0FBU3FKLFdBQWY7QUFBQSxnQkFBMkI1TixJQUFFLEtBQUsrVixLQUFMLENBQVdpZ0IsU0FBWCxDQUFxQixLQUFLVixlQUExQixDQUE3QjtBQUFBLGdCQUF3RTcwQixJQUFFVCxFQUFFa25CLFVBQUYsR0FBYSxLQUFLblIsS0FBTCxDQUFXa2dCLGFBQVgsQ0FBeUJDLFVBQWhIO0FBQUEsZ0JBQTJIMTFCLElBQUVULElBQUVVLENBQUYsR0FBSVQsRUFBRTROLFdBQW5JLENBQStJLEtBQUttSSxLQUFMLENBQVdvUixTQUFYLENBQXFCaGdCLEtBQXJCLENBQTJCbU4sSUFBM0IsR0FBZ0M3VCxJQUFFLElBQWxDLEVBQXVDLEtBQUtzVixLQUFMLENBQVdvUixTQUFYLENBQXFCaGdCLEtBQXJCLENBQTJCaWdCLEtBQTNCLEdBQWlDNW1CLElBQUUsSUFBMUU7QUFBK0U7QUFBQyxTQUE1MUMsRUFBNjFDMjFCLCtCQUE4Qix5Q0FBVTtBQUFDLGNBQUlwMkIsSUFBRSxLQUFLd0UsR0FBTCxDQUFTcUosV0FBZjtBQUFBLGNBQTJCNU4sSUFBRSxDQUE3QixDQUErQixLQUFLa21CLFlBQUwsR0FBa0JubUIsSUFBRSxLQUFLdTFCLGVBQVAsR0FBdUIsSUFBekMsQ0FBOEMsS0FBSSxJQUFJNzBCLENBQVIsSUFBYSxLQUFLMjBCLE9BQWxCLEVBQTBCO0FBQUMsZ0JBQUk1MEIsSUFBRSxLQUFLNDBCLE9BQUwsQ0FBYTMwQixDQUFiLENBQU4sQ0FBc0JELEVBQUVta0IsR0FBRixDQUFNN1ksS0FBTixHQUFZL0wsSUFBRSxJQUFkLEVBQW1CUyxFQUFFbWtCLEdBQUYsQ0FBTXJRLElBQU4sR0FBV3ZVLElBQUVDLENBQUYsR0FBSSxJQUFsQyxFQUF1Q0EsR0FBdkM7QUFBMkM7QUFBQyxTQUFoakQsRUFBaWpEc25CLHdCQUF1QixrQ0FBVTtBQUFDLGNBQUl2bkIsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDLGdCQUFHLENBQUMsR0FBRXZKLEVBQUVMLE9BQUwsRUFBY3ZCLEVBQUVxMUIsT0FBaEIsRUFBeUJ2dkIsTUFBNUIsRUFBbUM7QUFBQyxrQkFBSTdGLElBQUVELEVBQUVxMUIsT0FBRixDQUFVcjFCLEVBQUVzMUIsU0FBWixFQUF1QjFRLEdBQXZCLENBQTJCcGdCLEdBQTNCLENBQStCNlAsWUFBckMsQ0FBa0RyVSxFQUFFa21CLGFBQUYsR0FBZ0JqbUIsSUFBRSxJQUFsQjtBQUF1QjtBQUFDLFdBQXpJO0FBQTRJLFNBQTF1RCxFQUEydUR1bkIsbUJBQWtCLDZCQUFVO0FBQUMsY0FBSXhuQixJQUFFLElBQU4sQ0FBVytELE9BQU91ZCxxQkFBUCxDQUE4QixZQUFVO0FBQUN0aEIsY0FBRWluQixxQkFBRixJQUEwQmpuQixFQUFFbzJCLDZCQUFGLEVBQTFCLEVBQTREcDJCLEVBQUV1bkIsc0JBQUYsRUFBNUQsRUFBdUZ2bkIsRUFBRXEyQixxQkFBRixFQUF2RjtBQUFpSCxXQUExSjtBQUE2SixTQUFoN0QsRUFBaTdENU8sb0JBQW1CLDhCQUFVO0FBQUMsY0FBSXpuQixJQUFFLElBQU4sQ0FBVytELE9BQU82RyxZQUFQLENBQW9CLEtBQUtxYixpQkFBekIsR0FBNEMsS0FBS0EsaUJBQUwsR0FBdUJsaUIsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDOUksY0FBRXduQixpQkFBRixJQUFzQnhuQixFQUFFMFksYUFBRixHQUFnQixDQUFDLENBQXZDO0FBQXlDLFdBQXZFLEVBQXlFLEdBQXpFLENBQW5FO0FBQWlKLFNBQTNtRSxFQUE0bUVtTyxrQkFBaUIsNEJBQVU7QUFBQyxlQUFLVyxpQkFBTCxJQUF5QixLQUFLQyxrQkFBTCxFQUF6QjtBQUFtRCxTQUEzckUsRUFBNHJFQyxtQkFBa0IsNkJBQVU7QUFBQyxlQUFLaFAsYUFBTCxHQUFtQixDQUFDLENBQXBCLEVBQXNCLEtBQUttTyxnQkFBTCxFQUF0QjtBQUE4QyxTQUF2d0UsRUFBd3dFeVAsb0JBQW1CLDhCQUFVO0FBQUMsY0FBSXQyQixJQUFFLEtBQUtnVyxLQUFMLENBQVdrZ0IsYUFBakI7QUFBQSxjQUErQmoyQixJQUFFRCxFQUFFbTJCLFVBQW5DO0FBQUEsY0FBOEN6MUIsSUFBRVYsRUFBRXUyQixXQUFsRDtBQUFBLGNBQThEOTFCLElBQUVULEVBQUVvTyxXQUFsRSxDQUE4RSxLQUFLcW5CLG1CQUFMLEdBQXlCeDFCLElBQUUsRUFBM0IsRUFBOEIsS0FBS3kxQixpQkFBTCxHQUF1QmgxQixJQUFFVCxDQUFGLEdBQUksRUFBSixHQUFPUSxDQUE1RDtBQUE4RCxTQUFsN0UsRUFBbTdFKzFCLHdCQUF1QixrQ0FBVTtBQUFDLGNBQUl4MkIsSUFBRSxJQUFOLENBQVcrRCxPQUFPdWQscUJBQVAsQ0FBOEIsWUFBVTtBQUFDdGhCLGNBQUVpbkIscUJBQUYsSUFBMEJqbkIsRUFBRXMyQixrQkFBRixFQUExQjtBQUFpRCxXQUExRjtBQUE2RixTQUE3akYsRUFBOGpGRCx1QkFBc0IsaUNBQVU7QUFBQyxjQUFJcjJCLElBQUUsS0FBS2dXLEtBQUwsQ0FBV2tnQixhQUFqQjtBQUFBLGNBQStCajJCLElBQUVELEVBQUV1MkIsV0FBbkM7QUFBQSxjQUErQzcxQixJQUFFVixFQUFFb08sV0FBbkQ7QUFDMzArQixlQUFLb25CLG1CQUFMLEdBQXlCdjFCLElBQUVTLENBQTNCO0FBQTZCLFNBRCtzNUIsRUFDOXM1QncwQixjQUFhLHNCQUFTbDFCLENBQVQsRUFBVztBQUFDLGVBQUsrbEIsUUFBTCxHQUFjLENBQUMsQ0FBQy9sQixFQUFFd2tCLElBQUosSUFBVSxDQUFDLENBQUN4a0IsRUFBRSswQixPQUE1QixFQUFvQyxLQUFLL08sUUFBTCxHQUFjLENBQUMsQ0FBQ2htQixFQUFFdWtCLEtBQXRELEVBQTRELEtBQUsrUSxTQUFMLEdBQWV0MUIsRUFBRThRLEVBQTdFLEVBQWdGLEtBQUt5a0IsZUFBTCxHQUFxQixLQUFLUyxXQUFMLENBQWlCLEtBQUtWLFNBQXRCLENBQXJHLEVBQXNJLEtBQUs5TixpQkFBTCxFQUF0SSxFQUErSixLQUFLM2MsS0FBTCxDQUFXLFFBQVgsRUFBb0IsS0FBSzBxQixlQUF6QixDQUEvSjtBQUF5TSxTQUQ0KzRCLEVBQzMrNEJrQixzQkFBcUIsZ0NBQVU7QUFBQyxjQUFJejJCLElBQUUsS0FBS2dXLEtBQUwsQ0FBV2tnQixhQUFqQjtBQUFBLGNBQStCajJCLElBQUVELEVBQUVtMkIsVUFBbkM7QUFBQSxjQUE4Q3oxQixJQUFFVixFQUFFb08sV0FBbEQsQ0FBOEQsS0FBSzRILEtBQUwsQ0FBV2tnQixhQUFYLENBQXlCQyxVQUF6QixHQUFvQ255QixLQUFLK0MsR0FBTCxDQUFTLENBQVQsRUFBVzlHLElBQUVTLENBQWIsQ0FBcEM7QUFBb0QsU0FEeTE0QixFQUN4MTRCZzJCLHVCQUFzQixpQ0FBVTtBQUFDLGNBQUkxMkIsSUFBRSxLQUFLZ1csS0FBTCxDQUFXa2dCLGFBQWpCO0FBQUEsY0FBK0JqMkIsSUFBRUQsRUFBRW0yQixVQUFuQztBQUFBLGNBQThDejFCLElBQUVWLEVBQUVvTyxXQUFsRDtBQUFBLGNBQThEM04sSUFBRVQsRUFBRXUyQixXQUFsRSxDQUE4RSxLQUFLdmdCLEtBQUwsQ0FBV2tnQixhQUFYLENBQXlCQyxVQUF6QixHQUFvQ255QixLQUFLNkMsR0FBTCxDQUFTcEcsQ0FBVCxFQUFXUixJQUFFUyxDQUFiLENBQXBDO0FBQW9ELFNBRHFyNEIsRUFBMXNDLEVBQ3orMUIyVSxTQUFRLG1CQUFVO0FBQUMsWUFBSXJWLElBQUUsSUFBTixDQUFXLEtBQUttTCxTQUFMLENBQWdCLFlBQVU7QUFBQyxjQUFHbkwsRUFBRTJtQixxQkFBRixJQUEwQjVpQixPQUFPK0ssZ0JBQVAsQ0FBd0IsUUFBeEIsRUFBaUM5TyxFQUFFMG5CLGlCQUFuQyxDQUExQixFQUFnRixDQUFDLEdBQUU5bEIsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRXExQixPQUFoQixFQUF5QnZ2QixNQUF6QixJQUFpQyxDQUFDOUYsRUFBRXMxQixTQUF2SCxFQUFpSTtBQUFDLGdCQUFJcjFCLElBQUUsQ0FBQyxHQUFFMkIsRUFBRUwsT0FBTCxFQUFjdkIsRUFBRXExQixPQUFoQixFQUF5QixDQUF6QixDQUFOLENBQWtDcjFCLEVBQUVrMUIsWUFBRixDQUFlbDFCLEVBQUVxMUIsT0FBRixDQUFVcDFCLENBQVYsQ0FBZjtBQUE2QjtBQUFDLFNBQTdOO0FBQWdPLE9BRDJ1MUIsRUFDMXUxQjBWLGVBQWMseUJBQVU7QUFBQyxhQUFLaVIsY0FBTCxJQUFxQixLQUFLQSxjQUFMLENBQW9CN0UsVUFBcEIsRUFBckIsRUFBc0RoZSxPQUFPMEssbUJBQVAsQ0FBMkIsUUFBM0IsRUFBb0MsS0FBS2laLGlCQUF6QyxDQUF0RDtBQUFrSCxPQUQrbDFCLEVBQVYsRUFDbmwxQjFuQixFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUR1azFCO0FBQy9qMUIsR0FKNU4sRUFJK04sVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsWUFBT2tCLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSXhDLElBQUVELEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV2tCLElBQUVuQixFQUFFRSxDQUFGLENBQWIsQ0FBa0JWLEVBQUVzQixPQUFGLEdBQVUsRUFBQ3lHLE1BQUssWUFBTixFQUFtQjBNLFFBQU8sQ0FBQzlTLEVBQUVMLE9BQUgsQ0FBMUIsRUFBVixFQUFpRHZCLEVBQUVFLE9BQUYsR0FBVUQsRUFBRXNCLE9BQTdEO0FBQXFFLEdBSnZiLEVBSTBiLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLFlBQU9rQixjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEVBQWlELElBQUl4QyxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkO0FBQUEsUUFBbUJrQixJQUFFbkIsRUFBRSxFQUFGLENBQXJCO0FBQUEsUUFBMkJpQixJQUFFbEIsRUFBRW9CLENBQUYsQ0FBN0IsQ0FBa0M1QixFQUFFc0IsT0FBRixHQUFVLEVBQUN5RyxNQUFLLFlBQU4sRUFBbUI1RSxPQUFNLEVBQUM2ZSxhQUFZLEVBQUN4WSxNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxRQUFyQixFQUFiLEVBQTRDbzFCLFNBQVEsRUFBQ2x0QixNQUFLcEcsTUFBTixFQUFhOUIsU0FBUSxHQUFyQixFQUFwRCxFQUF6QixFQUF3R3lJLE1BQUssZ0JBQVU7QUFBQyxlQUFNLEVBQUMrSyxRQUFPLENBQUMsQ0FBVCxFQUFXNmhCLGFBQVksSUFBdkIsRUFBNEJsZSxlQUFjLENBQUMsQ0FBM0MsRUFBNkNtZSxhQUFZLENBQUMsQ0FBMUQsRUFBNERDLGNBQWEsQ0FBQyxDQUExRSxFQUFOO0FBQW1GLE9BQTNNLEVBQTRNeHpCLFVBQVMsRUFBQ3NSLFNBQVEsbUJBQVU7QUFBQyxjQUFJNVUsSUFBRSxFQUFDLGFBQVksS0FBSytVLE1BQWxCLEVBQXlCLHFCQUFvQixLQUFLMkQsYUFBbEQsRUFBZ0Usa0JBQWlCLFVBQVEsS0FBS3VKLFdBQTlGLEVBQTBHLG9CQUFtQixZQUFVLEtBQUtBLFdBQTVJLEVBQXdKLHFCQUFvQixhQUFXLEtBQUtBLFdBQTVMLEVBQXdNLG1CQUFrQixXQUFTLEtBQUtBLFdBQXhPLEVBQU4sQ0FBMlAsT0FBTyxLQUFLMlUsV0FBTCxLQUFtQjUyQixFQUFFLEtBQUs0MkIsV0FBUCxJQUFvQixDQUFDLENBQXhDLEdBQTJDNTJCLENBQWxEO0FBQW9ELFNBQW5VLEVBQW9Vb0gsT0FBTSxpQkFBVTtBQUFDLGlCQUFNLEVBQUMsb0JBQW1CLEtBQUt1dkIsT0FBTCxHQUFhLElBQWpDLEVBQXNDeGlCLEtBQUksS0FBSzBpQixXQUFMLEdBQWlCLElBQTNELEVBQWdFdGlCLE1BQUssS0FBS3VpQixZQUFMLEdBQWtCLElBQXZGLEVBQU47QUFBbUcsU0FBeGIsRUFBck4sRUFBK29CbHpCLE9BQU0sRUFBQ3FlLGFBQVksdUJBQVU7QUFBQyxlQUFLOFUsd0JBQUw7QUFBZ0MsU0FBeEQsRUFBcnBCLEVBQStzQnhzQixTQUFRLEVBQUN5c0IsZ0JBQWUsMEJBQVU7QUFBQyxlQUFLQyxjQUFMLENBQW9CbHBCLFVBQXBCLEtBQWlDLEtBQUtrcEIsY0FBTCxDQUFvQnhvQixtQkFBcEIsQ0FBd0M5TSxFQUFFSixPQUExQyxFQUFrRCxLQUFLeTFCLGNBQXZELEdBQXVFLEtBQUtDLGNBQUwsQ0FBb0JscEIsVUFBcEIsQ0FBK0JpTCxXQUEvQixDQUEyQyxLQUFLaWUsY0FBaEQsQ0FBeEc7QUFBeUssU0FBcE0sRUFBcU1GLDBCQUF5QixvQ0FBVTtBQUFDLGNBQUkvMkIsSUFBRSxLQUFLazNCLGFBQUwsQ0FBbUJoZSxxQkFBbkIsRUFBTjtBQUFBLGNBQWlEalosSUFBRSxFQUFuRCxDQUFzRCxRQUFPLEtBQUtnaUIsV0FBWixHQUF5QixLQUFJLEtBQUo7QUFBVWhpQixnQkFBRWtVLEdBQUYsR0FBTW5VLEVBQUVtVSxHQUFGLEdBQU0sS0FBSzNQLEdBQUwsQ0FBUzZQLFlBQXJCLEVBQWtDcFUsRUFBRXNVLElBQUYsR0FBT3ZVLEVBQUV1VSxJQUFGLEdBQU92VSxFQUFFK0wsS0FBRixHQUFRLENBQXhELENBQTBELE1BQU0sS0FBSSxPQUFKO0FBQVk5TCxnQkFBRWtVLEdBQUYsR0FBTW5VLEVBQUVtVSxHQUFSLEVBQVlsVSxFQUFFc1UsSUFBRixHQUFPdlUsRUFBRXVVLElBQUYsR0FBT3ZVLEVBQUUrTCxLQUE1QixDQUFrQyxNQUFNLEtBQUksUUFBSjtBQUFhOUwsZ0JBQUVrVSxHQUFGLEdBQU1uVSxFQUFFbTNCLE1BQVIsRUFBZWwzQixFQUFFc1UsSUFBRixHQUFPdlUsRUFBRXVVLElBQUYsR0FBT3ZVLEVBQUUrTCxLQUFGLEdBQVEsQ0FBckMsQ0FBdUMsTUFBTSxLQUFJLE1BQUo7QUFBVzlMLGdCQUFFa1UsR0FBRixHQUFNblUsRUFBRW1VLEdBQVIsRUFBWWxVLEVBQUVzVSxJQUFGLEdBQU92VSxFQUFFdVUsSUFBRixHQUFPLEtBQUsvUCxHQUFMLENBQVNxSixXQUFuQyxDQUErQyxNQUFNO0FBQVFYLHNCQUFRQyxJQUFSLENBQWEsYUFBVyxLQUFLOFUsV0FBaEIsR0FBNEIsZ0NBQXpDLEVBQXpSLENBQW9XLEtBQUs0VSxXQUFMLEdBQWlCNTJCLEVBQUVrVSxHQUFuQixFQUF1QixLQUFLMmlCLFlBQUwsR0FBa0I3MkIsRUFBRXNVLElBQTNDO0FBQWdELFNBQW5yQixFQUFvckI2aUIsd0JBQXVCLGtDQUFVO0FBQUMsY0FBSXAzQixJQUFFLEVBQU4sQ0FBUyxHQUFHNEMsTUFBSCxDQUFVLENBQUMsR0FBRWhCLEVBQUVMLE9BQUwsRUFBYyxLQUFLMjFCLGFBQUwsQ0FBbUJ4eUIsU0FBakMsQ0FBVixFQUF1RGlILE9BQXZELENBQWdFLFVBQVMxTCxDQUFULEVBQVc7QUFBQ0EsY0FBRWtQLE9BQUYsQ0FBVSxLQUFWLEtBQWtCLENBQWxCLElBQXFCLGdCQUFjbFAsQ0FBbkMsSUFBc0NELEVBQUU4RyxJQUFGLENBQU83RyxJQUFFLFVBQVQsQ0FBdEM7QUFBMkQsV0FBdkksR0FBMEksS0FBSzIyQixXQUFMLEdBQWlCNTJCLEVBQUU0TCxJQUFGLENBQU8sR0FBUCxDQUEzSjtBQUF1SyxTQUF0NEIsRUFBdTRCdEQsTUFBSyxnQkFBVTtBQUFDLGNBQUl0SSxJQUFFLElBQU4sQ0FBVyxLQUFLZzNCLGNBQUwsSUFBc0IsS0FBSzdyQixTQUFMLENBQWdCLFlBQVU7QUFBQzFFLHFCQUFTa0ssSUFBVCxDQUFjeEksV0FBZCxDQUEwQm5JLEVBQUVpM0IsY0FBNUIsR0FBNEM1cEIsaUJBQWlCck4sRUFBRWkzQixjQUFuQixFQUFtQzlpQixHQUEvRSxFQUFtRm5VLEVBQUUwWSxhQUFGLEdBQWdCLENBQUMsQ0FBcEcsRUFBc0cxWSxFQUFFbzNCLHNCQUFGLEVBQXRHLEVBQWlJcDNCLEVBQUUrMkIsd0JBQUYsRUFBakksRUFBOEpoekIsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDOUksZ0JBQUUwWSxhQUFGLEdBQWdCLENBQUMsQ0FBakIsRUFBbUIxWSxFQUFFK1UsTUFBRixHQUFTLENBQUMsQ0FBN0I7QUFBK0IsYUFBN0QsRUFBK0QsRUFBL0QsQ0FBOUo7QUFBaU8sV0FBNVAsQ0FBdEI7QUFBcVIsU0FBdnJDLEVBQXdyQ3ZNLE9BQU0saUJBQVU7QUFBQyxlQUFLdU0sTUFBTCxHQUFZLENBQUMsQ0FBYixFQUFlLEtBQUtraUIsY0FBTCxDQUFvQnhvQixtQkFBcEIsQ0FBd0M5TSxFQUFFSixPQUExQyxFQUFrRCxLQUFLeTFCLGNBQXZELENBQWYsRUFBc0YsS0FBS0MsY0FBTCxDQUFvQm5vQixnQkFBcEIsQ0FBcUNuTixFQUFFSixPQUF2QyxFQUErQyxLQUFLeTFCLGNBQXBELENBQXRGO0FBQTBKLFNBQW4yQyxFQUF2dEIsRUFBNGpFM2hCLFNBQVEsbUJBQVU7QUFBQyxZQUFJclYsSUFBRSxJQUFOLENBQVcsS0FBS21MLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbkwsWUFBRWkzQixjQUFGLEdBQWlCajNCLEVBQUV3RSxHQUFuQixFQUF1QnhFLEVBQUVrM0IsYUFBRixHQUFnQmwzQixFQUFFaTNCLGNBQUYsQ0FBaUJscEIsVUFBeEQsRUFBbUUvTixFQUFFd0UsR0FBRixDQUFNdUosVUFBTixDQUFpQmlMLFdBQWpCLENBQTZCaFosRUFBRXdFLEdBQS9CLENBQW5FLEVBQXVHeEUsRUFBRWszQixhQUFGLENBQWdCcG9CLGdCQUFoQixDQUFpQyxZQUFqQyxFQUE4QzlPLEVBQUVzSSxJQUFoRCxDQUF2RyxFQUE2SnRJLEVBQUVrM0IsYUFBRixDQUFnQnBvQixnQkFBaEIsQ0FBaUMsT0FBakMsRUFBeUM5TyxFQUFFc0ksSUFBM0MsQ0FBN0osRUFBOE10SSxFQUFFazNCLGFBQUYsQ0FBZ0Jwb0IsZ0JBQWhCLENBQWlDLFlBQWpDLEVBQThDOU8sRUFBRXdJLEtBQWhELENBQTlNLEVBQXFReEksRUFBRWszQixhQUFGLENBQWdCcG9CLGdCQUFoQixDQUFpQyxNQUFqQyxFQUF3QzlPLEVBQUV3SSxLQUExQyxDQUFyUTtBQUFzVCxTQUFqVjtBQUFvVixPQUE5NkUsRUFBKzZFbU4sZUFBYyx5QkFBVTtBQUFDLGFBQUtaLE1BQUwsR0FBWSxDQUFDLENBQWIsRUFBZSxLQUFLaWlCLGNBQUwsRUFBZixFQUFxQyxLQUFLRSxhQUFMLEtBQXFCLEtBQUtBLGFBQUwsQ0FBbUJ6b0IsbUJBQW5CLENBQXVDLFlBQXZDLEVBQW9ELEtBQUtuRyxJQUF6RCxHQUErRCxLQUFLNHVCLGFBQUwsQ0FBbUJ6b0IsbUJBQW5CLENBQXVDLE9BQXZDLEVBQStDLEtBQUtuRyxJQUFwRCxDQUEvRCxFQUF5SCxLQUFLNHVCLGFBQUwsQ0FBbUJ6b0IsbUJBQW5CLENBQXVDLFlBQXZDLEVBQW9ELEtBQUtqRyxLQUF6RCxDQUF6SCxFQUF5TCxLQUFLMHVCLGFBQUwsQ0FBbUJ6b0IsbUJBQW5CLENBQXVDLE1BQXZDLEVBQThDLEtBQUtqRyxLQUFuRCxDQUE5TSxDQUFyQztBQUE4UyxPQUF0dkYsRUFBVixFQUFrd0Z4SSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUE5d0Y7QUFBc3hGLEdBSm4zRyxFQUlzM0csVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxlQUFOLEVBQXNCNUUsT0FBTSxFQUFDaWlCLGFBQVksRUFBQzViLE1BQUssQ0FBQ3BHLE1BQUQsRUFBUWtHLE1BQVIsQ0FBTixFQUFzQmhJLFNBQVEsQ0FBOUIsRUFBYixFQUE4Q3NjLE9BQU0sRUFBQ3BVLE1BQUtwRyxNQUFOLEVBQWE5QixTQUFRLEtBQXJCLEVBQXBELEVBQTVCLEVBQTZHK0IsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGNBQUk1VSxJQUFFc1QsU0FBUyxLQUFLK1IsV0FBZCxFQUEwQixFQUExQixDQUFOO0FBQUEsY0FBb0NwbEIsSUFBRSxnQkFBdEMsQ0FBdUQsT0FBTytFLE1BQU1oRixDQUFOLEtBQVUsWUFBVSxPQUFPQSxDQUEzQixHQUE2QixLQUFLcWxCLFdBQUwsQ0FBaUJsVyxPQUFqQixDQUF5QixJQUF6QixJQUErQixDQUFDLENBQWhDLEtBQW9DbFAsS0FBRyxLQUFLb2xCLFdBQTVDLENBQTdCLElBQXVGcGxCLEtBQUdELENBQUgsRUFBS0MsS0FBRyxJQUEvRixHQUFxR0EsQ0FBNUc7QUFBOEcsU0FBekwsRUFBdEgsRUFBaVQ4QixRQUFPLGdCQUFTL0IsQ0FBVCxFQUFXO0FBQUMsZUFBT0EsRUFBRSxLQUFLNmQsS0FBUCxFQUFhLEVBQUM5USxhQUFZLGVBQWIsRUFBNkJvRCxPQUFNLEtBQUt5RSxPQUF4QyxFQUFiLEVBQThELEtBQUtrTSxNQUFMLENBQVl2ZixPQUExRSxDQUFQO0FBQTBGLE9BQTlaLEVBQTNELEVBQTJkdkIsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBdmU7QUFBK2UsR0FKbDRILEVBSXE0SCxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWFPLFdBQU9DLGNBQVAsQ0FBc0JqQixDQUF0QixFQUF3QixZQUF4QixFQUFxQyxFQUFDa0QsT0FBTSxDQUFDLENBQVIsRUFBckMsRUFBaUQsSUFBSTFDLElBQUUsU0FBRkEsQ0FBRSxDQUFTVCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsa0JBQVVULENBQVYsSUFBYUQsRUFBRThPLGdCQUFGLENBQW1CLFdBQW5CLEVBQStCcE8sQ0FBL0IsR0FBa0NWLEVBQUU4TyxnQkFBRixDQUFtQixZQUFuQixFQUFnQ3BPLENBQWhDLENBQS9DLEtBQW9GVixFQUFFOE8sZ0JBQUYsQ0FBbUIsU0FBbkIsRUFBNkJwTyxDQUE3QixHQUFnQ1YsRUFBRThPLGdCQUFGLENBQW1CLFVBQW5CLEVBQThCcE8sQ0FBOUIsQ0FBcEg7QUFBc0osS0FBNUs7QUFBQSxRQUE2S0MsSUFBRSxTQUFGQSxDQUFFLENBQVNYLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxrQkFBVVQsQ0FBVixJQUFhRCxFQUFFeU8sbUJBQUYsQ0FBc0IsV0FBdEIsRUFBa0MvTixDQUFsQyxHQUFxQ1YsRUFBRXlPLG1CQUFGLENBQXNCLFlBQXRCLEVBQW1DL04sQ0FBbkMsQ0FBbEQsS0FBMEZWLEVBQUV5TyxtQkFBRixDQUFzQixTQUF0QixFQUFnQy9OLENBQWhDLEdBQW1DVixFQUFFeU8sbUJBQUYsQ0FBc0IsVUFBdEIsRUFBaUMvTixDQUFqQyxDQUE3SDtBQUFrSyxLQUFqVyxDQUFrV1QsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxlQUFOLEVBQXNCNUUsT0FBTSxFQUFDNGdCLFlBQVdyYSxPQUFaLEVBQTVCLEVBQWlESyxNQUFLLGdCQUFVO0FBQUMsZUFBTSxFQUFDcUwsU0FBUSxDQUFDLENBQVYsRUFBWWdpQixlQUFjLElBQTFCLEVBQStCSCxlQUFjLElBQTdDLEVBQWtESSxrQkFBaUIsRUFBQ3ZyQixPQUFNLElBQVAsRUFBWUMsUUFBTyxJQUFuQixFQUF3Qm1JLEtBQUksSUFBNUIsRUFBaUNJLE1BQUssSUFBdEMsRUFBbkUsRUFBK0dnakIsa0JBQWlCLENBQUMsQ0FBakksRUFBbUlDLGNBQWEsQ0FBQyxDQUFqSixFQUFtSkMsU0FBUSxDQUFDLENBQTVKLEVBQThKMWlCLFFBQU8sQ0FBQyxDQUF0SyxFQUFOO0FBQStLLE9BQWhQLEVBQWlQelIsVUFBUyxFQUFDc1IsU0FBUSxtQkFBVTtBQUFDLGlCQUFNLEVBQUMsY0FBYSxLQUFLNmlCLE9BQW5CLEVBQTJCLGFBQVksS0FBSzFpQixNQUE1QyxFQUFOO0FBQTBELFNBQTlFLEVBQStFakksUUFBTyxrQkFBVTtBQUFDLGlCQUFNLEVBQUNmLE9BQU0sS0FBS3VyQixnQkFBTCxDQUFzQnZyQixLQUE3QixFQUFtQ0MsUUFBTyxLQUFLc3JCLGdCQUFMLENBQXNCdHJCLE1BQWhFLEVBQXVFbUksS0FBSSxLQUFLbWpCLGdCQUFMLENBQXNCbmpCLEdBQWpHLEVBQXFHSSxNQUFLLEtBQUsraUIsZ0JBQUwsQ0FBc0IvaUIsSUFBaEksRUFBTjtBQUE0SSxTQUE3TyxFQUE4TzdLLFVBQVMsb0JBQVU7QUFBQyxpQkFBTyxLQUFLc2EsVUFBTCxJQUFpQixDQUFDLEtBQUt4Z0IsU0FBTCxDQUFld04sU0FBeEM7QUFBa0QsU0FBcFQsRUFBMVAsRUFBZ2pCcE4sT0FBTSxFQUFDOEYsVUFBUyxrQkFBUzFKLENBQVQsRUFBVztBQUFDQSxjQUFFLEtBQUtnUCxPQUFMLEVBQUYsR0FBaUIsS0FBSzBvQixJQUFMLEVBQWpCO0FBQTZCLFNBQW5ELEVBQXRqQixFQUEybUJudEIsU0FBUSxFQUFDb3RCLHlCQUF3QixpQ0FBUzMzQixDQUFULEVBQVc7QUFBQyxjQUFJQyxJQUFFLENBQUMsVUFBRCxFQUFZLFVBQVosRUFBdUIsT0FBdkIsQ0FBTixDQUFzQyxPQUFPQSxFQUFFa1AsT0FBRixDQUFVOUIsaUJBQWlCck4sQ0FBakIsRUFBb0I0M0IsUUFBOUIsSUFBd0MsQ0FBQyxDQUFoRDtBQUFrRCxTQUE3SCxFQUE4SEMsNEJBQTJCLG9DQUFTNzNCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUVELEtBQUdBLEVBQUUrTixVQUFYLENBQXNCLE9BQU0sRUFBRSxDQUFDOU4sQ0FBRCxJQUFJLFdBQVNBLEVBQUV1ZCxPQUFGLENBQVU3TCxXQUFWLEVBQWYsTUFBMEMsS0FBS2dtQix1QkFBTCxDQUE2QjMzQixDQUE3QixJQUFnQ0EsQ0FBaEMsR0FBa0MsS0FBSzYzQiwwQkFBTCxDQUFnQzUzQixDQUFoQyxDQUE1RSxDQUFOO0FBQXNILFNBQWpULEVBQWtUNjNCLGVBQWMseUJBQVU7QUFBQyxjQUFJOTNCLElBQUUsS0FBS2szQixhQUFYLENBQXlCLE9BQU9sekIsS0FBS3FLLEtBQUwsQ0FBV3JLLEtBQUsrQyxHQUFMLENBQVMvRyxFQUFFNk4sV0FBWCxFQUF1QjdOLEVBQUVxVSxZQUF6QixDQUFYLElBQW1ELElBQTFEO0FBQStELFNBQW5hLEVBQW9hMGpCLGtCQUFpQiwwQkFBUy8zQixDQUFULEVBQVc7QUFBQyxjQUFHLEtBQUtnVyxLQUFMLENBQVdnaUIsTUFBZCxFQUFxQjtBQUFDLGdCQUFJLzNCLElBQUUsS0FBS2kzQixhQUFMLENBQW1CaGUscUJBQW5CLEVBQU47QUFBQSxnQkFBaUR4WSxJQUFFVixFQUFFaTRCLEtBQXJEO0FBQUEsZ0JBQTJEeDNCLElBQUVULEVBQUVrNEIsS0FBL0QsQ0FBcUUsT0FBTSxpQkFBZWw0QixFQUFFeUosSUFBakIsS0FBd0IvSSxJQUFFVixFQUFFb29CLGNBQUYsQ0FBaUIsQ0FBakIsRUFBb0I2UCxLQUF0QixFQUE0QngzQixJQUFFVCxFQUFFb29CLGNBQUYsQ0FBaUIsQ0FBakIsRUFBb0I4UCxLQUExRSxHQUFpRixFQUFDL2pCLEtBQUl6VCxJQUFFVCxFQUFFa1UsR0FBSixHQUFRLEtBQUs2QixLQUFMLENBQVdnaUIsTUFBWCxDQUFrQjNqQixZQUFsQixHQUErQixDQUF2QyxHQUF5QzVOLFNBQVNrSyxJQUFULENBQWMxQyxTQUF2RCxHQUFpRSxJQUF0RSxFQUEyRXNHLE1BQUs5VCxJQUFFUixFQUFFc1UsSUFBSixHQUFTLEtBQUt5QixLQUFMLENBQVdnaUIsTUFBWCxDQUFrQm5xQixXQUFsQixHQUE4QixDQUF2QyxHQUF5Q3BILFNBQVNrSyxJQUFULENBQWN3bEIsVUFBdkQsR0FBa0UsSUFBbEosRUFBdkY7QUFBK08sa0JBQU0sQ0FBQyxDQUFQO0FBQVMsU0FBcHhCLEVBQXF4QmdDLGVBQWMseUJBQVU7QUFBQyxjQUFJbjRCLElBQUUsS0FBSzgzQixhQUFMLEVBQU4sQ0FBMkIsS0FBS1IsZ0JBQUwsQ0FBc0J2ckIsS0FBdEIsR0FBNEIvTCxDQUE1QixFQUE4QixLQUFLczNCLGdCQUFMLENBQXNCdHJCLE1BQXRCLEdBQTZCaE0sQ0FBM0Q7QUFBNkQsU0FBdDRCLEVBQXU0Qm80QixjQUFhLHNCQUFTcDRCLENBQVQsRUFBVztBQUFDLGNBQUlDLElBQUUsS0FBSzgzQixnQkFBTCxDQUFzQi8zQixDQUF0QixDQUFOLENBQStCQyxNQUFJLEtBQUtxM0IsZ0JBQUwsQ0FBc0JuakIsR0FBdEIsR0FBMEJsVSxFQUFFa1UsR0FBNUIsRUFBZ0MsS0FBS21qQixnQkFBTCxDQUFzQi9pQixJQUF0QixHQUEyQnRVLEVBQUVzVSxJQUFqRTtBQUF1RSxTQUF0Z0MsRUFBdWdDOGpCLFlBQVcsc0JBQVU7QUFBQyxlQUFLdGpCLE1BQUwsR0FBWSxDQUFDLENBQWIsRUFBZSxLQUFLMGlCLE9BQUwsR0FBYSxDQUFDLENBQTdCLEVBQStCLEtBQUtELFlBQUwsR0FBa0IsQ0FBQyxDQUFsRCxFQUFvRCxLQUFLVyxhQUFMLEVBQXBELEVBQXlFcDBCLE9BQU82RyxZQUFQLENBQW9CLEtBQUsyc0IsZ0JBQXpCLENBQXpFLEVBQW9INTJCLEVBQUU4RixTQUFTa0ssSUFBWCxFQUFnQixLQUFoQixFQUFzQixLQUFLMm5CLFNBQTNCLENBQXBIO0FBQTBKLFNBQXZyQyxFQUF3ckNDLGFBQVkscUJBQVN2NEIsQ0FBVCxFQUFXO0FBQUMsY0FBSUMsSUFBRSxJQUFOLENBQVcsaUJBQWVELEVBQUV5SixJQUFqQixHQUFzQixLQUFLK3VCLFFBQUwsQ0FBYzF4QixJQUFkLENBQW1CLE9BQW5CLENBQXRCLEdBQWtELEtBQUsweEIsUUFBTCxDQUFjMXhCLElBQWQsQ0FBbUIsT0FBbkIsQ0FBbEQsRUFBOEUsS0FBSzB4QixRQUFMLEdBQWMsS0FBS0EsUUFBTCxDQUFjcHBCLE1BQWQsQ0FBcUIsS0FBS29wQixRQUFMLENBQWMxeUIsTUFBZCxHQUFxQixDQUExQyxFQUE0QyxLQUFLMHlCLFFBQUwsQ0FBYzF5QixNQUExRCxDQUE1RixFQUE4SixLQUFLMHlCLFFBQUwsQ0FBYzF5QixNQUFkLElBQXNCLENBQXRCLElBQXlCLFlBQVUsS0FBSzB5QixRQUFMLENBQWMsQ0FBZCxDQUFuQyxJQUFxRCxZQUFVLEtBQUtBLFFBQUwsQ0FBYyxDQUFkLENBQS9ELEtBQWtGLEtBQUtILFVBQUwsSUFBa0IsS0FBS2QsZ0JBQUwsR0FBc0J4ekIsT0FBTytFLFVBQVAsQ0FBbUIsWUFBVTtBQUFDN0ksY0FBRXUzQixZQUFGLEdBQWUsQ0FBQyxDQUFoQjtBQUFrQixXQUFoRCxFQUFrRCxHQUFsRCxDQUF4QyxFQUErRi8yQixFQUFFZ0csU0FBU2tLLElBQVgsRUFBZ0IsS0FBaEIsRUFBc0IsS0FBSzJuQixTQUEzQixDQUEvRixFQUFxSSxLQUFLbnRCLFNBQUwsQ0FBZ0IsWUFBVTtBQUFDbEwsY0FBRW00QixZQUFGLENBQWVwNEIsQ0FBZixHQUFrQkMsRUFBRThVLE1BQUYsR0FBUyxDQUFDLENBQTVCO0FBQThCLFdBQXpELENBQXZOLENBQTlKO0FBQWtiLFNBQTdvRCxFQUE4b0R1akIsV0FBVSxxQkFBVTtBQUFDLGNBQUl0NEIsSUFBRSxJQUFOLENBQVcsS0FBS3czQixZQUFMLEdBQWtCLEtBQUtDLE9BQUwsR0FBYSxDQUFDLENBQWhDLEdBQWtDLEtBQUtGLGdCQUFMLEdBQXNCeHpCLE9BQU8rRSxVQUFQLENBQW1CLFlBQVU7QUFBQzlJLGNBQUV5M0IsT0FBRixHQUFVLENBQUMsQ0FBWDtBQUFhLFdBQTNDLEVBQTZDLEdBQTdDLENBQXhELEVBQTBHOTJCLEVBQUU4RixTQUFTa0ssSUFBWCxFQUFnQixLQUFoQixFQUFzQixLQUFLMm5CLFNBQTNCLENBQTFHO0FBQWdKLFNBQTl6RCxFQUErekRHLHNCQUFxQixnQ0FBVTtBQUFDaDRCLFlBQUUsS0FBS3kyQixhQUFQLEVBQXFCLE9BQXJCLEVBQTZCLEtBQUtxQixXQUFsQztBQUErQyxTQUE5NEQsRUFBKzRERyx3QkFBdUIsa0NBQVU7QUFBQyxlQUFLeEIsYUFBTCxJQUFvQnYyQixFQUFFLEtBQUt1MkIsYUFBUCxFQUFxQixPQUFyQixFQUE2QixLQUFLcUIsV0FBbEMsQ0FBcEI7QUFBbUUsU0FBcC9ELEVBQXEvRGIsTUFBSyxnQkFBVTtBQUFDLGVBQUtMLGFBQUwsR0FBbUIsS0FBSzd5QixHQUF4QixFQUE0QixLQUFLMHlCLGFBQUwsR0FBbUIsS0FBS1csMEJBQUwsQ0FBZ0MsS0FBS3J6QixHQUFMLENBQVN1SixVQUF6QyxDQUEvQyxFQUFvRyxLQUFLeXFCLFFBQUwsR0FBYyxDQUFDLE9BQUQsQ0FBbEgsRUFBNEgsS0FBS3RCLGFBQUwsSUFBb0IsS0FBS0csYUFBTCxDQUFtQnRwQixVQUFuQixDQUE4QmlMLFdBQTlCLENBQTBDLEtBQUtxZSxhQUEvQyxHQUE4RCxLQUFLSCxhQUFMLENBQW1CdlosZ0JBQW5CLENBQW9DLGdCQUFwQyxFQUFzRDdYLE1BQXRELEdBQTZELENBQTdELEdBQStELEtBQUtvTyxRQUFMLEVBQS9ELElBQWdGLEtBQUtnakIsYUFBTCxDQUFtQi91QixXQUFuQixDQUErQixLQUFLa3ZCLGFBQXBDLEdBQW1ELEtBQUtvQixvQkFBTCxFQUFuRCxFQUErRSxLQUFLTixhQUFMLEVBQS9KLENBQWxGLElBQXdRLEtBQUtqa0IsUUFBTCxFQUFwWTtBQUFvWixTQUF6NUUsRUFBMDVFbEYsU0FBUSxtQkFBVTtBQUFDLGVBQUtxb0IsYUFBTCxJQUFvQixLQUFLQSxhQUFMLENBQW1CdHBCLFVBQXZDLEtBQW9ELEtBQUsycUIsc0JBQUwsSUFBOEIsS0FBS3JCLGFBQUwsQ0FBbUJ0cEIsVUFBbkIsQ0FBOEJpTCxXQUE5QixDQUEwQyxLQUFLcWUsYUFBL0MsQ0FBbEY7QUFBaUosU0FBOWpGLEVBQW5uQixFQUFtckdoaUIsU0FBUSxtQkFBVTtBQUFDLFlBQUlyVixJQUFFLElBQU4sQ0FBVytELE9BQU8rRSxVQUFQLENBQW1CLFlBQVU7QUFBQzlJLFlBQUUwSixRQUFGLEdBQVcxSixFQUFFZ1AsT0FBRixFQUFYLEdBQXVCaFAsRUFBRTAzQixJQUFGLEVBQXZCLEVBQWdDMTNCLEVBQUVtTCxTQUFGLENBQWEsWUFBVTtBQUFDbkwsY0FBRXFWLE9BQUYsR0FBVSxDQUFDLENBQVg7QUFBYSxXQUFyQyxDQUFoQztBQUF3RSxTQUF0RyxFQUF3RyxHQUF4RztBQUE2RyxPQUE5ekcsRUFBK3pHTSxlQUFjLHlCQUFVO0FBQUMsYUFBSzNHLE9BQUw7QUFBZSxPQUF2MkcsRUFBVixFQUFtM0doUCxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUEvM0c7QUFBdTRHLEdBSjVyUCxFQUkrclAsVUFBU3ZCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhTyxXQUFPQyxjQUFQLENBQXNCakIsQ0FBdEIsRUFBd0IsWUFBeEIsRUFBcUMsRUFBQ2tELE9BQU0sQ0FBQyxDQUFSLEVBQXJDLEdBQWlEbEQsRUFBRXNCLE9BQUYsR0FBVSxFQUFDeUcsTUFBSyxVQUFOLEVBQWlCNUUsT0FBTSxFQUFDeWEsT0FBTXhhLE1BQVAsRUFBY0osUUFBTyxFQUFDd0csTUFBS3BHLE1BQU4sRUFBYTlCLFNBQVEsU0FBckIsRUFBckIsRUFBdkIsRUFBNkVRLFFBQU8sZ0JBQVMvQixDQUFULEVBQVc7QUFBQyxlQUFPLEtBQUs2ZCxLQUFMLElBQVksS0FBS2lELE1BQUwsQ0FBWXZmLE9BQVosQ0FBb0J1RSxNQUFwQixHQUEyQixDQUF2QyxHQUF5QzlGLEVBQUUsS0FBSzZkLEtBQUwsSUFBWSxLQUFkLEVBQW9CLEVBQUM5USxhQUFZLEtBQUt2SixTQUFMLENBQWVHLE1BQWYsR0FBc0IsS0FBS1YsTUFBeEMsRUFBcEIsRUFBb0UsS0FBSzZkLE1BQUwsQ0FBWXZmLE9BQWhGLENBQXpDLEdBQWtJLEtBQUt1ZixNQUFMLENBQVl2ZixPQUFaLENBQW9CLENBQXBCLENBQXpJO0FBQWdLLE9BQWhRLEVBQWlRcUMsT0FBTSxFQUFDWCxRQUFPLGdCQUFTakQsQ0FBVCxFQUFXO0FBQUMsZUFBS3dELFNBQUwsQ0FBZUssUUFBZixDQUF3QjdELENBQXhCO0FBQTJCLFNBQS9DLEVBQXZRLEVBQXdUOEQsYUFBWSx1QkFBVTtBQUFDLFlBQUk5RCxJQUFFLEtBQUtpRCxNQUFYLENBQWtCakQsS0FBRyxLQUFLd0QsU0FBTCxDQUFlSyxRQUFmLENBQXdCN0QsQ0FBeEIsQ0FBSDtBQUE4QixPQUEvWCxFQUEzRCxFQUE0YkEsRUFBRUUsT0FBRixHQUFVRCxFQUFFc0IsT0FBeGM7QUFBZ2QsR0FKNXFRLEVBSStxUSxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDVixNQUFFRSxPQUFGLEdBQVUsRUFBQ3FCLFNBQVFiLEVBQUUsR0FBRixDQUFULEVBQWdCWSxZQUFXLENBQUMsQ0FBNUIsRUFBVjtBQUF5QyxHQUp4dVEsRUFJMnVRLFVBQVN0QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNWLE1BQUVFLE9BQUYsR0FBVSxFQUFDcUIsU0FBUWIsRUFBRSxHQUFGLENBQVQsRUFBZ0JZLFlBQVcsQ0FBQyxDQUE1QixFQUFWO0FBQXlDLEdBSnB5USxFQUl1eVEsVUFBU3RCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ1YsTUFBRUUsT0FBRixHQUFVLEVBQUNxQixTQUFRYixFQUFFLEdBQUYsQ0FBVCxFQUFnQlksWUFBVyxDQUFDLENBQTVCLEVBQVY7QUFBeUMsR0FKaDJRLEVBSW0yUSxVQUFTdEIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDVixNQUFFRSxPQUFGLEdBQVUsRUFBQ3FCLFNBQVFiLEVBQUUsR0FBRixDQUFULEVBQWdCWSxZQUFXLENBQUMsQ0FBNUIsRUFBVjtBQUF5QyxHQUo1NVEsRUFJKzVRLFVBQVN0QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNWLE1BQUVFLE9BQUYsR0FBVSxFQUFDcUIsU0FBUWIsRUFBRSxHQUFGLENBQVQsRUFBZ0JZLFlBQVcsQ0FBQyxDQUE1QixFQUFWO0FBQXlDLEdBSng5USxFQUkyOVEsVUFBU3RCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUMsYUFBT0EsS0FBR0EsRUFBRXNCLFVBQUwsR0FBZ0J0QixDQUFoQixHQUFrQixFQUFDdUIsU0FBUXZCLENBQVQsRUFBekI7QUFBcUMsT0FBRXNCLFVBQUYsR0FBYSxDQUFDLENBQWQsQ0FBZ0IsSUFBSVgsSUFBRUQsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFha0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZixDQUFvQlYsRUFBRXNCLE9BQUYsR0FBVSxVQUFTdkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQU9ULEtBQUtELENBQUwsR0FBTyxDQUFDLEdBQUU0QixFQUFFTCxPQUFMLEVBQWN2QixDQUFkLEVBQWdCQyxDQUFoQixFQUFrQixFQUFDa0QsT0FBTXpDLENBQVAsRUFBU1UsWUFBVyxDQUFDLENBQXJCLEVBQXVCRCxjQUFhLENBQUMsQ0FBckMsRUFBdUNnRixVQUFTLENBQUMsQ0FBakQsRUFBbEIsQ0FBUCxHQUE4RW5HLEVBQUVDLENBQUYsSUFBS1MsQ0FBbkYsRUFBcUZWLENBQTVGO0FBQThGLEtBQXhIO0FBQXlILEdBSnhzUixFQUkyc1IsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxPQUFFc0IsVUFBRixHQUFhLENBQUMsQ0FBZCxDQUFnQixJQUFJWCxJQUFFRCxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlrQixJQUFFbkIsRUFBRUUsQ0FBRixDQUFkLENBQW1CVixFQUFFc0IsT0FBRixHQUFVSyxFQUFFTCxPQUFGLElBQVcsVUFBU3ZCLENBQVQsRUFBVztBQUFDLFdBQUksSUFBSUMsSUFBRSxDQUFWLEVBQVlBLElBQUU0RixVQUFVQyxNQUF4QixFQUErQjdGLEdBQS9CLEVBQW1DO0FBQUMsWUFBSVMsSUFBRW1GLFVBQVU1RixDQUFWLENBQU4sQ0FBbUIsS0FBSSxJQUFJUSxDQUFSLElBQWFDLENBQWI7QUFBZU8saUJBQU9PLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDWixJQUFoQyxDQUFxQ0gsQ0FBckMsRUFBdUNELENBQXZDLE1BQTRDVCxFQUFFUyxDQUFGLElBQUtDLEVBQUVELENBQUYsQ0FBakQ7QUFBZjtBQUFzRSxjQUFPVCxDQUFQO0FBQVMsS0FBdks7QUFBd0ssR0FKdCtSLEVBSXkrUixVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUM7QUFBYSxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDLGFBQU9BLEtBQUdBLEVBQUVzQixVQUFMLEdBQWdCdEIsQ0FBaEIsR0FBa0IsRUFBQ3VCLFNBQVF2QixDQUFULEVBQXpCO0FBQXFDLE9BQUVzQixVQUFGLEdBQWEsQ0FBQyxDQUFkLENBQWdCLElBQUlYLElBQUVELEVBQUUsR0FBRixDQUFOO0FBQUEsUUFBYWtCLElBQUVuQixFQUFFRSxDQUFGLENBQWY7QUFBQSxRQUFvQmtCLElBQUVuQixFQUFFLEdBQUYsQ0FBdEI7QUFBQSxRQUE2QmlCLElBQUVsQixFQUFFb0IsQ0FBRixDQUEvQjtBQUFBLFFBQW9DYixJQUFFLGNBQVksT0FBT1csRUFBRUosT0FBckIsSUFBOEIsb0JBQWlCSyxFQUFFTCxPQUFuQixDQUE5QixHQUF5RCxVQUFTdkIsQ0FBVCxFQUFXO0FBQUMsb0JBQWNBLENBQWQseUNBQWNBLENBQWQ7QUFBZ0IsS0FBckYsR0FBc0YsVUFBU0EsQ0FBVCxFQUFXO0FBQUMsYUFBT0EsS0FBRyxjQUFZLE9BQU8yQixFQUFFSixPQUF4QixJQUFpQ3ZCLEVBQUVtSixXQUFGLEtBQWdCeEgsRUFBRUosT0FBbkQsSUFBNER2QixNQUFJMkIsRUFBRUosT0FBRixDQUFVQyxTQUExRSxHQUFvRixRQUFwRixVQUFvR3hCLENBQXBHLHlDQUFvR0EsQ0FBcEcsQ0FBUDtBQUE2RyxLQUFyUCxDQUFzUEMsRUFBRXNCLE9BQUYsR0FBVSxjQUFZLE9BQU9JLEVBQUVKLE9BQXJCLElBQThCLGFBQVdQLEVBQUVZLEVBQUVMLE9BQUosQ0FBekMsR0FBc0QsVUFBU3ZCLENBQVQsRUFBVztBQUFDLGFBQU0sZUFBYSxPQUFPQSxDQUFwQixHQUFzQixXQUF0QixHQUFrQ2dCLEVBQUVoQixDQUFGLENBQXhDO0FBQTZDLEtBQS9HLEdBQWdILFVBQVNBLENBQVQsRUFBVztBQUFDLGFBQU9BLEtBQUcsY0FBWSxPQUFPMkIsRUFBRUosT0FBeEIsSUFBaUN2QixFQUFFbUosV0FBRixLQUFnQnhILEVBQUVKLE9BQW5ELElBQTREdkIsTUFBSTJCLEVBQUVKLE9BQUYsQ0FBVUMsU0FBMUUsR0FBb0YsUUFBcEYsR0FBNkYsZUFBYSxPQUFPeEIsQ0FBcEIsR0FBc0IsV0FBdEIsR0FBa0NnQixFQUFFaEIsQ0FBRixDQUF0STtBQUEySSxLQUFqUjtBQUFrUixHQUpqbFQsRUFJb2xULFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ0EsTUFBRSxFQUFGLEdBQU1BLEVBQUUsRUFBRixDQUFOLEVBQVlWLEVBQUVFLE9BQUYsR0FBVVEsRUFBRSxHQUFGLENBQXRCO0FBQTZCLEdBSmpvVCxFQUlvb1QsVUFBU1YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDQSxNQUFFLEdBQUYsR0FBT1YsRUFBRUUsT0FBRixHQUFVLGdCQUFqQjtBQUFrQyxHQUp0clQsRUFJeXJULFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQ0EsTUFBRSxHQUFGLEVBQU8sSUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtPLE1BQVgsQ0FBa0JqQixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQU9ELEVBQUVTLGNBQUYsQ0FBaUJsQixDQUFqQixFQUFtQkMsQ0FBbkIsRUFBcUJTLENBQXJCLENBQVA7QUFBK0IsS0FBekQ7QUFBMEQsR0FKNXhULEVBSSt4VCxVQUFTVixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNBLE1BQUUsR0FBRixHQUFPQSxFQUFFLEdBQUYsQ0FBUCxFQUFjQSxFQUFFLEdBQUYsQ0FBZCxFQUFxQkEsRUFBRSxHQUFGLENBQXJCLEVBQTRCVixFQUFFRSxPQUFGLEdBQVVRLEVBQUUsQ0FBRixFQUFLa0UsTUFBM0M7QUFBa0QsR0FKajJULEVBSW8yVCxVQUFTNUUsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDQSxNQUFFLEVBQUYsR0FBTUEsRUFBRSxFQUFGLENBQU4sRUFBWVYsRUFBRUUsT0FBRixHQUFVUSxFQUFFLEVBQUYsRUFBTTRELENBQU4sQ0FBUSxVQUFSLENBQXRCO0FBQTBDLEdBSjk1VCxFQUlpNlQsVUFBU3RFLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsRUFBRixDQUFkO0FBQUEsUUFBb0JrQixJQUFFbEIsRUFBRSxFQUFGLENBQXRCLENBQTRCVixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXO0FBQUMsVUFBSUMsSUFBRVEsRUFBRVQsQ0FBRixDQUFOO0FBQUEsVUFBV1UsSUFBRUMsRUFBRTJELENBQWYsQ0FBaUIsSUFBRzVELENBQUgsRUFBSyxLQUFJLElBQUltQixDQUFKLEVBQU1GLElBQUVqQixFQUFFVixDQUFGLENBQVIsRUFBYWdCLElBQUVZLEVBQUUwQyxDQUFqQixFQUFtQjFELElBQUUsQ0FBekIsRUFBMkJlLEVBQUVtRSxNQUFGLEdBQVNsRixDQUFwQztBQUF1Q0ksVUFBRUgsSUFBRixDQUFPYixDQUFQLEVBQVM2QixJQUFFRixFQUFFZixHQUFGLENBQVgsS0FBb0JYLEVBQUU2RyxJQUFGLENBQU9qRixDQUFQLENBQXBCO0FBQXZDLE9BQXFFLE9BQU81QixDQUFQO0FBQVMsS0FBMUg7QUFBMkgsR0FKeGtVLEVBSTJrVSxVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU4sQ0FBWVYsRUFBRUUsT0FBRixHQUFVbU0sTUFBTUMsT0FBTixJQUFlLFVBQVN0TSxDQUFULEVBQVc7QUFBQyxhQUFNLFdBQVNTLEVBQUVULENBQUYsQ0FBZjtBQUFvQixLQUF6RDtBQUEwRCxHQUpqcVUsRUFJb3FVLFVBQVNBLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTjtBQUFBLFFBQVlDLElBQUVELEVBQUUsQ0FBRixDQUFkLENBQW1CVixFQUFFRSxPQUFGLEdBQVUsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxXQUFJLElBQUlTLENBQUosRUFBTWtCLElBQUVqQixFQUFFWCxDQUFGLENBQVIsRUFBYTZCLElBQUVwQixFQUFFbUIsQ0FBRixDQUFmLEVBQW9CRCxJQUFFRSxFQUFFaUUsTUFBeEIsRUFBK0I5RSxJQUFFLENBQXJDLEVBQXVDVyxJQUFFWCxDQUF6QztBQUE0QyxZQUFHWSxFQUFFbEIsSUFBRW1CLEVBQUViLEdBQUYsQ0FBSixNQUFjZixDQUFqQixFQUFtQixPQUFPUyxDQUFQO0FBQS9EO0FBQXdFLEtBQWhHO0FBQWlHLEdBSnh5VSxFQUkyeVUsVUFBU1YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsRUFBRixFQUFNLE1BQU4sQ0FBTjtBQUFBLFFBQW9CQyxJQUFFRCxFQUFFLENBQUYsQ0FBdEI7QUFBQSxRQUEyQmtCLElBQUVsQixFQUFFLENBQUYsQ0FBN0I7QUFBQSxRQUFrQ21CLElBQUVuQixFQUFFLENBQUYsRUFBSzRELENBQXpDO0FBQUEsUUFBMkMzQyxJQUFFLENBQTdDO0FBQUEsUUFBK0NYLElBQUVDLE9BQU8wM0IsWUFBUCxJQUFxQixZQUFVO0FBQUMsYUFBTSxDQUFDLENBQVA7QUFBUyxLQUExRjtBQUFBLFFBQTJGLzNCLElBQUUsQ0FBQ0YsRUFBRSxDQUFGLEVBQU0sWUFBVTtBQUFDLGFBQU9NLEVBQUVDLE9BQU8yM0IsaUJBQVAsQ0FBeUIsRUFBekIsQ0FBRixDQUFQO0FBQXVDLEtBQXhELENBQTlGO0FBQUEsUUFBeUo3M0IsSUFBRSxTQUFGQSxDQUFFLENBQVNmLENBQVQsRUFBVztBQUFDNkIsUUFBRTdCLENBQUYsRUFBSVMsQ0FBSixFQUFNLEVBQUMwQyxPQUFNLEVBQUMxQyxHQUFFLE1BQUssRUFBRWtCLENBQVYsRUFBWWtHLEdBQUUsRUFBZCxFQUFQLEVBQU47QUFBaUMsS0FBeE07QUFBQSxRQUF5TW5GLElBQUUsU0FBRkEsQ0FBRSxDQUFTMUMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFHLENBQUNVLEVBQUVYLENBQUYsQ0FBSixFQUFTLE9BQU0sb0JBQWlCQSxDQUFqQix5Q0FBaUJBLENBQWpCLEtBQW1CQSxDQUFuQixHQUFxQixDQUFDLFlBQVUsT0FBT0EsQ0FBakIsR0FBbUIsR0FBbkIsR0FBdUIsR0FBeEIsSUFBNkJBLENBQXhELENBQTBELElBQUcsQ0FBQzRCLEVBQUU1QixDQUFGLEVBQUlTLENBQUosQ0FBSixFQUFXO0FBQUMsWUFBRyxDQUFDTyxFQUFFaEIsQ0FBRixDQUFKLEVBQVMsT0FBTSxHQUFOLENBQVUsSUFBRyxDQUFDQyxDQUFKLEVBQU0sT0FBTSxHQUFOLENBQVVjLEVBQUVmLENBQUY7QUFBSyxjQUFPQSxFQUFFUyxDQUFGLEVBQUtBLENBQVo7QUFBYyxLQUE5VjtBQUFBLFFBQStWSyxJQUFFLFNBQUZBLENBQUUsQ0FBU2QsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFHLENBQUMyQixFQUFFNUIsQ0FBRixFQUFJUyxDQUFKLENBQUosRUFBVztBQUFDLFlBQUcsQ0FBQ08sRUFBRWhCLENBQUYsQ0FBSixFQUFTLE9BQU0sQ0FBQyxDQUFQLENBQVMsSUFBRyxDQUFDQyxDQUFKLEVBQU0sT0FBTSxDQUFDLENBQVAsQ0FBU2MsRUFBRWYsQ0FBRjtBQUFLLGNBQU9BLEVBQUVTLENBQUYsRUFBS29ILENBQVo7QUFBYyxLQUEvYTtBQUFBLFFBQWdidkQsSUFBRSxTQUFGQSxDQUFFLENBQVN0RSxDQUFULEVBQVc7QUFBQyxhQUFPWSxLQUFHYyxFQUFFbTNCLElBQUwsSUFBVzczQixFQUFFaEIsQ0FBRixDQUFYLElBQWlCLENBQUM0QixFQUFFNUIsQ0FBRixFQUFJUyxDQUFKLENBQWxCLElBQTBCTSxFQUFFZixDQUFGLENBQTFCLEVBQStCQSxDQUF0QztBQUF3QyxLQUF0ZTtBQUFBLFFBQXVlMEIsSUFBRTFCLEVBQUVFLE9BQUYsR0FBVSxFQUFDNDRCLEtBQUlyNEIsQ0FBTCxFQUFPbzRCLE1BQUssQ0FBQyxDQUFiLEVBQWVFLFNBQVFyMkIsQ0FBdkIsRUFBeUJzMkIsU0FBUWw0QixDQUFqQyxFQUFtQ200QixVQUFTMzBCLENBQTVDLEVBQW5mO0FBQWtpQixHQUo3MVYsRUFJZzJWLFVBQVN0RSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsQ0FBZDtBQUFBLFFBQW9Ca0IsSUFBRWxCLEVBQUUsQ0FBRixDQUF0QjtBQUFBLFFBQTJCbUIsSUFBRW5CLEVBQUUsRUFBRixDQUE3QjtBQUFBLFFBQW1DaUIsSUFBRWpCLEVBQUUsQ0FBRixDQUFyQztBQUFBLFFBQTBDTSxJQUFFTixFQUFFLEVBQUYsQ0FBNUM7QUFBQSxRQUFrREUsSUFBRUssT0FBT2k0Qix3QkFBM0QsQ0FBb0ZqNUIsRUFBRXFFLENBQUYsR0FBSTVELEVBQUUsQ0FBRixJQUFLRSxDQUFMLEdBQU8sVUFBU1osQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQyxVQUFHRCxJQUFFNEIsRUFBRTVCLENBQUYsQ0FBRixFQUFPQyxJQUFFNEIsRUFBRTVCLENBQUYsRUFBSSxDQUFDLENBQUwsQ0FBVCxFQUFpQmUsQ0FBcEIsRUFBc0IsSUFBRztBQUFDLGVBQU9KLEVBQUVaLENBQUYsRUFBSUMsQ0FBSixDQUFQO0FBQWMsT0FBbEIsQ0FBa0IsT0FBTUQsQ0FBTixFQUFRLENBQUUsS0FBRzJCLEVBQUUzQixDQUFGLEVBQUlDLENBQUosQ0FBSCxFQUFVLE9BQU9VLEVBQUUsQ0FBQ0YsRUFBRTZELENBQUYsQ0FBSXpELElBQUosQ0FBU2IsQ0FBVCxFQUFXQyxDQUFYLENBQUgsRUFBaUJELEVBQUVDLENBQUYsQ0FBakIsQ0FBUDtBQUE4QixLQUFuSDtBQUFvSCxHQUp4alcsRUFJMmpXLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsQ0FBTjtBQUFBLFFBQVdDLElBQUVELEVBQUUsRUFBRixFQUFNNEQsQ0FBbkI7QUFBQSxRQUFxQjFDLElBQUUsR0FBRzBFLFFBQTFCO0FBQUEsUUFBbUN6RSxJQUFFLG9CQUFpQmtDLE1BQWpCLHlDQUFpQkEsTUFBakIsTUFBeUJBLE1BQXpCLElBQWlDOUMsT0FBT3dMLG1CQUF4QyxHQUE0RHhMLE9BQU93TCxtQkFBUCxDQUEyQjFJLE1BQTNCLENBQTVELEdBQStGLEVBQXBJO0FBQUEsUUFBdUlwQyxJQUFFLFNBQUZBLENBQUUsQ0FBUzNCLENBQVQsRUFBVztBQUFDLFVBQUc7QUFBQyxlQUFPVyxFQUFFWCxDQUFGLENBQVA7QUFBWSxPQUFoQixDQUFnQixPQUFNQSxDQUFOLEVBQVE7QUFBQyxlQUFPNkIsRUFBRTJFLEtBQUYsRUFBUDtBQUFpQjtBQUFDLEtBQWhNLENBQWlNeEcsRUFBRUUsT0FBRixDQUFVb0UsQ0FBVixHQUFZLFVBQVN0RSxDQUFULEVBQVc7QUFBQyxhQUFPNkIsS0FBRyxxQkFBbUJELEVBQUVmLElBQUYsQ0FBT2IsQ0FBUCxDQUF0QixHQUFnQzJCLEVBQUUzQixDQUFGLENBQWhDLEdBQXFDVyxFQUFFRixFQUFFVCxDQUFGLENBQUYsQ0FBNUM7QUFBb0QsS0FBNUU7QUFBNkUsR0FKejFXLEVBSTQxVyxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU47QUFBQSxRQUFZQyxJQUFFRCxFQUFFLEVBQUYsQ0FBZCxDQUFvQlYsRUFBRUUsT0FBRixHQUFVUSxFQUFFLENBQUYsRUFBS3k0QixXQUFMLEdBQWlCLFVBQVNuNUIsQ0FBVCxFQUFXO0FBQUMsVUFBSUMsSUFBRVUsRUFBRVgsQ0FBRixDQUFOLENBQVcsSUFBRyxjQUFZLE9BQU9DLENBQXRCLEVBQXdCLE1BQU1zRSxVQUFVdkUsSUFBRSxtQkFBWixDQUFOLENBQXVDLE9BQU9TLEVBQUVSLEVBQUVZLElBQUYsQ0FBT2IsQ0FBUCxDQUFGLENBQVA7QUFBb0IsS0FBckk7QUFBc0ksR0FKdGdYLEVBSXlnWCxVQUFTQSxDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxFQUFGLENBQU4sQ0FBWUQsRUFBRUEsRUFBRTBFLENBQUosRUFBTSxRQUFOLEVBQWUsRUFBQ2kwQixrQkFBaUIsZ0JBQWxCLEVBQWY7QUFBb0QsR0FKemxYLEVBSTRsWCxVQUFTcDVCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLEVBQUYsQ0FBTixDQUFZRCxFQUFFQSxFQUFFMEUsQ0FBRixHQUFJMUUsRUFBRXdFLENBQUYsR0FBSSxDQUFDdkUsRUFBRSxDQUFGLENBQVgsRUFBZ0IsUUFBaEIsRUFBeUIsRUFBQ1EsZ0JBQWVSLEVBQUUsQ0FBRixFQUFLNEQsQ0FBckIsRUFBekI7QUFBa0QsR0FKMXFYLEVBSTZxWCxVQUFTdEUsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUo1clgsRUFJK3JYLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQztBQUFhLFFBQUlELElBQUVDLEVBQUUsQ0FBRixDQUFOO0FBQUEsUUFBV0MsSUFBRUQsRUFBRSxDQUFGLENBQWI7QUFBQSxRQUFrQmtCLElBQUVsQixFQUFFLENBQUYsQ0FBcEI7QUFBQSxRQUF5Qm1CLElBQUVuQixFQUFFLEVBQUYsQ0FBM0I7QUFBQSxRQUFpQ2lCLElBQUVqQixFQUFFLEVBQUYsQ0FBbkM7QUFBQSxRQUF5Q00sSUFBRU4sRUFBRSxHQUFGLEVBQU9vNEIsR0FBbEQ7QUFBQSxRQUFzRGw0QixJQUFFRixFQUFFLENBQUYsQ0FBeEQ7QUFBQSxRQUE2REssSUFBRUwsRUFBRSxFQUFGLENBQS9EO0FBQUEsUUFBcUVnQyxJQUFFaEMsRUFBRSxFQUFGLENBQXZFO0FBQUEsUUFBNkVJLElBQUVKLEVBQUUsRUFBRixDQUEvRTtBQUFBLFFBQXFGNEQsSUFBRTVELEVBQUUsRUFBRixDQUF2RjtBQUFBLFFBQTZGZ0IsSUFBRWhCLEVBQUUsRUFBRixDQUEvRjtBQUFBLFFBQXFHMEUsSUFBRTFFLEVBQUUsRUFBRixDQUF2RztBQUFBLFFBQTZHNEUsSUFBRTVFLEVBQUUsR0FBRixDQUEvRztBQUFBLFFBQXNIOEUsSUFBRTlFLEVBQUUsR0FBRixDQUF4SDtBQUFBLFFBQStIZ0YsSUFBRWhGLEVBQUUsR0FBRixDQUFqSTtBQUFBLFFBQXdJaUYsSUFBRWpGLEVBQUUsRUFBRixDQUExSTtBQUFBLFFBQWdKa0YsSUFBRWxGLEVBQUUsQ0FBRixDQUFsSjtBQUFBLFFBQXVKMkcsSUFBRTNHLEVBQUUsRUFBRixDQUF6SjtBQUFBLFFBQStKNEcsSUFBRTVHLEVBQUUsRUFBRixDQUFqSztBQUFBLFFBQXVLNkcsSUFBRTdHLEVBQUUsRUFBRixDQUF6SztBQUFBLFFBQStLOEcsSUFBRTlHLEVBQUUsR0FBRixDQUFqTDtBQUFBLFFBQXdMK0csSUFBRS9HLEVBQUUsR0FBRixDQUExTDtBQUFBLFFBQWlNZ0gsSUFBRWhILEVBQUUsQ0FBRixDQUFuTTtBQUFBLFFBQXdNaUgsSUFBRWpILEVBQUUsRUFBRixDQUExTTtBQUFBLFFBQWdOa0gsSUFBRUgsRUFBRW5ELENBQXBOO0FBQUEsUUFBc05hLElBQUV1QyxFQUFFcEQsQ0FBMU47QUFBQSxRQUE0TjJCLElBQUV1QixFQUFFbEQsQ0FBaE87QUFBQSxRQUFrT3VELEtBQUVwSCxFQUFFbUUsTUFBdE87QUFBQSxRQUE2T2tELElBQUVySCxFQUFFNDRCLElBQWpQO0FBQUEsUUFBc1BoMEIsSUFBRXlDLEtBQUdBLEVBQUV3eEIsU0FBN1A7QUFBQSxRQUF1UUMsSUFBRSxXQUF6UTtBQUFBLFFBQXFSQyxJQUFFbDFCLEVBQUUsU0FBRixDQUF2UjtBQUFBLFFBQW9TbTFCLElBQUVuMUIsRUFBRSxhQUFGLENBQXRTO0FBQUEsUUFBdVRvMUIsSUFBRSxHQUFHL3lCLG9CQUE1VDtBQUFBLFFBQWlWcEIsSUFBRXhFLEVBQUUsaUJBQUYsQ0FBblY7QUFBQSxRQUF3VzQ0QixJQUFFNTRCLEVBQUUsU0FBRixDQUExVztBQUFBLFFBQXVYa0UsSUFBRWxFLEVBQUUsWUFBRixDQUF6WDtBQUFBLFFBQXlZNjRCLElBQUUzNEIsT0FBT3M0QixDQUFQLENBQTNZO0FBQUEsUUFBcVo5ekIsSUFBRSxjQUFZLE9BQU9vQyxFQUExYTtBQUFBLFFBQTRhZ3lCLElBQUVwNUIsRUFBRXE1QixPQUFoYjtBQUFBLFFBQXdiQyxJQUFFLENBQUNGLENBQUQsSUFBSSxDQUFDQSxFQUFFTixDQUFGLENBQUwsSUFBVyxDQUFDTSxFQUFFTixDQUFGLEVBQUtTLFNBQTNjO0FBQUEsUUFBcWQ5ekIsSUFBRXRFLEtBQUdoQixFQUFHLFlBQVU7QUFBQyxhQUFPLEtBQUcyRyxFQUFFcEMsRUFBRSxFQUFGLEVBQUssR0FBTCxFQUFTLEVBQUM5RCxLQUFJLGVBQVU7QUFBQyxpQkFBTzhELEVBQUUsSUFBRixFQUFPLEdBQVAsRUFBVyxFQUFDaEMsT0FBTSxDQUFQLEVBQVgsRUFBc0J2QixDQUE3QjtBQUErQixTQUEvQyxFQUFULENBQUYsRUFBOERBLENBQXhFO0FBQTBFLEtBQXhGLENBQUgsR0FBOEYsVUFBUzVCLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxVQUFJRCxJQUFFbUgsRUFBRWd5QixDQUFGLEVBQUkzNUIsQ0FBSixDQUFOLENBQWFRLEtBQUcsT0FBT201QixFQUFFMzVCLENBQUYsQ0FBVixFQUFla0YsRUFBRW5GLENBQUYsRUFBSUMsQ0FBSixFQUFNUyxDQUFOLENBQWYsRUFBd0JELEtBQUdULE1BQUk0NUIsQ0FBUCxJQUFVejBCLEVBQUV5MEIsQ0FBRixFQUFJMzVCLENBQUosRUFBTVEsQ0FBTixDQUFsQztBQUEyQyxLQUF0SyxHQUF1SzBFLENBQTluQjtBQUFBLFFBQWdvQjgwQixJQUFFLFNBQUZBLENBQUUsQ0FBU2o2QixDQUFULEVBQVc7QUFBQyxVQUFJQyxJQUFFMDVCLEVBQUUzNUIsQ0FBRixJQUFLdUgsRUFBRU0sR0FBRTB4QixDQUFGLENBQUYsQ0FBWCxDQUFtQixPQUFPdDVCLEVBQUV5TSxFQUFGLEdBQUsxTSxDQUFMLEVBQU9DLENBQWQ7QUFBZ0IsS0FBanJCO0FBQUEsUUFBa3JCaUYsSUFBRU8sS0FBRyxvQkFBaUJvQyxHQUFFcXlCLFFBQW5CLENBQUgsR0FBK0IsVUFBU2w2QixDQUFULEVBQVc7QUFBQyxhQUFNLG9CQUFpQkEsQ0FBakIseUNBQWlCQSxDQUFqQixFQUFOO0FBQXlCLEtBQXBFLEdBQXFFLFVBQVNBLENBQVQsRUFBVztBQUFDLGFBQU9BLGFBQWE2SCxFQUFwQjtBQUFzQixLQUEzeEI7QUFBQSxRQUE0eEJzeUIsSUFBRSxTQUFGQSxDQUFFLENBQVNuNkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQU9WLE1BQUk0NUIsQ0FBSixJQUFPTyxFQUFFbDFCLENBQUYsRUFBSWhGLENBQUosRUFBTVMsQ0FBTixDQUFQLEVBQWdCaUYsRUFBRTNGLENBQUYsQ0FBaEIsRUFBcUJDLElBQUVvSCxFQUFFcEgsQ0FBRixFQUFJLENBQUMsQ0FBTCxDQUF2QixFQUErQjBGLEVBQUVqRixDQUFGLENBQS9CLEVBQW9DQyxFQUFFZzVCLENBQUYsRUFBSTE1QixDQUFKLEtBQVFTLEVBQUVVLFVBQUYsSUFBY1QsRUFBRVgsQ0FBRixFQUFJdzVCLENBQUosS0FBUXg1QixFQUFFdzVCLENBQUYsRUFBS3Y1QixDQUFMLENBQVIsS0FBa0JELEVBQUV3NUIsQ0FBRixFQUFLdjVCLENBQUwsSUFBUSxDQUFDLENBQTNCLEdBQThCUyxJQUFFNkcsRUFBRTdHLENBQUYsRUFBSSxFQUFDVSxZQUFXa0csRUFBRSxDQUFGLEVBQUksQ0FBQyxDQUFMLENBQVosRUFBSixDQUE5QyxLQUEwRTNHLEVBQUVYLENBQUYsRUFBSXc1QixDQUFKLEtBQVFyMEIsRUFBRW5GLENBQUYsRUFBSXc1QixDQUFKLEVBQU1seUIsRUFBRSxDQUFGLEVBQUksRUFBSixDQUFOLENBQVIsRUFBdUJ0SCxFQUFFdzVCLENBQUYsRUFBS3Y1QixDQUFMLElBQVEsQ0FBQyxDQUExRyxHQUE2R2lHLEVBQUVsRyxDQUFGLEVBQUlDLENBQUosRUFBTVMsQ0FBTixDQUFySCxJQUErSHlFLEVBQUVuRixDQUFGLEVBQUlDLENBQUosRUFBTVMsQ0FBTixDQUExSztBQUFtTCxLQUFqK0I7QUFBQSxRQUFrK0IwNUIsSUFBRSxTQUFGQSxDQUFFLENBQVNwNkIsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQzBGLFFBQUUzRixDQUFGLEVBQUssS0FBSSxJQUFJVSxDQUFKLEVBQU1ELElBQUUrRSxFQUFFdkYsSUFBRTJGLEVBQUUzRixDQUFGLENBQUosQ0FBUixFQUFrQlUsSUFBRSxDQUFwQixFQUFzQmlCLElBQUVuQixFQUFFcUYsTUFBOUIsRUFBcUNsRSxJQUFFakIsQ0FBdkM7QUFBMEN3NUIsVUFBRW42QixDQUFGLEVBQUlVLElBQUVELEVBQUVFLEdBQUYsQ0FBTixFQUFhVixFQUFFUyxDQUFGLENBQWI7QUFBMUMsT0FBNkQsT0FBT1YsQ0FBUDtBQUFTLEtBQTdqQztBQUFBLFFBQThqQ3E2QixJQUFFLFNBQUZBLENBQUUsQ0FBU3I2QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLGFBQU8sS0FBSyxDQUFMLEtBQVNBLENBQVQsR0FBV3NILEVBQUV2SCxDQUFGLENBQVgsR0FBZ0JvNkIsRUFBRTd5QixFQUFFdkgsQ0FBRixDQUFGLEVBQU9DLENBQVAsQ0FBdkI7QUFBaUMsS0FBL21DO0FBQUEsUUFBZ25DcTZCLElBQUUsU0FBRkEsQ0FBRSxDQUFTdDZCLENBQVQsRUFBVztBQUFDLFVBQUlDLElBQUV5NUIsRUFBRTc0QixJQUFGLENBQU8sSUFBUCxFQUFZYixJQUFFcUgsRUFBRXJILENBQUYsRUFBSSxDQUFDLENBQUwsQ0FBZCxDQUFOLENBQTZCLE9BQU0sRUFBRSxTQUFPNDVCLENBQVAsSUFBVWo1QixFQUFFZzVCLENBQUYsRUFBSTM1QixDQUFKLENBQVYsSUFBa0IsQ0FBQ1csRUFBRXNFLENBQUYsRUFBSWpGLENBQUosQ0FBckIsTUFBK0IsRUFBRUMsS0FBRyxDQUFDVSxFQUFFLElBQUYsRUFBT1gsQ0FBUCxDQUFKLElBQWUsQ0FBQ1csRUFBRWc1QixDQUFGLEVBQUkzNUIsQ0FBSixDQUFoQixJQUF3QlcsRUFBRSxJQUFGLEVBQU82NEIsQ0FBUCxLQUFXLEtBQUtBLENBQUwsRUFBUXg1QixDQUFSLENBQXJDLEtBQWtEQyxDQUFqRixDQUFOO0FBQTBGLEtBQXJ2QztBQUFBLFFBQXN2Q3M2QixJQUFFLFNBQUZBLENBQUUsQ0FBU3Y2QixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDLFVBQUdELElBQUU0RixFQUFFNUYsQ0FBRixDQUFGLEVBQU9DLElBQUVvSCxFQUFFcEgsQ0FBRixFQUFJLENBQUMsQ0FBTCxDQUFULEVBQWlCRCxNQUFJNDVCLENBQUosSUFBTyxDQUFDajVCLEVBQUVnNUIsQ0FBRixFQUFJMTVCLENBQUosQ0FBUixJQUFnQlUsRUFBRXNFLENBQUYsRUFBSWhGLENBQUosQ0FBcEMsRUFBMkM7QUFBQyxZQUFJUyxJQUFFa0gsRUFBRTVILENBQUYsRUFBSUMsQ0FBSixDQUFOLENBQWEsT0FBTSxDQUFDUyxDQUFELElBQUksQ0FBQ0MsRUFBRWc1QixDQUFGLEVBQUkxNUIsQ0FBSixDQUFMLElBQWFVLEVBQUVYLENBQUYsRUFBSXc1QixDQUFKLEtBQVF4NUIsRUFBRXc1QixDQUFGLEVBQUt2NUIsQ0FBTCxDQUFyQixLQUErQlMsRUFBRVUsVUFBRixHQUFhLENBQUMsQ0FBN0MsR0FBZ0RWLENBQXREO0FBQXdEO0FBQUMsS0FBeDNDO0FBQUEsUUFBeTNDODVCLElBQUUsU0FBRkEsQ0FBRSxDQUFTeDZCLENBQVQsRUFBVztBQUFDLFdBQUksSUFBSUMsQ0FBSixFQUFNUyxJQUFFdUYsRUFBRUwsRUFBRTVGLENBQUYsQ0FBRixDQUFSLEVBQWdCUyxJQUFFLEVBQWxCLEVBQXFCbUIsSUFBRSxDQUEzQixFQUE2QmxCLEVBQUVvRixNQUFGLEdBQVNsRSxDQUF0QztBQUF5Q2pCLFVBQUVnNUIsQ0FBRixFQUFJMTVCLElBQUVTLEVBQUVrQixHQUFGLENBQU4sS0FBZTNCLEtBQUd1NUIsQ0FBbEIsSUFBcUJ2NUIsS0FBR2UsQ0FBeEIsSUFBMkJQLEVBQUVxRyxJQUFGLENBQU83RyxDQUFQLENBQTNCO0FBQXpDLE9BQThFLE9BQU9RLENBQVA7QUFBUyxLQUE5OUM7QUFBQSxRQUErOUNnNkIsS0FBRyxTQUFIQSxFQUFHLENBQVN6NkIsQ0FBVCxFQUFXO0FBQUMsV0FBSSxJQUFJQyxDQUFKLEVBQU1TLElBQUVWLE1BQUk0NUIsQ0FBWixFQUFjbjVCLElBQUV3RixFQUFFdkYsSUFBRXVFLENBQUYsR0FBSVcsRUFBRTVGLENBQUYsQ0FBTixDQUFoQixFQUE0QjRCLElBQUUsRUFBOUIsRUFBaUNDLElBQUUsQ0FBdkMsRUFBeUNwQixFQUFFcUYsTUFBRixHQUFTakUsQ0FBbEQ7QUFBcUQsU0FBQ2xCLEVBQUVnNUIsQ0FBRixFQUFJMTVCLElBQUVRLEVBQUVvQixHQUFGLENBQU4sQ0FBRCxJQUFnQm5CLEtBQUcsQ0FBQ0MsRUFBRWk1QixDQUFGLEVBQUkzNUIsQ0FBSixDQUFwQixJQUE0QjJCLEVBQUVrRixJQUFGLENBQU82eUIsRUFBRTE1QixDQUFGLENBQVAsQ0FBNUI7QUFBckQsT0FBOEYsT0FBTzJCLENBQVA7QUFBUyxLQUFybEQsQ0FBc2xENkQsTUFBSW9DLEtBQUUsYUFBVTtBQUFDLFVBQUcsZ0JBQWdCQSxFQUFuQixFQUFxQixNQUFNdEQsVUFBVSw4QkFBVixDQUFOLENBQWdELElBQUl2RSxJQUFFYyxFQUFFK0UsVUFBVUMsTUFBVixHQUFpQixDQUFqQixHQUFtQkQsVUFBVSxDQUFWLENBQW5CLEdBQWdDLEtBQUssQ0FBdkMsQ0FBTjtBQUFBLFVBQWdENUYsSUFBRSxTQUFGQSxDQUFFLENBQVNTLENBQVQsRUFBVztBQUFDLGlCQUFPazVCLENBQVAsSUFBVTM1QixFQUFFWSxJQUFGLENBQU9vRSxDQUFQLEVBQVN2RSxDQUFULENBQVYsRUFBc0JDLEVBQUUsSUFBRixFQUFPNjRCLENBQVAsS0FBVzc0QixFQUFFLEtBQUs2NEIsQ0FBTCxDQUFGLEVBQVV4NUIsQ0FBVixDQUFYLEtBQTBCLEtBQUt3NUIsQ0FBTCxFQUFReDVCLENBQVIsSUFBVyxDQUFDLENBQXRDLENBQXRCLEVBQStEa0csRUFBRSxJQUFGLEVBQU9sRyxDQUFQLEVBQVNzSCxFQUFFLENBQUYsRUFBSTVHLENBQUosQ0FBVCxDQUEvRDtBQUFnRixPQUE5SSxDQUErSSxPQUFPa0IsS0FBR200QixDQUFILElBQU03ekIsRUFBRTB6QixDQUFGLEVBQUk1NUIsQ0FBSixFQUFNLEVBQUNtQixjQUFhLENBQUMsQ0FBZixFQUFpQjROLEtBQUk5TyxDQUFyQixFQUFOLENBQU4sRUFBcUNnNkIsRUFBRWo2QixDQUFGLENBQTVDO0FBQWlELEtBQWxSLEVBQW1SMkIsRUFBRWtHLEdBQUUweEIsQ0FBRixDQUFGLEVBQU8sVUFBUCxFQUFtQixZQUFVO0FBQUMsYUFBTyxLQUFLN3NCLEVBQVo7QUFBZSxLQUE3QyxDQUFuUixFQUFtVWpGLEVBQUVuRCxDQUFGLEdBQUlpMkIsQ0FBdlUsRUFBeVU3eUIsRUFBRXBELENBQUYsR0FBSTYxQixDQUE3VSxFQUErVXo1QixFQUFFLEVBQUYsRUFBTTRELENBQU4sR0FBUWtELEVBQUVsRCxDQUFGLEdBQUlrMkIsQ0FBM1YsRUFBNlY5NUIsRUFBRSxFQUFGLEVBQU00RCxDQUFOLEdBQVFnMkIsQ0FBclcsRUFBdVc1NUIsRUFBRSxFQUFGLEVBQU00RCxDQUFOLEdBQVFtMkIsRUFBL1csRUFBa1g3NEIsS0FBRyxDQUFDbEIsRUFBRSxFQUFGLENBQUosSUFBV2lCLEVBQUVpNEIsQ0FBRixFQUFJLHNCQUFKLEVBQTJCVSxDQUEzQixFQUE2QixDQUFDLENBQTlCLENBQTdYLEVBQThaNTRCLEVBQUU0QyxDQUFGLEdBQUksVUFBU3RFLENBQVQsRUFBVztBQUFDLGFBQU9pNkIsRUFBRTMxQixFQUFFdEUsQ0FBRixDQUFGLENBQVA7QUFBZSxLQUFqYyxHQUFtYzZCLEVBQUVBLEVBQUVxRCxDQUFGLEdBQUlyRCxFQUFFNEQsQ0FBTixHQUFRNUQsRUFBRW9ELENBQUYsR0FBSSxDQUFDUSxDQUFmLEVBQWlCLEVBQUNiLFFBQU9pRCxFQUFSLEVBQWpCLENBQW5jLENBQWdlLEtBQUksSUFBSTZ5QixLQUFHLGlIQUFpSG4wQixLQUFqSCxDQUF1SCxHQUF2SCxDQUFQLEVBQW1JbzBCLEtBQUcsQ0FBMUksRUFBNElELEdBQUc1MEIsTUFBSCxHQUFVNjBCLEVBQXRKO0FBQTBKcjJCLFFBQUVvMkIsR0FBR0MsSUFBSCxDQUFGO0FBQTFKLEtBQXNLLEtBQUksSUFBSUQsS0FBRy95QixFQUFFckQsRUFBRU8sS0FBSixDQUFQLEVBQWtCODFCLEtBQUcsQ0FBekIsRUFBMkJELEdBQUc1MEIsTUFBSCxHQUFVNjBCLEVBQXJDO0FBQXlDdjFCLFFBQUVzMUIsR0FBR0MsSUFBSCxDQUFGO0FBQXpDLEtBQXFEOTRCLEVBQUVBLEVBQUVzRCxDQUFGLEdBQUl0RCxFQUFFb0QsQ0FBRixHQUFJLENBQUNRLENBQVgsRUFBYSxRQUFiLEVBQXNCLEVBQUNtMUIsS0FBSSxjQUFTNTZCLENBQVQsRUFBVztBQUFDLGVBQU9XLEVBQUU0RSxDQUFGLEVBQUl2RixLQUFHLEVBQVAsSUFBV3VGLEVBQUV2RixDQUFGLENBQVgsR0FBZ0J1RixFQUFFdkYsQ0FBRixJQUFLNkgsR0FBRTdILENBQUYsQ0FBNUI7QUFBaUMsT0FBbEQsRUFBbUQ2NkIsUUFBTyxnQkFBUzc2QixDQUFULEVBQVc7QUFBQyxZQUFHa0YsRUFBRWxGLENBQUYsQ0FBSCxFQUFRLE9BQU9zRixFQUFFQyxDQUFGLEVBQUl2RixDQUFKLENBQVAsQ0FBYyxNQUFNdUUsVUFBVXZFLElBQUUsbUJBQVosQ0FBTjtBQUF1QyxPQUFuSSxFQUFvSTg2QixXQUFVLHFCQUFVO0FBQUNmLFlBQUUsQ0FBQyxDQUFIO0FBQUssT0FBOUosRUFBK0pnQixXQUFVLHFCQUFVO0FBQUNoQixZQUFFLENBQUMsQ0FBSDtBQUFLLE9BQXpMLEVBQXRCLEdBQWtObDRCLEVBQUVBLEVBQUVzRCxDQUFGLEdBQUl0RCxFQUFFb0QsQ0FBRixHQUFJLENBQUNRLENBQVgsRUFBYSxRQUFiLEVBQXNCLEVBQUNnRCxRQUFPNHhCLENBQVIsRUFBVW41QixnQkFBZWk1QixDQUF6QixFQUEyQmx4QixrQkFBaUJteEIsQ0FBNUMsRUFBOENsQiwwQkFBeUJxQixDQUF2RSxFQUF5RTl0QixxQkFBb0IrdEIsQ0FBN0YsRUFBK0Y5eEIsdUJBQXNCK3hCLEVBQXJILEVBQXRCLENBQWxOLEVBQWtXM3lCLEtBQUdqRyxFQUFFQSxFQUFFc0QsQ0FBRixHQUFJdEQsRUFBRW9ELENBQUYsSUFBSyxDQUFDUSxDQUFELElBQUk3RSxFQUFHLFlBQVU7QUFBQyxVQUFJWixJQUFFNkgsSUFBTixDQUFVLE9BQU0sWUFBVXhDLEVBQUUsQ0FBQ3JGLENBQUQsQ0FBRixDQUFWLElBQWtCLFFBQU1xRixFQUFFLEVBQUN6RCxHQUFFNUIsQ0FBSCxFQUFGLENBQXhCLElBQWtDLFFBQU1xRixFQUFFcEUsT0FBT2pCLENBQVAsQ0FBRixDQUE5QztBQUEyRCxLQUFuRixDQUFULENBQU4sRUFBc0csTUFBdEcsRUFBNkcsRUFBQ3M1QixXQUFVLG1CQUFTdDVCLENBQVQsRUFBVztBQUFDLFlBQUcsS0FBSyxDQUFMLEtBQVNBLENBQVQsSUFBWSxDQUFDa0YsRUFBRWxGLENBQUYsQ0FBaEIsRUFBcUI7QUFBQyxlQUFJLElBQUlDLENBQUosRUFBTVMsQ0FBTixFQUFRRCxJQUFFLENBQUNULENBQUQsQ0FBVixFQUFjVyxJQUFFLENBQXBCLEVBQXNCa0YsVUFBVUMsTUFBVixHQUFpQm5GLENBQXZDO0FBQTBDRixjQUFFcUcsSUFBRixDQUFPakIsVUFBVWxGLEdBQVYsQ0FBUDtBQUExQyxXQUFpRSxPQUFPVixJQUFFUSxFQUFFLENBQUYsQ0FBRixFQUFPLGNBQVksT0FBT1IsQ0FBbkIsS0FBdUJTLElBQUVULENBQXpCLENBQVAsRUFBbUMsQ0FBQ1MsQ0FBRCxJQUFJZ0YsRUFBRXpGLENBQUYsQ0FBSixLQUFXQSxJQUFFLFdBQVNELENBQVQsRUFBV0MsR0FBWCxFQUFhO0FBQUMsZ0JBQUdTLE1BQUlULE1BQUVTLEVBQUVHLElBQUYsQ0FBTyxJQUFQLEVBQVliLENBQVosRUFBY0MsR0FBZCxDQUFOLEdBQXdCLENBQUNpRixFQUFFakYsR0FBRixDQUE1QixFQUFpQyxPQUFPQSxHQUFQO0FBQVMsV0FBckUsQ0FBbkMsRUFBMEdRLEVBQUUsQ0FBRixJQUFLUixDQUEvRyxFQUFpSG9GLEVBQUVVLEtBQUYsQ0FBUStCLENBQVIsRUFBVXJILENBQVYsQ0FBeEg7QUFBcUk7QUFBQyxPQUFwUCxFQUE3RyxDQUFyVyxFQUF5c0JvSCxHQUFFMHhCLENBQUYsRUFBS0UsQ0FBTCxLQUFTLzRCLEVBQUUsRUFBRixFQUFNbUgsR0FBRTB4QixDQUFGLENBQU4sRUFBV0UsQ0FBWCxFQUFhNXhCLEdBQUUweEIsQ0FBRixFQUFLM3lCLE9BQWxCLENBQWx0QixFQUE2dUJsRSxFQUFFbUYsRUFBRixFQUFJLFFBQUosQ0FBN3VCLEVBQTJ2Qm5GLEVBQUVzQixJQUFGLEVBQU8sTUFBUCxFQUFjLENBQUMsQ0FBZixDQUEzdkIsRUFBNndCdEIsRUFBRWpDLEVBQUU0NEIsSUFBSixFQUFTLE1BQVQsRUFBZ0IsQ0FBQyxDQUFqQixDQUE3d0I7QUFBaXlCLEdBSjl3ZCxFQUlpeGQsVUFBU3I1QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNBLE1BQUUsRUFBRixFQUFNLGVBQU47QUFBdUIsR0FKeHpkLEVBSTJ6ZCxVQUFTVixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNBLE1BQUUsRUFBRixFQUFNLFlBQU47QUFBb0IsR0FKLzFkLEVBSWsyZCxVQUFTVixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDK04sWUFBUXhNLFNBQVIsQ0FBa0JxaUIsc0JBQWxCLEtBQTJDN1YsUUFBUXhNLFNBQVIsQ0FBa0JxaUIsc0JBQWxCLEdBQXlDLFVBQVM3akIsQ0FBVCxFQUFXO0FBQUNBLFVBQUUsTUFBSTZGLFVBQVVDLE1BQWQsSUFBc0IsQ0FBQyxDQUFDOUYsQ0FBMUIsQ0FBNEIsSUFBSUMsSUFBRSxLQUFLOE4sVUFBWDtBQUFBLFVBQXNCck4sSUFBRXFELE9BQU9zSixnQkFBUCxDQUF3QnBOLENBQXhCLEVBQTBCLElBQTFCLENBQXhCO0FBQUEsVUFBd0RRLElBQUU2UyxTQUFTNVMsRUFBRXM2QixnQkFBRixDQUFtQixrQkFBbkIsQ0FBVCxDQUExRDtBQUFBLFVBQTJHcjZCLElBQUUyUyxTQUFTNVMsRUFBRXM2QixnQkFBRixDQUFtQixtQkFBbkIsQ0FBVCxDQUE3RztBQUFBLFVBQStKcDVCLElBQUUsS0FBS3E1QixTQUFMLEdBQWVoN0IsRUFBRWc3QixTQUFqQixHQUEyQmg3QixFQUFFZ08sU0FBOUw7QUFBQSxVQUF3TXBNLElBQUUsS0FBS281QixTQUFMLEdBQWVoN0IsRUFBRWc3QixTQUFqQixHQUEyQixLQUFLQyxZQUFoQyxHQUE2Q3o2QixDQUE3QyxHQUErQ1IsRUFBRWdPLFNBQUYsR0FBWWhPLEVBQUVpN0IsWUFBdlE7QUFBQSxVQUFvUnY1QixJQUFFLEtBQUt3bEIsVUFBTCxHQUFnQmxuQixFQUFFa25CLFVBQWxCLEdBQTZCbG5CLEVBQUVrMkIsVUFBclQ7QUFBQSxVQUFnVW4xQixJQUFFLEtBQUttbUIsVUFBTCxHQUFnQmxuQixFQUFFa25CLFVBQWxCLEdBQTZCLEtBQUsvWSxXQUFsQyxHQUE4Q3pOLENBQTlDLEdBQWdEVixFQUFFazJCLFVBQUYsR0FBYWwyQixFQUFFbU8sV0FBalk7QUFBQSxVQUE2WXhOLElBQUVnQixLQUFHLENBQUNDLENBQW5aLENBQXFaLENBQUNELEtBQUdDLENBQUosS0FBUTdCLENBQVIsS0FBWUMsRUFBRWdPLFNBQUYsR0FBWSxLQUFLZ3RCLFNBQUwsR0FBZWg3QixFQUFFZzdCLFNBQWpCLEdBQTJCaDdCLEVBQUVpN0IsWUFBRixHQUFlLENBQTFDLEdBQTRDejZCLENBQTVDLEdBQThDLEtBQUt5NkIsWUFBTCxHQUFrQixDQUF4RixHQUEyRixDQUFDdjVCLEtBQUdYLENBQUosS0FBUWhCLENBQVIsS0FBWUMsRUFBRWsyQixVQUFGLEdBQWEsS0FBS2hQLFVBQUwsR0FBZ0JsbkIsRUFBRWtuQixVQUFsQixHQUE2QmxuQixFQUFFbU8sV0FBRixHQUFjLENBQTNDLEdBQTZDek4sQ0FBN0MsR0FBK0MsS0FBS3lOLFdBQUwsR0FBaUIsQ0FBekYsQ0FBM0YsRUFBdUwsQ0FBQ3hNLEtBQUdDLENBQUgsSUFBTUYsQ0FBTixJQUFTWCxDQUFWLEtBQWMsQ0FBQ2hCLENBQWYsSUFBa0IsS0FBS203QixjQUFMLENBQW9CdjZCLENBQXBCLENBQXpNO0FBQWdPLEtBQWp2QjtBQUFtdkIsR0FKbm1mLEVBSXNtZixVQUFTWixDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSnJuZixFQUl3bmYsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUp2b2YsRUFJMG9mLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKenBmLEVBSTRwZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSjNxZixFQUk4cWYsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUo3cmYsRUFJZ3NmLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKL3NmLEVBSWt0ZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSmp1ZixFQUlvdWYsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpudmYsRUFJc3ZmLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKcndmLEVBSXd3ZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSnZ4ZixFQUkweGYsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUp6eWYsRUFJNHlmLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKM3pmLEVBSTh6ZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSjcwZixFQUlnMWYsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUovMWYsRUFJazJmLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKajNmLEVBSW8zZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSm40ZixFQUlzNGYsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpyNWYsRUFJdzVmLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKdjZmLEVBSTA2ZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSno3ZixFQUk0N2YsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUozOGYsRUFJODhmLFVBQVNELENBQVQsRUFBV0MsQ0FBWCxFQUFhLENBQUUsQ0FKNzlmLEVBSWcrZixVQUFTRCxDQUFULEVBQVdDLENBQVgsRUFBYSxDQUFFLENBSi8rZixFQUlrL2YsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpqZ2dCLEVBSW9nZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpuaGdCLEVBSXNoZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpyaWdCLEVBSXdpZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUp2amdCLEVBSTBqZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUp6a2dCLEVBSTRrZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUozbGdCLEVBSThsZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUo3bWdCLEVBSWduZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUovbmdCLEVBSWtvZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpqcGdCLEVBSW9wZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpucWdCLEVBSXNxZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUpycmdCLEVBSXdyZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUp2c2dCLEVBSTBzZ0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUp6dGdCLEVBSTR0Z0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWEsQ0FBRSxDQUozdWdCLEVBSTh1Z0IsVUFBU0QsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLHllQUFWO0FBQW9mLEdBSmh2aEIsRUFJbXZoQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsNHJFQUFWO0FBQXVzRSxHQUp4OGxCLEVBSTI4bEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLG9tRUFBVjtBQUErbUUsR0FKeGtxQixFQUkya3FCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSx5K0NBQVY7QUFBby9DLEdBSjdrdEIsRUFJZ2x0QixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUscStKQUFWO0FBQWcvSixHQUo5azNCLEVBSWlsM0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLDhtQ0FBVjtBQUF5bkMsR0FKeHQ1QixFQUkydDVCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSw0MkJBQVY7QUFBdTNCLEdBSmhtN0IsRUFJbW03QixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsMkdBQVY7QUFBc0gsR0FKdnU3QixFQUkwdTdCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFWO0FBQWEsR0FKcnc3QixFQUl3dzdCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxxSkFBVjtBQUFnSyxHQUp0NzdCLEVBSXk3N0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQVY7QUFBYSxHQUpwOTdCLEVBSXU5N0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLHdpREFBVjtBQUNqdTlCLEdBTDR2QixFQUt6dkIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLHNxQ0FBVjtBQUFpckMsR0FMdGMsRUFLeWMsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLGdmQUFWO0FBQTJmLEdBTGw5QixFQUtxOUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLGd1RkFBVjtBQUEydUYsR0FMOXNILEVBS2l0SCxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsNjVCQUFWO0FBQXc2QixHQUx2b0osRUFLMG9KLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxzaENBQVY7QUFBaWlDLEdBTHpyTCxFQUs0ckwsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLDZZQUFWO0FBQXdaLEdBTGxtTSxFQUtxbU0sVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLDZQQUFWO0FBQXdRLEdBTDMzTSxFQUs4M00sVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLDJHQUFWO0FBQXNILEdBTGxnTixFQUtxZ04sVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLDhGQUFWO0FBQXlHLEdBTDVuTixFQUsrbk4sVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQVY7QUFBYSxHQUwxcE4sRUFLNnBOLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSx5TUFBVjtBQUFvTixHQUwvM04sRUFLazROLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxxaUNBQVY7QUFBZ2pDLEdBTGg4UCxFQUttOFAsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLG9LQUFWO0FBQStLLEdBTGhvUSxFQUttb1EsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLG9tQ0FBVjtBQUErbUMsR0FMaHdTLEVBS213UyxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsdVdBQVY7QUFBa1gsR0FMbm9ULEVBS3NvVCxVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsaXhFQUFWO0FBQTR4RSxHQUxoN1gsRUFLbTdYLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSw2MklBQVY7QUFBdzNJLEdBTHp6Z0IsRUFLNHpnQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUseWhCQUFWO0FBQW9pQixHQUw5MmhCLEVBS2kzaEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTGg5aEIsRUFLbTloQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMbGppQixFQUtxamlCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUxwcGlCLEVBS3VwaUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMcHVpQixFQUt1dWlCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUx0MGlCLEVBS3kwaUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTHg2aUIsRUFLMjZpQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMMWdqQixFQUs2Z2pCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTDFsakIsRUFLNmxqQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUwxcWpCLEVBSzZxakIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMMXZqQixFQUs2dmpCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTDEwakIsRUFLNjBqQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUwxNWpCLEVBSzY1akIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMMStqQixFQUs2K2pCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTDFqa0IsRUFLNmprQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUwxb2tCLEVBSzZva0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMMXRrQixFQUs2dGtCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUw1emtCLEVBSyt6a0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMNTRrQixFQUsrNGtCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUw5K2tCLEVBS2kva0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTGhsbEIsRUFLbWxsQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUxocWxCLEVBS21xbEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMaHZsQixFQUttdmxCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTGgwbEIsRUFLbTBsQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUxoNWxCLEVBS201bEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMaCtsQixFQUttK2xCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTGhqbUIsRUFLbWptQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMbHBtQixFQUtxcG1CLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUxwdm1CLEVBS3V2bUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTHQxbUIsRUFLeTFtQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMeDdtQixFQUsyN21CLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTHhnbkIsRUFLMmduQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUx4bG5CLEVBSzJsbkIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTDFybkIsRUFLNnJuQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUwxd25CLEVBSzZ3bkIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZLElBQVosRUFBaUJELENBQWpCLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLENBQU4sQ0FBb0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUwxMm5CLEVBSzYybkIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTDU4bkIsRUFLKzhuQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUw1aG9CLEVBSytob0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMNW1vQixFQUsrbW9CLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTDVyb0IsRUFLK3JvQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUw1d29CLEVBSyt3b0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMNTFvQixFQUsrMW9CLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTDU2b0IsRUFLKzZvQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMOWdwQixFQUtpaHBCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTDlscEIsRUFLaW1wQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUw5cXBCLEVBS2lycEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMOXZwQixFQUtpd3BCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUxoMnBCLEVBS20ycEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTGw4cEIsRUFLcThwQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMcGlxQixFQUt1aXFCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUx0b3FCLEVBS3lvcUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMdHRxQixFQUt5dHFCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUx4enFCLEVBSzJ6cUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTDE1cUIsRUFLNjVxQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMNS9xQixFQUsrL3FCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUw5bHJCLEVBS2ltckIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTGhzckIsRUFLbXNyQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUxoeHJCLEVBS214ckIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMaDJyQixFQUttMnJCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUxsOHJCLEVBS3E4ckIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTHBpc0IsRUFLdWlzQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMdG9zQixFQUt5b3NCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUx4dXNCLEVBSzJ1c0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMeHpzQixFQUsyenNCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTHg0c0IsRUFLMjRzQixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUx4OXNCLEVBSzI5c0IsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMeGl0QixFQUsyaXRCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTHhudEIsRUFLMm50QixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsUUFBSUQsSUFBRUMsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CLElBQW5CLEVBQXdCLElBQXhCLEVBQTZCLElBQTdCLENBQU4sQ0FBeUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUx4c3RCLEVBSzJzdEIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLFFBQUlELElBQUVDLEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQixJQUFuQixFQUF3QixJQUF4QixFQUE2QixJQUE3QixDQUFOLENBQXlDVixFQUFFRSxPQUFGLEdBQVVPLEVBQUVQLE9BQVo7QUFBb0IsR0FMeHh0QixFQUsyeHRCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsRUFBNkIsSUFBN0IsQ0FBTixDQUF5Q1YsRUFBRUUsT0FBRixHQUFVTyxFQUFFUCxPQUFaO0FBQW9CLEdBTHgydEIsRUFLMjJ0QixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMMTh0QixFQUs2OHRCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxhQUFTRCxDQUFULENBQVdULENBQVgsRUFBYTtBQUFDVSxRQUFFLEdBQUY7QUFBTyxTQUFJQyxJQUFFRCxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWUEsRUFBRSxHQUFGLENBQVosRUFBbUJELENBQW5CLEVBQXFCLElBQXJCLEVBQTBCLElBQTFCLENBQU4sQ0FBc0NULEVBQUVFLE9BQUYsR0FBVVMsRUFBRVQsT0FBWjtBQUFvQixHQUw1aXVCLEVBSytpdUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDLGFBQVNELENBQVQsQ0FBV1QsQ0FBWCxFQUFhO0FBQUNVLFFBQUUsR0FBRjtBQUFPLFNBQUlDLElBQUVELEVBQUUsQ0FBRixFQUFLQSxFQUFFLEdBQUYsQ0FBTCxFQUFZQSxFQUFFLEdBQUYsQ0FBWixFQUFtQkQsQ0FBbkIsRUFBcUIsSUFBckIsRUFBMEIsSUFBMUIsQ0FBTixDQUFzQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTDlvdUIsRUFLaXB1QixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVksSUFBWixFQUFpQkQsQ0FBakIsRUFBbUIsSUFBbkIsRUFBd0IsSUFBeEIsQ0FBTixDQUFvQ1QsRUFBRUUsT0FBRixHQUFVUyxFQUFFVCxPQUFaO0FBQW9CLEdBTDl1dUIsRUFLaXZ1QixVQUFTRixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUMsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQ1UsUUFBRSxHQUFGO0FBQU8sU0FBSUMsSUFBRUQsRUFBRSxDQUFGLEVBQUtBLEVBQUUsR0FBRixDQUFMLEVBQVlBLEVBQUUsR0FBRixDQUFaLEVBQW1CRCxDQUFuQixFQUFxQixJQUFyQixFQUEwQixJQUExQixDQUFOLENBQXNDVCxFQUFFRSxPQUFGLEdBQVVTLEVBQUVULE9BQVo7QUFBb0IsR0FMaDF1QixFQUttMXVCLFVBQVNGLENBQVQsRUFBV0MsQ0FBWCxFQUFhUyxDQUFiLEVBQWU7QUFBQyxRQUFJRCxJQUFFQyxFQUFFLENBQUYsRUFBS0EsRUFBRSxHQUFGLENBQUwsRUFBWSxJQUFaLEVBQWlCLElBQWpCLEVBQXNCLElBQXRCLEVBQTJCLElBQTNCLENBQU4sQ0FBdUNWLEVBQUVFLE9BQUYsR0FBVU8sRUFBRVAsT0FBWjtBQUFvQixHQUw5NXVCLEVBS2k2dUIsVUFBU0YsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksUUFBYixFQUFzQjNGLE9BQU1wSCxFQUFFOE0sTUFBOUIsRUFBcUN5dUIsT0FBTSxFQUFDenFCLElBQUc5USxFQUFFMDBCLEtBQU4sRUFBM0MsRUFBUixFQUFpRSxDQUFDMTBCLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQWpFLEVBQW1GLENBQW5GLENBQVA7QUFBNkYsT0FBOUosRUFBK0ozRyxpQkFBZ0IsRUFBL0ssRUFBVjtBQUE2TCxHQUw1bXZCLEVBSyttdkIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHVCQUFiLEVBQVIsRUFBOEMsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQTlDLEVBQWdFLENBQWhFLENBQVA7QUFBMEUsT0FBM0ksRUFBNEkzRyxpQkFBZ0IsRUFBNUosRUFBVjtBQUEwSyxHQUx2eXZCLEVBSzB5dkIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsU0FBRixFQUFZLEVBQUNxTSxhQUFZLGVBQWIsRUFBNkJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxDQUFuQyxFQUFaLEVBQStELENBQUMxRCxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUEvRCxFQUFpRixDQUFqRixDQUFQO0FBQTJGLE9BQTVKLEVBQTZKM0csaUJBQWdCLEVBQTdLLEVBQVY7QUFBMkwsR0FMbi92QixFQUtzL3ZCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxVQUFiLEVBQXdCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUE5QixFQUFSLEVBQWdFLENBQUNsVSxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxvQkFBYixFQUFrQzJDLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDQSxnQkFBRXU3QixlQUFGLElBQW9CeDdCLEVBQUUrVyxXQUFGLENBQWM5VyxDQUFkLENBQXBCO0FBQXFDLGFBQXhELEVBQXJDLEVBQVIsRUFBd0csQ0FBQ1MsRUFBRSxPQUFGLEVBQVUsRUFBQzY2QixPQUFNLEVBQUM5eEIsTUFBSyxPQUFOLEVBQWN6QixNQUFLaEksRUFBRWdJLElBQXJCLEVBQTBCOEksSUFBRzlRLEVBQUU4USxFQUEvQixFQUFrQ3BILFVBQVMxSixFQUFFMEosUUFBN0MsRUFBUCxFQUE4RCt4QixVQUFTLEVBQUN0NEIsT0FBTW5ELEVBQUVtRCxLQUFULEVBQXZFLEVBQVYsQ0FBRCxFQUFvR25ELEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBcEcsRUFBOEdoN0IsRUFBRSxlQUFGLEVBQWtCLEVBQUM2NkIsT0FBTSxFQUFDLGVBQWN2N0IsRUFBRTBKLFFBQWpCLEVBQVAsRUFBbEIsQ0FBOUcsQ0FBeEcsRUFBNlEsQ0FBN1EsQ0FBRCxFQUFpUjFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBalIsRUFBMlIxN0IsRUFBRThnQixNQUFGLENBQVN2ZixPQUFULEdBQWlCYixFQUFFLE9BQUYsRUFBVSxFQUFDcU0sYUFBWSxnQkFBYixFQUE4Qnd1QixPQUFNLEVBQUNYLEtBQUk1NkIsRUFBRThRLEVBQUYsSUFBTTlRLEVBQUVnSSxJQUFiLEVBQXBDLEVBQXVEMEgsSUFBRyxFQUFDMkssT0FBTXJhLEVBQUUrVyxXQUFULEVBQTFELEVBQVYsRUFBMkYsQ0FBQy9XLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQTNGLEVBQTZHLENBQTdHLENBQWpCLEdBQWlJM0ksRUFBRTI3QixFQUFGLEVBQTVaLENBQWhFLENBQVA7QUFBNGUsT0FBN2lCLEVBQThpQjM1QixpQkFBZ0IsRUFBOWpCLEVBQVY7QUFBNGtCLEdBTGhseEIsRUFLbWx4QixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVkscUJBQWIsRUFBUixFQUE0QyxDQUFDck0sRUFBRSxNQUFGLEVBQVMsRUFBQ3FNLGFBQVksMkJBQWIsRUFBVCxFQUFtRCxDQUFDL00sRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRStqQixPQUFQLElBQWdCLEdBQXJCLENBQUQsQ0FBbkQsQ0FBRCxFQUFpRi9qQixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWpGLEVBQTJGMTdCLEVBQUUyeUIsYUFBRixLQUFrQixDQUFDLENBQW5CLEdBQXFCanlCLEVBQUUsV0FBRixFQUFjLEVBQUM2NkIsT0FBTSxFQUFDLGlCQUFnQixzQkFBakIsRUFBUCxFQUFnRDdyQixJQUFHLEVBQUNtc0IsUUFBTzc3QixFQUFFeXpCLFVBQVYsRUFBbkQsRUFBeUVxSSxPQUFNLEVBQUMzNEIsT0FBTW5ELEVBQUVpekIsV0FBVCxFQUFxQjhJLFVBQVMsa0JBQVM5N0IsQ0FBVCxFQUFXO0FBQUNELGdCQUFFaXpCLFdBQUYsR0FBY2h6QixDQUFkO0FBQWdCLGFBQTFELEVBQTJEKzdCLFlBQVcsYUFBdEUsRUFBL0UsRUFBZCxFQUFtTGg4QixFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFMnlCLGFBQVAsRUFBc0IsVUFBUzF5QixDQUFULEVBQVc7QUFBQyxpQkFBT1MsRUFBRSxXQUFGLEVBQWMsRUFBQ3dQLEtBQUlqUSxDQUFMLEVBQU9zN0IsT0FBTSxFQUFDcDRCLE9BQU1sRCxDQUFQLEVBQWIsRUFBZCxFQUFzQyxDQUFDRCxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzM3QixDQUFMLENBQUwsQ0FBRCxDQUF0QyxDQUFQO0FBQThELFNBQWhHLENBQW5MLENBQXJCLEdBQTRTRCxFQUFFMjdCLEVBQUYsRUFBdlksRUFBOFkzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE5WSxFQUF3Wmg3QixFQUFFLE1BQUYsRUFBUyxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSyxDQUFDNTdCLEVBQUVnekIsV0FBRixHQUFjLENBQWYsSUFBa0JoekIsRUFBRWl6QixXQUFwQixHQUFnQyxDQUFyQyxJQUF3QyxHQUF4QyxHQUE0Q2p6QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFa3pCLFFBQVAsQ0FBNUMsR0FBNkQsR0FBN0QsR0FBaUVsekIsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRTh5QixXQUFQLENBQWpFLEdBQXFGLEdBQXJGLEdBQXlGOXlCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUU2eUIsT0FBUCxDQUE5RixDQUFELENBQVQsQ0FBeFosRUFBbWhCN3lCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBbmhCLEVBQTZoQmg3QixFQUFFLFdBQUYsRUFBYyxFQUFDcU0sYUFBWSw2Q0FBYixFQUEyRHd1QixPQUFNLEVBQUM3eEIsVUFBUyxNQUFJMUosRUFBRWd6QixXQUFoQixFQUFqRSxFQUE4RnRqQixJQUFHLEVBQUMySyxPQUFNcmEsRUFBRTB6QixZQUFULEVBQWpHLEVBQWQsRUFBdUksQ0FBQ2h6QixFQUFFLFNBQUYsRUFBWSxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSyxxQkFBTCxDQUFELENBQVosQ0FBRCxDQUF2SSxFQUFvTCxDQUFwTCxDQUE3aEIsRUFBb3RCMTdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBcHRCLEVBQTh0Qmg3QixFQUFFLFdBQUYsRUFBYyxFQUFDcU0sYUFBWSx5Q0FBYixFQUF1RHd1QixPQUFNLEVBQUM3eEIsVUFBUzFKLEVBQUVvekIsYUFBWixFQUE3RCxFQUF3RjFqQixJQUFHLEVBQUMySyxPQUFNcmEsRUFBRTJ6QixRQUFULEVBQTNGLEVBQWQsRUFBNkgsQ0FBQ2p6QixFQUFFLFNBQUYsRUFBWSxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSyxzQkFBTCxDQUFELENBQVosQ0FBRCxDQUE3SCxFQUEySyxDQUEzSyxDQUE5dEIsQ0FBNUMsRUFBeTdCLENBQXo3QixDQUFQO0FBQW04QixPQUFwZ0MsRUFBcWdDMTVCLGlCQUFnQixFQUFyaEMsRUFBVjtBQUFtaUMsR0FMcG96QixFQUt1b3pCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDa2tCLEtBQUksUUFBTCxFQUFjN1gsYUFBWSxnQkFBMUIsRUFBUixFQUFvRCxDQUFDL00sRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBcEQsRUFBc0UsQ0FBdEUsQ0FBUDtBQUFnRixPQUFqSixFQUFrSjNHLGlCQUFnQixFQUFsSyxFQUFWO0FBQWdMLEdBTHIwekIsRUFLdzB6QixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksa0JBQWIsRUFBZ0NvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxDQUF0QyxFQUFSLEVBQThELENBQUMxRCxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUE5RCxFQUFnRixDQUFoRixDQUFQO0FBQTBGLE9BQTNKLEVBQTRKM0csaUJBQWdCLEVBQTVLLEVBQVY7QUFBMEwsR0FMaGgwQixFQUttaDBCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxVQUFiLEVBQXdCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBOUIsRUFBUixFQUFzRCxDQUFDaEQsRUFBRSxPQUFGLEVBQVUsQ0FBQ1YsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBVixFQUE0QixDQUE1QixDQUFELENBQXRELENBQVA7QUFBK0YsT0FBaEssRUFBaUszRyxpQkFBZ0IsRUFBakwsRUFBVjtBQUErTCxHQUxodTBCLEVBS211MEIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHFCQUFiLEVBQW1Db0QsT0FBTW5RLEVBQUU0VSxPQUEzQyxFQUFSLEVBQTRELENBQUM1VSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxFQUFpQjNJLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBakIsRUFBMkIxN0IsRUFBRXVXLFdBQUYsR0FBYzdWLEVBQUUsS0FBRixFQUFRLEVBQUNra0IsS0FBSSxVQUFMLEVBQWdCN1gsYUFBWSxrQkFBNUIsRUFBK0MzRixPQUFNcEgsRUFBRThNLE1BQXZELEVBQVIsQ0FBZCxHQUFzRjlNLEVBQUUyN0IsRUFBRixFQUFqSCxDQUE1RCxFQUFxTCxDQUFyTCxDQUFQO0FBQStMLE9BQWhRLEVBQWlRMzVCLGlCQUFnQixFQUFqUixFQUFWO0FBQStSLEdBTGhoMUIsRUFLbWgxQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxJQUFGLEVBQU8sRUFBQ3FNLGFBQVksY0FBYixFQUE0Qm9ELE9BQU1uUSxFQUFFNFUsT0FBcEMsRUFBUCxFQUFvRCxDQUFDbFUsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksa0NBQWIsRUFBUixFQUF5RCxDQUFDL00sRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBekQsRUFBMkUsQ0FBM0UsQ0FBRCxFQUErRTNJLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBL0UsRUFBeUZoN0IsRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksaUJBQWIsRUFBK0J3dUIsT0FBTSxFQUFDOXhCLE1BQUssUUFBTixFQUFlQyxVQUFTMUosRUFBRTBKLFFBQTFCLEVBQXJDLEVBQXlFZ0csSUFBRyxFQUFDMkssT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNELGdCQUFFNkssS0FBRixDQUFRLE9BQVIsRUFBZ0I1SyxDQUFoQjtBQUFtQixhQUF0QyxFQUE1RSxFQUFkLENBQXpGLENBQXBELEVBQWtSLENBQWxSLENBQVA7QUFBNFIsT0FBN1YsRUFBOFYrQixpQkFBZ0IsRUFBOVcsRUFBVjtBQUE0WCxHQUw3NTFCLEVBS2c2MUIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGVBQWIsRUFBNkJvRCxPQUFNblEsRUFBRTRVLE9BQXJDLEVBQVIsRUFBc0QsQ0FBQzVVLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQXRELEVBQXdFLENBQXhFLENBQVA7QUFBa0YsT0FBbkosRUFBb0ozRyxpQkFBZ0IsRUFBcEssRUFBVjtBQUFrTCxHQUxobTJCLEVBS21tMkIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsWUFBRixFQUFlLEVBQUM2NkIsT0FBTSxFQUFDdnpCLE1BQUssWUFBTixFQUFtQmswQixRQUFPLEVBQTFCLEVBQVAsRUFBZixFQUFxRCxDQUFDeDdCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLFlBQWIsRUFBMEJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTRVLE9BQWhCLENBQWhDLEVBQXlEeE4sT0FBTXBILEVBQUU4TSxNQUFqRSxFQUFSLEVBQWlGLENBQUNwTSxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxpQkFBYixFQUErQnd1QixPQUFNLEVBQUNZLFNBQVEsYUFBVCxFQUFyQyxFQUFSLEVBQXNFLENBQUN6N0IsRUFBRSxRQUFGLEVBQVcsRUFBQ3FNLGFBQVksaUJBQWIsRUFBK0J3dUIsT0FBTSxFQUFDYSxJQUFHLElBQUosRUFBU0MsSUFBRyxJQUFaLEVBQWlCeDZCLEdBQUUsSUFBbkIsRUFBd0IsZ0JBQWU3QixFQUFFdXRCLFFBQXpDLEVBQWtELG9CQUFtQnZ0QixFQUFFd3RCLFlBQXZFLEVBQXJDLEVBQVgsQ0FBRCxDQUF0RSxDQUFELENBQWpGLENBQUQsQ0FBckQsQ0FBUDtBQUFtVyxPQUFwYSxFQUFxYXhyQixpQkFBZ0IsRUFBcmIsRUFBVjtBQUFtYyxHQUxwajNCLEVBS3VqM0IsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGNBQWIsRUFBNEJvRCxPQUFNblEsRUFBRTRVLE9BQXBDLEVBQVIsRUFBcUQsQ0FBQzVVLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQXJELEVBQXVFLENBQXZFLENBQVA7QUFBaUYsT0FBbEosRUFBbUozRyxpQkFBZ0IsRUFBbkssRUFBVjtBQUFpTCxHQUx0djNCLEVBS3l2M0IsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsY0FBRixFQUFpQixFQUFDcU0sYUFBWSxjQUFiLEVBQTRCb0QsT0FBTW5RLEVBQUU0VSxPQUFwQyxFQUE0QzJtQixPQUFNLEVBQUM5ckIsTUFBS3pQLEVBQUV5UCxJQUFSLEVBQWE2RixRQUFPdFYsRUFBRXNWLE1BQXRCLEVBQTZCNUwsVUFBUzFKLEVBQUUwSixRQUF4QyxFQUFsRCxFQUFvR2dHLElBQUcsRUFBQzJLLE9BQU1yYSxFQUFFd0ksS0FBVCxFQUF2RyxFQUFqQixFQUF5SSxDQUFDeEksRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBekksRUFBMkosQ0FBM0osQ0FBUDtBQUFxSyxPQUF0TyxFQUF1TzNHLGlCQUFnQixFQUF2UCxFQUFWO0FBQXFRLEdBTDVnNEIsRUFLK2c0QixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksZUFBYixFQUE2Qm9ELE9BQU0sQ0FBQ25RLEVBQUUwRCxVQUFILEVBQWMxRCxFQUFFNFUsT0FBaEIsQ0FBbkMsRUFBUixFQUFxRSxDQUFDNVUsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBckUsRUFBdUYsQ0FBdkYsQ0FBUDtBQUFpRyxPQUFsSyxFQUFtSzNHLGlCQUFnQixFQUFuTCxFQUFWO0FBQWlNLEdBTDl0NEIsRUFLaXU0QixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxJQUFGLEVBQU8sRUFBQ3FNLGFBQVksa0NBQWIsRUFBZ0RvRCxPQUFNblEsRUFBRTRVLE9BQXhELEVBQVAsRUFBd0UsQ0FBQ2xVLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGtDQUFiLEVBQVIsRUFBeUQsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELEVBQWlCM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFqQixFQUEyQmg3QixFQUFFLFNBQUYsRUFBWSxFQUFDcU0sYUFBWSwwQkFBYixFQUFaLEVBQXFELENBQUMvTSxFQUFFMDdCLEVBQUYsQ0FBSyxxQkFBTCxDQUFELENBQXJELENBQTNCLENBQXpELEVBQXlLLENBQXpLLENBQUQsRUFBNksxN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE3SyxFQUF1TGg3QixFQUFFLFdBQUYsRUFBYyxFQUFDcU0sYUFBWSxpQkFBYixFQUErQnd1QixPQUFNLEVBQUM5eEIsTUFBSyxRQUFOLEVBQWVDLFVBQVMxSixFQUFFMEosUUFBMUIsRUFBckMsRUFBeUVnRyxJQUFHLEVBQUMySyxPQUFNcmEsRUFBRXVoQixnQkFBVCxFQUE1RSxFQUFkLENBQXZMLEVBQThTdmhCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBOVMsRUFBd1RoN0IsRUFBRSxLQUFGLEVBQVEsRUFBQ2trQixLQUFJLFFBQUwsRUFBYzdYLGFBQVksZ0JBQTFCLEVBQTJDb0QsT0FBTW5RLEVBQUVraEIsYUFBbkQsRUFBaUU5WixPQUFNcEgsRUFBRW1oQixZQUF6RSxFQUFSLEVBQStGLENBQUNuaEIsRUFBRTJJLEVBQUYsQ0FBSyxRQUFMLENBQUQsQ0FBL0YsRUFBZ0gsQ0FBaEgsQ0FBeFQsQ0FBeEUsRUFBb2YsQ0FBcGYsQ0FBUDtBQUE4ZixPQUEvakIsRUFBZ2tCM0csaUJBQWdCLEVBQWhsQixFQUFWO0FBQThsQixHQUw3MDVCLEVBS2cxNUIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9ELEVBQUV5UCxJQUFGLEdBQU8vTyxFQUFFLEdBQUYsRUFBTSxFQUFDcU0sYUFBWSxvQkFBYixFQUFrQ29ELE9BQU1uUSxFQUFFNFUsT0FBMUMsRUFBa0QybUIsT0FBTSxFQUFDOXJCLE1BQUt6UCxFQUFFeVAsSUFBUixFQUFhL0YsVUFBUzFKLEVBQUUwSixRQUF4QixFQUF4RCxFQUEwRmdHLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDRCxnQkFBRTZVLFNBQUYsQ0FBWSxDQUFDLENBQWIsRUFBZTVVLENBQWY7QUFBa0IsYUFBckMsRUFBN0YsRUFBTixFQUEySSxDQUFDRCxFQUFFaVYsTUFBRixJQUFValYsRUFBRWtWLFNBQVosSUFBdUJsVixFQUFFbVYsU0FBekIsR0FBbUN6VSxFQUFFLFNBQUYsRUFBWSxFQUFDNjZCLE9BQU0sRUFBQyxVQUFTdjdCLEVBQUVrVixTQUFaLEVBQXNCLGNBQWFsVixFQUFFbVYsU0FBckMsRUFBUCxFQUFaLEVBQW9FLENBQUNuVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFaVYsTUFBUCxDQUFMLENBQUQsQ0FBcEUsQ0FBbkMsR0FBK0hqVixFQUFFMjdCLEVBQUYsRUFBaEksRUFBdUkzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF2SSxFQUFpSmg3QixFQUFFLGVBQUYsRUFBa0IsRUFBQzY2QixPQUFNLEVBQUMsZUFBY3Y3QixFQUFFMEosUUFBakIsRUFBUCxFQUFsQixDQUFqSixFQUF1TTFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBdk0sRUFBaU5oN0IsRUFBRSxNQUFGLEVBQVMsRUFBQ3FNLGFBQVksU0FBYixFQUFULEVBQWlDLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFqQyxFQUFtRCxDQUFuRCxDQUFqTixDQUEzSSxFQUFtWixDQUFuWixDQUFQLEdBQTZaakksRUFBRSxRQUFGLEVBQVcsRUFBQ3FNLGFBQVksb0JBQWIsRUFBa0NvRCxPQUFNblEsRUFBRTRVLE9BQTFDLEVBQWtEMm1CLE9BQU0sRUFBQzl4QixNQUFLLFFBQU4sRUFBZUMsVUFBUzFKLEVBQUUwSixRQUExQixFQUF4RCxFQUE0RmdHLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDRCxnQkFBRTZVLFNBQUYsQ0FBWSxDQUFDLENBQWIsRUFBZTVVLENBQWY7QUFBa0IsYUFBckMsRUFBL0YsRUFBWCxFQUFrSixDQUFDRCxFQUFFaVYsTUFBRixJQUFValYsRUFBRWtWLFNBQVosSUFBdUJsVixFQUFFbVYsU0FBekIsR0FBbUN6VSxFQUFFLFNBQUYsRUFBWSxFQUFDNjZCLE9BQU0sRUFBQyxVQUFTdjdCLEVBQUVrVixTQUFaLEVBQXNCLGNBQWFsVixFQUFFbVYsU0FBckMsRUFBUCxFQUFaLEVBQW9FLENBQUNuVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFaVYsTUFBUCxDQUFMLENBQUQsQ0FBcEUsQ0FBbkMsR0FBK0hqVixFQUFFMjdCLEVBQUYsRUFBaEksRUFBdUkzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF2SSxFQUFpSmg3QixFQUFFLGVBQUYsRUFBa0IsRUFBQzY2QixPQUFNLEVBQUMsZUFBY3Y3QixFQUFFMEosUUFBakIsRUFBUCxFQUFsQixDQUFqSixFQUF1TTFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBdk0sRUFBaU5oN0IsRUFBRSxNQUFGLEVBQVMsRUFBQ3FNLGFBQVksU0FBYixFQUFULEVBQWlDLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFqQyxFQUFtRCxDQUFuRCxDQUFqTixDQUFsSixFQUEwWixDQUExWixDQUFwYTtBQUFpMEIsT0FBbDRCLEVBQW00QjNHLGlCQUFnQixFQUFuNUIsRUFBVjtBQUFpNkIsR0FML3Y3QixFQUtrdzdCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxTQUFiLEVBQXVCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUE3QixFQUFSLEVBQStELENBQUM1VSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUEvRCxFQUFpRixDQUFqRixDQUFQO0FBQTJGLE9BQTVKLEVBQTZKM0csaUJBQWdCLEVBQTdLLEVBQVY7QUFBMkwsR0FMMzg3QixFQUs4ODdCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLE9BQUYsRUFBVSxFQUFDcU0sYUFBWSxVQUFiLEVBQXdCd3VCLE9BQU0sRUFBQzl4QixNQUFLekosRUFBRXlKLElBQVIsRUFBYXpCLE1BQUtoSSxFQUFFZ0ksSUFBcEIsRUFBeUIwQixVQUFTMUosRUFBRTBKLFFBQXBDLEVBQTZDRSxVQUFTNUosRUFBRTRKLFFBQXhELEVBQWlFRSxhQUFZOUosRUFBRThKLFdBQS9FLEVBQTJGRCxXQUFVN0osRUFBRTZKLFNBQXZHLEVBQWlIRSxVQUFTL0osRUFBRStKLFFBQTVILEVBQTlCLEVBQW9LMHhCLFVBQVMsRUFBQ3Q0QixPQUFNbkQsRUFBRW1ELEtBQVQsRUFBN0ssRUFBNkx1TSxJQUFHLEVBQUNtSSxPQUFNN1gsRUFBRXFMLE9BQVQsRUFBaUIwZ0IsTUFBSy9yQixFQUFFdUwsTUFBeEIsRUFBK0JxTSxPQUFNNVgsRUFBRXdMLE9BQXZDLEVBQStDOHdCLFNBQVEsQ0FBQyxVQUFTcjhCLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsSUFBZixFQUFvQixFQUFwQixDQUFmLEdBQXVDLEtBQUt2OEIsRUFBRXdMLE9BQUYsQ0FBVXZMLENBQVYsQ0FBNUMsR0FBeUQsSUFBL0Q7QUFBb0UsYUFBakYsRUFBa0YsVUFBU0EsQ0FBVCxFQUFXO0FBQUMscUJBQU0sWUFBV0EsQ0FBWCxJQUFjLENBQUNELEVBQUUwTSxFQUFGLENBQUt6TSxFQUFFczhCLE9BQVAsRUFBZSxNQUFmLEVBQXNCLEVBQXRCLENBQWYsR0FBeUMsS0FBS3Y4QixFQUFFd0wsT0FBRixDQUFVdkwsQ0FBVixDQUE5QyxHQUEyRCxJQUFqRTtBQUFzRSxhQUFwSyxDQUF2RCxFQUFoTSxFQUFWLENBQVA7QUFBaWIsT0FBbGYsRUFBbWYrQixpQkFBZ0IsRUFBbmdCLEVBQVY7QUFBaWhCLEdBTDcrOEIsRUFLZy84QixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT0QsRUFBRTRhLFVBQUYsR0FBYWxhLEVBQUUsR0FBRixFQUFNLEVBQUNxTSxhQUFZLFNBQWIsRUFBdUJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxDQUE3QixFQUE0QyszQixVQUFTLEVBQUNlLFdBQVV4OEIsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRTRhLFVBQVAsQ0FBWCxFQUFyRCxFQUFOLENBQWIsR0FBeUc1YSxFQUFFNmEsUUFBRixHQUFXbmEsRUFBRSxVQUFGLEVBQWEsRUFBQ3FNLGFBQVksU0FBYixFQUF1Qm9ELE9BQU0sQ0FBQ25RLEVBQUUwRCxVQUFILENBQTdCO0FBQzk4K0I2M0IsaUJBQU0sRUFBQyxVQUFTdjdCLEVBQUU2YSxRQUFaLEVBRHc4K0IsRUFBYixDQUFYLEdBQ3g1K0JuYSxFQUFFLEdBQUYsRUFBTSxFQUFDcU0sYUFBWSxTQUFiLEVBQXVCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUVtVixTQUFoQixDQUE3QixFQUF3RG9tQixPQUFNLEVBQUMsZUFBYyxDQUFDLENBQUN2N0IsRUFBRW1WLFNBQW5CLEVBQTlELEVBQU4sRUFBbUcsQ0FBQ25WLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQW5HLEVBQXFILENBQXJILENBRHd5K0I7QUFDaHIrQixPQUQrbStCLEVBQzltK0IzRyxpQkFBZ0IsRUFEOGwrQixFQUFWO0FBQ2hsK0IsR0FOa2xCLEVBTS9rQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksaUJBQWIsRUFBK0IyQyxJQUFHLEVBQUNtSSxPQUFNN1gsRUFBRXFMLE9BQVQsRUFBaUIwZ0IsTUFBSy9yQixFQUFFdUwsTUFBeEIsRUFBbEMsRUFBUixFQUEyRSxDQUFDN0ssRUFBRSxTQUFGLEVBQVksRUFBQ2trQixLQUFJLE1BQUwsRUFBWTdYLGFBQVksc0JBQXhCLEVBQStDd3VCLE9BQU0sRUFBQyxlQUFjLENBQWYsRUFBaUIsZUFBYyxJQUEvQixFQUFyRCxFQUFaLEVBQXVHLENBQUM3NkIsRUFBRSxNQUFGLEVBQVMsRUFBQzY2QixPQUFNLEVBQUMsbUJBQWtCLEVBQW5CLEVBQVAsRUFBVCxDQUFELEVBQTBDdjdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBMUMsRUFBb0RoN0IsRUFBRSxPQUFGLEVBQVUsRUFBQys3QixZQUFXLENBQUMsRUFBQ3owQixNQUFLLE9BQU4sRUFBYzAwQixTQUFRLFNBQXRCLEVBQWdDdjVCLE9BQU1uRCxFQUFFa2MsS0FBeEMsRUFBOEM4ZixZQUFXLE9BQXpELEVBQUQsQ0FBWixFQUFnRnBYLEtBQUksT0FBcEYsRUFBNEY3WCxhQUFZLFVBQXhHLEVBQW1Id3VCLE9BQU0sRUFBQzl4QixNQUFLLE1BQU4sRUFBYUMsVUFBUzFKLEVBQUUwSixRQUF4QixFQUFpQ0UsVUFBUzVKLEVBQUU0SixRQUE1QyxFQUFxREUsYUFBWTlKLEVBQUU4SixXQUFuRSxFQUErRUQsV0FBVTdKLEVBQUU2SixTQUEzRixFQUFxRzdCLE1BQUtoSSxFQUFFZ0ksSUFBNUcsRUFBekgsRUFBMk95ekIsVUFBUyxFQUFDdDRCLE9BQU1uRCxFQUFFa2MsS0FBVCxFQUFwUCxFQUFvUXhNLElBQUcsRUFBQ21JLE9BQU03WCxFQUFFcUwsT0FBVCxFQUFpQjBnQixNQUFLL3JCLEVBQUV1TCxNQUF4QixFQUErQnFNLE9BQU0sQ0FBQyxVQUFTM1gsQ0FBVCxFQUFXO0FBQUNBLGdCQUFFcVYsTUFBRixDQUFTcW5CLFNBQVQsS0FBcUIzOEIsRUFBRWtjLEtBQUYsR0FBUWpjLEVBQUVxVixNQUFGLENBQVNuUyxLQUF0QztBQUE2QyxhQUExRCxFQUEyRG5ELEVBQUVzYyxjQUE3RCxDQUFyQyxFQUF2USxFQUFWLENBQXBELEVBQTBidGMsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUExYixFQUFvY2g3QixFQUFFLGlCQUFGLEVBQW9CVixFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFZ2MsS0FBUCxFQUFjLFVBQVMvYixDQUFULEVBQVc7QUFBQyxpQkFBT0QsRUFBRWdjLEtBQUYsQ0FBUWxXLE1BQVIsR0FBZXBGLEVBQUUsY0FBRixFQUFpQixFQUFDd1AsS0FBSWpRLENBQUwsRUFBT3lQLElBQUcsRUFBQ2t0QixPQUFNLGVBQVNsOEIsQ0FBVCxFQUFXO0FBQUMsdUJBQU0sWUFBV0EsQ0FBWCxJQUFjLENBQUNWLEVBQUUwTSxFQUFGLENBQUtoTSxFQUFFNjdCLE9BQVAsRUFBZSxPQUFmLEVBQXVCLEVBQXZCLENBQWYsR0FBMEMsS0FBS3Y4QixFQUFFd2MsR0FBRixDQUFNdmMsQ0FBTixDQUEvQyxHQUF3RCxJQUE5RDtBQUFtRSxlQUF0RixFQUF1Rm9hLE9BQU0sZUFBUzNaLENBQVQsRUFBVztBQUFDVixrQkFBRXdjLEdBQUYsQ0FBTXZjLENBQU47QUFBUyxlQUFsSCxFQUFWLEVBQWpCLEVBQWdKLENBQUNELEVBQUUwN0IsRUFBRixDQUFLLGVBQWExN0IsRUFBRTQ3QixFQUFGLENBQUszN0IsRUFBRUQsRUFBRTZULGNBQUosQ0FBTCxDQUFiLEdBQXVDLFVBQTVDLENBQUQsQ0FBaEosQ0FBZixHQUEwTjdULEVBQUUyN0IsRUFBRixFQUFqTztBQUF3TyxTQUFsUSxDQUFwQixDQUFwYyxDQUF2RyxFQUFzMEIsQ0FBdDBCLENBQUQsQ0FBM0UsRUFBczVCLENBQXQ1QixDQUFQO0FBQWc2QixPQUFqK0IsRUFBaytCMzVCLGlCQUFnQixFQUFsL0IsRUFBVjtBQUFnZ0MsR0FOL2IsRUFNa2MsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLG9CQUFiLEVBQWtDb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUF4QyxFQUFSLEVBQTBFLENBQUM1VSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxFQUFpQjNJLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBakIsRUFBMkIxN0IsRUFBRXlLLGFBQUYsR0FBZ0IvSixFQUFFLE1BQUYsRUFBUyxFQUFDcU0sYUFBWSxVQUFiLEVBQVQsRUFBa0MsQ0FBQy9NLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUVvTCxXQUFQLElBQW9CLEtBQXBCLEdBQTBCcEwsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRTBLLGFBQVAsQ0FBL0IsQ0FBRCxDQUFsQyxDQUFoQixHQUEyRzFLLEVBQUUyN0IsRUFBRixFQUF0SSxFQUE2STM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQTdJLEVBQXVKMTdCLEVBQUVrZCxhQUFGLEdBQWdCeGMsRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksbUNBQWIsRUFBaUR3dUIsT0FBTSxFQUFDc0IsVUFBUyxJQUFWLEVBQXZELEVBQXVFbnRCLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDQSxnQkFBRTY4QixjQUFGLElBQW1COThCLEVBQUV5ZCxrQkFBRixDQUFxQnhkLENBQXJCLENBQW5CO0FBQTJDLGFBQTlELEVBQTFFLEVBQWQsRUFBeUosQ0FBQ1MsRUFBRSxTQUFGLEVBQVksQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRW9kLFlBQUYsR0FBZSxnQkFBZixHQUFnQyxZQUFyQyxDQUFMLENBQUQsQ0FBWixDQUFELENBQXpKLEVBQW1PLENBQW5PLENBQWhCLEdBQXNQcGQsRUFBRTI3QixFQUFGLEVBQTdZLEVBQW9aMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBcFosRUFBOFoxN0IsRUFBRW1kLFdBQUYsSUFBZW5kLEVBQUVzZCxRQUFqQixHQUEwQjVjLEVBQUUsV0FBRixFQUFjLEVBQUNxTSxhQUFZLCtCQUFiLEVBQTZDd3VCLE9BQU0sRUFBQ3NCLFVBQVMsSUFBVixFQUFuRCxFQUFtRW50QixJQUFHLEVBQUMySyxPQUFNcmEsRUFBRTBkLFVBQVQsRUFBdEUsRUFBZCxFQUEwRyxDQUFDaGQsRUFBRSxTQUFGLEVBQVksQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUssT0FBTCxDQUFELENBQVosQ0FBRCxDQUExRyxFQUF5SSxDQUF6SSxDQUExQixHQUFzSzE3QixFQUFFMjdCLEVBQUYsRUFBcGtCLENBQTFFLEVBQXNwQixDQUF0cEIsQ0FBUDtBQUFncUIsT0FBanVCLEVBQWt1QjM1QixpQkFBZ0IsRUFBbHZCLEVBQVY7QUFBZ3dCLEdBTmh0QyxFQU1tdEMsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsWUFBRixFQUFlLEVBQUM2NkIsT0FBTSxFQUFDdnpCLE1BQUssYUFBTixFQUFvQmswQixRQUFPLEVBQTNCLEVBQVAsRUFBZixFQUFzRCxDQUFDeDdCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGFBQWIsRUFBMkJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTRVLE9BQWhCLENBQWpDLEVBQVIsRUFBbUUsQ0FBQ2xVLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLG1CQUFiLEVBQWlDM0YsT0FBTXBILEVBQUU4TSxNQUF6QyxFQUFSLENBQUQsQ0FBbkUsQ0FBRCxDQUF0RCxDQUFQO0FBQWdNLE9BQWpRLEVBQWtROUssaUJBQWdCLEVBQWxSLEVBQVY7QUFBZ1MsR0FOamdELEVBTW9nRCxVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxXQUFGLEVBQWMsRUFBQ2trQixLQUFJLFFBQUwsRUFBYzdYLGFBQVksa0JBQTFCLEVBQTZDMkMsSUFBRyxFQUFDbEgsT0FBTSxlQUFTdkksQ0FBVCxFQUFXO0FBQUNELGdCQUFFMFosY0FBRixDQUFpQixRQUFqQjtBQUEyQixhQUE5QyxFQUFoRCxFQUFkLEVBQStHLENBQUMxWixFQUFFc1osT0FBRixHQUFVNVksRUFBRSxpQkFBRixFQUFvQixDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFc1osT0FBUCxDQUFMLENBQUQsQ0FBcEIsQ0FBVixHQUF1RHRaLEVBQUUyN0IsRUFBRixFQUF4RCxFQUErRDM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQS9ELEVBQXlFMTdCLEVBQUV3WixhQUFGLEdBQWdCOVksRUFBRSxtQkFBRixFQUFzQixFQUFDKzZCLFVBQVMsRUFBQ2UsV0FBVXg4QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFd1osYUFBUCxDQUFYLEVBQVYsRUFBdEIsQ0FBaEIsR0FBb0Z4WixFQUFFMjdCLEVBQUYsRUFBN0osRUFBb0szN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFwSyxFQUE4SzE3QixFQUFFdVosU0FBRixHQUFZN1ksRUFBRSxtQkFBRixFQUFzQixDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFdVosU0FBUCxDQUFMLENBQUQsQ0FBdEIsQ0FBWixHQUE2RHZaLEVBQUUyN0IsRUFBRixFQUEzTyxFQUFrUDM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWxQLEVBQTRQaDdCLEVBQUUsbUJBQUYsRUFBc0IsQ0FBQ0EsRUFBRSxvQkFBRixFQUF1QixDQUFDQSxFQUFFLFVBQUYsRUFBYSxFQUFDa2tCLEtBQUksT0FBTCxFQUFhMlcsT0FBTSxFQUFDenFCLElBQUc5USxFQUFFa1gsU0FBTixFQUFnQmxQLE1BQUtoSSxFQUFFbVgsV0FBdkIsRUFBbUN0TixXQUFVN0osRUFBRTRaLGdCQUEvQyxFQUFnRTlQLGFBQVk5SixFQUFFb1gsa0JBQTlFLEVBQWlHalUsT0FBTW5ELEVBQUVtRCxLQUF6RyxFQUFuQixFQUFtSTQ1QixVQUFTLEVBQUNULFNBQVEsaUJBQVNyOEIsQ0FBVCxFQUFXO0FBQUMscUJBQU0sWUFBV0EsQ0FBWCxJQUFjLENBQUNELEVBQUUwTSxFQUFGLENBQUt6TSxFQUFFczhCLE9BQVAsRUFBZSxPQUFmLEVBQXVCLEVBQXZCLENBQWYsR0FBMEMsS0FBS3Y4QixFQUFFNlosWUFBRixDQUFlNVosQ0FBZixDQUEvQyxHQUFpRSxJQUF2RTtBQUE0RSxhQUFqRyxFQUE1SSxFQUFiLENBQUQsQ0FBdkIsRUFBdVIsQ0FBdlIsQ0FBRCxDQUF0QixFQUFrVCxDQUFsVCxDQUE1UCxFQUFpakJELEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBampCLEVBQTJqQmg3QixFQUFFLG1CQUFGLEVBQXNCLENBQUNBLEVBQUUsV0FBRixFQUFjLEVBQUNxTSxhQUFZLFlBQWIsRUFBMEIyQyxJQUFHLEVBQUMySyxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0QsZ0JBQUV3SSxLQUFGLENBQVEsUUFBUjtBQUFrQixhQUFyQyxFQUE3QixFQUFkLEVBQW1GLENBQUN4SSxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFMlosWUFBUCxDQUFMLENBQUQsQ0FBbkYsQ0FBRCxFQUFrSDNaLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBbEgsRUFBNEhoN0IsRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksWUFBYixFQUEwQjJDLElBQUcsRUFBQzJLLE9BQU1yYSxFQUFFNlosWUFBVCxFQUE3QixFQUFkLEVBQW1FLENBQUM3WixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFeVosUUFBUCxDQUFMLENBQUQsQ0FBbkUsQ0FBNUgsQ0FBdEIsRUFBZ1AsQ0FBaFAsQ0FBM2pCLENBQS9HLEVBQTg1QixDQUE5NUIsQ0FBUDtBQUF3NkIsT0FBeitCLEVBQTArQnpYLGlCQUFnQixFQUExL0IsRUFBVjtBQUF3Z0MsR0FOMWhGLEVBTTZoRixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksU0FBYixFQUF1Qm9ELE9BQU0sQ0FBQ25RLEVBQUUwRCxVQUFILEVBQWMxRCxFQUFFNFUsT0FBaEIsQ0FBN0IsRUFBc0QybUIsT0FBTSxFQUFDc0IsVUFBUyxHQUFWLEVBQTVELEVBQVIsRUFBb0YsQ0FBQ244QixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxtQkFBYixFQUFpQzJDLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDLGVBQUNELEVBQUUwSixRQUFILElBQWExSixFQUFFaVgsVUFBZixJQUEyQmpYLEVBQUU2SyxLQUFGLENBQVEsTUFBUixDQUEzQjtBQUEyQyxhQUE5RCxFQUFwQyxFQUFSLEVBQTZHLENBQUM3SyxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUE3RyxFQUErSCxDQUEvSCxDQUFELEVBQW1JM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFuSSxFQUE2STE3QixFQUFFZ1gsV0FBRixHQUFjdFcsRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksbUNBQWIsRUFBaUR3dUIsT0FBTSxFQUFDc0IsVUFBUyxJQUFWLEVBQXZELEVBQXVFbnRCLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDLGVBQUNELEVBQUUwSixRQUFILElBQWExSixFQUFFNkssS0FBRixDQUFRLFFBQVIsQ0FBYjtBQUErQixhQUFsRCxFQUExRSxFQUE4SGt5QixVQUFTLEVBQUNILE9BQU0sZUFBUzM4QixDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsQ0FBQ0QsRUFBRTBNLEVBQUYsQ0FBS3pNLEVBQUVzOEIsT0FBUCxFQUFlLFFBQWYsRUFBd0IsQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUF4QixDQUFmLEdBQStDLE1BQUssQ0FBQ3Y4QixFQUFFMEosUUFBSCxJQUFhMUosRUFBRTZLLEtBQUYsQ0FBUSxRQUFSLENBQWxCLENBQS9DLEdBQW9GLElBQTFGO0FBQStGLGFBQWxILEVBQXZJLEVBQWQsRUFBMFEsQ0FBQ25LLEVBQUUsU0FBRixFQUFZLEVBQUNxTSxhQUFZLGdCQUFiLEVBQVosRUFBMkMsQ0FBQy9NLEVBQUUwN0IsRUFBRixDQUFLLFFBQUwsQ0FBRCxDQUEzQyxDQUFELENBQTFRLEVBQXlVLENBQXpVLENBQWQsR0FBMFYxN0IsRUFBRTI3QixFQUFGLEVBQXZlLENBQXBGLEVBQW1rQixDQUFua0IsQ0FBUDtBQUE2a0IsT0FBOW9CLEVBQStvQjM1QixpQkFBZ0IsRUFBL3BCLEVBQVY7QUFBNnFCLEdBTnh0RyxFQU0ydEcsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLDBCQUFiLEVBQVIsRUFBaUQsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQWpELEVBQW1FLENBQW5FLENBQVA7QUFBNkUsT0FBOUksRUFBK0kzRyxpQkFBZ0IsRUFBL0osRUFBVjtBQUE2SyxHQU50NUcsRUFNeTVHLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLElBQUYsRUFBTyxFQUFDcU0sYUFBWSxjQUFiLEVBQTRCb0QsT0FBTW5RLEVBQUU0VSxPQUFwQyxFQUE0QzJtQixPQUFNLEVBQUM3eEIsVUFBUzFKLEVBQUUwSixRQUFaLEVBQWxELEVBQVAsRUFBZ0YsQ0FBQzFKLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELEVBQWlCM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFqQixFQUEyQmg3QixFQUFFLGVBQUYsRUFBa0IsRUFBQzY2QixPQUFNLEVBQUM3eEIsVUFBUzFKLEVBQUUwSixRQUFaLEVBQVAsRUFBbEIsQ0FBM0IsQ0FBaEYsRUFBNkosQ0FBN0osQ0FBUDtBQUF1SyxPQUF4TyxFQUF5TzFILGlCQUFnQixFQUF6UCxFQUFWO0FBQXVRLEdBTjlxSCxFQU1pckgsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHFCQUFiLEVBQW1Db0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUF6QyxFQUFrRTJtQixPQUFNLEVBQUNzQixVQUFTLEdBQVYsRUFBeEUsRUFBdUZudEIsSUFBRyxFQUFDa3RCLE9BQU0sZUFBUzM4QixDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsQ0FBQ0QsRUFBRTBNLEVBQUYsQ0FBS3pNLEVBQUVzOEIsT0FBUCxFQUFlLEtBQWYsRUFBcUIsRUFBckIsQ0FBZixJQUF5Q3Q4QixFQUFFdTdCLGVBQUYsSUFBb0IsS0FBS3g3QixFQUFFb1osVUFBRixDQUFhblosQ0FBYixDQUFsRSxJQUFtRixJQUF6RjtBQUE4RixhQUFqSCxFQUExRixFQUFSLEVBQXNOLENBQUNTLEVBQUUsS0FBRixFQUFRLEVBQUNra0IsS0FBSSxRQUFMLEVBQWM3WCxhQUFZLFdBQTFCLEVBQXNDb0QsT0FBTW5RLEVBQUU0WSxhQUE5QyxFQUE0RHhSLE9BQU1wSCxFQUFFOE0sTUFBcEUsRUFBUixFQUFvRixDQUFDOU0sRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBcEYsRUFBc0csQ0FBdEcsQ0FBRCxFQUEwRzNJLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBMUcsRUFBb0gxN0IsRUFBRXNZLFVBQUYsR0FBYTVYLEVBQUUsYUFBRixFQUFnQixFQUFDa2tCLEtBQUksVUFBTCxFQUFnQjdYLGFBQVksb0JBQTVCLEVBQWlEb0QsT0FBTW5RLEVBQUU0VSxPQUF6RCxFQUFpRWxGLElBQUcsRUFBQ2xILE9BQU0sZUFBU3ZJLENBQVQsRUFBVztBQUFDRCxnQkFBRW9ZLHFCQUFGLElBQXlCcFksRUFBRXdJLEtBQUYsRUFBekI7QUFBbUMsYUFBdEQsRUFBcEUsRUFBaEIsQ0FBYixHQUEySnhJLEVBQUUyN0IsRUFBRixFQUEvUSxDQUF0TixFQUE2ZSxDQUE3ZSxDQUFQO0FBQXVmLE9BQXhqQixFQUF5akIzNUIsaUJBQWdCLEVBQXprQixFQUFWO0FBQXVsQixHQU50eEksRUFNeXhJLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxpQkFBYixFQUFSLEVBQXdDLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUF4QyxFQUEwRCxDQUExRCxDQUFQO0FBQW9FLE9BQXJJLEVBQXNJM0csaUJBQWdCLEVBQXRKLEVBQVY7QUFBb0ssR0FOMzhJLEVBTTg4SSxVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxJQUFGLEVBQU8sRUFBQ3FNLGFBQVksU0FBYixFQUF1Qm9ELE9BQU0sQ0FBQ25RLEVBQUUwRCxVQUFILENBQTdCLEVBQVAsRUFBb0QsQ0FBQzFELEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQXBELEVBQXNFLENBQXRFLENBQVA7QUFBZ0YsT0FBakosRUFBa0ozRyxpQkFBZ0IsRUFBbEssRUFBVjtBQUFnTCxHQU41b0osRUFNK29KLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxTQUFiLEVBQXVCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUUyMUIsVUFBaEIsQ0FBN0IsRUFBUixFQUFrRSxDQUFDajFCLEVBQUUsZUFBRixFQUFrQixFQUFDa2tCLEtBQUksZUFBTCxFQUFxQjdYLGFBQVksb0JBQWpDLEVBQXNEb0QsT0FBTW5RLEVBQUVzbUIsaUJBQTlELEVBQWdGaVYsT0FBTSxFQUFDLFVBQVMsS0FBVixFQUFnQixnQkFBZXY3QixFQUFFcWxCLFdBQWpDLEVBQXRGLEVBQWxCLEVBQXVKLENBQUMza0IsRUFBRSxLQUFGLEVBQVEsRUFBQ2trQixLQUFJLGVBQUwsRUFBcUI3WCxhQUFZLDhCQUFqQyxFQUFnRTJDLElBQUcsRUFBQ3N0QixRQUFPaDlCLEVBQUV3MkIsc0JBQVYsRUFBbkUsRUFBUixFQUE4RyxDQUFDOTFCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHFDQUFiLEVBQVIsRUFBNEQsQ0FBQy9NLEVBQUVpOEIsRUFBRixDQUFLajhCLEVBQUVxMUIsT0FBUCxFQUFnQixVQUFTcDFCLENBQVQsRUFBVztBQUFDLGlCQUFPUyxFQUFFLFFBQUYsRUFBVyxFQUFDd1AsS0FBSWpRLEVBQUU2USxFQUFQLEVBQVU4VCxLQUFJLFdBQWQsRUFBMEJxWSxVQUFTLENBQUMsQ0FBcEMsRUFBc0Nsd0IsYUFBWSxlQUFsRCxFQUFrRW9ELE9BQU1uUSxFQUFFeW1CLGNBQUYsQ0FBaUJ4bUIsQ0FBakIsQ0FBeEUsRUFBNEZzN0IsT0FBTSxFQUFDOXhCLE1BQUssUUFBTixFQUFlQyxVQUFTekosRUFBRXlKLFFBQTFCLEVBQWxHLEVBQXNJZ0csSUFBRyxFQUFDMkssT0FBTSxlQUFTM1osQ0FBVCxFQUFXO0FBQUNWLGtCQUFFazFCLFlBQUYsQ0FBZWoxQixDQUFmO0FBQWtCLGVBQXJDLEVBQXpJLEVBQVgsRUFBNEwsQ0FBQ1MsRUFBRSxlQUFGLEVBQWtCLEVBQUM2NkIsT0FBTSxFQUFDLGVBQWN0N0IsRUFBRXlKLFFBQWpCLEVBQVAsRUFBbEIsQ0FBRCxFQUF1RDFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBdkQsRUFBaUVoN0IsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVkseUJBQWIsRUFBUixFQUFnRCxDQUFDOU0sRUFBRXVrQixJQUFGLEdBQU85akIsRUFBRSxTQUFGLEVBQVksQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUszN0IsRUFBRXVrQixJQUFQLENBQUwsQ0FBRCxDQUFaLENBQVAsR0FBeUN2a0IsRUFBRTgwQixPQUFGLEdBQVVyMEIsRUFBRSxTQUFGLEVBQVksRUFBQzY2QixPQUFNLEVBQUMsY0FBYXQ3QixFQUFFODBCLE9BQWhCLEVBQVAsRUFBWixFQUE2QyxDQUFDLzBCLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLMzdCLEVBQUV1a0IsSUFBUCxDQUFMLENBQUQsQ0FBN0MsQ0FBVixHQUE2RXhrQixFQUFFMjdCLEVBQUYsRUFBdkgsRUFBOEgzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE5SCxFQUF3SXo3QixFQUFFc2tCLEtBQUYsR0FBUTdqQixFQUFFLE1BQUYsRUFBUyxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzM3QixFQUFFc2tCLEtBQVAsQ0FBTCxDQUFELENBQVQsQ0FBUixHQUF3Q3ZrQixFQUFFMjdCLEVBQUYsRUFBaEwsRUFBdUwzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF2TCxFQUFpTXo3QixFQUFFd2tCLE9BQUYsR0FBVS9qQixFQUFFLFlBQUYsRUFBZSxFQUFDNjZCLE9BQU0sRUFBQyxnQkFBZXQ3QixFQUFFMGtCLGdCQUFsQixFQUFtQyxZQUFXMWtCLEVBQUV5a0IsWUFBaEQsRUFBUCxFQUFmLEVBQXFGLENBQUMxa0IsRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUszN0IsRUFBRXdrQixPQUFQLENBQUwsQ0FBRCxDQUFyRixDQUFWLEdBQXdIemtCLEVBQUUyN0IsRUFBRixFQUF6VCxDQUFoRCxFQUFpWCxDQUFqWCxDQUFqRSxDQUE1TCxFQUFrbkIsQ0FBbG5CLENBQVA7QUFBNG5CLFNBQXhwQixDQUFELEVBQTRwQjM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQTVwQixFQUFzcUJoN0IsRUFBRSxNQUFGLEVBQVMsRUFBQ2trQixLQUFJLFdBQUwsRUFBaUI3WCxhQUFZLGtCQUE3QixFQUFnRG9ELE9BQU1uUSxFQUFFdW1CLGdCQUF4RCxFQUFULENBQXRxQixDQUE1RCxFQUF1ekIsQ0FBdnpCLENBQUQsQ0FBOUcsQ0FBRCxFQUE0NkJ2bUIsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE1NkIsRUFBczdCMTdCLEVBQUVvMUIsWUFBRixJQUFnQnAxQixFQUFFdzFCLG1CQUFsQixHQUFzQzkwQixFQUFFLFFBQUYsRUFBVyxFQUFDcU0sYUFBWSx5Q0FBYixFQUF1RG9ELE9BQU1uUSxFQUFFNDFCLDJCQUEvRCxFQUEyRmxtQixJQUFHLEVBQUMySyxPQUFNcmEsRUFBRXkyQixvQkFBVCxFQUE5RixFQUFYLEVBQXlJLENBQUMvMUIsRUFBRSxTQUFGLEVBQVksQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUsscUJBQUwsQ0FBRCxDQUFaLENBQUQsQ0FBekksRUFBc0wsQ0FBdEwsQ0FBdEMsR0FBK04xN0IsRUFBRTI3QixFQUFGLEVBQXJwQyxFQUE0cEMzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE1cEMsRUFBc3FDMTdCLEVBQUVvMUIsWUFBRixJQUFnQnAxQixFQUFFdzFCLG1CQUFsQixHQUFzQzkwQixFQUFFLFFBQUYsRUFBVyxFQUFDcU0sYUFBWSwwQ0FBYixFQUF3RG9ELE9BQU1uUSxFQUFFNjFCLDRCQUFoRSxFQUE2Rm5tQixJQUFHLEVBQUMySyxPQUFNcmEsRUFBRTAyQixxQkFBVCxFQUFoRyxFQUFYLEVBQTRJLENBQUNoMkIsRUFBRSxTQUFGLEVBQVksQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUssc0JBQUwsQ0FBRCxDQUFaLENBQUQsQ0FBNUksRUFBMEwsQ0FBMUwsQ0FBdEMsR0FBbU8xN0IsRUFBRTI3QixFQUFGLEVBQXo0QyxDQUF2SixDQUFELEVBQTBpRDM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQTFpRCxFQUFvakRoN0IsRUFBRSxLQUFGLEVBQVEsRUFBQ2trQixLQUFJLFlBQUwsRUFBa0I3WCxhQUFZLGlCQUE5QixFQUFnRDNGLE9BQU0sRUFBQzRFLFFBQU9oTSxFQUFFa21CLGFBQVYsRUFBdEQsRUFBUixFQUF3RixDQUFDeGxCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGlCQUFiLEVBQStCM0YsT0FBTSxFQUFDeVIsV0FBVSxrQkFBZ0I3WSxFQUFFbW1CLFlBQWxCLEdBQStCLFNBQTFDLEVBQXJDLEVBQVIsRUFBbUcsQ0FBQ25tQixFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFuRyxFQUFxSCxDQUFySCxDQUFELENBQXhGLENBQXBqRCxDQUFsRSxFQUEwMEQsQ0FBMTBELENBQVA7QUFBbzFELE9BQXI1RCxFQUFzNUQzRyxpQkFBZ0IsRUFBdDZELEVBQVY7QUFBbzdELEdBTmpsTixFQU1vbE4sVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLFlBQWIsRUFBMEJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTB2QixZQUFoQixDQUFoQyxFQUFSLEVBQXVFLENBQUMxdkIsRUFBRWdRLFVBQUYsR0FBYWhRLEVBQUUyN0IsRUFBRixFQUFiLEdBQW9CajdCLEVBQUUsZUFBRixFQUFrQixFQUFDa2tCLEtBQUksZ0JBQUwsRUFBc0I3WCxhQUFZLHFCQUFsQyxFQUF3RG9ELE9BQU1uUSxFQUFFc21CLGlCQUFoRSxFQUFrRmlWLE9BQU0sRUFBQyxVQUFTLEtBQVYsRUFBZ0IsZ0JBQWV2N0IsRUFBRXFsQixXQUFqQyxFQUF4RixFQUFsQixFQUF5SixDQUFDM2tCLEVBQUUsMEJBQUYsRUFBNkIsRUFBQ2trQixLQUFJLFlBQUwsRUFBa0IyVyxPQUFNLEVBQUMsZUFBY3Y3QixFQUFFZ1EsVUFBakIsRUFBeEIsRUFBN0IsRUFBbUZoUSxFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFeXZCLFFBQVAsRUFBaUIsVUFBU3h2QixDQUFULEVBQVdRLENBQVgsRUFBYTtBQUFDLGlCQUFPQyxFQUFFLGdCQUFGLEVBQW1CLEVBQUN3UCxLQUFJalEsRUFBRTZRLEVBQVAsRUFBVXlxQixPQUFNLEVBQUNwTSxNQUFLbHZCLENBQU4sRUFBUSx1QkFBc0JELEVBQUVvdkIsaUJBQWhDLEVBQWhCLEVBQW1FMWYsSUFBRyxFQUFDMkssT0FBTSxlQUFTM1osQ0FBVCxFQUFXO0FBQUNWLGtCQUFFK3VCLGFBQUYsQ0FBZ0I5dUIsQ0FBaEI7QUFBbUIsZUFBdEMsRUFBdEUsRUFBbkIsQ0FBUDtBQUEwSSxTQUF6SyxDQUFuRixDQUFELENBQXpKLEVBQTJaLENBQTNaLENBQXJCLEVBQW1iRCxFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQW5iLEVBQTZiaDdCLEVBQUUsZUFBRixFQUFrQixFQUFDNjZCLE9BQU0sRUFBQyxnQkFBZXY3QixFQUFFcWxCLFdBQWxCLEVBQVAsRUFBbEIsRUFBeUQsQ0FBQ3JsQixFQUFFZ1EsVUFBRixHQUFhaFEsRUFBRTI3QixFQUFGLEVBQWIsR0FBb0JqN0IsRUFBRSxLQUFGLEVBQVEsRUFBQ2trQixLQUFJLGFBQUwsRUFBbUI3WCxhQUFZLG9CQUEvQixFQUFvRDNGLE9BQU0sRUFBQzRFLFFBQU9oTSxFQUFFa21CLGFBQVYsRUFBMUQsRUFBUixFQUE0RixDQUFDeGxCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGtCQUFiLEVBQWdDM0YsT0FBTSxFQUFDeVIsV0FBVSxrQkFBZ0I3WSxFQUFFbW1CLFlBQWxCLEdBQStCLFNBQTFDLEVBQXRDLEVBQVIsRUFBb0csQ0FBQ25tQixFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFwRyxFQUFzSCxDQUF0SCxDQUFELENBQTVGLENBQXJCLEVBQTZPM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE3TyxFQUF1UDE3QixFQUFFZ1EsVUFBRixHQUFhdFAsRUFBRSxLQUFGLEVBQVEsRUFBQ2trQixLQUFJLGFBQUwsRUFBbUI3WCxhQUFZLDZCQUEvQixFQUFSLEVBQXNFLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUF0RSxFQUF3RixDQUF4RixDQUFiLEdBQXdHM0ksRUFBRTI3QixFQUFGLEVBQS9WLENBQXpELENBQTdiLENBQXZFLEVBQXM2QixDQUF0NkIsQ0FBUDtBQUFnN0IsT0FBai9CLEVBQWsvQjM1QixpQkFBZ0IsRUFBbGdDLEVBQVY7QUFBZ2hDLEdBTmxuUCxFQU1xblAsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLG1CQUFiLEVBQVIsRUFBMEMsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQTFDLEVBQTRELENBQTVELENBQVA7QUFBc0UsT0FBdkksRUFBd0kzRyxpQkFBZ0IsRUFBeEosRUFBVjtBQUFzSyxHQU56eVAsRUFNNHlQLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxZQUFiLEVBQTBCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBaEMsRUFBUixFQUF3RCxDQUFDMUQsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBeEQsRUFBMEUsQ0FBMUUsQ0FBUDtBQUFvRixPQUFySixFQUFzSjNHLGlCQUFnQixFQUF0SyxFQUFWO0FBQW9MLEdBTjkrUCxFQU1pL1AsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsSUFBRixFQUFPLEVBQUNxTSxhQUFZLGNBQWIsRUFBNEJvRCxPQUFNblEsRUFBRTRVLE9BQXBDLEVBQVAsRUFBb0QsQ0FBQ2xVLEVBQUUsR0FBRixFQUFNLEVBQUNxTSxhQUFZLGtDQUFiLEVBQWdEd3VCLE9BQU0sRUFBQzlyQixNQUFLelAsRUFBRXlQLElBQVIsRUFBYTZGLFFBQU90VixFQUFFc1YsTUFBdEIsRUFBNkI1TCxVQUFTMUosRUFBRTBKLFFBQXhDLEVBQXRELEVBQXdHZ0csSUFBRyxFQUFDMkssT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNELGdCQUFFNkssS0FBRixDQUFRLE9BQVIsRUFBZ0I1SyxDQUFoQjtBQUFtQixhQUF0QyxFQUEzRyxFQUFOLEVBQTBKLENBQUNELEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQTFKLEVBQTRLLENBQTVLLENBQUQsRUFBZ0wzSSxFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWhMLEVBQTBMaDdCLEVBQUUsZUFBRixFQUFrQixFQUFDNjZCLE9BQU0sRUFBQzd4QixVQUFTMUosRUFBRTBKLFFBQVosRUFBUCxFQUFsQixDQUExTCxDQUFwRCxFQUFnUyxDQUFoUyxDQUFQO0FBQTBTLE9BQTNXLEVBQTRXMUgsaUJBQWdCLEVBQTVYLEVBQVY7QUFBMFksR0FOejRRLEVBTTQ0USxVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksZ0JBQWIsRUFBOEJvRCxPQUFNblEsRUFBRXN2QixnQkFBdEMsRUFBUixFQUFnRSxDQUFDNXVCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGVBQWIsRUFBUixFQUFzQyxDQUFDL00sRUFBRXdrQixJQUFGLEdBQU85akIsRUFBRSxTQUFGLEVBQVksRUFBQ3FNLGFBQVksY0FBYixFQUFaLEVBQXlDLENBQUMvTSxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFd2tCLElBQVAsQ0FBTCxDQUFELENBQXpDLENBQVAsR0FBc0V4a0IsRUFBRTI3QixFQUFGLEVBQXZFLEVBQThFMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBOUUsRUFBd0YxN0IsRUFBRXdrQixJQUFGLEdBQU94a0IsRUFBRTI3QixFQUFGLEVBQVAsR0FBY2o3QixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxnQkFBYixFQUFSLEVBQXVDLENBQUNyTSxFQUFFLE1BQUYsRUFBUyxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFd3ZCLFVBQVAsQ0FBTCxDQUFELENBQVQsQ0FBRCxDQUF2QyxDQUF0RyxDQUF0QyxFQUE0TixDQUE1TixDQUFELEVBQWdPeHZCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBaE8sRUFBME9oN0IsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksZ0JBQWIsRUFBUixFQUF1QyxDQUFDck0sRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksZUFBYixFQUFSLEVBQXNDLENBQUMvTSxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFbXZCLElBQUYsQ0FBTzVLLEtBQVosQ0FBTCxDQUFELENBQXRDLENBQUQsRUFBbUV2a0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFuRSxFQUE2RTE3QixFQUFFbXZCLElBQUYsQ0FBT1QsT0FBUCxHQUFlaHVCLEVBQUUsT0FBRixFQUFVLENBQUNWLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUVtdkIsSUFBRixDQUFPVCxPQUFaLENBQUwsQ0FBRCxDQUFWLENBQWYsR0FBdUQxdUIsRUFBRTI3QixFQUFGLEVBQXBJLENBQXZDLENBQTFPLEVBQThaMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBOVosRUFBd2ExN0IsRUFBRW12QixJQUFGLENBQU9QLE9BQVAsR0FBZWx1QixFQUFFLFlBQUYsRUFBZSxFQUFDNjZCLE9BQU0sRUFBQyxnQkFBZXY3QixFQUFFbXZCLElBQUYsQ0FBT3hLLGdCQUF2QixFQUF3QyxZQUFXM2tCLEVBQUVtdkIsSUFBRixDQUFPekssWUFBMUQsRUFBUCxFQUFmLEVBQStGLENBQUMxa0IsRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRW12QixJQUFGLENBQU9QLE9BQVosQ0FBTCxDQUFELENBQS9GLENBQWYsR0FBNEk1dUIsRUFBRTI3QixFQUFGLEVBQXBqQixDQUFoRSxFQUE0bkIsQ0FBNW5CLENBQVA7QUFBc29CLE9BQXZzQixFQUF3c0IzNUIsaUJBQWdCLEVBQXh0QixFQUFWO0FBQXN1QixHQU5ob1MsRUFNbW9TLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxVQUFiLEVBQXdCM0YsT0FBTXBILEVBQUU4TSxNQUFoQyxFQUF1Q3l1QixPQUFNLEVBQUN6cUIsSUFBRzlRLEVBQUVva0IsT0FBTixFQUE3QyxFQUFSLEVBQXFFLENBQUNwa0IsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBckUsRUFBdUYsQ0FBdkYsQ0FBUDtBQUFpRyxPQUFsSyxFQUFtSzNHLGlCQUFnQixFQUFuTCxFQUFWO0FBQWlNLEdBTmwxUyxFQU1xMVMsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsSUFBRixFQUFPLEVBQUNxTSxhQUFZLGNBQWIsRUFBNEJvRCxPQUFNblEsRUFBRTRVLE9BQXBDLEVBQTRDbEYsSUFBRyxFQUFDMkssT0FBTXJhLEVBQUV1MEIsVUFBVCxFQUEvQyxFQUFvRXdJLFVBQVMsRUFBQzFpQixPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0QsZ0JBQUV1MEIsVUFBRixDQUFhdDBCLENBQWI7QUFBZ0IsYUFBbkMsRUFBN0UsRUFBUCxFQUEwSCxDQUFDRCxFQUFFbTBCLFlBQUYsR0FBZXp6QixFQUFFLGVBQUYsRUFBa0IsRUFBQ3FNLGFBQVksb0JBQWIsRUFBbEIsRUFBcUQsQ0FBQ3JNLEVBQUUsYUFBRixFQUFnQixFQUFDNjZCLE9BQU0sRUFBQzd4QixVQUFTMUosRUFBRWdMLFVBQVosRUFBUCxFQUErQjBFLElBQUcsRUFBQ21zQixRQUFPNzdCLEVBQUVzMEIsTUFBVixFQUFsQyxFQUFvRHlJLFVBQVMsRUFBQ2xCLFFBQU8sZ0JBQVM1N0IsQ0FBVCxFQUFXO0FBQUNELGdCQUFFczBCLE1BQUYsQ0FBU3IwQixDQUFUO0FBQVksYUFBaEMsRUFBN0QsRUFBK0Y2N0IsT0FBTSxFQUFDMzRCLE9BQU1uRCxFQUFFaTBCLFFBQVQsRUFBa0I4SCxVQUFTLGtCQUFTOTdCLENBQVQsRUFBVztBQUFDRCxnQkFBRWkwQixRQUFGLEdBQVdoMEIsQ0FBWDtBQUFhLGFBQXBELEVBQXFEKzdCLFlBQVcsVUFBaEUsRUFBckcsRUFBaEIsQ0FBRCxDQUFyRCxFQUEwUCxDQUExUCxDQUFmLEdBQTRRaDhCLEVBQUUyN0IsRUFBRixFQUE3USxFQUFvUjM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQXBSLEVBQThSMTdCLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUE5UixDQUExSCxFQUF5YSxDQUF6YSxDQUFQO0FBQW1iLE9BQXBmLEVBQXFmM0csaUJBQWdCLEVBQXJnQixFQUFWO0FBQW1oQixHQU50M1QsRUFNeTNULFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxlQUFiLEVBQTZCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBbkMsRUFBa0Q2M0IsT0FBTSxFQUFDN3hCLFVBQVMxSixFQUFFMEosUUFBWixFQUF4RCxFQUFSLEVBQXVGLENBQUMxSixFQUFFb3BCLFlBQUYsR0FBZTFvQixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxlQUFiLEVBQVIsRUFBc0MvTSxFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFNm9CLFdBQVAsRUFBb0IsVUFBUzVvQixDQUFULEVBQVc7QUFBQyxpQkFBT0QsRUFBRW9wQixZQUFGLEdBQWUxb0IsRUFBRSxTQUFGLEVBQVksRUFBQ3dQLEtBQUlqUSxDQUFMLEVBQU9rUSxPQUFNLENBQUNuUSxFQUFFd3BCLFdBQUgsQ0FBYixFQUE2QitSLE9BQU0sRUFBQyxVQUFTdjdCLEVBQUVvcEIsWUFBWixFQUFuQyxFQUE2RDJULFVBQVMsRUFBQ0csV0FBVSxtQkFBU2o5QixDQUFULEVBQVc7QUFBQ0Qsa0JBQUUwcEIsVUFBRixDQUFhenBCLENBQWI7QUFBZ0IsZUFBdkMsRUFBd0NvYSxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0Qsa0JBQUU2cEIsVUFBRixDQUFhNXBCLENBQWI7QUFBZ0IsZUFBMUUsRUFBMkVrOUIsVUFBUyxrQkFBU2w5QixDQUFULEVBQVc7QUFBQ0Qsa0JBQUVncUIsVUFBRixDQUFhL3BCLENBQWI7QUFBZ0IsZUFBaEgsRUFBdEUsRUFBWixDQUFmLEdBQXFORCxFQUFFMjdCLEVBQUYsRUFBNU47QUFBbU8sU0FBblEsQ0FBdEMsQ0FBZixHQUE0VGo3QixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxlQUFiLEVBQVIsRUFBc0MvTSxFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFNm9CLFdBQVAsRUFBb0IsVUFBUzVvQixDQUFULEVBQVc7QUFBQyxpQkFBT1MsRUFBRSxTQUFGLEVBQVksRUFBQ3dQLEtBQUlqUSxDQUFMLEVBQU9rUSxPQUFNLENBQUNuUSxFQUFFd3BCLFdBQUgsQ0FBYixFQUE2QitSLE9BQU0sRUFBQyxjQUFhdjdCLEVBQUVncEIsY0FBaEIsRUFBbkMsRUFBbUV5UyxVQUFTLEVBQUNlLFdBQVV4OEIsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRXNwQixTQUFQLENBQVgsRUFBNUUsRUFBMEd5VCxVQUFTLEVBQUNHLFdBQVUsbUJBQVNqOUIsQ0FBVCxFQUFXO0FBQUNELGtCQUFFMHBCLFVBQUYsQ0FBYXpwQixDQUFiO0FBQWdCLGVBQXZDLEVBQXdDb2EsT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNELGtCQUFFNnBCLFVBQUYsQ0FBYTVwQixDQUFiO0FBQWdCLGVBQTFFLEVBQTJFazlCLFVBQVMsa0JBQVNsOUIsQ0FBVCxFQUFXO0FBQUNELGtCQUFFZ3FCLFVBQUYsQ0FBYS9wQixDQUFiO0FBQWdCLGVBQWhILEVBQW5ILEVBQVosQ0FBUDtBQUEwUCxTQUExUixDQUF0QyxDQUE3VCxFQUFpb0JELEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBam9CLEVBQTJvQjE3QixFQUFFbXBCLFdBQUYsR0FBY3pvQixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxjQUFiLEVBQTRCM0YsT0FBTXBILEVBQUV5cEIsYUFBcEMsRUFBUixFQUEyRHpwQixFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFNm9CLFdBQVAsRUFBb0IsVUFBUzVvQixDQUFULEVBQVc7QUFBQyxpQkFBT0QsRUFBRW1wQixXQUFGLEdBQWN6b0IsRUFBRSxTQUFGLEVBQVksRUFBQ3dQLEtBQUlqUSxDQUFMLEVBQU9rUSxPQUFNLENBQUNuUSxFQUFFd3BCLFdBQUgsQ0FBYixFQUE2QitSLE9BQU0sRUFBQyxVQUFTdjdCLEVBQUVtcEIsV0FBWixFQUFuQyxFQUE0RDRULFVBQVMsRUFBQ0csV0FBVSxtQkFBU2o5QixDQUFULEVBQVc7QUFBQ0Qsa0JBQUUwcEIsVUFBRixDQUFhenBCLENBQWI7QUFBZ0IsZUFBdkMsRUFBd0NvYSxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0Qsa0JBQUU2cEIsVUFBRixDQUFhNXBCLENBQWI7QUFBZ0IsZUFBMUUsRUFBMkVrOUIsVUFBUyxrQkFBU2w5QixDQUFULEVBQVc7QUFBQ0Qsa0JBQUVncUIsVUFBRixDQUFhL3BCLENBQWI7QUFBZ0IsZUFBaEgsRUFBckUsRUFBWixDQUFkLEdBQW1ORCxFQUFFMjdCLEVBQUYsRUFBMU47QUFBaU8sU0FBalEsQ0FBM0QsQ0FBZCxHQUE4VWo3QixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxjQUFiLEVBQTRCM0YsT0FBTXBILEVBQUV5cEIsYUFBcEMsRUFBUixFQUEyRHpwQixFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFNm9CLFdBQVAsRUFBb0IsVUFBUzVvQixDQUFULEVBQVc7QUFBQyxpQkFBT1MsRUFBRSxTQUFGLEVBQVksRUFBQ3dQLEtBQUlqUSxDQUFMLEVBQU9rUSxPQUFNLENBQUNuUSxFQUFFd3BCLFdBQUgsQ0FBYixFQUE2QitSLE9BQU0sRUFBQyxjQUFhdjdCLEVBQUUrb0IsYUFBaEIsRUFBbkMsRUFBa0UwUyxVQUFTLEVBQUNlLFdBQVV4OEIsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRXVwQixRQUFQLENBQVgsRUFBM0UsRUFBd0d3VCxVQUFTLEVBQUNHLFdBQVUsbUJBQVNqOUIsQ0FBVCxFQUFXO0FBQUNELGtCQUFFMHBCLFVBQUYsQ0FBYXpwQixDQUFiO0FBQWdCLGVBQXZDLEVBQXdDb2EsT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNELGtCQUFFNnBCLFVBQUYsQ0FBYTVwQixDQUFiO0FBQWdCLGVBQTFFLEVBQTJFazlCLFVBQVMsa0JBQVNsOUIsQ0FBVCxFQUFXO0FBQUNELGtCQUFFZ3FCLFVBQUYsQ0FBYS9wQixDQUFiO0FBQWdCLGVBQWhILEVBQWpILEVBQVosQ0FBUDtBQUF3UCxTQUF4UixDQUEzRCxDQUF6OUIsQ0FBdkYsQ0FBUDtBQUFnNUMsT0FBajlDLEVBQWs5QytCLGlCQUFnQixFQUFsK0MsRUFBVjtBQUFnL0MsR0FOdjNXLEVBTTAzVyxVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxJQUFGLEVBQU8sRUFBQ3FNLGFBQVksY0FBYixFQUFQLEVBQW9DLENBQUNyTSxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSx3QkFBYixFQUFSLEVBQStDLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUEvQyxFQUFpRSxDQUFqRSxDQUFELENBQXBDLENBQVA7QUFBa0gsT0FBbkwsRUFBb0wzRyxpQkFBZ0IsRUFBcE0sRUFBVjtBQUFrTixHQU4xbFgsRUFNNmxYLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxXQUFiLEVBQXlCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBL0IsRUFBUixFQUF1RCxDQUFDMUQsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBdkQsRUFBeUUsQ0FBekUsQ0FBUDtBQUFtRixPQUFwSixFQUFxSjNHLGlCQUFnQixFQUFySyxFQUFWO0FBQW1MLEdBTjl4WCxFQU1peVgsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGVBQWIsRUFBNkJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTRVLE9BQWhCLENBQW5DLEVBQVIsRUFBcUUsQ0FBQzVVLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQXJFLEVBQXVGLENBQXZGLENBQVA7QUFBaUcsT0FBbEssRUFBbUszRyxpQkFBZ0IsRUFBbkwsRUFBVjtBQUFpTSxHQU5oL1gsRUFNbS9YLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxTQUFiLEVBQXVCMkMsSUFBRyxFQUFDMkssT0FBTXJhLEVBQUVrYSxVQUFULEVBQTFCLEVBQVIsRUFBd0QsQ0FBQ3haLEVBQUUsVUFBRixFQUFhLEVBQUNra0IsS0FBSSxXQUFMLEVBQWlCMlcsT0FBTSxFQUFDeHhCLFVBQVMsRUFBVixFQUFhSCxVQUFTNUosRUFBRTRKLFFBQXhCLEVBQWlDRSxhQUFZOUosRUFBRThKLFdBQS9DLEVBQTJESixVQUFTMUosRUFBRTBKLFFBQXRFLEVBQXZCLEVBQXVHb3lCLE9BQU0sRUFBQzM0QixPQUFNbkQsRUFBRWdhLFFBQVQsRUFBa0IraEIsVUFBUyxrQkFBUzk3QixDQUFULEVBQVc7QUFBQ0QsZ0JBQUVnYSxRQUFGLEdBQVcvWixDQUFYO0FBQWEsYUFBcEQsRUFBcUQrN0IsWUFBVyxVQUFoRSxFQUE3RyxFQUFiLENBQUQsRUFBeU1oOEIsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF6TSxFQUFtTmg3QixFQUFFLFNBQUYsRUFBWSxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSyxhQUFMLENBQUQsQ0FBWixDQUFuTixFQUFzUDE3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQXRQLEVBQWdRaDdCLEVBQUUsT0FBRixFQUFVLEVBQUNra0IsS0FBSSxXQUFMLEVBQWlCMlcsT0FBTSxFQUFDOXhCLE1BQUssTUFBTixFQUFhcUgsSUFBRzlRLEVBQUU4USxFQUFsQixFQUFxQjlJLE1BQUtoSSxFQUFFZ0ksSUFBNUIsRUFBaUMwQixVQUFTMUosRUFBRTBKLFFBQTVDLEVBQXFEcVEsVUFBUy9aLEVBQUUrWixRQUFoRSxFQUF5RUQsUUFBTzlaLEVBQUU4WixNQUFsRixFQUF2QixFQUFpSHBLLElBQUcsRUFBQ21zQixRQUFPNzdCLEVBQUV1YSxjQUFWLEVBQXBILEVBQVYsQ0FBaFEsQ0FBeEQsRUFBbWQsQ0FBbmQsQ0FBUDtBQUE2ZCxPQUE5aEIsRUFBK2hCdlksaUJBQWdCLEVBQS9pQixFQUFWO0FBQTZqQixHQU45alosRUFNaWtaLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxZQUFiLEVBQTBCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUFoQyxFQUF5RDJtQixPQUFNLEVBQUNzQixVQUFTLEdBQVYsRUFBL0QsRUFBOEVudEIsSUFBRyxFQUFDa3RCLE9BQU0sZUFBUzM4QixDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsQ0FBQ0QsRUFBRTBNLEVBQUYsQ0FBS3pNLEVBQUVzOEIsT0FBUCxFQUFlLEtBQWYsRUFBcUIsRUFBckIsQ0FBZixHQUF3QyxLQUFLdjhCLEVBQUV3SSxLQUFGLENBQVF2SSxDQUFSLENBQTdDLEdBQXdELElBQTlEO0FBQW1FLGFBQXRGLEVBQWpGLEVBQVIsRUFBa0wsQ0FBQ1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksb0JBQWIsRUFBUixFQUEyQyxDQUFDL00sRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBM0MsRUFBNkQsQ0FBN0QsQ0FBRCxFQUFpRTNJLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBakUsRUFBMkVoN0IsRUFBRSxhQUFGLEVBQWdCLEVBQUNra0IsS0FBSSxVQUFMLEVBQWdCN1gsYUFBWSxxQkFBNUIsRUFBa0QyQyxJQUFHLEVBQUNsSCxPQUFNeEksRUFBRXdJLEtBQVQsRUFBckQsRUFBaEIsQ0FBM0UsQ0FBbEwsRUFBcVYsQ0FBclYsQ0FBUDtBQUErVixPQUFoYSxFQUFpYXhHLGlCQUFnQixFQUFqYixFQUFWO0FBQStiLEdBTjlnYSxFQU1paGEsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHFCQUFiLEVBQVIsRUFBNEMsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQTVDLEVBQThELENBQTlELENBQVA7QUFBd0UsT0FBekksRUFBMEkzRyxpQkFBZ0IsRUFBMUosRUFBVjtBQUF3SyxHQU52c2EsRUFNMHNhLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxTQUFiLEVBQXVCM0YsT0FBTXBILEVBQUU4TSxNQUEvQixFQUFzQ3l1QixPQUFNLEVBQUN6cUIsSUFBRzlRLEVBQUUrdEIsTUFBTixFQUE1QyxFQUFSLEVBQW1FLENBQUMvdEIsRUFBRWd1QixRQUFGLEdBQVd0dEIsRUFBRSxnQkFBRixFQUFtQixFQUFDNjZCLE9BQU0sRUFBQ3BNLE1BQUtudkIsRUFBRXl1QixXQUFGLEVBQU4sRUFBUCxFQUE4Qi9lLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDRCxnQkFBRSt1QixhQUFGO0FBQWtCLGFBQXJDLEVBQWpDLEVBQW5CLENBQVgsR0FBd0cvdUIsRUFBRTI3QixFQUFGLEVBQXpHLEVBQWdIMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBaEgsRUFBMEgsQ0FBQzE3QixFQUFFZ3VCLFFBQUgsSUFBYWh1QixFQUFFZ3VCLFFBQUYsSUFBWWh1QixFQUFFdXVCLGFBQTNCLEdBQXlDN3RCLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGlCQUFiLEVBQVIsRUFBd0MsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELEVBQWlCM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFqQixFQUEyQixDQUFDMTdCLEVBQUVndUIsUUFBSCxJQUFhaHVCLEVBQUVndUIsUUFBRixJQUFZaHVCLEVBQUV1dUIsYUFBM0IsR0FBeUM3dEIsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksaUJBQWIsRUFBUixFQUF3QyxDQUFDck0sRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksc0JBQWIsRUFBb0N3dUIsT0FBTSxFQUFDN3hCLFVBQVMsQ0FBQzFKLEVBQUUydEIsVUFBYixFQUExQyxFQUFtRWplLElBQUcsRUFBQzJLLE9BQU1yYSxFQUFFNnVCLFlBQVQsRUFBdEUsRUFBZCxFQUE0RyxDQUFDN3VCLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUVxdUIsWUFBUCxDQUFMLENBQUQsQ0FBNUcsQ0FBRCxFQUEySXJ1QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQTNJLEVBQXFKaDdCLEVBQUUsV0FBRixFQUFjLEVBQUM2NkIsT0FBTSxFQUFDN3hCLFVBQVMsQ0FBQzFKLEVBQUVrdUIsU0FBYixFQUFQLEVBQStCeGUsSUFBRyxFQUFDMkssT0FBTXJhLEVBQUU4dUIsZ0JBQVQsRUFBbEMsRUFBZCxFQUE0RSxDQUFDOXVCLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUV5dEIsWUFBUCxDQUFMLENBQUQsQ0FBNUUsQ0FBckosQ0FBeEMsRUFBd1MsQ0FBeFMsQ0FBekMsR0FBb1Z6dEIsRUFBRTI3QixFQUFGLEVBQS9XLENBQXhDLEVBQStaLENBQS9aLENBQXpDLEdBQTJjMzdCLEVBQUUyN0IsRUFBRixFQUFya0IsQ0FBbkUsRUFBZ3BCLENBQWhwQixDQUFQO0FBQTBwQixPQUEzdEIsRUFBNHRCMzVCLGlCQUFnQixFQUE1dUIsRUFBVjtBQUEwdkIsR0FObDliLEVBTXE5YixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxvQkFBRixFQUF1QixFQUFDcU0sYUFBWSxVQUFiLEVBQXdCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUE5QixFQUF1RGxGLElBQUcsRUFBQzJLLE9BQU1yYSxFQUFFMlgsZUFBVCxFQUExRCxFQUF2QixFQUE0RyxDQUFDM1gsRUFBRWk4QixFQUFGLENBQUtqOEIsRUFBRXlYLGFBQVAsRUFBc0IsVUFBU3hYLENBQVQsRUFBVztBQUFDLGlCQUFPUyxFQUFFLFNBQUYsRUFBWSxFQUFDd1AsS0FBSWpRLENBQUwsRUFBT3M3QixPQUFNLEVBQUMsZUFBYyxDQUFDdjdCLEVBQUVzWCxRQUFsQixFQUEyQixnQkFBZSxDQUFDdFgsRUFBRXNYLFFBQTdDLEVBQXNENU4sVUFBUzFKLEVBQUUwSixRQUFqRSxFQUFiLEVBQXdGZ0csSUFBRyxFQUFDMHRCLE1BQUssY0FBUzE4QixDQUFULEVBQVc7QUFBQ1Ysa0JBQUVpWSxRQUFGLENBQVdoWSxDQUFYO0FBQWMsZUFBaEMsRUFBaUN5TyxRQUFPLGlCQUFTaE8sQ0FBVCxFQUFXO0FBQUNWLGtCQUFFZ1ksVUFBRixDQUFhL1gsQ0FBYjtBQUFnQixlQUFwRSxFQUEzRixFQUFaLEVBQThLLENBQUNELEVBQUUySSxFQUFGLENBQUssTUFBTCxFQUFZLENBQUMzSSxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzM3QixDQUFMLENBQUwsQ0FBRCxDQUFaLEVBQTRCLEVBQUNrRCxPQUFNbEQsQ0FBUCxFQUE1QixDQUFELENBQTlLLEVBQXVOLENBQXZOLENBQVA7QUFBaU8sU0FBblEsQ0FBRCxFQUF1UUQsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF2USxFQUFpUmg3QixFQUFFLFVBQUYsRUFBYSxFQUFDKzdCLFlBQVcsQ0FBQyxFQUFDejBCLE1BQUssTUFBTixFQUFhMDBCLFNBQVEsUUFBckIsRUFBOEJ2NUIsT0FBTSxDQUFDbkQsRUFBRXNYLFFBQXZDLEVBQWdEMGtCLFlBQVcsV0FBM0QsRUFBRCxDQUFaLEVBQXNGcFgsS0FBSSxPQUExRixFQUFrRzJXLE9BQU0sRUFBQzl4QixNQUFLekosRUFBRXFYLFdBQVIsRUFBb0J2TixhQUFZOUosRUFBRW9YLGtCQUFsQyxFQUFxRHRHLElBQUc5USxFQUFFMFgsT0FBMUQsRUFBa0UxUCxNQUFLaEksRUFBRW1YLFdBQXpFLEVBQXFGek4sVUFBUzFKLEVBQUUwSixRQUFoRyxFQUF5R216QixVQUFTLEdBQWxILEVBQXNIcnpCLFVBQVMsQ0FBL0gsRUFBeEcsRUFBME91ekIsVUFBUyxFQUFDVCxTQUFRLENBQUMsVUFBU3I4QixDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsQ0FBQ0QsRUFBRTBNLEVBQUYsQ0FBS3pNLEVBQUVzOEIsT0FBUCxFQUFlLFFBQWYsRUFBd0IsQ0FBQyxDQUFELEVBQUcsRUFBSCxDQUF4QixDQUFmLEdBQStDLEtBQUt2OEIsRUFBRWtZLGNBQUYsQ0FBaUJqWSxDQUFqQixDQUFwRCxHQUF3RSxJQUE5RTtBQUFtRixhQUFoRyxFQUFpRyxVQUFTQSxDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsQ0FBQ0QsRUFBRTBNLEVBQUYsQ0FBS3pNLEVBQUVzOEIsT0FBUCxFQUFlLE9BQWYsRUFBdUIsRUFBdkIsQ0FBZixJQUEyQ3Q4QixFQUFFNjhCLGNBQUYsSUFBbUIsS0FBSzk4QixFQUFFOFgsT0FBRixDQUFVN1gsQ0FBVixDQUFuRSxJQUFpRixJQUF2RjtBQUE0RixhQUF6TSxFQUEwTSxVQUFTQSxDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsUUFBTUEsRUFBRXM4QixPQUF0QixJQUErQnQ4QixFQUFFNjhCLGNBQUYsSUFBbUIsS0FBSzk4QixFQUFFOFgsT0FBRixDQUFVN1gsQ0FBVixDQUF2RCxJQUFxRSxJQUEzRTtBQUFnRixhQUF0UyxDQUFULEVBQW5QLEVBQXFpQjY3QixPQUFNLEVBQUMzNEIsT0FBTW5ELEVBQUV3WCxXQUFULEVBQXFCdWtCLFVBQVMsa0JBQVM5N0IsQ0FBVCxFQUFXO0FBQUNELGdCQUFFd1gsV0FBRixHQUFjdlgsQ0FBZDtBQUFnQixhQUExRCxFQUEyRCs3QixZQUFXLGFBQXRFLEVBQTNpQixFQUFiLENBQWpSLEVBQWc2Qmg4QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWg2QixFQUEwNkIxN0IsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQTE2QixDQUE1RyxFQUF1aUMsQ0FBdmlDLENBQVA7QUFBaWpDLE9BQWxuQyxFQUFtbkMzRyxpQkFBZ0IsRUFBbm9DLEVBQVY7QUFBaXBDLEdBTnBuZSxFQU11bmUsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsV0FBRixFQUFjLEVBQUNra0IsS0FBSSxRQUFMLEVBQWM3WCxhQUFZLGlCQUExQixFQUE0QzJDLElBQUcsRUFBQ2xILE9BQU0sZUFBU3ZJLENBQVQsRUFBVztBQUFDRCxnQkFBRTBaLGNBQUY7QUFBbUIsYUFBdEMsRUFBL0MsRUFBZCxFQUFzRyxDQUFDMVosRUFBRXNaLE9BQUYsR0FBVTVZLEVBQUUsaUJBQUYsRUFBb0IsQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRXNaLE9BQVAsQ0FBTCxDQUFELENBQXBCLENBQVYsR0FBdUR0WixFQUFFMjdCLEVBQUYsRUFBeEQsRUFBK0QzN0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUEvRCxFQUF5RTE3QixFQUFFd1osYUFBRixHQUFnQjlZLEVBQUUsbUJBQUYsRUFBc0IsRUFBQys2QixVQUFTLEVBQUNlLFdBQVV4OEIsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRXdaLGFBQVAsQ0FBWCxFQUFWLEVBQXRCLENBQWhCLEdBQW9GOVksRUFBRSxtQkFBRixFQUFzQixDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFdVosU0FBUCxDQUFMLENBQUQsQ0FBdEIsQ0FBN0osRUFBOE12WixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQTlNLEVBQXdOaDdCLEVBQUUsbUJBQUYsRUFBc0IsQ0FBQ0EsRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksWUFBYixFQUEwQjJDLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDRCxnQkFBRXdJLEtBQUY7QUFBVSxhQUE3QixFQUE3QixFQUFkLEVBQTJFLENBQUN4SSxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFeVosUUFBUCxDQUFMLENBQUQsQ0FBM0UsQ0FBRCxDQUF0QixFQUE2SCxDQUE3SCxDQUF4TixDQUF0RyxFQUErYixDQUEvYixDQUFQO0FBQXljLE9BQTFnQixFQUEyZ0J6WCxpQkFBZ0IsRUFBM2hCLEVBQVY7QUFBeWlCLEdBTjlxZixFQU1pcmYsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsSUFBRixFQUFPLEVBQUNxTSxhQUFZLFlBQWIsRUFBUCxDQUFQO0FBQTBDLE9BQTNHLEVBQTRHL0ssaUJBQWdCLEVBQTVILEVBQVY7QUFBMEksR0FOejBmLEVBTTQwZixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxJQUFGLEVBQU8sRUFBQ3FNLGFBQVksZUFBYixFQUE2Qm9ELE9BQU1uUSxFQUFFNFUsT0FBckMsRUFBUCxFQUFxRCxDQUFDbFUsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVkseUJBQWIsRUFBUixFQUFnRCxDQUFDL00sRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBaEQsRUFBa0UsQ0FBbEUsQ0FBRCxDQUFyRCxDQUFQO0FBQW9JLE9BQXJNLEVBQXNNM0csaUJBQWdCLEVBQXROLEVBQVY7QUFBb08sR0FOOWpnQixFQU1pa2dCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxnQkFBYixFQUFSLEVBQXVDLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUF2QyxFQUF5RCxDQUF6RCxDQUFQO0FBQW1FLE9BQXBJLEVBQXFJM0csaUJBQWdCLEVBQXJKLEVBQVY7QUFBbUssR0FObHZnQixFQU1xdmdCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLGNBQUYsRUFBaUIsRUFBQ3FNLGFBQVksV0FBYixFQUF5Qm9ELE9BQU1uUSxFQUFFNFUsT0FBakMsRUFBeUMybUIsT0FBTSxFQUFDc0IsVUFBUyxJQUFWLEVBQS9DLEVBQStEbnRCLElBQUcsRUFBQzJLLE9BQU1yYSxFQUFFc3FCLFlBQVQsRUFBbEUsRUFBakIsRUFBMkcsQ0FBQ3RxQixFQUFFaXFCLFlBQUYsQ0FBZWxRLFFBQWYsR0FBd0JyWixFQUFFLGFBQUYsRUFBZ0IsRUFBQ3FNLGFBQVksWUFBYixFQUEwQit1QixPQUFNLEVBQUMzNEIsT0FBTW5ELEVBQUVrcUIsS0FBVCxFQUFlNlIsVUFBUyxrQkFBUzk3QixDQUFULEVBQVc7QUFBQ0QsZ0JBQUVrcUIsS0FBRixHQUFRanFCLENBQVI7QUFBVSxhQUE5QyxFQUErQys3QixZQUFXLE9BQTFELEVBQWhDLEVBQWhCLEVBQW9ILENBQUN0N0IsRUFBRSxNQUFGLEVBQVMsRUFBQ2trQixLQUFJLE1BQUwsRUFBVCxFQUFzQixDQUFDNWtCLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQXRCLEVBQXdDLENBQXhDLENBQUQsQ0FBcEgsQ0FBeEIsR0FBMExqSSxFQUFFLE1BQUYsRUFBUyxFQUFDa2tCLEtBQUksTUFBTCxFQUFULEVBQXNCLENBQUM1a0IsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBdEIsRUFBd0MsQ0FBeEMsQ0FBM0wsQ0FBM0csRUFBa1YsQ0FBbFYsQ0FBUDtBQUE0VixPQUE3WixFQUE4WjNHLGlCQUFnQixFQUE5YSxFQUFWO0FBQTRiLEdBTi9yaEIsRUFNa3NoQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksMkJBQWIsRUFBeUNvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTRVLE9BQWhCLENBQS9DLEVBQVIsRUFBaUYsQ0FBQ2xVLEVBQUUsWUFBRixFQUFlLENBQUNBLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLFlBQWIsRUFBUixFQUFtQyxDQUFDck0sRUFBRSxNQUFGLEVBQVMsRUFBQ2trQixLQUFJLFNBQUwsRUFBVCxFQUF5QixDQUFDNWtCLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUU0d0IsZ0JBQVAsQ0FBTCxDQUFELENBQXpCLENBQUQsRUFBNEQ1d0IsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE1RCxFQUFzRWg3QixFQUFFLE1BQUYsRUFBUyxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFb3hCLGVBQVAsQ0FBTCxDQUFELENBQVQsQ0FBdEUsQ0FBbkMsQ0FBRCxFQUFzSnB4QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQXRKLEVBQWdLMTdCLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFoSyxDQUFmLEVBQWdNLENBQWhNLENBQUQsQ0FBakYsRUFBc1IsQ0FBdFIsQ0FBUDtBQUFnUyxPQUFqVyxFQUFrVzNHLGlCQUFnQixFQUFsWCxFQUFWO0FBQWdZLEdBTmhsaUIsRUFNbWxpQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxVQUFGLEVBQWEsRUFBQ3FNLGFBQVksVUFBYixFQUF3Qnd1QixPQUFNLEVBQUM3eEIsVUFBUzFKLEVBQUUwSixRQUFaLEVBQXFCRSxVQUFTNUosRUFBRTRKLFFBQWhDLEVBQXlDRSxhQUFZOUosRUFBRThKLFdBQXZELEVBQW1FRCxXQUFVN0osRUFBRTZKLFNBQS9FLEVBQXlGRSxVQUFTL0osRUFBRStKLFFBQXBHLEVBQTlCLEVBQTRJMHhCLFVBQVMsRUFBQ3Q0QixPQUFNbkQsRUFBRW1ELEtBQVQsRUFBckosRUFBcUt1TSxJQUFHLEVBQUNtSSxPQUFNN1gsRUFBRXFMLE9BQVQsRUFBaUIwZ0IsTUFBSy9yQixFQUFFdUwsTUFBeEIsRUFBK0JxTSxPQUFNNVgsRUFBRXdMLE9BQXZDLEVBQXhLLEVBQWIsQ0FBUDtBQUE4TyxPQUEvUyxFQUFnVHhKLGlCQUFnQixFQUFoVSxFQUFWO0FBQThVLEdBTi82aUIsRUFNazdpQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT0QsRUFBRXFWLE9BQUYsSUFBVyxDQUFDclYsRUFBRTBKLFFBQWQsR0FBdUJoSixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxlQUFiLEVBQVIsRUFBc0MsQ0FBQ3JNLEVBQUUsS0FBRixFQUFRLEVBQUNra0IsS0FBSSxRQUFMLEVBQWM3WCxhQUFZLFdBQTFCLEVBQXNDb0QsT0FBTW5RLEVBQUU0VSxPQUE5QyxFQUFzRHhOLE9BQU1wSCxFQUFFOE0sTUFBOUQsRUFBUixDQUFELENBQXRDLENBQXZCLEdBQStJOU0sRUFBRTI3QixFQUFGLEVBQXRKO0FBQTZKLE9BQTlOLEVBQStOMzVCLGlCQUFnQixFQUEvTyxFQUFWO0FBQTZQLEdBTjdyakIsRUFNZ3NqQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksZUFBYixFQUE2QjJDLElBQUcsRUFBQzRzQixTQUFRLGlCQUFTcjhCLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsS0FBZixFQUFxQixFQUFyQixDQUFmLEdBQXdDLEtBQUt2OEIsRUFBRWt5QixXQUFGLENBQWNqeUIsQ0FBZCxDQUE3QyxHQUE4RCxJQUFwRTtBQUF5RSxhQUE5RixFQUFoQyxFQUFSLEVBQXlJLENBQUNTLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHVCQUFiLEVBQXFDb0QsT0FBTW5RLEVBQUU2eEIsY0FBN0MsRUFBNERuaUIsSUFBRyxFQUFDMkssT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNBLGdCQUFFdTdCLGVBQUYsSUFBb0J4N0IsRUFBRWd5QixVQUFGLENBQWEveEIsQ0FBYixDQUFwQjtBQUFvQyxhQUF2RCxFQUEvRCxFQUFSLEVBQWlJLENBQUNELEVBQUUwN0IsRUFBRixDQUFLLFdBQVMxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRW1ELEtBQUYsSUFBU25ELEVBQUUyeEIsYUFBaEIsQ0FBVCxHQUF3QyxNQUE3QyxDQUFELENBQWpJLENBQUQsRUFBMEwzeEIsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUExTCxFQUFvTWg3QixFQUFFLEtBQUYsRUFBUSxFQUFDa2tCLEtBQUksUUFBTCxFQUFjN1gsYUFBWSxpQkFBMUIsRUFBNENvRCxPQUFNblEsRUFBRTRZLGFBQXBELEVBQVIsRUFBMkUsQ0FBQ2xZLEVBQUUsb0JBQUYsRUFBdUIsQ0FBQ0EsRUFBRSxVQUFGLEVBQWEsRUFBQ2trQixLQUFJLE9BQUwsRUFBYTJXLE9BQU0sRUFBQ3pxQixJQUFHOVEsRUFBRTB4QixJQUFOLEVBQVcxcEIsTUFBS2hJLEVBQUVpRCxNQUFsQixFQUF5QjRHLFdBQVU3SixFQUFFNHhCLFdBQXJDLEVBQWlEenVCLE9BQU1uRCxFQUFFbUQsS0FBekQsRUFBK0QyRyxhQUFZOUosRUFBRTJ4QixhQUE3RSxFQUFuQixFQUErR29MLFVBQVMsRUFBQ1QsU0FBUSxpQkFBU3I4QixDQUFULEVBQVc7QUFBQyxxQkFBTSxZQUFXQSxDQUFYLElBQWMsQ0FBQ0QsRUFBRTBNLEVBQUYsQ0FBS3pNLEVBQUVzOEIsT0FBUCxFQUFlLE9BQWYsRUFBdUIsRUFBdkIsQ0FBZixHQUEwQyxLQUFLdjhCLEVBQUVteUIsYUFBRixDQUFnQmx5QixDQUFoQixDQUEvQyxHQUFrRSxJQUF4RTtBQUE2RSxhQUFsRyxFQUF4SCxFQUFiLENBQUQsQ0FBdkIsRUFBb1EsQ0FBcFEsQ0FBRCxDQUEzRSxFQUFvVixDQUFwVixDQUFwTSxDQUF6SSxDQUFQO0FBQTZxQixPQUE5dUIsRUFBK3VCK0IsaUJBQWdCLEVBQS92QixFQUFWO0FBQTZ3QixHQU4zOWtCLEVBTTg5a0IsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU0sY0FBWUQsRUFBRWtELE9BQUYsQ0FBVUgsUUFBVixDQUFtQkMsYUFBL0IsR0FBNkN0QyxFQUFFLElBQUYsRUFBTyxFQUFDcU0sYUFBWSxjQUFiLEVBQTRCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBbEMsRUFBUCxFQUF5RCxDQUFDMUQsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBekQsRUFBMkUsQ0FBM0UsQ0FBN0MsR0FBMkhqSSxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxjQUFiLEVBQTRCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBbEMsRUFBUixFQUEwRCxDQUFDMUQsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBMUQsRUFBNEUsQ0FBNUUsQ0FBakk7QUFBZ04sT0FBalIsRUFBa1IzRyxpQkFBZ0IsRUFBbFMsRUFBVjtBQUFnVCxHQU41eGxCLEVBTSt4bEIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGlCQUFiLEVBQVIsRUFBd0MsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQXhDLEVBQTBELENBQTFELENBQVA7QUFBb0UsT0FBckksRUFBc0kzRyxpQkFBZ0IsRUFBdEosRUFBVjtBQUFvSyxHQU5qOWxCLEVBTW85bEIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9ELEVBQUV5UCxJQUFGLEdBQU8vTyxFQUFFLEdBQUYsRUFBTSxFQUFDcU0sYUFBWSxXQUFiLEVBQXlCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBL0IsRUFBOEM2M0IsT0FBTSxFQUFDOXJCLE1BQUt6UCxFQUFFeVAsSUFBUixFQUFhL0YsVUFBUzFKLEVBQUUwSixRQUF4QixFQUFpQzRMLFFBQU90VixFQUFFc1YsTUFBMUMsRUFBaURDLEtBQUl2VixFQUFFd1YsTUFBdkQsRUFBcEQsRUFBbUg5RixJQUFHLEVBQUMySyxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0QsZ0JBQUU2SyxLQUFGLENBQVEsT0FBUixFQUFnQjVLLENBQWhCO0FBQW1CLGFBQXRDLEVBQXRILEVBQU4sRUFBcUssQ0FBQ1MsRUFBRSxlQUFGLEVBQWtCLEVBQUM2NkIsT0FBTSxFQUFDLGVBQWN2N0IsRUFBRTBKLFFBQWpCLEVBQVAsRUFBbEIsQ0FBRCxFQUF1RDFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBdkQsRUFBaUUxN0IsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQWpFLENBQXJLLEVBQXVQLENBQXZQLENBQVAsR0FBaVFqSSxFQUFFLFFBQUYsRUFBVyxFQUFDcU0sYUFBWSxXQUFiLEVBQXlCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsQ0FBL0IsRUFBOEM2M0IsT0FBTSxFQUFDOXhCLE1BQUt6SixFQUFFeUosSUFBUixFQUFhQyxVQUFTMUosRUFBRTBKLFFBQXhCLEVBQXBELEVBQXNGZ0csSUFBRyxFQUFDMkssT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNELGdCQUFFNkssS0FBRixDQUFRLE9BQVIsRUFBZ0I1SyxDQUFoQjtBQUFtQixhQUF0QyxFQUF6RixFQUFYLEVBQTZJLENBQUNTLEVBQUUsZUFBRixFQUFrQixFQUFDNjZCLE9BQU0sRUFBQyxlQUFjdjdCLEVBQUUwSixRQUFqQixFQUFQLEVBQWxCLENBQUQsRUFBdUQxSixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQXZELEVBQWlFMTdCLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFqRSxDQUE3SSxFQUErTixDQUEvTixDQUF4UTtBQUEwZSxPQUEzaUIsRUFBNGlCM0csaUJBQWdCLEVBQTVqQixFQUFWO0FBQTBrQixHQU41aW5CLEVBTStpbkIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsSUFBRixFQUFPLEVBQUNxTSxhQUFZLGVBQWIsRUFBNkJvRCxPQUFNblEsRUFBRTRVLE9BQXJDLEVBQTZDbEYsSUFBRyxFQUFDMkssT0FBTXJhLEVBQUV3eUIsVUFBVCxFQUFoRCxFQUFQLEVBQTZFLENBQUM5eEIsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVkseUJBQWIsRUFBUixFQUFnRCxDQUFDck0sRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksNEJBQWIsRUFBUixFQUFtRCxDQUFDL00sRUFBRW95QixRQUFGLEdBQVcxeEIsRUFBRSxTQUFGLEVBQVksRUFBQ3FNLGFBQVksa0JBQWIsRUFBWixFQUE2QyxDQUFDL00sRUFBRTA3QixFQUFGLENBQUssY0FBTCxDQUFELENBQTdDLENBQVgsR0FBZ0YxN0IsRUFBRTI3QixFQUFGLEVBQWpGLEVBQXdGMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBeEYsRUFBa0cxN0IsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQWxHLEVBQWtIM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFsSCxFQUE0SDE3QixFQUFFaWtCLFNBQUYsR0FBWXZqQixFQUFFLFlBQUYsRUFBZSxDQUFDVixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFaWtCLFNBQVAsQ0FBTCxDQUFELENBQWYsQ0FBWixHQUFzRGprQixFQUFFMjdCLEVBQUYsRUFBbEwsQ0FBbkQsRUFBNk8sQ0FBN08sQ0FBRCxFQUFpUDM3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWpQLEVBQTJQaDdCLEVBQUUsZUFBRixFQUFrQixFQUFDNjZCLE9BQU0sRUFBQyxlQUFjLENBQUN2N0IsRUFBRW95QixRQUFsQixFQUFQLEVBQWxCLENBQTNQLENBQWhELEVBQW1XLENBQW5XLENBQUQsQ0FBN0UsQ0FBUDtBQUE2YixPQUE5ZixFQUErZnB3QixpQkFBZ0IsRUFBL2dCLEVBQVY7QUFBNmhCLEdBTjFsb0IsRUFNNmxvQixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksV0FBYixFQUF5Qm9ELE9BQU0sQ0FBQ25RLEVBQUUwRCxVQUFILEVBQWMxRCxFQUFFNFUsT0FBaEIsQ0FBL0IsRUFBUixFQUFpRSxDQUFDbFUsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVkscUJBQWIsRUFBbUMyQyxJQUFHLEVBQUMySyxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0QsZ0JBQUUwVixNQUFGLENBQVN6VixDQUFUO0FBQVksYUFBL0IsRUFBdEMsRUFBUixFQUFnRixDQUFDUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxpQkFBYixFQUErQjNGLE9BQU1wSCxFQUFFOE0sTUFBdkMsRUFBUixFQUF1RCxDQUFDcE0sRUFBRSxPQUFGLEVBQVUsRUFBQzY2QixPQUFNLEVBQUM5eEIsTUFBSyxVQUFOLEVBQWlCekIsTUFBS2hJLEVBQUVnSSxJQUF4QixFQUE2QjhJLElBQUc5USxFQUFFOFEsRUFBbEMsRUFBcUNwSCxVQUFTMUosRUFBRTBKLFFBQWhELEVBQXlEbXpCLFVBQVMsSUFBbEUsRUFBUCxFQUErRXBCLFVBQVMsRUFBQ3Q0QixPQUFNbkQsRUFBRW1ELEtBQVQsRUFBeEYsRUFBVixDQUFELEVBQXFIbkQsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFySCxFQUErSGg3QixFQUFFLFFBQUYsRUFBVyxFQUFDcU0sYUFBWSxrQkFBYixFQUFnQ3d1QixPQUFNLEVBQUM5eEIsTUFBS3pKLEVBQUV5SixJQUFSLEVBQXRDLEVBQVgsQ0FBL0gsRUFBZ016SixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWhNLEVBQTBNaDdCLEVBQUUsZUFBRixFQUFrQixFQUFDNjZCLE9BQU0sRUFBQyxlQUFjdjdCLEVBQUUwSixRQUFqQixFQUFQLEVBQWxCLENBQTFNLENBQXZELEVBQXdULENBQXhULENBQUQsQ0FBaEYsQ0FBRCxFQUErWTFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBL1ksRUFBeVoxN0IsRUFBRThnQixNQUFGLENBQVN2ZixPQUFULEdBQWlCYixFQUFFLE9BQUYsRUFBVSxFQUFDcU0sYUFBWSxpQkFBYixFQUErQnd1QixPQUFNLEVBQUNYLEtBQUk1NkIsRUFBRThRLEVBQUYsSUFBTTlRLEVBQUVnSSxJQUFiLEVBQXJDLEVBQVYsRUFBbUUsQ0FBQ2hJLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQW5FLEVBQXFGLENBQXJGLENBQWpCLEdBQXlHM0ksRUFBRTI3QixFQUFGLEVBQWxnQixDQUFqRSxDQUFQO0FBQW1sQixPQUFwcEIsRUFBcXBCMzVCLGlCQUFnQixFQUFycUIsRUFBVjtBQUFtckIsR0FOOXhwQixFQU1peXBCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxpQkFBYixFQUErQnd1QixPQUFNLEVBQUNzQixVQUFTLElBQVYsRUFBckMsRUFBcURudEIsSUFBRyxFQUFDNHNCLFNBQVEsQ0FBQyxVQUFTcjhCLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsS0FBZixFQUFxQixFQUFyQixDQUFmLElBQXlDdDhCLEVBQUU2OEIsY0FBRixJQUFtQixLQUFLOThCLEVBQUV3SSxLQUFGLENBQVF2SSxDQUFSLENBQWpFLElBQTZFLElBQW5GO0FBQXdGLGFBQXJHLEVBQXNHLFVBQVNBLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsS0FBZixFQUFxQixDQUFyQixDQUFmLElBQXdDdDhCLEVBQUU2OEIsY0FBRixJQUFtQixLQUFLOThCLEVBQUV3SSxLQUFGLENBQVF2SSxDQUFSLENBQWhFLElBQTRFLElBQWxGO0FBQXVGLGFBQXpNLEVBQTBNLFVBQVNBLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsSUFBZixFQUFvQixFQUFwQixDQUFmLElBQXdDdDhCLEVBQUU2OEIsY0FBRixJQUFtQixLQUFLOThCLEVBQUV1akIsYUFBRixDQUFnQixJQUFoQixDQUFoRSxJQUF1RixJQUE3RjtBQUFrRyxhQUF4VCxFQUF5VCxVQUFTdGpCLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsTUFBZixFQUFzQixFQUF0QixDQUFmLElBQTBDdDhCLEVBQUU2OEIsY0FBRixJQUFtQixLQUFLOThCLEVBQUV1akIsYUFBRixDQUFnQixNQUFoQixDQUFsRSxJQUEyRixJQUFqRztBQUFzRyxhQUEzYSxFQUE0YSxVQUFTdGpCLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsT0FBZixFQUF1QixFQUF2QixDQUFmLEdBQTBDLEtBQUt2OEIsRUFBRXdqQixTQUFGLENBQVl2akIsQ0FBWixDQUEvQyxHQUE4RCxJQUFwRTtBQUF5RSxhQUFqZ0IsRUFBa2dCLFVBQVNBLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsT0FBZixFQUF1QixFQUF2QixDQUFmLEdBQTBDLEtBQUt2OEIsRUFBRXdqQixTQUFGLENBQVl2akIsQ0FBWixDQUEvQyxHQUE4RCxJQUFwRTtBQUF5RSxhQUF2bEIsQ0FBVCxFQUF4RCxFQUFSLEVBQW9xQixDQUFDUyxFQUFFLFNBQUYsRUFBWSxDQUFDVixFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFaLEVBQThCLENBQTlCLENBQUQsQ0FBcHFCLEVBQXVzQixDQUF2c0IsQ0FBUDtBQUFpdEIsT0FBbHhCLEVBQW14QjNHLGlCQUFnQixFQUFueUIsRUFBVjtBQUFpekIsR0FOaG1yQixFQU1tbXJCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxtQkFBYixFQUFSLEVBQTBDLENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUExQyxFQUE0RCxDQUE1RCxDQUFQO0FBQXNFLE9BQXZJLEVBQXdJM0csaUJBQWdCLEVBQXhKLEVBQVY7QUFBc0ssR0FOdnhyQixFQU0weHJCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxXQUFiLEVBQXlCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUVxbUIsWUFBaEIsQ0FBL0IsRUFBUixFQUFzRSxDQUFDM2xCLEVBQUUsS0FBRixFQUFRLEVBQUNra0IsS0FBSSxlQUFMLEVBQXFCN1gsYUFBWSxtQkFBakMsRUFBcUQzRixPQUFNLEVBQUM0RSxRQUFPaE0sRUFBRWttQixhQUFWLEVBQTNELEVBQVIsRUFBNkYsQ0FBQ3hsQixFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxtQkFBYixFQUFpQzNGLE9BQU0sRUFBQ3lSLFdBQVUsa0JBQWdCN1ksRUFBRW1tQixZQUFsQixHQUErQixTQUExQyxFQUF2QyxFQUFSLEVBQXFHLENBQUNubUIsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBckcsRUFBdUgsQ0FBdkgsQ0FBRCxDQUE3RixDQUFELEVBQTJOM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUEzTixFQUFxT2g3QixFQUFFLEtBQUYsRUFBUSxFQUFDa2tCLEtBQUksaUJBQUwsRUFBdUI3WCxhQUFZLHNCQUFuQyxFQUEwRG9ELE9BQU1uUSxFQUFFc21CLGlCQUFsRSxFQUFSLEVBQTZGLENBQUN0bUIsRUFBRXdsQixVQUFGLEdBQWF4bEIsRUFBRTI3QixFQUFGLEVBQWIsR0FBb0JqN0IsRUFBRSxNQUFGLEVBQVMsRUFBQzI4QixhQUFZLEVBQUNDLE1BQUssR0FBTixFQUFiLEVBQVQsQ0FBckIsRUFBd0R0OUIsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF4RCxFQUFrRTE3QixFQUFFd2xCLFVBQUYsR0FBYTlrQixFQUFFLFdBQUYsRUFBYyxFQUFDZ1AsSUFBRyxFQUFDMkssT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNELGdCQUFFK25CLGFBQUY7QUFBa0IsYUFBckMsRUFBSixFQUFkLEVBQTBELENBQUNybkIsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksMkJBQWIsRUFBUixFQUFrRCxDQUFDck0sRUFBRSxTQUFGLEVBQVksRUFBQ3FNLGFBQVksWUFBYixFQUFaLEVBQXVDLENBQUMvTSxFQUFFMDdCLEVBQUYsQ0FBSyxjQUFMLENBQUQsQ0FBdkMsQ0FBRCxDQUFsRCxFQUFtSCxDQUFuSCxDQUFELENBQTFELENBQWIsR0FBZ00xN0IsRUFBRTI3QixFQUFGLEVBQWxRLEVBQXlRMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBelEsRUFBbVJoN0IsRUFBRSxNQUFGLEVBQVMsRUFBQzI4QixhQUFZLEVBQUNDLE1BQUssR0FBTixFQUFiLEVBQVQsQ0FBblIsRUFBc1R0OUIsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF0VCxFQUFnVTE3QixFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFNGxCLFNBQVAsRUFBa0IsVUFBUzNsQixDQUFULEVBQVc7QUFBQyxpQkFBT1MsRUFBRSxRQUFGLEVBQVcsRUFBQ3dQLEtBQUlqUSxFQUFFNlEsRUFBUCxFQUFVOFQsS0FBSSxhQUFkLEVBQTRCcVksVUFBUyxDQUFDLENBQXRDLEVBQXdDbHdCLGFBQVksaUJBQXBELEVBQXNFb0QsT0FBTW5RLEVBQUV5bUIsY0FBRixDQUFpQnhtQixDQUFqQixDQUE1RSxFQUFnR3M3QixPQUFNLEVBQUM5eEIsTUFBSyxRQUFOLEVBQWVDLFVBQVN6SixFQUFFeUosUUFBMUIsRUFBdEcsRUFBMElnRyxJQUFHLEVBQUMySyxPQUFNLGVBQVMzWixDQUFULEVBQVc7QUFBQ1Ysa0JBQUUra0IsY0FBRixDQUFpQjlrQixDQUFqQixFQUFtQixDQUFDLENBQXBCO0FBQXVCLGVBQTFDLEVBQTdJLEVBQVgsRUFBcU0sQ0FBQ1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksMkJBQWIsRUFBUixFQUFrRCxDQUFDck0sRUFBRSxTQUFGLEVBQVksQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUsscUJBQUwsQ0FBRCxDQUFaLENBQUQsQ0FBbEQsRUFBK0YsQ0FBL0YsQ0FBRCxDQUFyTSxDQUFQO0FBQWlULFNBQS9VLENBQWhVLEVBQWtwQjE3QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWxwQixFQUE0cEJoN0IsRUFBRSxNQUFGLEVBQVMsRUFBQzI4QixhQUFZLEVBQUNDLE1BQUssR0FBTixFQUFiLEVBQVQsQ0FBNXBCLEVBQStyQnQ5QixFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQS9yQixFQUF5c0IxN0IsRUFBRXdsQixVQUFGLEdBQWE5a0IsRUFBRSxXQUFGLEVBQWMsRUFBQ2dQLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDRCxnQkFBRThuQixhQUFGO0FBQWtCLGFBQXJDLEVBQUosRUFBZCxFQUEwRCxDQUFDcG5CLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLDJCQUFiLEVBQVIsRUFBa0QsQ0FBQ3JNLEVBQUUsU0FBRixFQUFZLEVBQUNxTSxhQUFZLFlBQWIsRUFBWixFQUF1QyxDQUFDL00sRUFBRTA3QixFQUFGLENBQUssZUFBTCxDQUFELENBQXZDLENBQUQsQ0FBbEQsRUFBb0gsQ0FBcEgsQ0FBRCxDQUExRCxDQUFiLEdBQWlNMTdCLEVBQUUyN0IsRUFBRixFQUExNEIsRUFBaTVCMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBajVCLEVBQTI1QjE3QixFQUFFd2xCLFVBQUYsR0FBYXhsQixFQUFFMjdCLEVBQUYsRUFBYixHQUFvQmo3QixFQUFFLE1BQUYsRUFBUyxFQUFDMjhCLGFBQVksRUFBQ0MsTUFBSyxHQUFOLEVBQWIsRUFBVCxDQUEvNkIsRUFBazlCdDlCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBbDlCLEVBQTQ5Qmg3QixFQUFFLE1BQUYsRUFBUyxFQUFDa2tCLEtBQUksV0FBTCxFQUFULENBQTU5QixDQUE3RixFQUFzbEMsQ0FBdGxDLENBQXJPLENBQXRFLENBQVA7QUFBNjRDLE9BQTk4QyxFQUErOEM1aUIsaUJBQWdCLEVBQS85QyxFQUFWO0FBQTYrQyxHQU5yeHVCLEVBTXd4dUIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGFBQWIsRUFBMkJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTRVLE9BQWhCLENBQWpDLEVBQVIsRUFBbUUsQ0FBQ2xVLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHVCQUFiLEVBQXFDd3VCLE9BQU0sRUFBQ3NCLFVBQVMsR0FBVixFQUEzQyxFQUEwRG50QixJQUFHLEVBQUMySyxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0EsZ0JBQUV1N0IsZUFBRixJQUFvQng3QixFQUFFK1csV0FBRixDQUFjOVcsQ0FBZCxDQUFwQjtBQUFxQyxhQUF4RCxFQUE3RCxFQUFSLEVBQWdJLENBQUNTLEVBQUUsT0FBRixFQUFVLEVBQUM2NkIsT0FBTSxFQUFDOXhCLE1BQUssVUFBTixFQUFpQnpCLE1BQUtoSSxFQUFFZ0ksSUFBeEIsRUFBNkI4SSxJQUFHOVEsRUFBRThRLEVBQWxDLEVBQXFDcEgsVUFBUzFKLEVBQUUwSixRQUFoRCxFQUF5RG16QixVQUFTLElBQWxFLEVBQVAsRUFBK0VwQixVQUFTLEVBQUN0NEIsT0FBTW5ELEVBQUVtRCxLQUFULEVBQWUyVCxTQUFROVcsRUFBRThXLE9BQXpCLEVBQXhGLEVBQVYsQ0FBRCxFQUF1STlXLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBdkksRUFBaUpoN0IsRUFBRSxlQUFGLEVBQWtCLEVBQUM2NkIsT0FBTSxFQUFDLGVBQWN2N0IsRUFBRTBKLFFBQWpCLEVBQVAsRUFBbEIsQ0FBakosQ0FBaEksRUFBd1UsQ0FBeFUsQ0FBRCxFQUE0VTFKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBNVUsRUFBc1YxN0IsRUFBRThnQixNQUFGLENBQVN2ZixPQUFULEdBQWlCYixFQUFFLE9BQUYsRUFBVSxFQUFDcU0sYUFBWSxtQkFBYixFQUFpQ3d1QixPQUFNLEVBQUNYLEtBQUk1NkIsRUFBRThRLEVBQUYsSUFBTTlRLEVBQUVnSSxJQUFiLEVBQXZDLEVBQTBEMEgsSUFBRyxFQUFDMkssT0FBTSxlQUFTcGEsQ0FBVCxFQUFXO0FBQUNBLGdCQUFFNjhCLGNBQUYsSUFBbUI5OEIsRUFBRStXLFdBQUYsQ0FBYzlXLENBQWQsQ0FBbkI7QUFBb0MsYUFBdkQsRUFBN0QsRUFBVixFQUFpSSxDQUFDRCxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFqSSxFQUFtSixDQUFuSixDQUFqQixHQUF1SzNJLEVBQUUyN0IsRUFBRixFQUE3ZixDQUFuRSxDQUFQO0FBQWdsQixPQUFqcEIsRUFBa3BCMzVCLGlCQUFnQixFQUFscUIsRUFBVjtBQUFnckIsR0FOdDl2QixFQU15OXZCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxXQUFiLEVBQXlCb0QsT0FBTSxDQUFDblEsRUFBRTBELFVBQUgsRUFBYzFELEVBQUU0VSxPQUFoQixDQUEvQixFQUFSLEVBQWlFLENBQUNsVSxFQUFFLFNBQUYsRUFBWVYsRUFBRXU5QixFQUFGLENBQUssRUFBQ2hDLE9BQU0sRUFBQyxzQkFBcUIsQ0FBQ3Y3QixFQUFFK1osUUFBekIsRUFBUCxFQUEwQ3JLLElBQUcsRUFBQzh0QixRQUFPLGdCQUFTdjlCLENBQVQsRUFBVztBQUFDRCxnQkFBRTZLLEtBQUYsQ0FBUSxNQUFSO0FBQWdCLGFBQXBDLEVBQXFDNHlCLFFBQU8sZ0JBQVN4OUIsQ0FBVCxFQUFXO0FBQUNELGdCQUFFNkssS0FBRixDQUFRLE9BQVI7QUFBaUIsYUFBekUsRUFBN0MsRUFBTCxFQUE4SCxTQUE5SCxFQUF3STdLLEVBQUU0cUIsYUFBMUksQ0FBWixFQUFxSyxDQUFDNXFCLEVBQUUySSxFQUFGLENBQUssTUFBTCxDQUFELEVBQWMzSSxFQUFFMDdCLEVBQUYsQ0FBSyxHQUFMLENBQWQsRUFBd0JoN0IsRUFBRSxNQUFGLEVBQVMsRUFBQ2trQixLQUFJLE9BQUwsRUFBYTdYLGFBQVksaUJBQXpCLEVBQTJDM0YsT0FBTXBILEVBQUVrckIsVUFBbkQsRUFBOERxUSxPQUFNLEVBQUMsbUJBQWtCLEVBQW5CLEVBQXBFLEVBQVQsRUFBcUcsQ0FBQ3Y3QixFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFK3FCLFlBQUYsSUFBZ0IvcUIsRUFBRThKLFdBQXZCLENBQUwsQ0FBRCxDQUFyRyxDQUF4QixFQUEwSzlKLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBMUssRUFBb0xoN0IsRUFBRSxpQkFBRixFQUFvQixFQUFDcU0sYUFBWSxtQkFBYixFQUFpQ29ELE9BQU0sQ0FBQ25RLEVBQUUwRCxVQUFILEVBQWMxRCxFQUFFaXJCLGNBQWhCLENBQXZDLEVBQXBCLEVBQTRGLENBQUNqckIsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBNUYsRUFBOEcsQ0FBOUcsQ0FBcEwsQ0FBckssRUFBMmMsQ0FBM2MsQ0FBRCxFQUErYzNJLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBL2MsRUFBeWRoN0IsRUFBRSxRQUFGLEVBQVcsRUFBQzY2QixPQUFNLEVBQUN2ekIsTUFBS2hJLEVBQUVnSSxJQUFSLEVBQWE4SSxJQUFHOVEsRUFBRThRLEVBQWxCLEVBQXFCbEgsVUFBUzVKLEVBQUU0SixRQUFoQyxFQUF5Q0YsVUFBUzFKLEVBQUUwSixRQUFwRCxFQUE2RG16QixVQUFTLElBQXRFLEVBQVAsRUFBWCxFQUErRixDQUFDNzhCLEVBQUUrWixRQUFGLEdBQVcvWixFQUFFMjdCLEVBQUYsRUFBWCxHQUFrQmo3QixFQUFFLFFBQUYsRUFBVyxFQUFDNjZCLE9BQU0sRUFBQ3BmLFVBQVMsTUFBVixFQUFQLEVBQXlCc2YsVUFBUyxFQUFDdDRCLE9BQU1uRCxFQUFFOHFCLGFBQVQsRUFBbEMsRUFBWCxFQUFzRSxDQUFDOXFCLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUUrcUIsWUFBUCxDQUFMLENBQUQsQ0FBdEUsQ0FBbkIsRUFBdUgvcUIsRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUF2SCxFQUFpSTE3QixFQUFFaThCLEVBQUYsQ0FBS2o4QixFQUFFMHFCLGVBQVAsRUFBd0IsVUFBU3pxQixDQUFULEVBQVc7QUFBQyxpQkFBT0EsRUFBRWtELEtBQUYsR0FBUXpDLEVBQUUsUUFBRixFQUFXLEVBQUM2NkIsT0FBTSxFQUFDcGYsVUFBUyxNQUFWLEVBQVAsRUFBeUJzZixVQUFTLEVBQUN0NEIsT0FBTWxELEVBQUVrRCxLQUFULEVBQWxDLEVBQVgsRUFBOEQsQ0FBQ25ELEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLMzdCLEVBQUV1ckIsSUFBUCxDQUFMLENBQUQsQ0FBOUQsQ0FBUixHQUE0RnhyQixFQUFFMjdCLEVBQUYsRUFBbkc7QUFBMEcsU0FBOUksQ0FBakksQ0FBL0YsRUFBa1gsQ0FBbFgsQ0FBemQsQ0FBakUsRUFBZzVCLENBQWg1QixDQUFQO0FBQTA1QixPQUEzOUIsRUFBNDlCMzVCLGlCQUFnQixFQUE1K0IsRUFBVjtBQUEwL0IsR0FOait4QixFQU1vK3hCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLE1BQUYsRUFBUyxFQUFDcU0sYUFBWSxZQUFiLEVBQTBCb0QsT0FBTW5RLEVBQUU0VSxPQUFsQyxFQUEwQ3hOLE9BQU1wSCxFQUFFb0gsS0FBbEQsRUFBVCxFQUFrRSxDQUFDcEgsRUFBRTJJLEVBQUYsQ0FBSyxTQUFMLENBQUQsQ0FBbEUsRUFBb0YsQ0FBcEYsQ0FBUDtBQUE4RixPQUEvSixFQUFnSzNHLGlCQUFnQixFQUFoTCxFQUFWO0FBQThMLEdBTmhyeUIsRUFNbXJ5QixVQUFTaEMsQ0FBVCxFQUFXQyxDQUFYLEVBQWE7QUFBQ0QsTUFBRUUsT0FBRixHQUFVLEVBQUM2QixRQUFPLGtCQUFVO0FBQUMsWUFBSS9CLElBQUUsSUFBTjtBQUFBLFlBQVdDLElBQUVELEVBQUVvN0IsY0FBZjtBQUFBLFlBQThCMTZCLElBQUVWLEVBQUVxN0IsS0FBRixDQUFRQyxFQUFSLElBQVlyN0IsQ0FBNUMsQ0FBOEMsT0FBT1MsRUFBRSxLQUFGLEVBQVEsRUFBQ3FNLGFBQVksVUFBYixFQUF3Qm9ELE9BQU1uUSxFQUFFNFUsT0FBaEMsRUFBd0MybUIsT0FBTSxFQUFDbnpCLEtBQUlwSSxFQUFFMmEsS0FBUCxFQUE5QyxFQUFSLENBQVA7QUFBNkUsT0FBOUksRUFBK0kzWSxpQkFBZ0IsRUFBL0osRUFBVjtBQUE2SyxHQU45MnlCLEVBTWkzeUIsVUFBU2hDLENBQVQsRUFBV0MsQ0FBWCxFQUFhO0FBQUNELE1BQUVFLE9BQUYsR0FBVSxFQUFDNkIsUUFBTyxrQkFBVTtBQUFDLFlBQUkvQixJQUFFLElBQU47QUFBQSxZQUFXQyxJQUFFRCxFQUFFbzdCLGNBQWY7QUFBQSxZQUE4QjE2QixJQUFFVixFQUFFcTdCLEtBQUYsQ0FBUUMsRUFBUixJQUFZcjdCLENBQTVDLENBQThDLE9BQU9TLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLGFBQWIsRUFBMkJvRCxPQUFNLENBQUNuUSxFQUFFMEQsVUFBSCxFQUFjMUQsRUFBRTRVLE9BQWhCLENBQWpDLEVBQTBEMm1CLE9BQU0sRUFBQ3pxQixJQUFHOVEsRUFBRW9zQixVQUFOLEVBQWhFLEVBQWtGMWMsSUFBRyxFQUFDZ3VCLFlBQVcxOUIsRUFBRWd0QixZQUFkLEVBQTJCMlEsWUFBVzM5QixFQUFFaXRCLGFBQXhDLEVBQXJGLEVBQVIsRUFBcUosQ0FBQ3ZzQixFQUFFLEtBQUYsRUFBUSxFQUFDa2tCLEtBQUksV0FBTCxFQUFpQjdYLGFBQVksdUJBQTdCLEVBQVIsRUFBOEQsQ0FBQ3JNLEVBQUUsS0FBRixFQUFRLEVBQUNxTSxhQUFZLHFCQUFiLEVBQVIsRUFBNEMsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELENBQTVDLEVBQThELENBQTlELENBQUQsQ0FBOUQsQ0FBRCxDQUFySixDQUFQO0FBQWlTLE9BQWxXLEVBQW1XM0csaUJBQWdCLEVBQW5YLEVBQVY7QUFBaVksR0FOaHd6QixFQU1td3pCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxTQUFiLEVBQVIsRUFBZ0MsQ0FBQy9NLEVBQUUySSxFQUFGLENBQUssU0FBTCxDQUFELEVBQWlCM0ksRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUFqQixFQUEyQmg3QixFQUFFLGFBQUYsRUFBZ0IsRUFBQ2trQixLQUFJLFVBQUwsRUFBZ0I3WCxhQUFZLDJDQUE1QixFQUF3RTJDLElBQUcsRUFBQ2xILE9BQU14SSxFQUFFd0ksS0FBVCxFQUEzRSxFQUFoQixDQUEzQixDQUFoQyxFQUF5SyxDQUF6SyxDQUFQO0FBQW1MLE9BQXBQLEVBQXFQeEcsaUJBQWdCLEVBQXJRLEVBQVY7QUFBbVIsR0FOcGkwQixFQU11aTBCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLFdBQUYsRUFBYyxFQUFDa2tCLEtBQUksUUFBTCxFQUFjN1gsYUFBWSxtQkFBMUIsRUFBOEMyQyxJQUFHLEVBQUNsSCxPQUFNLGVBQVN2SSxDQUFULEVBQVc7QUFBQ0QsZ0JBQUUwWixjQUFGLENBQWlCLFFBQWpCO0FBQTJCLGFBQTlDLEVBQWpELEVBQWQsRUFBZ0gsQ0FBQzFaLEVBQUVzWixPQUFGLEdBQVU1WSxFQUFFLGlCQUFGLEVBQW9CLENBQUNWLEVBQUUwN0IsRUFBRixDQUFLMTdCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUVzWixPQUFQLENBQUwsQ0FBRCxDQUFwQixDQUFWLEdBQXVEdFosRUFBRTI3QixFQUFGLEVBQXhELEVBQStEMzdCLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBL0QsRUFBeUUxN0IsRUFBRXdaLGFBQUYsR0FBZ0I5WSxFQUFFLG1CQUFGLEVBQXNCLEVBQUMrNkIsVUFBUyxFQUFDZSxXQUFVeDhCLEVBQUU0N0IsRUFBRixDQUFLNTdCLEVBQUV3WixhQUFQLENBQVgsRUFBVixFQUF0QixDQUFoQixHQUFvRjlZLEVBQUUsbUJBQUYsRUFBc0IsQ0FBQ1YsRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRXVaLFNBQVAsQ0FBTCxDQUFELENBQXRCLENBQTdKLEVBQThNdlosRUFBRTA3QixFQUFGLENBQUssR0FBTCxDQUE5TSxFQUF3Tmg3QixFQUFFLG1CQUFGLEVBQXNCLENBQUNBLEVBQUUsV0FBRixFQUFjLEVBQUNxTSxhQUFZLFlBQWIsRUFBMEIyQyxJQUFHLEVBQUMySyxPQUFNLGVBQVNwYSxDQUFULEVBQVc7QUFBQ0QsZ0JBQUV3SSxLQUFGLENBQVEsUUFBUjtBQUFrQixhQUFyQyxFQUE3QixFQUFkLEVBQW1GLENBQUN4SSxFQUFFMDdCLEVBQUYsQ0FBSzE3QixFQUFFNDdCLEVBQUYsQ0FBSzU3QixFQUFFMlosWUFBUCxDQUFMLENBQUQsQ0FBbkYsQ0FBRCxFQUFrSDNaLEVBQUUwN0IsRUFBRixDQUFLLEdBQUwsQ0FBbEgsRUFBNEhoN0IsRUFBRSxXQUFGLEVBQWMsRUFBQ3FNLGFBQVksWUFBYixFQUEwQjJDLElBQUcsRUFBQzJLLE9BQU0sZUFBU3BhLENBQVQsRUFBVztBQUFDRCxnQkFBRXdJLEtBQUYsQ0FBUSxJQUFSO0FBQWMsYUFBakMsRUFBN0IsRUFBZCxFQUErRSxDQUFDeEksRUFBRTA3QixFQUFGLENBQUsxN0IsRUFBRTQ3QixFQUFGLENBQUs1N0IsRUFBRXlaLFFBQVAsQ0FBTCxDQUFELENBQS9FLENBQTVILENBQXRCLEVBQTRQLENBQTVQLENBQXhOLENBQWhILEVBQXdrQixDQUF4a0IsQ0FBUDtBQUFrbEIsT0FBbnBCLEVBQW9wQnpYLGlCQUFnQixFQUFwcUIsRUFBVjtBQUFrckIsR0FOdnUxQixFQU0wdTFCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSxhQUFiLEVBQTJCMkMsSUFBRyxFQUFDMkssT0FBTXJhLEVBQUV3SSxLQUFULEVBQWVvMEIsT0FBTSxlQUFTMzhCLENBQVQsRUFBVztBQUFDLHFCQUFNLFlBQVdBLENBQVgsSUFBYyxDQUFDRCxFQUFFME0sRUFBRixDQUFLek0sRUFBRXM4QixPQUFQLEVBQWUsS0FBZixFQUFxQixFQUFyQixDQUFmLEdBQXdDLEtBQUt2OEIsRUFBRXdJLEtBQUYsQ0FBUXZJLENBQVIsQ0FBN0MsR0FBd0QsSUFBOUQ7QUFBbUUsYUFBcEcsRUFBOUIsRUFBUixDQUFQO0FBQXFKLE9BQXROLEVBQXVOK0IsaUJBQWdCLEVBQXZPLEVBQVY7QUFBcVAsR0FONysxQixFQU1nLzFCLFVBQVNoQyxDQUFULEVBQVdDLENBQVgsRUFBYTtBQUFDRCxNQUFFRSxPQUFGLEdBQVUsRUFBQzZCLFFBQU8sa0JBQVU7QUFBQyxZQUFJL0IsSUFBRSxJQUFOO0FBQUEsWUFBV0MsSUFBRUQsRUFBRW83QixjQUFmO0FBQUEsWUFBOEIxNkIsSUFBRVYsRUFBRXE3QixLQUFGLENBQVFDLEVBQVIsSUFBWXI3QixDQUE1QyxDQUE4QyxPQUFPUyxFQUFFLEtBQUYsRUFBUSxFQUFDcU0sYUFBWSwwQkFBYixFQUFSLEVBQWlELENBQUMvTSxFQUFFMkksRUFBRixDQUFLLFNBQUwsQ0FBRCxDQUFqRCxFQUFtRSxDQUFuRSxDQUFQO0FBQTZFLE9BQTlJLEVBQStJM0csaUJBQWdCLEVBQS9KLEVBQVY7QUFBNkssR0FOM3EyQixFQU04cTJCLFVBQVMvQixDQUFULEVBQVdTLENBQVgsRUFBYTtBQUFDVCxNQUFFQyxPQUFGLEdBQVVGLENBQVY7QUFBWSxHQU54czJCLEVBTTJzMkIsVUFBU0EsQ0FBVCxFQUFXQyxDQUFYLEVBQWFTLENBQWIsRUFBZTtBQUFDO0FBQWEsYUFBU0QsQ0FBVCxDQUFXVCxDQUFYLEVBQWE7QUFBQyxhQUFPQSxLQUFHQSxFQUFFc0IsVUFBTCxHQUFnQnRCLENBQWhCLEdBQWtCLEVBQUN1QixTQUFRdkIsQ0FBVCxFQUF6QjtBQUFxQyxZQUFPa0IsY0FBUCxDQUFzQmpCLENBQXRCLEVBQXdCLFlBQXhCLEVBQXFDLEVBQUNrRCxPQUFNLENBQUMsQ0FBUixFQUFyQyxFQUFpRCxJQUFJeEMsSUFBRUQsRUFBRSxHQUFGLENBQU47QUFBQSxRQUFha0IsSUFBRW5CLEVBQUVFLENBQUYsQ0FBZjtBQUFBLFFBQW9Ca0IsSUFBRW5CLEVBQUUsRUFBRixDQUF0QjtBQUFBLFFBQTRCaUIsSUFBRWxCLEVBQUVvQixDQUFGLENBQTlCO0FBQUEsUUFBbUNiLElBQUVOLEVBQUUsRUFBRixDQUFyQztBQUFBLFFBQTJDRSxJQUFFSCxFQUFFTyxDQUFGLENBQTdDO0FBQUEsUUFBa0RELElBQUVMLEVBQUUsRUFBRixDQUFwRDtBQUFBLFFBQTBEZ0MsSUFBRWpDLEVBQUVNLENBQUYsQ0FBNUQ7QUFBQSxRQUFpRUQsSUFBRUosRUFBRSxFQUFGLENBQW5FO0FBQUEsUUFBeUU0RCxJQUFFN0QsRUFBRUssQ0FBRixDQUEzRTtBQUFBLFFBQWdGWSxJQUFFaEIsRUFBRSxFQUFGLENBQWxGO0FBQUEsUUFBd0YwRSxJQUFFM0UsRUFBRWlCLENBQUYsQ0FBMUY7QUFBQSxRQUErRjRELElBQUU1RSxFQUFFLEVBQUYsQ0FBakc7QUFBQSxRQUF1RzhFLElBQUUvRSxFQUFFNkUsQ0FBRixDQUF6RztBQUFBLFFBQThHSSxJQUFFaEYsRUFBRSxFQUFGLENBQWhIO0FBQUEsUUFBc0hpRixJQUFFbEYsRUFBRWlGLENBQUYsQ0FBeEg7QUFBQSxRQUE2SEUsSUFBRWxGLEVBQUUsRUFBRixDQUEvSDtBQUFBLFFBQXFJMkcsSUFBRTVHLEVBQUVtRixDQUFGLENBQXZJO0FBQUEsUUFBNEkwQixJQUFFNUcsRUFBRSxFQUFGLENBQTlJO0FBQUEsUUFBb0o2RyxJQUFFOUcsRUFBRTZHLENBQUYsQ0FBdEo7QUFBQSxRQUEySkUsSUFBRTlHLEVBQUUsRUFBRixDQUE3SjtBQUFBLFFBQW1LK0csSUFBRWhILEVBQUUrRyxDQUFGLENBQXJLO0FBQUEsUUFBMEtFLElBQUVoSCxFQUFFLEVBQUYsQ0FBNUs7QUFBQSxRQUFrTGlILElBQUVsSCxFQUFFaUgsQ0FBRixDQUFwTDtBQUFBLFFBQXlMRSxJQUFFbEgsRUFBRSxFQUFGLENBQTNMO0FBQUEsUUFBaU15RSxJQUFFMUUsRUFBRW1ILENBQUYsQ0FBbk07QUFBQSxRQUF3TTNCLElBQUV2RixFQUFFLEVBQUYsQ0FBMU07QUFBQSxRQUFnTm1ILElBQUVwSCxFQUFFd0YsQ0FBRixDQUFsTjtBQUFBLFFBQXVONkIsSUFBRXBILEVBQUUsRUFBRixDQUF6TjtBQUFBLFFBQStOMkUsSUFBRTVFLEVBQUVxSCxDQUFGLENBQWpPO0FBQUEsUUFBc095eEIsSUFBRTc0QixFQUFFLEVBQUYsQ0FBeE87QUFBQSxRQUE4Tzg0QixJQUFFLzRCLEVBQUU4NEIsQ0FBRixDQUFoUDtBQUFBLFFBQXFQRSxJQUFFLzRCLEVBQUUsRUFBRixDQUF2UDtBQUFBLFFBQTZQZzVCLElBQUVqNUIsRUFBRWc1QixDQUFGLENBQS9QO0FBQUEsUUFBb1FsMEIsSUFBRTdFLEVBQUUsRUFBRixDQUF0UTtBQUFBLFFBQTRRaTVCLElBQUVsNUIsRUFBRThFLENBQUYsQ0FBOVE7QUFBQSxRQUFtUk4sSUFBRXZFLEVBQUUsRUFBRixDQUFyUjtBQUFBLFFBQTJSazVCLElBQUVuNUIsRUFBRXdFLENBQUYsQ0FBN1I7QUFBQSxRQUFrU1EsSUFBRS9FLEVBQUUsRUFBRixDQUFwUztBQUFBLFFBQTBTbTVCLElBQUVwNUIsRUFBRWdGLENBQUYsQ0FBNVM7QUFBQSxRQUFpVHMwQixJQUFFcjVCLEVBQUUsRUFBRixDQUFuVDtBQUFBLFFBQXlUd0YsSUFBRXpGLEVBQUVzNUIsQ0FBRixDQUEzVDtBQUFBLFFBQWdVRSxJQUFFdjVCLEVBQUUsR0FBRixDQUFsVTtBQUFBLFFBQXlVd0UsSUFBRXpFLEVBQUV3NUIsQ0FBRixDQUEzVTtBQUFBLFFBQWdWRSxJQUFFejVCLEVBQUUsR0FBRixDQUFsVjtBQUFBLFFBQXlWMDVCLElBQUUzNUIsRUFBRTA1QixDQUFGLENBQTNWO0FBQUEsUUFBZ1dFLElBQUUzNUIsRUFBRSxHQUFGLENBQWxXO0FBQUEsUUFBeVc0NUIsSUFBRTc1QixFQUFFNDVCLENBQUYsQ0FBM1c7QUFBQSxRQUFnWEUsSUFBRTc1QixFQUFFLEdBQUYsQ0FBbFg7QUFBQSxRQUF5WDg1QixJQUFFLzVCLEVBQUU4NUIsQ0FBRixDQUEzWDtBQUFBLFFBQWdZRSxLQUFHLzVCLEVBQUUsR0FBRixDQUFuWTtBQUFBLFFBQTBZZzZCLEtBQUdqNkIsRUFBRWc2QixFQUFGLENBQTdZO0FBQUEsUUFBbVpFLEtBQUdqNkIsRUFBRSxHQUFGLENBQXRaO0FBQUEsUUFBNlprOUIsS0FBR245QixFQUFFazZCLEVBQUYsQ0FBaGE7QUFBQSxRQUFzYWtELEtBQUduOUIsRUFBRSxHQUFGLENBQXphO0FBQUEsUUFBZ2JvOUIsS0FBR3I5QixFQUFFbzlCLEVBQUYsQ0FBbmI7QUFBQSxRQUF5YkUsS0FBR3I5QixFQUFFLEdBQUYsQ0FBNWI7QUFBQSxRQUFtY3M5QixLQUFHdjlCLEVBQUVzOUIsRUFBRixDQUF0YztBQUFBLFFBQTRjRSxLQUFHdjlCLEVBQUUsR0FBRixDQUEvYztBQUFBLFFBQXNkdzlCLEtBQUd6OUIsRUFBRXc5QixFQUFGLENBQXpkO0FBQUEsUUFBK2RFLEtBQUd6OUIsRUFBRSxHQUFGLENBQWxlO0FBQUEsUUFBeWUwOUIsS0FBRzM5QixFQUFFMDlCLEVBQUYsQ0FBNWU7QUFBQSxRQUFrZkUsS0FBRzM5QixFQUFFLEdBQUYsQ0FBcmY7QUFBQSxRQUE0ZjQ5QixLQUFHNzlCLEVBQUU0OUIsRUFBRixDQUEvZjtBQUFBLFFBQXFnQkUsS0FBRzc5QixFQUFFLEdBQUYsQ0FBeGdCO0FBQUEsUUFBK2dCODlCLEtBQUcvOUIsRUFBRTg5QixFQUFGLENBQWxoQjtBQUFBLFFBQXdoQkUsS0FBRy85QixFQUFFLEdBQUYsQ0FBM2hCO0FBQUEsUUFBa2lCZytCLEtBQUdqK0IsRUFBRWcrQixFQUFGLENBQXJpQjtBQUFBLFFBQTJpQkUsS0FBR2orQixFQUFFLEdBQUYsQ0FBOWlCO0FBQUEsUUFBcWpCaytCLEtBQUduK0IsRUFBRWsrQixFQUFGLENBQXhqQjtBQUFBLFFBQThqQmgyQixLQUFHLEVBQUNrMkIsUUFBT2o5QixFQUFFTCxPQUFWLEVBQWtCdTlCLFVBQVNuOUIsRUFBRUosT0FBN0IsRUFBcUN3OUIsWUFBV24rQixFQUFFVyxPQUFsRCxFQUEwRHk5QixhQUFZdDhCLEVBQUVuQixPQUF4RSxFQUFnRjA5QixVQUFTMzZCLEVBQUUvQyxPQUEzRixFQUFtRzI5QixnQkFBZTk1QixFQUFFN0QsT0FBcEgsRUFBNEg0OUIsUUFBTzM1QixFQUFFakUsT0FBckksRUFBNkk2OUIsWUFBV3o1QixFQUFFcEUsT0FBMUosRUFBa0s4OUIsU0FBUWg0QixFQUFFOUYsT0FBNUssRUFBb0wrOUIsVUFBUy8zQixFQUFFaEcsT0FBL0wsRUFBdU1nK0IsV0FBVTkzQixFQUFFbEcsT0FBbk4sRUFBMk5pK0IsUUFBTzczQixFQUFFcEcsT0FBcE8sRUFBNE9rK0IsUUFBT3Q2QixFQUFFNUQsT0FBclAsRUFBNlBtK0IsU0FBUTczQixFQUFFdEcsT0FBdlEsRUFBK1FvK0Isa0JBQWlCdDZCLEVBQUU5RCxPQUFsUyxFQUEwU3ErQixVQUFTcEcsRUFBRWo0QixPQUFyVCxFQUE2VHMrQixRQUFPbkcsRUFBRW40QixPQUF0VSxFQUE4VXUrQixRQUFPbkcsRUFBRXA0QixPQUF2VixFQUErVncrQixjQUFhbkcsRUFBRXI0QixPQUE5VyxFQUFzWHkrQixZQUFXbkcsRUFBRXQ0QixPQUFuWSxFQUEyWTArQixTQUFRLzVCLEVBQUUzRSxPQUFyWixFQUE2WjIrQixhQUFZaDdCLEVBQUUzRCxPQUEzYSxFQUFtYjQrQixVQUFTL0YsRUFBRTc0QixPQUE5YixFQUFzYzYrQixXQUFVOUYsRUFBRS80QixPQUFsZCxFQUEwZDgrQixZQUFXN0YsRUFBRWo1QixPQUF2ZSxFQUErZSsrQixhQUFZNUYsR0FBR241QixPQUE5ZixFQUFzZ0JnL0IsV0FBVTNDLEdBQUdyOEIsT0FBbmhCLEVBQTJoQmkvQixXQUFVMUMsR0FBR3Y4QixPQUF4aUIsRUFBZ2pCay9CLGFBQVl6QyxHQUFHejhCLE9BQS9qQixFQUF1a0JtL0IsVUFBU3hDLEdBQUczOEIsT0FBbmxCLEVBQTJsQm8vQixTQUFRdkMsR0FBRzc4QixPQUF0bUIsRUFBOG1CcS9CLFFBQU90QyxHQUFHLzhCLE9BQXhuQixFQUFnb0JzL0IsV0FBVXJDLEdBQUdqOUIsT0FBN29CLEVBQXFwQnUvQixXQUFVcEMsR0FBR245QixPQUFscUIsRUFBMHFCdy9CLGNBQWFuQyxHQUFHcjlCLE9BQTFyQixFQUFqa0IsQ0FBb3dDb0gsR0FBR3E0QixPQUFILEdBQVcsVUFBU2hoQyxDQUFULEVBQVc7QUFBQyxXQUFJLElBQUlDLENBQVIsSUFBYTBJLEVBQWIsRUFBZ0I7QUFBQyxZQUFJakksSUFBRWlJLEdBQUcxSSxDQUFILENBQU4sQ0FBWVMsS0FBRyxjQUFZVCxDQUFmLElBQWtCRCxFQUFFb04sR0FBRixDQUFNMU0sQ0FBTixDQUFsQjtBQUEyQjtBQUFDLEtBQWhGLEVBQWlGVCxFQUFFc0IsT0FBRixHQUFVb0gsRUFBM0YsRUFBOEYzSSxFQUFFRSxPQUFGLEdBQVVELEVBQUVzQixPQUExRztBQUFrSCxHQU5sczVCLHFDQU13dTVCLFVBQVN2QixDQUFULEVBQVdDLENBQVgsRUFBYVMsQ0FBYixFQUFlO0FBQUNWLE1BQUVFLE9BQUYsR0FBVVEsRUFBRSxHQUFGLENBQVY7QUFBaUIsR0FOenc1QixDQUFqZixDQUFQO0FBTXF3NkIsQ0FOemc3QixDQUFEIiwiZmlsZSI6InZ1ZS1tYXRlcmlhbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuKiBWdWUgTWF0ZXJpYWwgdjAuNy40XG4qIE1hZGUgd2l0aCBsb3ZlIGJ5IE1hcmNvcyBNb3VyYVxuKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4qLyAgIFxuIShmdW5jdGlvbih0LGUpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWUocmVxdWlyZShcInZ1ZVwiKSk6XCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJ2dWVcIl0sZSk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/ZXhwb3J0cy5WdWVNYXRlcmlhbD1lKHJlcXVpcmUoXCJ2dWVcIikpOnQuVnVlTWF0ZXJpYWw9ZSh0LlZ1ZSl9KSh0aGlzLChmdW5jdGlvbih0KXtyZXR1cm4gKGZ1bmN0aW9uKHQpe2Z1bmN0aW9uIGUoaSl7aWYobltpXSlyZXR1cm4gbltpXS5leHBvcnRzO3ZhciBvPW5baV09e2k6aSxsOiExLGV4cG9ydHM6e319O3JldHVybiB0W2ldLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLGUpLG8ubD0hMCxvLmV4cG9ydHN9dmFyIG49e307cmV0dXJuIGUubT10LGUuYz1uLGUuaT1mdW5jdGlvbih0KXtyZXR1cm4gdH0sZS5kPWZ1bmN0aW9uKHQsbixpKXtlLm8odCxuKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7Y29uZmlndXJhYmxlOiExLGVudW1lcmFibGU6ITAsZ2V0Oml9KX0sZS5uPWZ1bmN0aW9uKHQpe3ZhciBuPXQmJnQuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiB0LmRlZmF1bHR9OmZ1bmN0aW9uKCl7cmV0dXJuIHR9O3JldHVybiBlLmQobixcImFcIixuKSxufSxlLm89ZnVuY3Rpb24odCxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsZSl9LGUucD1cIi9cIixlKGUucz00ODEpfSkoWyhmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixpLG8pe3ZhciBhLHI9dD10fHx7fSxzPXR5cGVvZiB0LmRlZmF1bHQ7XCJvYmplY3RcIiE9PXMmJlwiZnVuY3Rpb25cIiE9PXN8fChhPXQscj10LmRlZmF1bHQpO3ZhciBkPVwiZnVuY3Rpb25cIj09dHlwZW9mIHI/ci5vcHRpb25zOnI7ZSYmKGQucmVuZGVyPWUucmVuZGVyLGQuc3RhdGljUmVuZGVyRm5zPWUuc3RhdGljUmVuZGVyRm5zKSxpJiYoZC5fc2NvcGVJZD1pKTt2YXIgbDtpZihvPyhsPWZ1bmN0aW9uKHQpe3Q9dHx8dGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR8fHRoaXMucGFyZW50JiZ0aGlzLnBhcmVudC4kdm5vZGUmJnRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0LHR8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9ffHwodD1fX1ZVRV9TU1JfQ09OVEVYVF9fKSxuJiZuLmNhbGwodGhpcyx0KSx0JiZ0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cyYmdC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG8pfSxkLl9zc3JSZWdpc3Rlcj1sKTpuJiYobD1uKSxsKXt2YXIgYz1kLmZ1bmN0aW9uYWwsdT1jP2QucmVuZGVyOmQuYmVmb3JlQ3JlYXRlO2M/ZC5yZW5kZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbC5jYWxsKGUpLHUodCxlKX06ZC5iZWZvcmVDcmVhdGU9dT9bXS5jb25jYXQodSxsKTpbbF19cmV0dXJue2VzTW9kdWxlOmEsZXhwb3J0czpyLG9wdGlvbnM6ZH19fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe2lmKCF0KXJldHVybiBudWxsO3ZhciBlPXQubWRUaGVtZTtyZXR1cm4gZXx8XCJtZC10aGVtZVwiIT09dC4kb3B0aW9ucy5fY29tcG9uZW50VGFnfHwoZT10Lm1kTmFtZSksZXx8aSh0LiRwYXJlbnQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17cHJvcHM6e21kVGhlbWU6U3RyaW5nfSxjb21wdXRlZDp7bWRFZmZlY3RpdmVUaGVtZTpmdW5jdGlvbigpe3JldHVybiBpKHRoaXMpfHx0aGlzLiRtYXRlcmlhbC5jdXJyZW50VGhlbWV9LHRoZW1lQ2xhc3M6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kbWF0ZXJpYWwucHJlZml4K3RoaXMubWRFZmZlY3RpdmVUaGVtZX19LHdhdGNoOnttZFRoZW1lOmZ1bmN0aW9uKHQpe3RoaXMuJG1hdGVyaWFsLnVzZVRoZW1lKHQpfX0sYmVmb3JlTW91bnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm1kVGhlbWU7dGhpcy4kbWF0ZXJpYWwudXNlVGhlbWUodD90OlwiZGVmYXVsdFwiKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmV4cG9ydHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyYmd2luZG93Lk1hdGg9PU1hdGg/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmJiZzZWxmLk1hdGg9PU1hdGg/c2VsZjpGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XCJudW1iZXJcIj09dHlwZW9mIF9fZyYmKF9fZz1uKX0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPSFuKDUpKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkoe30sXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSl9KSwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmV4cG9ydHM9e3ZlcnNpb246XCIyLjQuMFwifTtcIm51bWJlclwiPT10eXBlb2YgX19lJiYoX19lPW4pfSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4hIXQoKX1jYXRjaCh0KXtyZXR1cm4hMH19fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVyblwib2JqZWN0XCI9PXR5cGVvZiB0P251bGwhPT10OlwiZnVuY3Rpb25cIj09dHlwZW9mIHR9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDI2KSxvPW4oMTQpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaShvKHQpKX19KSwoZnVuY3Rpb24odCxlKXt2YXIgbj17fS5oYXNPd25Qcm9wZXJ0eTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbi5jYWxsKHQsZSl9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDEzKSxvPW4oMzApLGE9bigyNykscj1PYmplY3QuZGVmaW5lUHJvcGVydHk7ZS5mPW4oMyk/T2JqZWN0LmRlZmluZVByb3BlcnR5OmZ1bmN0aW9uKHQsZSxuKXtpZihpKHQpLGU9YShlLCEwKSxpKG4pLG8pdHJ5e3JldHVybiByKHQsZSxuKX1jYXRjaCh0KXt9aWYoXCJnZXRcImluIG58fFwic2V0XCJpbiBuKXRocm93IFR5cGVFcnJvcihcIkFjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIVwiKTtyZXR1cm5cInZhbHVlXCJpbiBuJiYodFtlXT1uLnZhbHVlKSx0fX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24gdChlLG4pe3JldHVybiEoIWV8fCFlLiRlbCkmJigwIT09ZS5fdWlkJiYoZS4kZWwuY2xhc3NMaXN0LmNvbnRhaW5zKG4pP2U6dChlLiRwYXJlbnQsbikpKX07ZS5kZWZhdWx0PWksdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9big5KSxvPW4oMTcpO3QuZXhwb3J0cz1uKDMpP2Z1bmN0aW9uKHQsZSxuKXtyZXR1cm4gaS5mKHQsZSxvKDEsbikpfTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHRbZV09bix0fX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigyMikoXCJ3a3NcIiksbz1uKDIwKSxhPW4oMikuU3ltYm9sLHI9XCJmdW5jdGlvblwiPT10eXBlb2YgYSxzPXQuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaVt0XXx8KGlbdF09ciYmYVt0XXx8KHI/YTpvKShcIlN5bWJvbC5cIit0KSl9O3Muc3RvcmU9aX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9big2KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7aWYoIWkodCkpdGhyb3cgVHlwZUVycm9yKHQrXCIgaXMgbm90IGFuIG9iamVjdCFcIik7cmV0dXJuIHR9fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMD09dCl0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIrdCk7cmV0dXJuIHR9fSksKGZ1bmN0aW9uKHQsZSl7dmFyIG49TWF0aC5jZWlsLGk9TWF0aC5mbG9vcjt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIGlzTmFOKHQ9K3QpPzA6KHQ+MD9pOm4pKHQpfX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigyKSxvPW4oNCksYT1uKDI4KSxyPW4oMTEpLHM9XCJwcm90b3R5cGVcIixkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgbCxjLHUsbT10JmQuRixmPXQmZC5HLHA9dCZkLlMsaD10JmQuUCxiPXQmZC5CLHY9dCZkLlcsRT1mP286b1tlXXx8KG9bZV09e30pLGc9RVtzXSxfPWY/aTpwP2lbZV06KGlbZV18fHt9KVtzXTtmJiYobj1lKTtmb3IobCBpbiBuKWM9IW0mJl8mJnZvaWQgMCE9PV9bbF0sYyYmbCBpbiBFfHwodT1jP19bbF06bltsXSxFW2xdPWYmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIF9bbF0/bltsXTpiJiZjP2EodSxpKTp2JiZfW2xdPT11PyhmdW5jdGlvbih0KXt2YXIgZT1mdW5jdGlvbihlLG4saSl7aWYodGhpcyBpbnN0YW5jZW9mIHQpe3N3aXRjaChhcmd1bWVudHMubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIG5ldyB0O2Nhc2UgMTpyZXR1cm4gbmV3IHQoZSk7Y2FzZSAyOnJldHVybiBuZXcgdChlLG4pfXJldHVybiBuZXcgdChlLG4saSl9cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfTtyZXR1cm4gZVtzXT10W3NdLGV9KSh1KTpoJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB1P2EoRnVuY3Rpb24uY2FsbCx1KTp1LGgmJigoRS52aXJ0dWFsfHwoRS52aXJ0dWFsPXt9KSlbbF09dSx0JmQuUiYmZyYmIWdbbF0mJnIoZyxsLHUpKSl9O2QuRj0xLGQuRz0yLGQuUz00LGQuUD04LGQuQj0xNixkLlc9MzIsZC5VPTY0LGQuUj0xMjgsdC5leHBvcnRzPWR9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm57ZW51bWVyYWJsZTohKDEmdCksY29uZmlndXJhYmxlOiEoMiZ0KSx3cml0YWJsZTohKDQmdCksdmFsdWU6ZX19fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDMxKSxvPW4oMjEpO3QuZXhwb3J0cz1PYmplY3Qua2V5c3x8ZnVuY3Rpb24odCl7cmV0dXJuIGkodCxvKX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMjIpKFwia2V5c1wiKSxvPW4oMjApO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gaVt0XXx8KGlbdF09byh0KSl9fSksKGZ1bmN0aW9uKHQsZSl7dmFyIG49MCxpPU1hdGgucmFuZG9tKCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVyblwiU3ltYm9sKFwiLmNvbmNhdCh2b2lkIDA9PT10P1wiXCI6dCxcIilfXCIsKCsrbitpKS50b1N0cmluZygzNikpfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cImNvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZlwiLnNwbGl0KFwiLFwiKX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigyKSxvPVwiX19jb3JlLWpzX3NoYXJlZF9fXCIsYT1pW29dfHwoaVtvXT17fSk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBhW3RdfHwoYVt0XT17fSl9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDE0KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIE9iamVjdChpKHQpKX19KSwoZnVuY3Rpb24odCxlKXt2YXIgbj17fS50b1N0cmluZzt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4uY2FsbCh0KS5zbGljZSg4LC0xKX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oNiksbz1uKDIpLmRvY3VtZW50LGE9aShvKSYmaShvLmNyZWF0ZUVsZW1lbnQpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gYT9vLmNyZWF0ZUVsZW1lbnQodCk6e319fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDI0KTt0LmV4cG9ydHM9T2JqZWN0KFwielwiKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKT9PYmplY3Q6ZnVuY3Rpb24odCl7cmV0dXJuXCJTdHJpbmdcIj09aSh0KT90LnNwbGl0KFwiXCIpOk9iamVjdCh0KX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oNik7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSl7aWYoIWkodCkpcmV0dXJuIHQ7dmFyIG4sbztpZihlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZihuPXQudG9TdHJpbmcpJiYhaShvPW4uY2FsbCh0KSkpcmV0dXJuIG87aWYoXCJmdW5jdGlvblwiPT10eXBlb2Yobj10LnZhbHVlT2YpJiYhaShvPW4uY2FsbCh0KSkpcmV0dXJuIG87aWYoIWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mKG49dC50b1N0cmluZykmJiFpKG89bi5jYWxsKHQpKSlyZXR1cm4gbzt0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIil9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDMzKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe2lmKGkodCksdm9pZCAwPT09ZSlyZXR1cm4gdDtzd2l0Y2gobil7Y2FzZSAxOnJldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gdC5jYWxsKGUsbil9O2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24obixpKXtyZXR1cm4gdC5jYWxsKGUsbixpKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLGksbyl7cmV0dXJuIHQuY2FsbChlLG4saSxvKX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkoZSxhcmd1bWVudHMpfX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMTUpLG89TWF0aC5taW47dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0PjA/byhpKHQpLDkwMDcxOTkyNTQ3NDA5OTEpOjB9fSksKGZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9IW4oMykmJiFuKDUpKChmdW5jdGlvbigpe3JldHVybiA3IT1PYmplY3QuZGVmaW5lUHJvcGVydHkobigyNSkoXCJkaXZcIiksXCJhXCIse2dldDpmdW5jdGlvbigpe3JldHVybiA3fX0pLmF9KSl9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oOCksbz1uKDcpLGE9bigzNCkoITEpLHI9bigxOSkoXCJJRV9QUk9UT1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbixzPW8odCksZD0wLGw9W107Zm9yKG4gaW4gcyluIT1yJiZpKHMsbikmJmwucHVzaChuKTtmb3IoO2UubGVuZ3RoPmQ7KWkocyxuPWVbZCsrXSkmJih+YShsLG4pfHxsLnB1c2gobikpO3JldHVybiBsfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17fX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0KXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhIGZ1bmN0aW9uIVwiKTtyZXR1cm4gdH19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oNyksbz1uKDI5KSxhPW4oMzUpO3QuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSxuLHIpe3ZhciBzLGQ9aShlKSxsPW8oZC5sZW5ndGgpLGM9YShyLGwpO2lmKHQmJm4hPW4pe2Zvcig7bD5jOylpZihzPWRbYysrXSxzIT1zKXJldHVybiEwfWVsc2UgZm9yKDtsPmM7YysrKWlmKCh0fHxjIGluIGQpJiZkW2NdPT09bilyZXR1cm4gdHx8Y3x8MDtyZXR1cm4hdCYmLTF9fX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigxNSksbz1NYXRoLm1heCxhPU1hdGgubWluO3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybiB0PWkodCksdDwwP28odCtlLDApOmEodCxlKX19KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDQpfTtlLmRlZmF1bHQ9aSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDkpLmYsbz1uKDgpLGE9bigxMikoXCJ0b1N0cmluZ1RhZ1wiKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3QmJiFvKHQ9bj90OnQucHJvdG90eXBlLGEpJiZpKHQsYSx7Y29uZmlndXJhYmxlOiEwLHZhbHVlOmV9KX19KSwoZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz17ZGVmYXVsdDpuKDQzKSxfX2VzTW9kdWxlOiEwfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz0hMH0pLChmdW5jdGlvbih0LGUpe2UuZj17fS5wcm9wZXJ0eUlzRW51bWVyYWJsZX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSgpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLGU9e3RyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsT1RyYW5zaXRpb246XCJvVHJhbnNpdGlvbkVuZFwiLE1velRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsV2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIn07Zm9yKHZhciBuIGluIGUpaWYodm9pZCAwIT09dC5zdHlsZVtuXSlyZXR1cm4gZVtuXX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9aSgpLHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO3ZhciBpPW4oMzkpLG89bigxNiksYT1uKDQ3KSxyPW4oMTEpLHM9big4KSxkPW4oMzIpLGw9big1MyksYz1uKDM3KSx1PW4oNTUpLG09bigxMikoXCJpdGVyYXRvclwiKSxmPSEoW10ua2V5cyYmXCJuZXh0XCJpbltdLmtleXMoKSkscD1cIkBAaXRlcmF0b3JcIixoPVwia2V5c1wiLGI9XCJ2YWx1ZXNcIix2PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9O3QuZXhwb3J0cz1mdW5jdGlvbih0LGUsbixFLGcsXyxDKXtsKG4sZSxFKTt2YXIgTSxULEEseD1mdW5jdGlvbih0KXtpZighZiYmdCBpbiBTKXJldHVybiBTW3RdO3N3aXRjaCh0KXtjYXNlIGg6cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKHRoaXMsdCl9O2Nhc2UgYjpyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4odGhpcyx0KX19cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBuKHRoaXMsdCl9fSxOPWUrXCIgSXRlcmF0b3JcIix5PWc9PWIsTz0hMSxTPXQucHJvdG90eXBlLFI9U1ttXXx8U1twXXx8ZyYmU1tnXSx3PVJ8fHgoZyksaz1nP3k/eChcImVudHJpZXNcIik6dzp2b2lkIDAsUD1cIkFycmF5XCI9PWU/Uy5lbnRyaWVzfHxSOlI7aWYoUCYmKEE9dShQLmNhbGwobmV3IHQpKSxBIT09T2JqZWN0LnByb3RvdHlwZSYmKGMoQSxOLCEwKSxpfHxzKEEsbSl8fHIoQSxtLHYpKSkseSYmUiYmUi5uYW1lIT09YiYmKE89ITAsdz1mdW5jdGlvbigpe3JldHVybiBSLmNhbGwodGhpcyl9KSxpJiYhQ3x8IWYmJiFPJiZTW21dfHxyKFMsbSx3KSxkW2VdPXcsZFtOXT12LGcpaWYoTT17dmFsdWVzOnk/dzp4KGIpLGtleXM6Xz93OngoaCksZW50cmllczprfSxDKWZvcihUIGluIE0pVCBpbiBTfHxhKFMsVCxNW1RdKTtlbHNlIG8oby5QK28uRiooZnx8TyksZSxNKTtyZXR1cm4gTX19KSwoZnVuY3Rpb24odCxlLG4pe24oNDgpLHQuZXhwb3J0cz1uKDQpLk9iamVjdC5rZXlzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDEzKSxvPW4oNTQpLGE9bigyMSkscj1uKDE5KShcIklFX1BST1RPXCIpLHM9ZnVuY3Rpb24oKXt9LGQ9XCJwcm90b3R5cGVcIixsPWZ1bmN0aW9uKCl7dmFyIHQsZT1uKDI1KShcImlmcmFtZVwiKSxpPWEubGVuZ3RoLG89XCI8XCIscj1cIj5cIjtmb3IoZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLG4oNTIpLmFwcGVuZENoaWxkKGUpLGUuc3JjPVwiamF2YXNjcmlwdDpcIix0PWUuY29udGVudFdpbmRvdy5kb2N1bWVudCx0Lm9wZW4oKSx0LndyaXRlKG8rXCJzY3JpcHRcIityK1wiZG9jdW1lbnQuRj1PYmplY3RcIitvK1wiL3NjcmlwdFwiK3IpLHQuY2xvc2UoKSxsPXQuRjtpLS07KWRlbGV0ZSBsW2RdW2FbaV1dO3JldHVybiBsKCl9O3QuZXhwb3J0cz1PYmplY3QuY3JlYXRlfHxmdW5jdGlvbih0LGUpe3ZhciBuO3JldHVybiBudWxsIT09dD8oc1tkXT1pKHQpLG49bmV3IHMsc1tkXT1udWxsLG5bcl09dCk6bj1sKCksdm9pZCAwPT09ZT9uOm8obixlKX19KSwoZnVuY3Rpb24odCxlKXtlLmY9T2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigxNiksbz1uKDQpLGE9big1KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt2YXIgbj0oby5PYmplY3R8fHt9KVt0XXx8T2JqZWN0W3RdLHI9e307clt0XT1lKG4pLGkoaS5TK2kuRiphKChmdW5jdGlvbigpe24oMSl9KSksXCJPYmplY3RcIixyKX19KSwoZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz1uKDExKX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigyMyksbz1uKDE4KTtuKDQ2KShcImtleXNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIG8oaSh0KSl9fSkpfSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1uKDU2KSghMCk7big0MikoU3RyaW5nLFwiU3RyaW5nXCIsKGZ1bmN0aW9uKHQpe3RoaXMuX3Q9U3RyaW5nKHQpLHRoaXMuX2k9MH0pLChmdW5jdGlvbigpe3ZhciB0LGU9dGhpcy5fdCxuPXRoaXMuX2k7cmV0dXJuIG4+PWUubGVuZ3RoP3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06KHQ9aShlLG4pLHRoaXMuX2krPXQubGVuZ3RoLHt2YWx1ZTp0LGRvbmU6ITF9KX0pKX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24odCxlKXt2YXIgbj0hMTtyZXR1cm4gZnVuY3Rpb24oKXtufHwodC5jYWxsKCksbj0hMCx3aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtuPSExfSksZSkpfX07ZS5kZWZhdWx0PWksdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oNTkpLF9fZXNNb2R1bGU6ITB9fSksKGZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9bigyKS5kb2N1bWVudCYmZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1uKDQ0KSxvPW4oMTcpLGE9bigzNykscj17fTtuKDExKShyLG4oMTIpKFwiaXRlcmF0b3JcIiksKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSksdC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXt0LnByb3RvdHlwZT1pKHIse25leHQ6bygxLG4pfSksYSh0LGUrXCIgSXRlcmF0b3JcIil9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDkpLG89bigxMyksYT1uKDE4KTt0LmV4cG9ydHM9bigzKT9PYmplY3QuZGVmaW5lUHJvcGVydGllczpmdW5jdGlvbih0LGUpe28odCk7Zm9yKHZhciBuLHI9YShlKSxzPXIubGVuZ3RoLGQ9MDtzPmQ7KWkuZih0LG49cltkKytdLGVbbl0pO3JldHVybiB0fX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9big4KSxvPW4oMjMpLGE9bigxOSkoXCJJRV9QUk9UT1wiKSxyPU9iamVjdC5wcm90b3R5cGU7dC5leHBvcnRzPU9iamVjdC5nZXRQcm90b3R5cGVPZnx8ZnVuY3Rpb24odCl7cmV0dXJuIHQ9byh0KSxpKHQsYSk/dFthXTpcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LmNvbnN0cnVjdG9yJiZ0IGluc3RhbmNlb2YgdC5jb25zdHJ1Y3Rvcj90LmNvbnN0cnVjdG9yLnByb3RvdHlwZTp0IGluc3RhbmNlb2YgT2JqZWN0P3I6bnVsbH19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMTUpLG89bigxNCk7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihlLG4pe3ZhciBhLHIscz1TdHJpbmcobyhlKSksZD1pKG4pLGw9cy5sZW5ndGg7cmV0dXJuIGQ8MHx8ZD49bD90P1wiXCI6dm9pZCAwOihhPXMuY2hhckNvZGVBdChkKSxhPDU1Mjk2fHxhPjU2MzE5fHxkKzE9PT1sfHwocj1zLmNoYXJDb2RlQXQoZCsxKSk8NTYzMjB8fHI+NTczNDM/dD9zLmNoYXJBdChkKTphOnQ/cy5zbGljZShkLGQrMik6KGEtNTUyOTY8PDEwKSsoci01NjMyMCkrNjU1MzYpfX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oNjApLG89bigxMikoXCJpdGVyYXRvclwiKSxhPW4oMzIpO3QuZXhwb3J0cz1uKDQpLmdldEl0ZXJhdG9yTWV0aG9kPWZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9dClyZXR1cm4gdFtvXXx8dFtcIkBAaXRlcmF0b3JcIl18fGFbaSh0KV19fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e3Byb3BzOnt2YWx1ZTpbU3RyaW5nLE51bWJlcl0sZGVib3VuY2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTAwfSxkaXNhYmxlZDpCb29sZWFuLHJlcXVpcmVkOkJvb2xlYW4sbWF4bGVuZ3RoOltOdW1iZXIsU3RyaW5nXSxuYW1lOlN0cmluZyxwbGFjZWhvbGRlcjpTdHJpbmcscmVhZG9ubHk6Qm9vbGVhbn0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0aW1lb3V0OjB9fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVZhbHVlcygpfSxkaXNhYmxlZDpmdW5jdGlvbigpe3RoaXMuc2V0UGFyZW50RGlzYWJsZWQoKX0scmVxdWlyZWQ6ZnVuY3Rpb24oKXt0aGlzLnNldFBhcmVudFJlcXVpcmVkKCl9LHBsYWNlaG9sZGVyOmZ1bmN0aW9uKCl7dGhpcy5zZXRQYXJlbnRQbGFjZWhvbGRlcigpfSxtYXhsZW5ndGg6ZnVuY3Rpb24oKXt0aGlzLmhhbmRsZU1heExlbmd0aCgpfX0sbWV0aG9kczp7aGFuZGxlTWF4TGVuZ3RoOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDb250YWluZXIuZW5hYmxlQ291bnRlcj10aGlzLm1heGxlbmd0aD4wLHRoaXMucGFyZW50Q29udGFpbmVyLmNvdW50ZXJMZW5ndGg9dGhpcy5tYXhsZW5ndGh9LGxhenlFdmVudEVtaXR0ZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMudGltZW91dCYmd2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpLHRoaXMudGltZW91dD13aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LiRlbWl0KFwiY2hhbmdlXCIsdC4kZWwudmFsdWUpLHQuJGVtaXQoXCJpbnB1dFwiLHQuJGVsLnZhbHVlKX0pLHRoaXMuZGVib3VuY2UpfSxzZXRQYXJlbnRWYWx1ZTpmdW5jdGlvbih0KXt0aGlzLnBhcmVudENvbnRhaW5lci5zZXRWYWx1ZSh0fHx0aGlzLiRlbC52YWx1ZSl9LHNldFBhcmVudERpc2FibGVkOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDb250YWluZXIuaXNEaXNhYmxlZD10aGlzLmRpc2FibGVkfSxzZXRQYXJlbnRSZXF1aXJlZDpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyLmlzUmVxdWlyZWQ9dGhpcy5yZXF1aXJlZH0sc2V0UGFyZW50UGxhY2Vob2xkZXI6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lci5oYXNQbGFjZWhvbGRlcj0hIXRoaXMucGxhY2Vob2xkZXJ9LHVwZGF0ZVZhbHVlczpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soKGZ1bmN0aW9uKCl7dmFyIGU9dC4kZWwudmFsdWV8fHQudmFsdWU7dC5zZXRQYXJlbnRWYWx1ZShlKSx0LnBhcmVudENvbnRhaW5lci5pbnB1dExlbmd0aD1lP2UubGVuZ3RoOjB9KSl9LG9uRm9jdXM6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lciYmKHRoaXMucGFyZW50Q29udGFpbmVyLmlzRm9jdXNlZD0hMCl9LG9uQmx1cjpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyLmlzRm9jdXNlZD0hMSx0aGlzLnNldFBhcmVudFZhbHVlKCl9LG9uSW5wdXQ6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVZhbHVlcygpLHRoaXMubGF6eUV2ZW50RW1pdHRlcigpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe24oNjQpLHQuZXhwb3J0cz1uKDQpLk9iamVjdC5hc3NpZ259KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMjQpLG89bigxMikoXCJ0b1N0cmluZ1RhZ1wiKSxhPVwiQXJndW1lbnRzXCI9PWkoZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzfSgpKSxyPWZ1bmN0aW9uKHQsZSl7dHJ5e3JldHVybiB0W2VdfWNhdGNoKHQpe319O3QuZXhwb3J0cz1mdW5jdGlvbih0KXt2YXIgZSxuLHM7cmV0dXJuIHZvaWQgMD09PXQ/XCJVbmRlZmluZWRcIjpudWxsPT09dD9cIk51bGxcIjpcInN0cmluZ1wiPT10eXBlb2Yobj1yKGU9T2JqZWN0KHQpLG8pKT9uOmE/aShlKTpcIk9iamVjdFwiPT0ocz1pKGUpKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZS5jYWxsZWU/XCJBcmd1bWVudHNcIjpzfX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9bigxOCksbz1uKDQ1KSxhPW4oNDApLHI9bigyMykscz1uKDI2KSxkPU9iamVjdC5hc3NpZ247dC5leHBvcnRzPSFkfHxuKDUpKChmdW5jdGlvbigpe3ZhciB0PXt9LGU9e30sbj1TeW1ib2woKSxpPVwiYWJjZGVmZ2hpamtsbW5vcHFyc3RcIjtyZXR1cm4gdFtuXT03LGkuc3BsaXQoXCJcIikuZm9yRWFjaCgoZnVuY3Rpb24odCl7ZVt0XT10fSkpLDchPWQoe30sdClbbl18fE9iamVjdC5rZXlzKGQoe30sZSkpLmpvaW4oXCJcIikhPWl9KSk/ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49cih0KSxkPWFyZ3VtZW50cy5sZW5ndGgsbD0xLGM9by5mLHU9YS5mO2Q+bDspZm9yKHZhciBtLGY9cyhhcmd1bWVudHNbbCsrXSkscD1jP2koZikuY29uY2F0KGMoZikpOmkoZiksaD1wLmxlbmd0aCxiPTA7aD5iOyl1LmNhbGwoZixtPXBbYisrXSkmJihuW21dPWZbbV0pO3JldHVybiBufTpkfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDIpLG89big0KSxhPW4oMzkpLHI9big2Mykscz1uKDkpLmY7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3ZhciBlPW8uU3ltYm9sfHwoby5TeW1ib2w9YT97fTppLlN5bWJvbHx8e30pO1wiX1wiPT10LmNoYXJBdCgwKXx8dCBpbiBlfHxzKGUsdCx7dmFsdWU6ci5mKHQpfSl9fSksKGZ1bmN0aW9uKHQsZSxuKXtlLmY9bigxMil9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMTYpO2koaS5TK2kuRixcIk9iamVjdFwiLHthc3NpZ246big2MSl9KX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIGk9ZnVuY3Rpb24odCxlLG4pe3ZhciBpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik7dC5jcm9zc09yaWdpbj1cIkFub255bW91c1wiLHQub25sb2FkPWZ1bmN0aW9uKCl7dmFyIHQ9MCxuPXZvaWQgMCxvPXZvaWQgMCxhPXZvaWQgMCxyPXZvaWQgMCxzPXZvaWQgMCxkPXZvaWQgMCxsPXZvaWQgMDtpLndpZHRoPXRoaXMud2lkdGgsaS5oZWlnaHQ9dGhpcy5oZWlnaHQsbj1pLmdldENvbnRleHQoXCIyZFwiKSxuLmRyYXdJbWFnZSh0aGlzLDAsMCksbz1uLmdldEltYWdlRGF0YSgwLDAsaS53aWR0aCxpLmhlaWdodCksYT1vLmRhdGE7Zm9yKHZhciBjPTAsdT1hLmxlbmd0aDtjPHU7Yys9NClyPWFbY10scz1hW2MrMV0sZD1hW2MrMl0sbD1NYXRoLmZsb29yKChyK3MrZCkvMyksdCs9bDtlKE1hdGguZmxvb3IodC8odGhpcy53aWR0aCp0aGlzLmhlaWdodCkpKX0sdC5vbmVycm9yPW59O2UuZGVmYXVsdD1pLHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0LmNvbnN0cnVjdG9yPT09QXJyYXl9O2UuZGVmYXVsdD1pLHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWUuX19lc01vZHVsZT0hMDt2YXIgbz1uKDY5KSxhPWkobyk7ZS5kZWZhdWx0PWZ1bmN0aW9uKHQpe2lmKEFycmF5LmlzQXJyYXkodCkpe2Zvcih2YXIgZT0wLG49QXJyYXkodC5sZW5ndGgpO2U8dC5sZW5ndGg7ZSsrKW5bZV09dFtlXTtyZXR1cm4gbn1yZXR1cm4oMCxhLmRlZmF1bHQpKHQpfX0pLChmdW5jdGlvbih0LGUsbil7big3OSk7Zm9yKHZhciBpPW4oMiksbz1uKDExKSxhPW4oMzIpLHI9bigxMikoXCJ0b1N0cmluZ1RhZ1wiKSxzPVtcIk5vZGVMaXN0XCIsXCJET01Ub2tlbkxpc3RcIixcIk1lZGlhTGlzdFwiLFwiU3R5bGVTaGVldExpc3RcIixcIkNTU1J1bGVMaXN0XCJdLGQ9MDtkPDU7ZCsrKXt2YXIgbD1zW2RdLGM9aVtsXSx1PWMmJmMucHJvdG90eXBlO3UmJiF1W3JdJiZvKHUscixsKSxhW2xdPWEuQXJyYXl9fSksKGZ1bmN0aW9uKHQsZSxuKXt0LmV4cG9ydHM9e2RlZmF1bHQ6big3MCksX19lc01vZHVsZTohMH19KSwoZnVuY3Rpb24odCxlLG4pe24oNDkpLG4oNzgpLHQuZXhwb3J0cz1uKDQpLkFycmF5LmZyb219KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9ZnVuY3Rpb24oKXt9fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1uKDkpLG89bigxNyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuKXtlIGluIHQ/aS5mKHQsZSxvKDAsbikpOnRbZV09bn19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMzIpLG89bigxMikoXCJpdGVyYXRvclwiKSxhPUFycmF5LnByb3RvdHlwZTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMCE9PXQmJihpLkFycmF5PT09dHx8YVtvXT09PXQpfX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigxMyk7dC5leHBvcnRzPWZ1bmN0aW9uKHQsZSxuLG8pe3RyeXtyZXR1cm4gbz9lKGkobilbMF0sblsxXSk6ZShuKX1jYXRjaChlKXt2YXIgYT10LnJldHVybjt0aHJvdyB2b2lkIDAhPT1hJiZpKGEuY2FsbCh0KSksZX19fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDEyKShcIml0ZXJhdG9yXCIpLG89ITE7dHJ5e3ZhciBhPVs3XVtpXSgpO2EucmV0dXJuPWZ1bmN0aW9uKCl7bz0hMH0sQXJyYXkuZnJvbShhLChmdW5jdGlvbigpe3Rocm93IDJ9KSl9Y2F0Y2godCl7fXQuZXhwb3J0cz1mdW5jdGlvbih0LGUpe2lmKCFlJiYhbylyZXR1cm4hMTt2YXIgbj0hMTt0cnl7dmFyIGE9WzddLHI9YVtpXSgpO3IubmV4dD1mdW5jdGlvbigpe3JldHVybntkb25lOm49ITB9fSxhW2ldPWZ1bmN0aW9uKCl7cmV0dXJuIHJ9LHQoYSl9Y2F0Y2godCl7fXJldHVybiBufX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3JldHVybnt2YWx1ZTplLGRvbmU6ISF0fX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMzEpLG89bigyMSkuY29uY2F0KFwibGVuZ3RoXCIsXCJwcm90b3R5cGVcIik7ZS5mPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzfHxmdW5jdGlvbih0KXtyZXR1cm4gaSh0LG8pfX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9bigyOCksbz1uKDE2KSxhPW4oMjMpLHI9big3NCkscz1uKDczKSxkPW4oMjkpLGw9big3MiksYz1uKDU3KTtvKG8uUytvLkYqIW4oNzUpKChmdW5jdGlvbih0KXtBcnJheS5mcm9tKHQpfSkpLFwiQXJyYXlcIix7ZnJvbTpmdW5jdGlvbih0KXt2YXIgZSxuLG8sdSxtPWEodCksZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzP3RoaXM6QXJyYXkscD1hcmd1bWVudHMubGVuZ3RoLGg9cD4xP2FyZ3VtZW50c1sxXTp2b2lkIDAsYj12b2lkIDAhPT1oLHY9MCxFPWMobSk7aWYoYiYmKGg9aShoLHA+Mj9hcmd1bWVudHNbMl06dm9pZCAwLDIpKSx2b2lkIDA9PUV8fGY9PUFycmF5JiZzKEUpKWZvcihlPWQobS5sZW5ndGgpLG49bmV3IGYoZSk7ZT52O3YrKylsKG4sdixiP2gobVt2XSx2KTptW3ZdKTtlbHNlIGZvcih1PUUuY2FsbChtKSxuPW5ldyBmOyEobz11Lm5leHQoKSkuZG9uZTt2KyspbChuLHYsYj9yKHUsaCxbby52YWx1ZSx2XSwhMCk6by52YWx1ZSk7cmV0dXJuIG4ubGVuZ3RoPXYsbn19KX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9big3MSksbz1uKDc2KSxhPW4oMzIpLHI9big3KTt0LmV4cG9ydHM9big0MikoQXJyYXksXCJBcnJheVwiLChmdW5jdGlvbih0LGUpe3RoaXMuX3Q9cih0KSx0aGlzLl9pPTAsdGhpcy5faz1lfSksKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fdCxlPXRoaXMuX2ssbj10aGlzLl9pKys7cmV0dXJuIXR8fG4+PXQubGVuZ3RoPyh0aGlzLl90PXZvaWQgMCxvKDEpKTpcImtleXNcIj09ZT9vKDAsbik6XCJ2YWx1ZXNcIj09ZT9vKDAsdFtuXSk6bygwLFtuLHRbbl1dKX0pLFwidmFsdWVzXCIpLGEuQXJndW1lbnRzPWEuQXJyYXksaShcImtleXNcIiksaShcInZhbHVlc1wiKSxpKFwiZW50cmllc1wiKX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWF2YXRhclwiLHIuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChkLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMjk1KSxyPWkoYSkscz1uKDI2NSksZD1pKHMpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1iYWNrZHJvcFwiLHIuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigyOTYpLHI9aShhKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtYm90dG9tLWJhclwiLHIuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1ib3R0b20tYmFyLWl0ZW1cIixkLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goYy5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDI5Nykscj1pKGEpLHM9bigyOTgpLGQ9aShzKSxsPW4oMjY2KSxjPWkobCk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWJ1dHRvblwiLHIuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChkLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMjk5KSxyPWkoYSkscz1uKDI2NyksZD1pKHMpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1idXR0b24tdG9nZ2xlXCIsci5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGQuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzMDApLHI9aShhKSxzPW4oMjY4KSxkPWkocyk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWNhcmRcIixyLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtY2FyZC1tZWRpYVwiLGQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1jYXJkLW1lZGlhLWNvdmVyXCIsYy5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWNhcmQtbWVkaWEtYWN0aW9uc1wiLG0uZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1jYXJkLWhlYWRlclwiLHAuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1jYXJkLWhlYWRlci10ZXh0XCIsYi5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWNhcmQtY29udGVudFwiLEUuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1jYXJkLWFjdGlvbnNcIixfLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtY2FyZC1hcmVhXCIsTS5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWNhcmQtZXhwYW5kXCIsQS5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKE4uZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzMDEpLHI9aShhKSxzPW4oMzA4KSxkPWkocyksbD1uKDMxMCksYz1pKGwpLHU9bigzMDkpLG09aSh1KSxmPW4oMzA2KSxwPWkoZiksaD1uKDMwNyksYj1pKGgpLHY9bigzMDQpLEU9aSh2KSxnPW4oMzAyKSxfPWkoZyksQz1uKDMwMyksTT1pKEMpLFQ9bigzMDUpLEE9aShUKSx4PW4oMjY5KSxOPWkoeCk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWNoZWNrYm94XCIsci5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGQuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzMTEpLHI9aShhKSxzPW4oMjcwKSxkPWkocyk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWNoaXBzXCIsci5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWNoaXBcIixkLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goYy5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDMxMykscj1pKGEpLHM9bigzMTIpLGQ9aShzKSxsPW4oMjcxKSxjPWkobCk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWRpYWxvZ1wiLHIuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1kaWFsb2ctdGl0bGVcIixkLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtZGlhbG9nLWNvbnRlbnRcIixjLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtZGlhbG9nLWFjdGlvbnNcIixtLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtZGlhbG9nLWFsZXJ0XCIscC5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWRpYWxvZy1jb25maXJtXCIsYi5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWRpYWxvZy1wcm9tcHRcIixFLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goXy5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDMxNCkscj1pKGEpLHM9bigzMTcpLGQ9aShzKSxsPW4oMzE2KSxjPWkobCksdT1uKDMxNSksbT1pKHUpLGY9bigzMTgpLHA9aShmKSxoPW4oMzE5KSxiPWkoaCksdj1uKDMyMCksRT1pKHYpLGc9bigyNzIpLF89aShnKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtZGl2aWRlclwiLHIuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzMjEpLHI9aShhKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtZmlsZVwiLHIuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChkLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzIyKSxyPWkoYSkscz1uKDI3MyksZD1pKHMpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1pY29uXCIsci5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGQuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzMjMpLHI9aShhKSxzPW4oMjc0KSxkPWkocyk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWltYWdlXCIsci5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGQuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzMjQpLHI9aShhKSxzPW4oMjc1KSxkPWkocyk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWlucHV0LWNvbnRhaW5lclwiLHIuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1pbnB1dFwiLGQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1hdXRvY29tcGxldGVcIixjLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtdGV4dGFyZWFcIixtLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2gocC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDMyNykscj1pKGEpLHM9bigzMjYpLGQ9aShzKSxsPW4oMzI1KSxjPWkobCksdT1uKDMyOCksbT1pKHUpLGY9bigyNzYpLHA9aShmKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtbGF5b3V0XCIsci5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDMyOSkscj1pKGEpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1saXN0XCIsci5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLWxpc3QtaXRlbVwiLGQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1saXN0LWV4cGFuZFwiLGMuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChtLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzMwKSxyPWkoYSkscz1uKDExNiksZD1pKHMpLGw9bigzMzEpLGM9aShsKSx1PW4oMjc3KSxtPWkodSk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLW1lbnVcIixyLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtbWVudS1pdGVtXCIsZC5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLW1lbnUtY29udGVudFwiLGMuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChtLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzM3KSxyPWkoYSkscz1uKDMzOSksZD1pKHMpLGw9bigzMzgpLGM9aShsKSx1PW4oMjc4KSxtPWkodSk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLWJvYXJkc1wiLHIuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC1ib2FyZFwiLGQuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChjLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzQxKSxyPWkoYSkscz1uKDM0MCksZD1pKHMpLGw9bigyNzkpLGM9aShsKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtcHJvZ3Jlc3NcIixyLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goZC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM0Mikscj1pKGEpLHM9bigyODApLGQ9aShzKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtcmFkaW9cIixyLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goZC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM0Mykscj1pKGEpLHM9bigyODEpLGQ9aShzKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtcmF0aW5nLWJhclwiLHIuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChkLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzQ0KSxyPWkoYSkscz1uKDI4MiksZD1pKHMpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1zZWxlY3RcIixyLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtb3B0aW9uXCIsZC5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGMuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzNDYpLHI9aShhKSxzPW4oMzQ1KSxkPWkocyksbD1uKDI4MyksYz1pKGwpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1zaWRlbmF2XCIsci5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGQuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzNDcpLHI9aShhKSxzPW4oMjg0KSxkPWkocyk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLXNuYWNrYmFyXCIsci5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKGQuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzNDgpLHI9aShhKSxzPW4oMjg1KSxkPWkocyk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLXNwZWVkLWRpYWxcIixyLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goZC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM0OSkscj1pKGEpLHM9bigyODYpLGQ9aShzKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtc3Bpbm5lclwiLHIuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChkLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzUwKSxyPWkoYSkscz1uKDI4NyksZD1pKHMpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1zdGVwcGVyXCIsci5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLXN0ZXBcIixkLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtc3RlcC1oZWFkZXItY29udGFpbmVyXCIsYy5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLXN0ZXAtaGVhZGVyXCIsbS5kZWZhdWx0KSx0Lm1hdGVyaWFsLnN0eWxlcy5wdXNoKHAuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzNTMpLHI9aShhKSxzPW4oMzUxKSxkPWkocyksbD1uKDExOCksYz1pKGwpLHU9bigzNTIpLG09aSh1KSxmPW4oMjg4KSxwPWkoZik7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLXN1YmhlYWRlclwiLHIuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChkLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzU0KSxyPWkoYSkscz1uKDI4OSksZD1pKHMpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1zd2l0Y2hcIixyLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goZC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM1NSkscj1pKGEpLHM9bigyOTApLGQ9aShzKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtdGFibGVcIixyLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtdGFibGUtaGVhZGVyXCIse2Z1bmN0aW9uYWw6ITAscmVuZGVyOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQoXCJ0aGVhZFwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLWhlYWRlclwifSxlLmNoaWxkcmVuKX19KSx0LmNvbXBvbmVudChcIm1kLXRhYmxlLWJvZHlcIix7ZnVuY3Rpb25hbDohMCxyZW5kZXI6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdChcInRib2R5XCIse3N0YXRpY0NsYXNzOlwibWQtdGFibGUtYm9keVwifSxlLmNoaWxkcmVuKX19KSx0LmNvbXBvbmVudChcIm1kLXRhYmxlLXJvd1wiLGQuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC10YWJsZS1oZWFkXCIsYy5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLXRhYmxlLWNlbGxcIixtLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtdGFibGUtZWRpdFwiLHAuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC10YWJsZS1jYXJkXCIsYi5kZWZhdWx0KSx0LmNvbXBvbmVudChcIm1kLXRhYmxlLXBhZ2luYXRpb25cIixfLmRlZmF1bHQpLHQuY29tcG9uZW50KFwibWQtdGFibGUtYWx0ZXJuYXRlLWhlYWRlclwiLEUuZGVmYXVsdCksdC5tYXRlcmlhbC5zdHlsZXMucHVzaChNLmRlZmF1bHQpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD1vO3ZhciBhPW4oMzU2KSxyPWkoYSkscz1uKDM2MyksZD1pKHMpLGw9bigzNjEpLGM9aShsKSx1PW4oMzU5KSxtPWkodSksZj1uKDM2MCkscD1pKGYpLGg9bigzNTgpLGI9aShoKSx2PW4oMzU3KSxFPWkodiksZz1uKDM2MiksXz1pKGcpLEM9bigyOTEpLE09aShDKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtdGFic1wiLHIuZGVmYXVsdCksdC5jb21wb25lbnQoXCJtZC10YWJcIixkLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goYy5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM2NSkscj1pKGEpLHM9bigzNjQpLGQ9aShzKSxsPW4oMjkyKSxjPWkobCk7dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXt0LmNvbXBvbmVudChcIm1kLXRvb2xiYXJcIixyLmRlZmF1bHQpLHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goZC5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM2Nikscj1pKGEpLHM9bigyOTMpLGQ9aShzKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtdG9vbHRpcFwiLHIuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzNjcpLHI9aShhKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3QuY29tcG9uZW50KFwibWQtd2hpdGVmcmFtZVwiLHIuZGVmYXVsdCl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigzNjgpLHI9aShhKTt0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1mdW5jdGlvbiBvKHQpe3JldHVybiBvLmluc3RhbGxlZD92b2lkIGNvbnNvbGUud2FybihcIlZ1ZSBNYXRlcmlhbCBpcyBhbHJlYWR5IGluc3RhbGxlZC5cIik6KG8uaW5zdGFsbGVkPSEwLHQudXNlKHIuZGVmYXVsdCksdC51c2UoZC5kZWZhdWx0KSx2b2lkIHQubWF0ZXJpYWwuc3R5bGVzLnB1c2goYy5kZWZhdWx0KSl9T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PW87dmFyIGE9bigxMjEpLHI9aShhKSxzPW4oMTE5KSxkPWkocyksbD1uKDI5NCksYz1pKGwpO24oMjI5KSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaSxvLGE7IShmdW5jdGlvbihuLHIpe289W2UsdF0saT1yLGE9XCJmdW5jdGlvblwiPT10eXBlb2YgaT9pLmFwcGx5KGUsbyk6aSwhKHZvaWQgMCE9PWEmJih0LmV4cG9ydHM9YSkpfSkodGhpcywoZnVuY3Rpb24odCxlKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBuKHQpe2Z1bmN0aW9uIGUoKXt2YXIgZT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0LG51bGwpO1widmVydGljYWxcIj09PWUucmVzaXplP3Quc3R5bGUucmVzaXplPVwibm9uZVwiOlwiYm90aFwiPT09ZS5yZXNpemUmJih0LnN0eWxlLnJlc2l6ZT1cImhvcml6b250YWxcIiksZD1cImNvbnRlbnQtYm94XCI9PT1lLmJveFNpemluZz8tKHBhcnNlRmxvYXQoZS5wYWRkaW5nVG9wKStwYXJzZUZsb2F0KGUucGFkZGluZ0JvdHRvbSkpOnBhcnNlRmxvYXQoZS5ib3JkZXJUb3BXaWR0aCkrcGFyc2VGbG9hdChlLmJvcmRlckJvdHRvbVdpZHRoKSxpc05hTihkKSYmKGQ9MCkscygpfWZ1bmN0aW9uIG4oZSl7dmFyIG49dC5zdHlsZS53aWR0aDt0LnN0eWxlLndpZHRoPVwiMHB4XCIsdC5vZmZzZXRXaWR0aCx0LnN0eWxlLndpZHRoPW4sdC5zdHlsZS5vdmVyZmxvd1k9ZX1mdW5jdGlvbiBpKHQpe2Zvcih2YXIgZT1bXTt0JiZ0LnBhcmVudE5vZGUmJnQucGFyZW50Tm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQ7KXQucGFyZW50Tm9kZS5zY3JvbGxUb3AmJmUucHVzaCh7bm9kZTp0LnBhcmVudE5vZGUsc2Nyb2xsVG9wOnQucGFyZW50Tm9kZS5zY3JvbGxUb3B9KSx0PXQucGFyZW50Tm9kZTtyZXR1cm4gZX1mdW5jdGlvbiBvKCl7dmFyIGU9dC5zdHlsZS5oZWlnaHQsbj1pKHQpLG89ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO3Quc3R5bGUuaGVpZ2h0PVwiYXV0b1wiO3ZhciBhPXQuc2Nyb2xsSGVpZ2h0K2Q7cmV0dXJuIDA9PT10LnNjcm9sbEhlaWdodD92b2lkKHQuc3R5bGUuaGVpZ2h0PWUpOih0LnN0eWxlLmhlaWdodD1hK1wicHhcIixsPXQuY2xpZW50V2lkdGgsbi5mb3JFYWNoKChmdW5jdGlvbih0KXt0Lm5vZGUuc2Nyb2xsVG9wPXQuc2Nyb2xsVG9wfSkpLHZvaWQobyYmKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A9bykpKX1mdW5jdGlvbiBzKCl7bygpO3ZhciBlPU1hdGgucm91bmQocGFyc2VGbG9hdCh0LnN0eWxlLmhlaWdodCkpLGk9d2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKSxhPU1hdGgucm91bmQocGFyc2VGbG9hdChpLmhlaWdodCkpO2lmKGEhPT1lP1widmlzaWJsZVwiIT09aS5vdmVyZmxvd1kmJihuKFwidmlzaWJsZVwiKSxvKCksYT1NYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKS5oZWlnaHQpKSk6XCJoaWRkZW5cIiE9PWkub3ZlcmZsb3dZJiYobihcImhpZGRlblwiKSxvKCksYT1NYXRoLnJvdW5kKHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUodCxudWxsKS5oZWlnaHQpKSksYyE9PWEpe2M9YTt2YXIgcz1yKFwiYXV0b3NpemU6cmVzaXplZFwiKTt0cnl7dC5kaXNwYXRjaEV2ZW50KHMpfWNhdGNoKHQpe319fWlmKHQmJnQubm9kZU5hbWUmJlwiVEVYVEFSRUFcIj09PXQubm9kZU5hbWUmJiFhLmhhcyh0KSl7dmFyIGQ9bnVsbCxsPXQuY2xpZW50V2lkdGgsYz1udWxsLHU9ZnVuY3Rpb24oKXt0LmNsaWVudFdpZHRoIT09bCYmcygpfSxtPWZ1bmN0aW9uKGUpe3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdSwhMSksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwiaW5wdXRcIixzLCExKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXl1cFwiLHMsITEpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImF1dG9zaXplOmRlc3Ryb3lcIixtLCExKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhdXRvc2l6ZTp1cGRhdGVcIixzLCExKSxPYmplY3Qua2V5cyhlKS5mb3JFYWNoKChmdW5jdGlvbihuKXt0LnN0eWxlW25dPWVbbl19KSksYS5kZWxldGUodCl9LmJpbmQodCx7aGVpZ2h0OnQuc3R5bGUuaGVpZ2h0LHJlc2l6ZTp0LnN0eWxlLnJlc2l6ZSxvdmVyZmxvd1k6dC5zdHlsZS5vdmVyZmxvd1ksb3ZlcmZsb3dYOnQuc3R5bGUub3ZlcmZsb3dYLHdvcmRXcmFwOnQuc3R5bGUud29yZFdyYXB9KTt0LmFkZEV2ZW50TGlzdGVuZXIoXCJhdXRvc2l6ZTpkZXN0cm95XCIsbSwhMSksXCJvbnByb3BlcnR5Y2hhbmdlXCJpbiB0JiZcIm9uaW5wdXRcImluIHQmJnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleXVwXCIscywhMSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix1LCExKSx0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLHMsITEpLHQuYWRkRXZlbnRMaXN0ZW5lcihcImF1dG9zaXplOnVwZGF0ZVwiLHMsITEpLHQuc3R5bGUub3ZlcmZsb3dYPVwiaGlkZGVuXCIsdC5zdHlsZS53b3JkV3JhcD1cImJyZWFrLXdvcmRcIixhLnNldCh0LHtkZXN0cm95Om0sdXBkYXRlOnN9KSxlKCl9fWZ1bmN0aW9uIGkodCl7dmFyIGU9YS5nZXQodCk7ZSYmZS5kZXN0cm95KCl9ZnVuY3Rpb24gbyh0KXt2YXIgZT1hLmdldCh0KTtlJiZlLnVwZGF0ZSgpfXZhciBhPVwiZnVuY3Rpb25cIj09dHlwZW9mIE1hcD9uZXcgTWFwOihmdW5jdGlvbigpe3ZhciB0PVtdLGU9W107cmV0dXJue2hhczpmdW5jdGlvbihlKXtyZXR1cm4gdC5pbmRleE9mKGUpPi0xfSxnZXQ6ZnVuY3Rpb24obil7cmV0dXJuIGVbdC5pbmRleE9mKG4pXX0sc2V0OmZ1bmN0aW9uKG4saSl7dC5pbmRleE9mKG4pPT09LTEmJih0LnB1c2gobiksXG5lLnB1c2goaSkpfSxkZWxldGU6ZnVuY3Rpb24obil7dmFyIGk9dC5pbmRleE9mKG4pO2k+LTEmJih0LnNwbGljZShpLDEpLGUuc3BsaWNlKGksMSkpfX19KSgpLHI9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBFdmVudCh0LHtidWJibGVzOiEwfSl9O3RyeXtuZXcgRXZlbnQoXCJ0ZXN0XCIpfWNhdGNoKHQpe3I9ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJFdmVudFwiKTtyZXR1cm4gZS5pbml0RXZlbnQodCwhMCwhMSksZX19dmFyIHM9bnVsbDtcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPXR5cGVvZiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZT8ocz1mdW5jdGlvbih0KXtyZXR1cm4gdH0scy5kZXN0cm95PWZ1bmN0aW9uKHQpe3JldHVybiB0fSxzLnVwZGF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gdH0pOihzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQmJkFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwodC5sZW5ndGg/dDpbdF0sKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZSl9KSksdH0scy5kZXN0cm95PWZ1bmN0aW9uKHQpe3JldHVybiB0JiZBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHQubGVuZ3RoP3Q6W3RdLGkpLHR9LHMudXBkYXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKHQubGVuZ3RoP3Q6W3RdLG8pLHR9KSxlLmV4cG9ydHM9c30pKX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigyMDgpLGE9aShvKSxyPW4oMjA5KSxzPWkociksZD1uKDMzMiksbD1pKGQpLGM9bigzMzUpLHU9aShjKSxtPW4oMzM2KSxmPWkobSkscD1uKDMzNCksaD1pKHApLGI9bigzMzMpLHY9aShiKTtlLmRlZmF1bHQ9e2Z1bmN0aW9uYWw6ITAscHJvcHM6e2hyZWY6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW59LHJlbmRlcjpmdW5jdGlvbih0LGUpe3ZhciBuPWUuY2hpbGRyZW4saT1lLmRhdGEsbz1lLnByb3BzLHI9ZnVuY3Rpb24oKXt2YXIgdD1pLm9uLGU9W1wiY29udGV4dG1lbnVcIixcImRibGNsaWNrXCIsXCJkcmFnZW5kXCIsXCJtb3VzZWRvd25cIixcInRvdWNoc3RhcnRcIixcImNsaWNrXCJdLGE9bi5sZW5ndGg7aWYoby5ocmVmKXJldHVybiB1LmRlZmF1bHQ7Zm9yKDthLS07KXt2YXIgcj1uW2FdLmNvbXBvbmVudE9wdGlvbnM7aWYocilpZihcIm1kLWxpc3QtZXhwYW5kXCI9PT1yLnRhZyl7dmFyIGQ9KGZ1bmN0aW9uKCl7dmFyIHQ9blthXTtyZXR1cm4gaS5zY29wZWRTbG90cz17ZXhwYW5kOmZ1bmN0aW9uKCl7cmV0dXJuIHR9fSxuLnNwbGljZShhLDEpLHt2OmguZGVmYXVsdH19KSgpO2lmKFwib2JqZWN0XCI9PT0oXCJ1bmRlZmluZWRcIj09dHlwZW9mIGQ/XCJ1bmRlZmluZWRcIjooMCxzLmRlZmF1bHQpKGQpKSlyZXR1cm4gZC52fWVsc2UgaWYoXCJyb3V0ZXItbGlua1wiPT09ci50YWcpcmV0dXJuIG5bYV0uZGF0YS5zdGF0aWNDbGFzcz1cIm1kLWxpc3QtaXRlbS1jb250YWluZXIgbWQtYnV0dG9uXCIsZi5kZWZhdWx0fWlmKHQpZm9yKHZhciBjPWUubGVuZ3RoO2MtLTspaWYodFtlW2NdXSlyZXR1cm4gbC5kZWZhdWx0O3JldHVybiB2LmRlZmF1bHR9O3JldHVybiB0KHIoKSwoMCxhLmRlZmF1bHQpKHtwcm9wczpvfSxpKSxuKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oNDQ0KSxhPWkobykscj1uZXcgYS5kZWZhdWx0KHtkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19fSk7ZS5kZWZhdWx0PXIsdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigzNiksYT1pKG8pO2UuZGVmYXVsdD17ZnVuY3Rpb25hbDohMCxwcm9wczp7bWRWZXJ0aWNhbDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxyZW5kZXI6ZnVuY3Rpb24odCxlKXt2YXIgbj1lLmNoaWxkcmVuLGk9ZS5wcm9wcyxvPWZ1bmN0aW9uKGUpe3JldHVybiBlLnJlZHVjZSgoZnVuY3Rpb24oZSxuLGksbyl7aWYoZS5wdXNoKG4pLGk8by5sZW5ndGgtMSl7dmFyIHI9dChcIm1kLWRpdmlkZXJcIix7a2V5OlwiZGl2aWRlci1cIisoMCxhLmRlZmF1bHQpKCl9KTtlLnB1c2gocil9cmV0dXJuIGV9KSxbXSl9O3JldHVybiBpLm1kVmVydGljYWx8fChuPW8obikpLHQoXCJkaXZcIix7Y2xhc3M6XCJtZC1zdGVwcy1uYXZpZ2F0aW9uLWNvbnRhaW5lclwifSxuKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fWZ1bmN0aW9uIG8odCl7dC5jb21wb25lbnQoXCJtZC1pbmstcmlwcGxlXCIsci5kZWZhdWx0KX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9bzt2YXIgYT1uKDM2OSkscj1pKGEpO3QuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBpPWUuY2hhbmdlSHRtbE1ldGFDb2xvcj12b2lkIDAsbz1lLmNyZWF0ZU5ld1N0eWxlRWxlbWVudD12b2lkIDA7XCJzZXJ2ZXJcIiE9PW4uaSh7Tk9ERV9FTlY6XCJkZXZlbG9wbWVudFwifSkuVlVFX0VOViYmKGUuY2hhbmdlSHRtbE1ldGFDb2xvcj1pPWZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ0aGVtZS1jb2xvclwiXScpO2k/aS5zZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIsdCk6KGk9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm1ldGFcIiksaS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJ0aGVtZS1jb2xvclwiKSxpLnNldEF0dHJpYnV0ZShcImNvbnRlbnRcIix0KSxkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGkpKSxkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUobiksZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGUpfSxlLmNyZWF0ZU5ld1N0eWxlRWxlbWVudD1vPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZG9jdW1lbnQuaGVhZCxpPW4ucXVlcnlTZWxlY3RvcihcIiNcIitlKTtpZihpKWkudGV4dENvbnRlbnQ9dDtlbHNle3ZhciBvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtvLnR5cGU9XCJ0ZXh0L2Nzc1wiLG8uaWQ9ZSxvLnRleHRDb250ZW50PXQsbi5hcHBlbmRDaGlsZChvKX19KX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZnVuY3Rpb24gbyh0KXtjb25zb2xlLndhcm4oXCJUaGUgdGhlbWUgJ1wiK3QrXCInIGRvZXNuJ3QgZXhpc3RzLiBZb3UgbmVlZCB0byByZWdpc3RlciBpdCBmaXJzdCBpbiBvcmRlciB0byB1c2UuXCIpfWZ1bmN0aW9uIGEodCxlLG4saSl7aC5jcmVhdGVOZXdTdHlsZUVsZW1lbnQmJih0PUModCxlLG4pLHQ9dC5yZXBsYWNlKC9USEVNRV9OQU1FL2csaSksKDAsaC5jcmVhdGVOZXdTdHlsZUVsZW1lbnQpKHQsaSkpfWZ1bmN0aW9uIHIodCl7dC5tYXRlcmlhbD1uZXcgdCh7ZGF0YTp7Y3VycmVudFRoZW1lOlwiZGVmYXVsdFwiLGlua1JpcHBsZTohMCxwcmVmaXg6XCJtZC10aGVtZS1cIixzdHlsZXM6W10sdGhlbWVzOntkZWZhdWx0OkV9fSx3YXRjaDp7c3R5bGVzOmZ1bmN0aW9uKCl7dGhpcy5yZWZyZXNoSW5qZWN0ZWRTdHlsZXMoKX19LG1ldGhvZHM6e3JlZ2lzdGVyUGFsZXR0ZTpmdW5jdGlvbih0LGUpe2MuZGVmYXVsdFt0XT1lfSx1c2VUaGVtZTpmdW5jdGlvbih0KXtpZighKHQgaW4gXykpe3ZhciBlPXRoaXMudGhlbWVzW3RdO3JldHVybiBlPyhhKHRoaXMuc3R5bGVzLmpvaW4oXCJcXG5cIiksZSx0LHRoaXMucHJlZml4K3QpLF9bdF09ITApOm8odCl9fSxyZWZyZXNoSW5qZWN0ZWRTdHlsZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5zdHlsZXMuam9pbihcIlxcblwiKSxuPXRoaXMucHJlZml4OygwLGQuZGVmYXVsdCkoXykuZm9yRWFjaCgoZnVuY3Rpb24oaSl7dmFyIG89dC50aGVtZXNbaV07YShlLG8saSxuK2kpfSkpfSxyZWdpc3RlclRoZW1lOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztcInN0cmluZ1wiPT10eXBlb2YgdD90aGlzLnRoZW1lc1t0XT1lOigwLGQuZGVmYXVsdCkodCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIG4udGhlbWVzW2VdPXRbZV19KSl9LHNldEN1cnJlbnRUaGVtZTpmdW5jdGlvbih0KXtpZih0IT09dGhpcy5jdXJyZW50VGhlbWUpe3ZhciBlPXRoaXMucHJlZml4O3RoaXMudXNlVGhlbWUodCksaC5jaGFuZ2VIdG1sTWV0YUNvbG9yJiYoMCxoLmNoYW5nZUh0bWxNZXRhQ29sb3IpKGdbdF0sZSt0aGlzLmN1cnJlbnRUaGVtZSxlK3QpLHRoaXMuY3VycmVudFRoZW1lPXR9fX19KSx0LmNvbXBvbmVudChcIm1kLXRoZW1lXCIscC5kZWZhdWx0KSx0LnByb3RvdHlwZS4kbWF0ZXJpYWw9dC5tYXRlcmlhbH1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgcz1uKDM4KSxkPWkocyk7ZS5kZWZhdWx0PXI7dmFyIGw9bigxMjIpLGM9aShsKSx1PW4oMTIzKSxtPWkodSksZj1uKDM3MCkscD1pKGYpLGg9bigxMjApLGI9W1wicHJpbWFyeVwiLFwiYWNjZW50XCIsXCJiYWNrZ3JvdW5kXCIsXCJ3YXJuXCIsXCJodWUtMVwiLFwiaHVlLTJcIixcImh1ZS0zXCJdLHY9bmV3IFJlZ0V4cChcIihcIitiLmpvaW4oXCJ8XCIpLnRvVXBwZXJDYXNlKCkrXCIpLShDT0xPUnxDT05UUkFTVCktPyhBP1xcXFxkKiktPyhcXFxcZCpcXFxcLj9cXFxcZCspP1wiLFwiZ1wiKSxFPXtwcmltYXJ5OlwiaW5kaWdvXCIsYWNjZW50OlwicGlua1wiLGJhY2tncm91bmQ6XCJ3aGl0ZVwiLHdhcm46XCJkZWVwLW9yYW5nZVwifSxnPXt9LF89e30sQz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHQucmVwbGFjZSh2LChmdW5jdGlvbih0LGksbyxhLHIpe3ZhciBzPXZvaWQgMCxkPTA9PT0rYT81MDA6YTtpZihpPWkudG9Mb3dlckNhc2UoKSxlW2ldP1wic3RyaW5nXCI9PXR5cGVvZiBlW2ldP3M9Yy5kZWZhdWx0W2VbaV1dOihzPWMuZGVmYXVsdFtlW2ldLmNvbG9yXXx8Yy5kZWZhdWx0W0VbaV1dLGQ9MD09PSthP2VbaV0uaHVlOmEpOnM9Yy5kZWZhdWx0W0VbaV1dLFwiQ09MT1JcIj09PW8pe3ZhciBsPWMuZGVmYXVsdFtlW2ldXTtyZXR1cm4gZHx8bHx8KFwiYWNjZW50XCI9PT1pP2Q9XCJBMjAwXCI6XCJiYWNrZ3JvdW5kXCI9PT1pJiYoZD01MCkpLFwicHJpbWFyeVwiPT09aSYmKGdbbl09c1tkXSkscj8oMCxtLmRlZmF1bHQpKHNbZF0scik6c1tkXX12YXIgdT1zLmRhcmtUZXh0LmluZGV4T2YoZCk+PTA7cmV0dXJuIGVbaV0mJlwic3RyaW5nXCIhPXR5cGVvZiBlW2ldJiZlW2ldLnRleHRDb2xvciYmKFwiYmxhY2tcIj09PWVbaV0udGV4dENvbG9yP3U9ITA6XCJ3aGl0ZVwiPT09ZVtpXS50ZXh0Q29sb3ImJih1PSExKSksdT9yPygwLG0uZGVmYXVsdCkoXCIjMDAwXCIscik6XCJyZ2JhKDAsIDAsIDAsIC44NylcIjpyPygwLG0uZGVmYXVsdCkoXCIjZmZmXCIscik6XCJyZ2JhKDI1NSwgMjU1LCAyNTUsIC44NylcIn0pKX07dC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtyZWQ6ezUwOlwiI2ZmZWJlZVwiLDEwMDpcIiNmZmNkZDJcIiwyMDA6XCIjZWY5YTlhXCIsMzAwOlwiI2U1NzM3M1wiLDQwMDpcIiNlZjUzNTBcIiw1MDA6XCIjZjQ0MzM2XCIsNjAwOlwiI2U1MzkzNVwiLDcwMDpcIiNkMzJmMmZcIiw4MDA6XCIjYzYyODI4XCIsOTAwOlwiI2I3MWMxY1wiLEExMDA6XCIjZmY4YTgwXCIsQTIwMDpcIiNmZjUyNTJcIixBNDAwOlwiI2ZmMTc0NFwiLEE3MDA6XCIjZDUwMDAwXCIsZGFya1RleHQ6WzUwLDEwMCwyMDAsMzAwLFwiQTEwMFwiXX0scGluazp7NTA6XCIjZmNlNGVjXCIsMTAwOlwiI2Y4YmJkMFwiLDIwMDpcIiNmNDhmYjFcIiwzMDA6XCIjZjA2MjkyXCIsNDAwOlwiI2VjNDA3YVwiLDUwMDpcIiNlOTFlNjNcIiw2MDA6XCIjZDgxYjYwXCIsNzAwOlwiI2MyMTg1YlwiLDgwMDpcIiNhZDE0NTdcIiw5MDA6XCIjODgwZTRmXCIsQTEwMDpcIiNmZjgwYWJcIixBMjAwOlwiI2ZmNDA4MVwiLEE0MDA6XCIjZjUwMDU3XCIsQTcwMDpcIiNjNTExNjJcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCxcIkExMDBcIl19LHB1cnBsZTp7NTA6XCIjZjNlNWY1XCIsMTAwOlwiI2UxYmVlN1wiLDIwMDpcIiNjZTkzZDhcIiwzMDA6XCIjYmE2OGM4XCIsNDAwOlwiI2FiNDdiY1wiLDUwMDpcIiM5YzI3YjBcIiw2MDA6XCIjOGUyNGFhXCIsNzAwOlwiIzdiMWZhMlwiLDgwMDpcIiM2YTFiOWFcIiw5MDA6XCIjNGExNDhjXCIsQTEwMDpcIiNlYTgwZmNcIixBMjAwOlwiI2UwNDBmYlwiLEE0MDA6XCIjZDUwMGY5XCIsQTcwMDpcIiNhYTAwZmZcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCxcIkExMDBcIl19LFwiZGVlcC1wdXJwbGVcIjp7NTA6XCIjZWRlN2Y2XCIsMTAwOlwiI2QxYzRlOVwiLDIwMDpcIiNiMzlkZGJcIiwzMDA6XCIjOTU3NWNkXCIsNDAwOlwiIzdlNTdjMlwiLDUwMDpcIiM2NzNhYjdcIiw2MDA6XCIjNWUzNWIxXCIsNzAwOlwiIzUxMmRhOFwiLDgwMDpcIiM0NTI3YTBcIiw5MDA6XCIjMzExYjkyXCIsQTEwMDpcIiNiMzg4ZmZcIixBMjAwOlwiIzdjNGRmZlwiLEE0MDA6XCIjNjUxZmZmXCIsQTcwMDpcIiM2MjAwZWFcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCxcIkExMDBcIl19LGluZGlnbzp7NTA6XCIjZThlYWY2XCIsMTAwOlwiI2M1Y2FlOVwiLDIwMDpcIiM5ZmE4ZGFcIiwzMDA6XCIjNzk4NmNiXCIsNDAwOlwiIzVjNmJjMFwiLDUwMDpcIiMzZjUxYjVcIiw2MDA6XCIjMzk0OWFiXCIsNzAwOlwiIzMwM2Y5ZlwiLDgwMDpcIiMyODM1OTNcIiw5MDA6XCIjMWEyMzdlXCIsQTEwMDpcIiM4YzllZmZcIixBMjAwOlwiIzUzNmRmZVwiLEE0MDA6XCIjM2Q1YWZlXCIsQTcwMDpcIiMzMDRmZmVcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCxcIkExMDBcIl19LGJsdWU6ezUwOlwiI2UzZjJmZFwiLDEwMDpcIiNiYmRlZmJcIiwyMDA6XCIjOTBjYWY5XCIsMzAwOlwiIzY0YjVmNlwiLDQwMDpcIiM0MmE1ZjVcIiw1MDA6XCIjMjE5NmYzXCIsNjAwOlwiIzFlODhlNVwiLDcwMDpcIiMxOTc2ZDJcIiw4MDA6XCIjMTU2NWMwXCIsOTAwOlwiIzBkNDdhMVwiLEExMDA6XCIjODJiMWZmXCIsQTIwMDpcIiM0NDhhZmZcIixBNDAwOlwiIzI5NzlmZlwiLEE3MDA6XCIjMjk2MmZmXCIsZGFya1RleHQ6WzUwLDEwMCwyMDAsMzAwLDQwMCxcIkExMDBcIl19LFwibGlnaHQtYmx1ZVwiOns1MDpcIiNlMWY1ZmVcIiwxMDA6XCIjYjNlNWZjXCIsMjAwOlwiIzgxZDRmYVwiLDMwMDpcIiM0ZmMzZjdcIiw0MDA6XCIjMjliNmY2XCIsNTAwOlwiIzAzYTlmNFwiLDYwMDpcIiMwMzliZTVcIiw3MDA6XCIjMDI4OGQxXCIsODAwOlwiIzAyNzdiZFwiLDkwMDpcIiMwMTU3OWJcIixBMTAwOlwiIzgwZDhmZlwiLEEyMDA6XCIjNDBjNGZmXCIsQTQwMDpcIiMwMGIwZmZcIixBNzAwOlwiIzAwOTFlYVwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsNTAwLFwiQTEwMFwiLFwiQTIwMFwiLFwiQTMwMFwiXX0sY3lhbjp7NTA6XCIjZTBmN2ZhXCIsMTAwOlwiI2IyZWJmMlwiLDIwMDpcIiM4MGRlZWFcIiwzMDA6XCIjNGRkMGUxXCIsNDAwOlwiIzI2YzZkYVwiLDUwMDpcIiMwMGJjZDRcIiw2MDA6XCIjMDBhY2MxXCIsNzAwOlwiIzAwOTdhN1wiLDgwMDpcIiMwMDgzOGZcIiw5MDA6XCIjMDA2MDY0XCIsQTEwMDpcIiM4NGZmZmZcIixBMjAwOlwiIzE4ZmZmZlwiLEE0MDA6XCIjMDBlNWZmXCIsQTcwMDpcIiMwMGI4ZDRcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCwzMDAsNDAwLDUwMCw2MDAsXCJBMTAwXCIsXCJBMjAwXCIsXCJBMzAwXCIsXCJBNDAwXCJdfSx0ZWFsOns1MDpcIiNlMGYyZjFcIiwxMDA6XCIjYjJkZmRiXCIsMjAwOlwiIzgwY2JjNFwiLDMwMDpcIiM0ZGI2YWNcIiw0MDA6XCIjMjZhNjlhXCIsNTAwOlwiIzAwOTY4OFwiLDYwMDpcIiMwMDg5N2JcIiw3MDA6XCIjMDA3OTZiXCIsODAwOlwiIzAwNjk1Y1wiLDkwMDpcIiMwMDRkNDBcIixBMTAwOlwiI2E3ZmZlYlwiLEEyMDA6XCIjNjRmZmRhXCIsQTQwMDpcIiMxZGU5YjZcIixBNzAwOlwiIzAwYmZhNVwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsXCJBMTAwXCIsXCJBMjAwXCIsXCJBMzAwXCIsXCJBNDAwXCJdfSxncmVlbjp7NTA6XCIjZThmNWU5XCIsMTAwOlwiI2M4ZTZjOVwiLDIwMDpcIiNhNWQ2YTdcIiwzMDA6XCIjODFjNzg0XCIsNDAwOlwiIzY2YmI2YVwiLDUwMDpcIiM0Y2FmNTBcIiw2MDA6XCIjNDNhMDQ3XCIsNzAwOlwiIzM4OGUzY1wiLDgwMDpcIiMyZTdkMzJcIiw5MDA6XCIjMWI1ZTIwXCIsQTEwMDpcIiNiOWY2Y2FcIixBMjAwOlwiIzY5ZjBhZVwiLEE0MDA6XCIjMDBlNjc2XCIsQTcwMDpcIiMwMGM4NTNcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCwzMDAsNDAwLDUwMCxcIkExMDBcIixcIkEyMDBcIixcIkEzMDBcIixcIkE0MDBcIl19LFwibGlnaHQtZ3JlZW5cIjp7NTA6XCIjZjFmOGU5XCIsMTAwOlwiI2RjZWRjOFwiLDIwMDpcIiNjNWUxYTVcIiwzMDA6XCIjYWVkNTgxXCIsNDAwOlwiIzljY2M2NVwiLDUwMDpcIiM4YmMzNGFcIiw2MDA6XCIjN2NiMzQyXCIsNzAwOlwiIzY4OWYzOFwiLDgwMDpcIiM1NThiMmZcIiw5MDA6XCIjMzM2OTFlXCIsQTEwMDpcIiNjY2ZmOTBcIixBMjAwOlwiI2IyZmY1OVwiLEE0MDA6XCIjNzZmZjAzXCIsQTcwMDpcIiM2NGRkMTdcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCwzMDAsNDAwLDUwMCw2MDAsXCJBMTAwXCIsXCJBMjAwXCIsXCJBMzAwXCIsXCJBNDAwXCJdfSxsaW1lOns1MDpcIiNmOWZiZTdcIiwxMDA6XCIjZjBmNGMzXCIsMjAwOlwiI2U2ZWU5Y1wiLDMwMDpcIiNkY2U3NzVcIiw0MDA6XCIjZDRlMTU3XCIsNTAwOlwiI2NkZGMzOVwiLDYwMDpcIiNjMGNhMzNcIiw3MDA6XCIjYWZiNDJiXCIsODAwOlwiIzllOWQyNFwiLDkwMDpcIiM4Mjc3MTdcIixBMTAwOlwiI2Y0ZmY4MVwiLEEyMDA6XCIjZWVmZjQxXCIsQTQwMDpcIiNjNmZmMDBcIixBNzAwOlwiI2FlZWEwMFwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsNTAwLDYwMCw3MDAsODAwLFwiQTEwMFwiLFwiQTIwMFwiLFwiQTMwMFwiLFwiQTQwMFwiXX0seWVsbG93Ons1MDpcIiNmZmZkZTdcIiwxMDA6XCIjZmZmOWM0XCIsMjAwOlwiI2ZmZjU5ZFwiLDMwMDpcIiNmZmYxNzZcIiw0MDA6XCIjZmZlZTU4XCIsNTAwOlwiI2ZmZWIzYlwiLDYwMDpcIiNmZGQ4MzVcIiw3MDA6XCIjZmJjMDJkXCIsODAwOlwiI2Y5YTgyNVwiLDkwMDpcIiNmNTdmMTdcIixBMTAwOlwiI2ZmZmY4ZFwiLEEyMDA6XCIjZmZmZjAwXCIsQTQwMDpcIiNmZmVhMDBcIixBNzAwOlwiI2ZmZDYwMFwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsNTAwLDYwMCw3MDAsODAwLDkwMCxcIkExMDBcIixcIkEyMDBcIixcIkEzMDBcIixcIkE0MDBcIl19LGFtYmVyOns1MDpcIiNmZmY4ZTFcIiwxMDA6XCIjZmZlY2IzXCIsMjAwOlwiI2ZmZTA4MlwiLDMwMDpcIiNmZmQ1NGZcIiw0MDA6XCIjZmZjYTI4XCIsNTAwOlwiI2ZmYzEwN1wiLDYwMDpcIiNmZmIzMDBcIiw3MDA6XCIjZmZhMDAwXCIsODAwOlwiI2ZmOGYwMFwiLDkwMDpcIiNmZjZmMDBcIixBMTAwOlwiI2ZmZTU3ZlwiLEEyMDA6XCIjZmZkNzQwXCIsQTQwMDpcIiNmZmM0MDBcIixBNzAwOlwiI2ZmYWIwMFwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsNTAwLDYwMCw3MDAsODAwLDkwMCxcIkExMDBcIixcIkEyMDBcIixcIkEzMDBcIixcIkE0MDBcIl19LG9yYW5nZTp7NTA6XCIjZmZmM2UwXCIsMTAwOlwiI2ZmZTBiMlwiLDIwMDpcIiNmZmNjODBcIiwzMDA6XCIjZmZiNzRkXCIsNDAwOlwiI2ZmYTcyNlwiLDUwMDpcIiNmZjk4MDBcIiw2MDA6XCIjZmI4YzAwXCIsNzAwOlwiI2Y1N2MwMFwiLDgwMDpcIiNlZjZjMDBcIiw5MDA6XCIjZTY1MTAwXCIsQTEwMDpcIiNmZmQxODBcIixBMjAwOlwiI2ZmYWI0MFwiLEE0MDA6XCIjZmY5MTAwXCIsQTcwMDpcIiNmZjZkMDBcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCwzMDAsNDAwLDUwMCw2MDAsNzAwLFwiQTEwMFwiLFwiQTIwMFwiLFwiQTMwMFwiLFwiQTQwMFwiXX0sXCJkZWVwLW9yYW5nZVwiOns1MDpcIiNmYmU5ZTdcIiwxMDA6XCIjZmZjY2JjXCIsMjAwOlwiI2ZmYWI5MVwiLDMwMDpcIiNmZjhhNjVcIiw0MDA6XCIjZmY3MDQzXCIsNTAwOlwiI2ZmNTcyMlwiLDYwMDpcIiNmNDUxMWVcIiw3MDA6XCIjZTY0YTE5XCIsODAwOlwiI2Q4NDMxNVwiLDkwMDpcIiNiZjM2MGNcIixBMTAwOlwiI2ZmOWU4MFwiLEEyMDA6XCIjZmY2ZTQwXCIsQTQwMDpcIiNmZjNkMDBcIixBNzAwOlwiI2RkMmMwMFwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsXCJBMTAwXCIsXCJBMjAwXCJdfSxicm93bjp7NTA6XCIjZWZlYmU5XCIsMTAwOlwiI2Q3Y2NjOFwiLDIwMDpcIiNiY2FhYTRcIiwzMDA6XCIjYTE4ODdmXCIsNDAwOlwiIzhkNmU2M1wiLDUwMDpcIiM3OTU1NDhcIiw2MDA6XCIjNmQ0YzQxXCIsNzAwOlwiIzVkNDAzN1wiLDgwMDpcIiM0ZTM0MmVcIiw5MDA6XCIjM2UyNzIzXCIsQTEwMDpcIiNkN2NjYzhcIixBMjAwOlwiI2JjYWFhNFwiLEE0MDA6XCIjOGQ2ZTYzXCIsQTcwMDpcIiM1ZDQwMzdcIixkYXJrVGV4dDpbNTAsMTAwLDIwMCxcIkExMDBcIixcIkEyMDBcIixcIkEzMDBcIixcIkE0MDBcIl19LGdyZXk6ezUwOlwiI2ZhZmFmYVwiLDEwMDpcIiNmNWY1ZjVcIiwyMDA6XCIjZWVlZWVlXCIsMzAwOlwiI2UwZTBlMFwiLDQwMDpcIiNiZGJkYmRcIiw1MDA6XCIjOWU5ZTllXCIsNjAwOlwiIzc1NzU3NVwiLDcwMDpcIiM2MTYxNjFcIiw4MDA6XCIjNDI0MjQyXCIsOTAwOlwiIzIxMjEyMVwiLEExMDA6XCIjZmZmXCIsQTIwMDpcIiMwMDAwMDBcIixBNDAwOlwiIzMwMzAzMFwiLEE3MDA6XCIjNjE2MTYxXCIsZGFya1RleHQ6WzUwLDEwMCwyMDAsMzAwLDQwMCw1MDAsXCJBMTAwXCJdfSxcImJsdWUtZ3JleVwiOns1MDpcIiNlY2VmZjFcIiwxMDA6XCIjY2ZkOGRjXCIsMjAwOlwiI2IwYmVjNVwiLDMwMDpcIiM5MGE0YWVcIiw0MDA6XCIjNzg5MDljXCIsNTAwOlwiIzYwN2Q4YlwiLDYwMDpcIiM1NDZlN2FcIiw3MDA6XCIjNDU1YTY0XCIsODAwOlwiIzM3NDc0ZlwiLDkwMDpcIiMyNjMyMzhcIixBMTAwOlwiI2NmZDhkY1wiLEEyMDA6XCIjYjBiZWM1XCIsQTQwMDpcIiM3ODkwOWNcIixBNzAwOlwiIzQ1NWE2NFwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCxcIkExMDBcIixcIkEyMDBcIixcIkEzMDBcIixcIkE0MDBcIl19LHdoaXRlOns1MDpcIiNmZmZcIiwxMDA6XCIjZmZmXCIsMjAwOlwiI2ZmZlwiLDMwMDpcIiNmZmZcIiw0MDA6XCIjZmZmXCIsNTAwOlwiI2ZmZlwiLDYwMDpcIiNmZmZcIiw3MDA6XCIjZmZmXCIsODAwOlwiI2ZmZlwiLDkwMDpcIiNmZmZcIixBMTAwOlwiI2ZmZlwiLEEyMDA6XCIjZmZmXCIsQTQwMDpcIiNmZmZcIixBNzAwOlwiI2ZmZlwiLGRhcmtUZXh0Ols1MCwxMDAsMjAwLDMwMCw0MDAsNTAwLDYwMCw3MDAsODAwLDkwMCxcIkExMDBcIixcIkEyMDBcIixcIkEzMDBcIixcIkE0MDBcIl19LGJsYWNrOns1MDpcIiMwMDBcIiwxMDA6XCIjMDAwXCIsMjAwOlwiIzAwMFwiLDMwMDpcIiMwMDBcIiw0MDA6XCIjMDAwXCIsNTAwOlwiIzAwMFwiLDYwMDpcIiMwMDBcIiw3MDA6XCIjMDAwXCIsODAwOlwiIzAwMFwiLDkwMDpcIiMwMDBcIixBMTAwOlwiIzAwMFwiLEEyMDA6XCIjMDAwXCIsQTQwMDpcIiMwMDBcIixBNzAwOlwiIzAwMFwiLGRhcmtUZXh0OltdfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PWZ1bmN0aW9uKHQsZSl7dmFyIG49XCJcIixpPVwiXCIsbz1cIlwiLGE9dC50b1N0cmluZygpLm1hdGNoKC9eIz8oKFswLTlhLXpBLVpdezN9KXsxLDN9KSQvKTtpZighYSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGNvbG9yXCIrdCk7aWYodD1hWzFdLDY9PT10Lmxlbmd0aCluPXBhcnNlSW50KHQuc3Vic3RyaW5nKDAsMiksMTYpLGk9cGFyc2VJbnQodC5zdWJzdHJpbmcoMiw0KSwxNiksbz1wYXJzZUludCh0LnN1YnN0cmluZyg0LDYpLDE2KTtlbHNlIGlmKDM9PT10Lmxlbmd0aCl7dmFyIHI9dC5zdWJzdHJpbmcoMCwxKSxzPXQuc3Vic3RyaW5nKDEsMiksZD10LnN1YnN0cmluZygyLDMpO249cGFyc2VJbnQocityLDE2KSxpPXBhcnNlSW50KHMrcywxNiksbz1wYXJzZUludChkK2QsMTYpfXJldHVybiBlPyhlPjEmJihlLz0xMDApLFwicmdiYShcIituK1wiLCBcIitpK1wiLCBcIitvK1wiLCBcIitlK1wiKVwiKTpcInJnYihcIituK1wiLCBcIitpK1wiLCBcIitvK1wiKVwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e3Byb3BzOntkZWJvdW5jZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxZTN9LGRpc2FibGVkOkJvb2xlYW4sZmV0Y2g6e3R5cGU6RnVuY3Rpb259LGZpbHRlckxpc3Q6RnVuY3Rpb24sbGlzdDp7dHlwZTpBcnJheSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuW119fSxtaW5DaGFyczp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxfSxuYW1lOlN0cmluZyxwcmVwYXJlUmVzcG9uc2VEYXRhOkZ1bmN0aW9uLHByaW50QXR0cmlidXRlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwibmFtZVwifSxxdWVyeVBhcmFtOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwicVwifSxyZXF1aXJlZDpCb29sZWFufSxtZXRob2RzOntvbkZvY3VzOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDb250YWluZXImJih0aGlzLnBhcmVudENvbnRhaW5lci5pc0ZvY3VzZWQ9ITApfSxvbkJsdXI6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lci5pc0ZvY3VzZWQ9ITEsdGhpcy5zZXRQYXJlbnRWYWx1ZSgpfSx2ZXJpZnlQcm9wczpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudENvbnRhaW5lcj90aGlzLmxpc3RJc0VtcHR5JiZ0aGlzLmZpbHRlckxpc3Q/dGhpcy50aHJvd0Vycm9yRGVzdHJveShcIllvdSBzaG91bGQgdXNlIGEgYGZpbHRlckxpc3RgIGZ1bmN0aW9uIHByb3Agd2l0aCB0aGUgYGxpc3RgIHByb3BcIik6IXRoaXMuZmV0Y2gmJnRoaXMubGlzdElzRW1wdHk/dGhpcy50aHJvd0Vycm9yRGVzdHJveShcIllvdSBzaG91bGQgdXNlIGEgYGZldGNoYCBmdW5jdGlvbiBwcm9wXCIpOnZvaWQgMDp0aGlzLnRocm93RXJyb3JEZXN0cm95KFwiWW91IHNob3VsZCB3cmFwIHRoZSBtZC1pbnB1dCBpbiBhIG1kLWlucHV0LWNvbnRhaW5lclwiKX0sdGhyb3dFcnJvckRlc3Ryb3k6ZnVuY3Rpb24odCl7dGhyb3cgdGhpcy4kZGVzdHJveSgpLG5ldyBFcnJvcih0KX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT04LG89ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS50b3A8PWktcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0KS5tYXJnaW5Ub3AsMTApfSxhPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUudG9wK3Qub2Zmc2V0SGVpZ2h0K2k+PXdpbmRvdy5pbm5lckhlaWdodC1wYXJzZUludChnZXRDb21wdXRlZFN0eWxlKHQpLm1hcmdpblRvcCwxMCl9LHI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5sZWZ0PD1pLXBhcnNlSW50KGdldENvbXB1dGVkU3R5bGUodCkubWFyZ2luTGVmdCwxMCl9LHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5sZWZ0K3Qub2Zmc2V0V2lkdGgraT49d2luZG93LmlubmVyV2lkdGgtcGFyc2VJbnQoZ2V0Q29tcHV0ZWRTdHlsZSh0KS5tYXJnaW5MZWZ0LDEwKX0sZD1mdW5jdGlvbih0LGUpe3ZhciBuPWdldENvbXB1dGVkU3R5bGUodCk7cmV0dXJuIG8odCxlKSYmKGUudG9wPWktcGFyc2VJbnQobi5tYXJnaW5Ub3AsMTApKSxyKHQsZSkmJihlLmxlZnQ9aS1wYXJzZUludChuLm1hcmdpbkxlZnQsMTApKSxzKHQsZSkmJihlLmxlZnQ9d2luZG93LmlubmVyV2lkdGgtaS10Lm9mZnNldFdpZHRoLXBhcnNlSW50KG4ubWFyZ2luTGVmdCwxMCkpLGEodCxlKSYmKGUudG9wPXdpbmRvdy5pbm5lckhlaWdodC1pLXQub2Zmc2V0SGVpZ2h0LXBhcnNlSW50KG4ubWFyZ2luVG9wLDEwKSksZX07ZS5kZWZhdWx0PWQsdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtYXZhdGFyXCIsbWl4aW5zOlthLmRlZmF1bHRdfSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1iYWNrZHJvcFwiLG1ldGhvZHM6e2Nsb3NlOmZ1bmN0aW9uKCl7dGhpcy4kZW1pdChcImNsb3NlXCIpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLWJvdHRvbS1iYXJcIixwcm9wczp7bWRTaGlmdDpCb29sZWFufSxtaXhpbnM6W2EuZGVmYXVsdF0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tZFNoaWZ0P1wibWQtc2hpZnRcIjpcIm1kLWZpeGVkXCJ9fSxtZXRob2RzOntzZXRBY3RpdmU6ZnVuY3Rpb24odCl7dGhpcy4kY2hpbGRyZW4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5hY3RpdmU9ZT09PXR9KSksdGhpcy4kZW1pdChcImNoYW5nZVwiLHRoaXMuJGNoaWxkcmVuLmZpbmRJbmRleCgoZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT10fSkpKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1ib3R0b20tYmFyLWl0ZW1cIixwcm9wczp7bWRJY29uOlN0cmluZyxtZEljb25TcmM6U3RyaW5nLG1kSWNvbnNldDpTdHJpbmcsbWRBY3RpdmU6Qm9vbGVhbixkaXNhYmxlZDpCb29sZWFuLGhyZWY6U3RyaW5nfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2FjdGl2ZTohMX19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtYWN0aXZlXCI6dGhpcy5hY3RpdmV9fX0sd2F0Y2g6e21kQWN0aXZlOmZ1bmN0aW9uKHQpe3RoaXMuc2V0QWN0aXZlKHQpfX0sbWV0aG9kczp7c2V0QWN0aXZlOmZ1bmN0aW9uKHQsZSl7dCYmdGhpcy4kcGFyZW50LnNldEFjdGl2ZSh0aGlzKSxlJiZ0aGlzLiRlbWl0KFwiY2xpY2tcIixlKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXtpZighdGhpcy4kcGFyZW50LiRlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJtZC1ib3R0b20tYmFyXCIpKXRocm93IHRoaXMuJGRlc3Ryb3koKSxuZXcgRXJyb3IoXCJZb3Ugc2hvdWxkIHdyYXAgdGhlIG1kLWJvdHRvbS1iYXItaXRlbSBpbiBhIG1kLWJvdHRvbS1iYXJcIik7dGhpcy5tZEFjdGl2ZSYmKHRoaXMuYWN0aXZlPSEwKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLWJ1dHRvblwiLHByb3BzOntocmVmOlN0cmluZyx0YXJnZXQ6U3RyaW5nLHJlbDpTdHJpbmcsdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJ1dHRvblwifSxkaXNhYmxlZDpCb29sZWFufSxtaXhpbnM6W2EuZGVmYXVsdF0sY29tcHV0ZWQ6e25ld1JlbDpmdW5jdGlvbigpe3JldHVyblwiX2JsYW5rXCI9PT10aGlzLnRhcmdldD90aGlzLnJlbHx8XCJub29wZW5lclwiOnRoaXMucmVsfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pLHI9dm9pZCAwO2UuZGVmYXVsdD17bmFtZTpcIm1kLWJ1dHRvbi10b2dnbGVcIixwcm9wczp7bWRTaW5nbGU6Qm9vbGVhbn0sbWl4aW5zOlthLmRlZmF1bHRdLG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJGNoaWxkcmVuLmZvckVhY2goKGZ1bmN0aW9uKGUpe3ZhciBuPWUuJGVsLGk9XCJtZC10b2dnbGVcIjtyPWZ1bmN0aW9uKCl7dC5tZFNpbmdsZT8odC4kY2hpbGRyZW4uZm9yRWFjaCgoZnVuY3Rpb24odCl7dC4kZWwuY2xhc3NMaXN0LnJlbW92ZShpKX0pKSxuLmNsYXNzTGlzdC5hZGQoaSkpOm4uY2xhc3NMaXN0LnRvZ2dsZShpKX0sbiYmbi5jbGFzc0xpc3QuY29udGFpbnMoXCJtZC1idXR0b25cIikmJm4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIscil9KSl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLiRjaGlsZHJlbi5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT10LiRlbDtlJiZlLmNsYXNzTGlzdC5jb250YWlucyhcIm1kLWJ1dHRvblwiKSYmZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIixyKX0pKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLWNhcmRcIixwcm9wczp7bWRXaXRoSG92ZXI6Qm9vbGVhbn0sbWl4aW5zOlthLmRlZmF1bHRdLGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtd2l0aC1ob3ZlclwiOnRoaXMubWRXaXRoSG92ZXJ9fX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLWNhcmQtYWN0aW9uc1wifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1jYXJkLWFyZWFcIixwcm9wczp7bWRJbnNldDpCb29sZWFufSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWluc2V0XCI6dGhpcy5tZEluc2V0fX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1jYXJkLWNvbnRlbnRcIn0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtY2FyZC1leHBhbmRcIixkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3RyaWdnZXI6bnVsbCxjb250ZW50Om51bGx9fSxtZXRob2RzOnt0b2dnbGU6ZnVuY3Rpb24oKXt0aGlzLiRyZWZzLmV4cGFuZC5jbGFzc0xpc3QudG9nZ2xlKFwibWQtYWN0aXZlXCIpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7d2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC50cmlnZ2VyPXQuJGVsLnF1ZXJ5U2VsZWN0b3IoXCJbbWQtZXhwYW5kLXRyaWdnZXJdXCIpLHQuY29udGVudD10LiRlbC5xdWVyeVNlbGVjdG9yKFwiLm1kLWNhcmQtY29udGVudFwiKSx0LmNvbnRlbnQmJnQudHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0LnRvZ2dsZSl9KSwyMDApfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNvbnRlbnQmJnRoaXMudHJpZ2dlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLnRvZ2dsZSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1jYXJkLWhlYWRlclwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1jYXJkLWhlYWRlci10ZXh0XCIsbW91bnRlZDpmdW5jdGlvbigpe3RoaXMucGFyZW50Q2xhc3Nlcz10aGlzLiRwYXJlbnQuJGVsLmNsYXNzTGlzdCx0aGlzLnBhcmVudENsYXNzZXMuY29udGFpbnMoXCJtZC1jYXJkLWhlYWRlclwiKSYmKHRoaXMuaW5zaWRlUGFyZW50PSEwLHRoaXMucGFyZW50Q2xhc3Nlcy5hZGQoXCJtZC1jYXJkLWhlYWRlci1mbGV4XCIpKX0sZGVzdHJveWVkOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDbGFzc2VzLnJlbW92ZShcIm1kLWNhcmQtaGVhZGVyLWZsZXhcIil9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1jYXJkLW1lZGlhXCIscHJvcHM6e21kUmF0aW86U3RyaW5nLG1kTWVkaXVtOkJvb2xlYW4sbWRCaWc6Qm9vbGVhbn0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24gdCgpe3ZhciB0PXt9O2lmKHRoaXMubWRSYXRpbyl7dmFyIGU9W107dGhpcy5tZFJhdGlvLmluZGV4T2YoXCI6XCIpIT09LTE/ZT10aGlzLm1kUmF0aW8uc3BsaXQoXCI6XCIpOnRoaXMubWRSYXRpby5pbmRleE9mKFwiL1wiKSE9PS0xJiYoZT10aGlzLm1kUmF0aW8uc3BsaXQoXCIvXCIpKSwyPT09ZS5sZW5ndGgmJih0W1wibWQtXCIrZVswXStcIi1cIitlWzFdXT0hMCl9cmV0dXJuKHRoaXMubWRNZWRpdW18fHRoaXMubWRCaWcpJiYodD17XCJtZC1tZWRpdW1cIjp0aGlzLm1kTWVkaXVtLFwibWQtYmlnXCI6dGhpcy5tZEJpZ30pLHR9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtY2FyZC1tZWRpYS1hY3Rpb25zXCJ9LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oNjUpLGE9aShvKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1jYXJkLW1lZGlhLWNvdmVyXCIscHJvcHM6e21kVGV4dFNjcmltOkJvb2xlYW4sbWRTb2xpZDpCb29sZWFufSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2JhY2tkcm9wQmc6e319fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLXRleHQtc2NyaW1cIjp0aGlzLm1kVGV4dFNjcmltLFwibWQtc29saWRcIjp0aGlzLm1kU29saWR9fSxzdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm57YmFja2dyb3VuZDp0aGlzLmJhY2tkcm9wQmd9fX0sbWV0aG9kczp7YXBwbHlTY3JpbUNvbG9yOmZ1bmN0aW9uKHQpe3RoaXMuJHJlZnMuYmFja2Ryb3AmJih0aGlzLmJhY2tkcm9wQmc9XCJsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCByZ2JhKDAsIDAsIDAsIDApIDIwJSwgcmdiYSgwLCAwLCAwLCBcIit0LzIrXCIpIDY2JSwgcmdiYSgwLCAwLCAwLCBcIit0K1wiKSAxMDAlKVwiKX0sYXBwbHlTb2xpZENvbG9yOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIubWQtY2FyZC1hcmVhXCIpO2UmJihlLnN0eWxlLmJhY2tncm91bmQ9XCJyZ2JhKDAsIDAsIDAsIFwiK3QrXCIpXCIpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT1mdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cy5sZW5ndGg+MCYmdm9pZCAwIT09YXJndW1lbnRzWzBdP2FyZ3VtZW50c1swXTouNjt0Lm1kVGV4dFNjcmltP3QuYXBwbHlTY3JpbUNvbG9yKGUpOnQubWRTb2xpZCYmdC5hcHBseVNvbGlkQ29sb3IoZSl9LG49dGhpcy4kZWwucXVlcnlTZWxlY3RvcihcImltZ1wiKTtuJiYodGhpcy5tZFRleHRTY3JpbXx8dGhpcy5tZFNvbGlkKSYmKDAsYS5kZWZhdWx0KShuLChmdW5jdGlvbih0KXt2YXIgbj0yNTYsaT0oMTAwKk1hdGguYWJzKG4tdCkvbisxNSkvMTAwO2k+PS43JiYoaT0uNyksZShpKX0pLGUpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtY2hlY2tib3hcIixwcm9wczp7bmFtZTpTdHJpbmcsdmFsdWU6W1N0cmluZyxCb29sZWFuXSxpZDpTdHJpbmcsZGlzYWJsZWQ6Qm9vbGVhbn0sbWl4aW5zOlthLmRlZmF1bHRdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57Y2hlY2tlZDp0aGlzLnZhbHVlfHwhMX19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtY2hlY2tlZFwiOnRoaXMuY2hlY2tlZCxcIm1kLWRpc2FibGVkXCI6dGhpcy5kaXNhYmxlZH19fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmNoZWNrZWQ9ISF0aGlzLnZhbHVlfX0sbWV0aG9kczp7dG9nZ2xlQ2hlY2s6ZnVuY3Rpb24odCl7dGhpcy5kaXNhYmxlZHx8KHRoaXMuY2hlY2tlZD0hdGhpcy5jaGVja2VkLHRoaXMuJGVtaXQoXCJjaGFuZ2VcIix0aGlzLmNoZWNrZWQsdCksdGhpcy4kZW1pdChcImlucHV0XCIsdGhpcy5jaGVja2VkLHQpKX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLGE9aShvKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1jaGlwXCIscHJvcHM6e2Rpc2FibGVkOkJvb2xlYW4sbWREZWxldGFibGU6Qm9vbGVhbixtZEVkaXRhYmxlOkJvb2xlYW59LG1peGluczpbYS5kZWZhdWx0XSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWRlbGV0YWJsZVwiOnRoaXMubWREZWxldGFibGUsXCJtZC1kaXNhYmxlZFwiOnRoaXMuZGlzYWJsZWQsXCJtZC1lZGl0YWJsZVwiOnRoaXMubWRFZGl0YWJsZX19fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobykscj1uKDM2KSxzPWkocik7ZS5kZWZhdWx0PXtuYW1lOlwibWQtY2hpcHNcIixwcm9wczp7dmFsdWU6QXJyYXksZGlzYWJsZWQ6Qm9vbGVhbixkZWJvdW5jZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxMDB9LG1kSW5wdXRJZDpTdHJpbmcsbWRJbnB1dE5hbWU6U3RyaW5nLG1kSW5wdXRQbGFjZWhvbGRlcjpTdHJpbmcsbWRJbnB1dFR5cGU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0ZXh0XCJ9LG1kU3RhdGljOkJvb2xlYW4sbWRNYXg6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MS8wfX0sbWl4aW5zOlthLmRlZmF1bHRdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudENoaXA6bnVsbCxzZWxlY3RlZENoaXBzOnRoaXMudmFsdWUsaW5wdXRJZDp0aGlzLm1kSW5wdXRJZHx8XCJjaGlwcy1cIisoMCxzLmRlZmF1bHQpKCl9fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5zZWxlY3RlZENoaXBzPXR9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLXN0YXRpY1wiOnRoaXMubWRTdGF0aWMsXCJtZC1kaXNhYmxlZFwiOnRoaXMuZGlzYWJsZWQsXCJtZC1jaGlwc1wiOiEwfX19LG1ldGhvZHM6e2FwcGx5SW5wdXRGb2N1czpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soKGZ1bmN0aW9uKCl7dC4kcmVmcy5pbnB1dC4kZWwuZm9jdXMoKX0pKX0sYWRkQ2hpcDpmdW5jdGlvbigpe2lmKHRoaXMuY3VycmVudENoaXAmJnRoaXMuc2VsZWN0ZWRDaGlwcy5sZW5ndGg8dGhpcy5tZE1heCl7dmFyIHQ9dGhpcy5jdXJyZW50Q2hpcC50cmltKCk7dGhpcy5zZWxlY3RlZENoaXBzLmluZGV4T2YodCk8MCYmKHRoaXMuc2VsZWN0ZWRDaGlwcy5wdXNoKHQpLHRoaXMuY3VycmVudENoaXA9bnVsbCx0aGlzLiRlbWl0KFwiaW5wdXRcIix0aGlzLnNlbGVjdGVkQ2hpcHMpLHRoaXMuJGVtaXQoXCJjaGFuZ2VcIix0aGlzLnNlbGVjdGVkQ2hpcHMpLHRoaXMuYXBwbHlJbnB1dEZvY3VzKCkpfX0sZGVsZXRlQ2hpcDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLnNlbGVjdGVkQ2hpcHMuaW5kZXhPZih0KTtlPj0wJiZ0aGlzLnNlbGVjdGVkQ2hpcHMuc3BsaWNlKGUsMSksdGhpcy4kZW1pdChcImNoYW5nZVwiLHRoaXMuc2VsZWN0ZWRDaGlwcyksdGhpcy5hcHBseUlucHV0Rm9jdXMoKX0sZWRpdENoaXA6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5zZWxlY3RlZENoaXBzLmluZGV4T2YodCk7ZT49MCYmdGhpcy5zZWxlY3RlZENoaXBzLnNwbGljZShlLDEpLHRoaXMuY3VycmVudENoaXA9dCx0aGlzLiRlbWl0KFwiY2hhbmdlXCIsdGhpcy5zZWxlY3RlZENoaXBzKSx0aGlzLmFwcGx5SW5wdXRGb2N1cygpfSxkZWxldGVMYXN0Q2hpcDpmdW5jdGlvbigpe3RoaXMuY3VycmVudENoaXB8fCh0aGlzLnNlbGVjdGVkQ2hpcHMucG9wKCksdGhpcy4kZW1pdChcImNoYW5nZVwiLHRoaXMuc2VsZWN0ZWRDaGlwcyksdGhpcy5hcHBseUlucHV0Rm9jdXMoKSl9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobykscj1uKDQxKSxzPWkocik7ZS5kZWZhdWx0PXtuYW1lOlwibWQtZGlhbG9nXCIscHJvcHM6e21kQ2xpY2tPdXRzaWRlVG9DbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1kRXNjVG9DbG9zZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1kQmFja2Ryb3A6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtZE9wZW5Gcm9tOlN0cmluZyxtZENsb3NlVG86U3RyaW5nLG1kRnVsbHNjcmVlbjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9fSxtaXhpbnM6W2EuZGVmYXVsdF0sZGF0YTpmdW5jdGlvbigpe3JldHVybnthY3RpdmU6ITEsdHJhbnNpdGlvbk9mZjohMSxkaWFsb2dUcmFuc2Zvcm06XCJcIn19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtYWN0aXZlXCI6dGhpcy5hY3RpdmV9fSxkaWFsb2dDbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtZnVsbHNjcmVlblwiOnRoaXMubWRGdWxsc2NyZWVuLFwibWQtdHJhbnNpdGlvbi1vZmZcIjp0aGlzLnRyYW5zaXRpb25PZmYsXCJtZC1yZWZlcmVuY2VcIjp0aGlzLm1kT3BlbkZyb218fHRoaXMubWRDbG9zZVRvfX0sc3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJue3RyYW5zZm9ybTp0aGlzLmRpYWxvZ1RyYW5zZm9ybX19fSxtZXRob2RzOntyZW1vdmVEaWFsb2c6ZnVuY3Rpb24oKXtkb2N1bWVudC5ib2R5LmNvbnRhaW5zKHRoaXMuZGlhbG9nRWxlbWVudCkmJnRoaXMuJGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy4kZWwpfSxjYWxjdWxhdGVEaWFsb2dQb3M6ZnVuY3Rpb24odCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0KTtpZihlKXt2YXIgbj1lLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGk9dGhpcy5kaWFsb2dJbm5lckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbz1uLndpZHRoL2kud2lkdGgsYT1uLmhlaWdodC9pLmhlaWdodCxyPXt0b3A6LShpLnRvcC1uLnRvcCksbGVmdDotKGkubGVmdC1uLmxlZnQrbi53aWR0aCl9O24udG9wPmkudG9wK2kuaGVpZ2h0JiYoci50b3A9bi50b3AtaS50b3ApLG4ubGVmdD5pLmxlZnQraS53aWR0aCYmKHIubGVmdD1uLmxlZnQtaS5sZWZ0LW4ud2lkdGgpLHRoaXMuZGlhbG9nVHJhbnNmb3JtPVwidHJhbnNsYXRlM0QoXCIrci5sZWZ0K1wicHgsIFwiK3IudG9wK1wicHgsIDApIHNjYWxlKFwiK28rXCIsIFwiK2ErXCIpXCJ9fSxvcGVuOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZGlhbG9nRWxlbWVudCksdGhpcy50cmFuc2l0aW9uT2ZmPSEwLHRoaXMuY2FsY3VsYXRlRGlhbG9nUG9zKHRoaXMubWRPcGVuRnJvbSksd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5kaWFsb2dFbGVtZW50LmZvY3VzKCksdC50cmFuc2l0aW9uT2ZmPSExLHQuYWN0aXZlPSEwfSkpLHRoaXMuJGVtaXQoXCJvcGVuXCIpfSxjbG9zZU9uRXNjOmZ1bmN0aW9uKCl7dGhpcy5tZEVzY1RvQ2xvc2UmJnRoaXMuY2xvc2UoKX0sY2xvc2U6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2RvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5kaWFsb2dFbGVtZW50KSYmdGhpcy4kbmV4dFRpY2soKGZ1bmN0aW9uKCl7dmFyIGU9ZnVuY3Rpb24gZSgpe3ZhciBuPXQuZGlhbG9nRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1kLXJpcHBsZS5tZC1hY3RpdmVcIik7biYmbi5jbGFzc0xpc3QucmVtb3ZlKFwibWQtYWN0aXZlXCIpLHQuZGlhbG9nSW5uZXJFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIocy5kZWZhdWx0LGUpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodC5kaWFsb2dFbGVtZW50KSx0LmRpYWxvZ1RyYW5zZm9ybT1cIlwifTt0LnRyYW5zaXRpb25PZmY9ITAsdC5kaWFsb2dUcmFuc2Zvcm09XCJcIix0LmNhbGN1bGF0ZURpYWxvZ1Bvcyh0Lm1kQ2xvc2VUbyksd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC50cmFuc2l0aW9uT2ZmPSExLHQuYWN0aXZlPSExLHQuZGlhbG9nSW5uZXJFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIocy5kZWZhdWx0LGUpfSkpLHQuJGVtaXQoXCJjbG9zZVwiKX0pKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe3QuZGlhbG9nRWxlbWVudD10LiRlbCx0LmRpYWxvZ0lubmVyRWxlbWVudD10LiRyZWZzLmRpYWxvZyx0LnJlbW92ZURpYWxvZygpfSkpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5yZW1vdmVEaWFsb2coKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLWRpYWxvZy1hY3Rpb25zXCJ9LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLWRpYWxvZy1jb250ZW50XCJ9LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLWRpYWxvZy10aXRsZVwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1kaWFsb2ctYWxlcnRcIixwcm9wczp7bWRUaXRsZTpTdHJpbmcsbWRDb250ZW50OlN0cmluZyxtZENvbnRlbnRIdG1sOlN0cmluZyxtZE9rVGV4dDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIk9rXCJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2RlYm91bmNlOiExfX0sbWV0aG9kczp7ZmlyZUNsb3NlRXZlbnQ6ZnVuY3Rpb24oKXt0aGlzLmRlYm91bmNlfHx0aGlzLiRlbWl0KFwiY2xvc2VcIil9LG9wZW46ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KFwib3BlblwiKSx0aGlzLmRlYm91bmNlPSExLHRoaXMuJHJlZnMuZGlhbG9nLm9wZW4oKX0sY2xvc2U6ZnVuY3Rpb24oKXt0aGlzLmZpcmVDbG9zZUV2ZW50KCksdGhpcy5kZWJvdW5jZT0hMCx0aGlzLiRyZWZzLmRpYWxvZy5jbG9zZSgpfX0sbW91bnRlZDpmdW5jdGlvbigpe2lmKCF0aGlzLm1kQ29udGVudCYmIXRoaXMubWRDb250ZW50SHRtbCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG1kLWNvbnRlbnQgb3IgbWQtY29udGVudC1odG1sIGF0dHJpYnV0ZXNcIil9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1kaWFsb2ctY29uZmlybVwiLHByb3BzOnttZFRpdGxlOlN0cmluZyxtZENvbnRlbnQ6U3RyaW5nLG1kQ29udGVudEh0bWw6U3RyaW5nLG1kT2tUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiT2tcIn0sbWRDYW5jZWxUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiQ2FuY2VsXCJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2RlYm91bmNlOiExfX0sbWV0aG9kczp7ZmlyZUNsb3NlRXZlbnQ6ZnVuY3Rpb24odCl7dGhpcy5kZWJvdW5jZXx8dGhpcy4kZW1pdChcImNsb3NlXCIsdCl9LG9wZW46ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KFwib3BlblwiKSx0aGlzLmRlYm91bmNlPSExLHRoaXMuJHJlZnMuZGlhbG9nLm9wZW4oKX0sY2xvc2U6ZnVuY3Rpb24odCl7dGhpcy5maXJlQ2xvc2VFdmVudCh0KSx0aGlzLmRlYm91bmNlPSEwLHRoaXMuJHJlZnMuZGlhbG9nLmNsb3NlKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7aWYoIXRoaXMubWRDb250ZW50JiYhdGhpcy5tZENvbnRlbnRIdG1sKXRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgbWQtY29udGVudCBvciBtZC1jb250ZW50LWh0bWwgYXR0cmlidXRlc1wiKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLWRpYWxvZy1wcm9tcHRcIixwcm9wczp7dmFsdWU6e3R5cGU6W1N0cmluZyxOdW1iZXJdLHJlcXVpcmVkOiEwfSxtZFRpdGxlOlN0cmluZyxtZENvbnRlbnQ6U3RyaW5nLG1kQ29udGVudEh0bWw6U3RyaW5nLG1kT2tUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiT2tcIn0sbWRDYW5jZWxUZXh0Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiQ2FuY2VsXCJ9LG1kSW5wdXRJZDpTdHJpbmcsbWRJbnB1dE5hbWU6U3RyaW5nLG1kSW5wdXRNYXhsZW5ndGg6W1N0cmluZyxOdW1iZXJdLG1kSW5wdXRQbGFjZWhvbGRlcjpTdHJpbmd9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57ZGVib3VuY2U6ITF9fSxtZXRob2RzOntmaXJlQ2xvc2VFdmVudDpmdW5jdGlvbih0KXt0aGlzLmRlYm91bmNlfHx0aGlzLiRlbWl0KFwiY2xvc2VcIix0KX0sb3BlbjpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kZW1pdChcIm9wZW5cIiksdGhpcy5kZWJvdW5jZT0hMSx0aGlzLiRyZWZzLmRpYWxvZy5vcGVuKCksd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC4kcmVmcy5pbnB1dC4kZWwuZm9jdXMoKX0pKX0sY2xvc2U6ZnVuY3Rpb24odCl7dGhpcy5maXJlQ2xvc2VFdmVudCh0KSx0aGlzLmRlYm91bmNlPSEwLHRoaXMuJHJlZnMuZGlhbG9nLmNsb3NlKCl9LGNvbmZpcm1WYWx1ZTpmdW5jdGlvbigpe3RoaXMuJGVtaXQoXCJpbnB1dFwiLHRoaXMuJHJlZnMuaW5wdXQuJGVsLnZhbHVlKSx0aGlzLmNsb3NlKFwib2tcIil9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtZGl2aWRlclwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDY3KSxhPWkobykscj1uKDEwKSxzPWkocik7ZS5kZWZhdWx0PXtuYW1lOlwibWQtZmlsZVwiLHByb3BzOnt2YWx1ZTpTdHJpbmcsaWQ6U3RyaW5nLG5hbWU6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW4scmVxdWlyZWQ6Qm9vbGVhbixwbGFjZWhvbGRlcjpTdHJpbmcsYWNjZXB0OlN0cmluZyxtdWx0aXBsZTpCb29sZWFufSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2ZpbGVuYW1lOnRoaXMudmFsdWV9fSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oKXt0aGlzLmZpbGVuYW1lPXRoaXMudmFsdWV9fSxtZXRob2RzOntnZXRNdWx0aXBsZU5hbWU6ZnVuY3Rpb24odCl7dmFyIGU9W107cmV0dXJuW10uY29uY2F0KCgwLGEuZGVmYXVsdCkodCkpLmZvckVhY2goKGZ1bmN0aW9uKHQpe2UucHVzaCh0Lm5hbWUpfSkpLGUuam9pbihcIiwgXCIpfSxvcGVuUGlja2VyOmZ1bmN0aW9uKCl7dGhpcy5kaXNhYmxlZHx8KHRoaXMucmVzZXRGaWxlKCksdGhpcy4kcmVmcy5maWxlSW5wdXQuY2xpY2soKSx0aGlzLiRyZWZzLnRleHRJbnB1dC4kZWwuZm9jdXMoKSl9LHJlc2V0RmlsZTpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyLnZhbHVlPVwiXCIsdGhpcy4kcmVmcy5maWxlSW5wdXQudmFsdWU9XCJcIn0sb25GaWxlU2VsZWN0ZWQ6ZnVuY3Rpb24odCl7dmFyIGU9dC50YXJnZXQuZmlsZXN8fHQuZGF0YVRyYW5zZmVyLmZpbGVzO2U/ZS5sZW5ndGg+MT90aGlzLmZpbGVuYW1lPXRoaXMuZ2V0TXVsdGlwbGVOYW1lKGUpOjE9PT1lLmxlbmd0aD90aGlzLmZpbGVuYW1lPWVbMF0ubmFtZTp0aGlzLmZpbGVuYW1lPW51bGw6dGhpcy5maWxlbmFtZT10LnRhcmdldC52YWx1ZS5zcGxpdChcIlxcXFxcIikucG9wKCksdGhpcy4kZW1pdChcInNlbGVjdGVkXCIsZXx8dC50YXJnZXQudmFsdWUpLHRoaXMuJGVtaXQoXCJpbnB1dFwiLHRoaXMuZmlsZW5hbWUpfX0sbW91bnRlZDpmdW5jdGlvbigpe2lmKHRoaXMucGFyZW50Q29udGFpbmVyPSgwLHMuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtaW5wdXQtY29udGFpbmVyXCIpLCF0aGlzLnBhcmVudENvbnRhaW5lcil0aHJvdyB0aGlzLiRkZXN0cm95KCksbmV3IEVycm9yKFwiWW91IHNob3VsZCB3cmFwIHRoZSBtZC1maWxlIGluIGEgbWQtaW5wdXQtY29udGFpbmVyXCIpO3RoaXMucGFyZW50Q29udGFpbmVyLmhhc0ZpbGU9ITB9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lci5oYXNGaWxlPSExfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobykscj17fTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1pY29uXCIscHJvcHM6e21kU3JjOlN0cmluZyxtZEljb25zZXQ6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJtYXRlcmlhbC1pY29uc1wifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntzdmdDb250ZW50Om51bGwsaW1hZ2VTcmM6bnVsbH19LG1peGluczpbYS5kZWZhdWx0XSx3YXRjaDp7bWRTcmM6ZnVuY3Rpb24oKXt0aGlzLnN2Z0NvbnRlbnQ9bnVsbCx0aGlzLmltYWdlU3JjPW51bGwsdGhpcy5jaGVja1NyYygpfX0sbWV0aG9kczp7aXNJbWFnZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5pbmRleE9mKFwiaW1hZ2VcIik+PTB9LGlzU1ZHOmZ1bmN0aW9uKHQpe3JldHVybiB0LmluZGV4T2YoXCJzdmdcIik+PTB9LHNldFNWR0NvbnRlbnQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnN2Z0NvbnRlbnQ9dCx0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXtlLiRlbC5jaGlsZHJlblswXS5yZW1vdmVBdHRyaWJ1dGUoXCJmaWxsXCIpfSkpfSxsb2FkU1ZHOmZ1bmN0aW9uKCl7aWYoclt0aGlzLm1kU3JjXSl0aGlzLnNldFNWR0NvbnRlbnQoclt0aGlzLm1kU3JjXSk7ZWxzZXt2YXIgdD1uZXcgWE1MSHR0cFJlcXVlc3QsZT10aGlzO3Qub3BlbihcIkdFVFwiLHRoaXMubWRTcmMsITApLHQub25sb2FkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRSZXNwb25zZUhlYWRlcihcImNvbnRlbnQtdHlwZVwiKTt0aGlzLnN0YXR1cz49MjAwJiZ0aGlzLnN0YXR1czw0MDAmJmUuaXNJbWFnZSh0KT9lLmlzU1ZHKHQpPyhyW2UubWRTcmNdPXRoaXMucmVzcG9uc2UsZS5zZXRTVkdDb250ZW50KHRoaXMucmVzcG9uc2UpKTplLmxvYWRJbWFnZSgpOmNvbnNvbGUud2FybihcIlRoZSBmaWxlIFwiK2UubWRTcmMrXCIgaXMgbm90IGEgdmFsaWQgaW1hZ2UuXCIpfSx0LnNlbmQoKX19LGxvYWRJbWFnZTpmdW5jdGlvbigpe3RoaXMuaW1hZ2VTcmM9dGhpcy5tZFNyY30sY2hlY2tTcmM6ZnVuY3Rpb24oKXt0aGlzLm1kU3JjJiYodGhpcy5tZFNyYy5pbmRleE9mKFwiLnN2Z1wiKT49MD90aGlzLmxvYWRTVkcoKTp0aGlzLmxvYWRJbWFnZSgpKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNoZWNrU3JjKCl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDY1KSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtaW1hZ2VcIixwcm9wczp7bWRTcmM6U3RyaW5nfSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2xvYWRlZDohMSxhcHBseUJsYWNrOiEwLGltYWdlRWxlbWVudDpudWxsfX0sd2F0Y2g6e21kU3JjOmZ1bmN0aW9uKCl7dGhpcy5jcmVhdGVJbWFnZSgpfX0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1sb2FkZWRcIjp0aGlzLmxvYWRlZCxcIm1kLWJsYWNrLW91dHB1dFwiOnRoaXMuYXBwbHlCbGFja319fSxtZXRob2RzOnthbmFseXplTGlnaHRuZXNzOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1mdW5jdGlvbigpe2UubG9hZGVkPSEwfTsoMCxhLmRlZmF1bHQpKHQsKGZ1bmN0aW9uKHQpe3ZhciBpPTI1NixvPSgxMDAqTWF0aC5hYnMoaS10KS9pKzE1KS8xMDA7bz49LjcmJihlLmFwcGx5QmxhY2s9ITApLGUuJG5leHRUaWNrKG4pfSksbil9LGNyZWF0ZUltYWdlOmZ1bmN0aW9uKCl7dGhpcy5sb2FkZWQ9ITEsdGhpcy5hcHBseUJsYWNrPSExLHRoaXMuaW1hZ2VFbGVtZW50PW51bGwsdGhpcy5tZFNyYyYmKHRoaXMuaW1hZ2VFbGVtZW50PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiksdGhpcy5pbWFnZUVsZW1lbnQuY3Jvc3NPcmlnaW49XCJcIix0aGlzLmltYWdlRWxlbWVudC5zcmM9dGhpcy5tZFNyYyx0aGlzLmFuYWx5emVMaWdodG5lc3ModGhpcy5pbWFnZUVsZW1lbnQpKX19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNyZWF0ZUltYWdlKCl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDIwNyksYT1pKG8pLHI9big1MSkscz1pKHIpLGQ9bigxMjQpLGw9aShkKSxjPW4oNTgpLHU9aShjKSxtPW4oMTApLGY9aShtKTtlLmRlZmF1bHQ9e21peGluczpbdS5kZWZhdWx0LGwuZGVmYXVsdF0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpdGVtczpbXSxsb2FkaW5nOiExLHF1ZXJ5OlwiXCIsc2VsZWN0ZWQ6bnVsbCx0aW1lb3V0OjAscGFyZW50Q29udGFpbmVyOm51bGwsc2VhcmNoQnV0dG9uOm51bGx9fSxjb21wdXRlZDp7bGlzdElzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gMD09PXRoaXMubGlzdC5sZW5ndGh9fSx3YXRjaDp7bGlzdDpmdW5jdGlvbih0KXt0aGlzLml0ZW1zPSgwLHMuZGVmYXVsdCkoW10sdCl9LHF1ZXJ5OmZ1bmN0aW9uKHQpe3RoaXMuJHJlZnMuaW5wdXQudmFsdWU9dCx0aGlzLnNldFBhcmVudFVwZGF0ZVZhbHVlKHQpfSx2YWx1ZTpmdW5jdGlvbih0KXt0aGlzLnF1ZXJ5PXQsdGhpcy5zZXRQYXJlbnRVcGRhdGVWYWx1ZSh0KX19LG1ldGhvZHM6e2RlYm91bmNlVXBkYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLm9uSW5wdXQoKSx0aGlzLnRpbWVvdXQmJndpbmRvdy5jbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KSx0aGlzLnRpbWVvdXQ9d2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7cmV0dXJuIHQubGlzdElzRW1wdHk/dm9pZCB0LnVwZGF0ZSgpOnZvaWQgdC5yZW5kZXJGaWx0ZXJlZExpc3QoKX0pLHRoaXMuZGVib3VuY2UpfSxoaXQ6ZnVuY3Rpb24odCl7dGhpcy5xdWVyeT10W3RoaXMucHJpbnRBdHRyaWJ1dGVdLHRoaXMuJHJlZnMuaW5wdXQudmFsdWU9dFt0aGlzLnByaW50QXR0cmlidXRlXSx0aGlzLnNlbGVjdGVkPXQsdGhpcy5vbklucHV0KCksdGhpcy4kZW1pdChcInNlbGVjdGVkXCIsdGhpcy5zZWxlY3RlZCx0aGlzLiRyZWZzLmlucHV0LnZhbHVlKTtcbn0sbWFrZUZldGNoUmVxdWVzdDpmdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiB0aGlzLmZldGNoKHQpLnRoZW4oKGZ1bmN0aW9uKHQpe3ZhciBuPXR8fHQuZGF0YXx8dC5ib2R5O249ZS5wcmVwYXJlUmVzcG9uc2VEYXRhP2UucHJlcGFyZVJlc3BvbnNlRGF0YShuKTpuLGUuaXRlbXM9ZS5saW1pdD9uLnNsaWNlKDAsZS5saW1pdCk6bixlLmxvYWRpbmc9ITEsZS50b2dnbGVNZW51KCl9KSl9LG9uRm9jdXM6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lciYmKHRoaXMucGFyZW50Q29udGFpbmVyLmlzRm9jdXNlZD0hMCksdGhpcy4kcmVmcy5pbnB1dC5mb2N1cygpfSxvbklucHV0OmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVWYWx1ZXMoKSx0aGlzLiRlbWl0KFwiY2hhbmdlXCIsdGhpcy4kcmVmcy5pbnB1dC52YWx1ZSksdGhpcy4kZW1pdChcImlucHV0XCIsdGhpcy4kcmVmcy5pbnB1dC52YWx1ZSl9LHJlbmRlckZpbHRlcmVkTGlzdDpmdW5jdGlvbigpe3RoaXMuZmlsdGVyTGlzdCYmKHRoaXMuaXRlbXM9dGhpcy5maWx0ZXJMaXN0KCgwLHMuZGVmYXVsdCkoW10sdGhpcy5saXN0KSx0aGlzLnF1ZXJ5KSksdGhpcy50b2dnbGVNZW51KCl9LHJlc2V0OmZ1bmN0aW9uKCl7dGhpcy5pdGVtcz1bXSx0aGlzLnF1ZXJ5PVwiXCIsdGhpcy5sb2FkaW5nPSExfSxzZXRQYXJlbnRWYWx1ZTpmdW5jdGlvbih0KXt0aGlzLnBhcmVudENvbnRhaW5lci5zZXRWYWx1ZSh0fHx0aGlzLiRyZWZzLmlucHV0LnZhbHVlKX0sc2V0UGFyZW50RGlzYWJsZWQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lci5pc0Rpc2FibGVkPXRoaXMuZGlzYWJsZWR9LHNldFBhcmVudFJlcXVpcmVkOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDb250YWluZXIuaXNSZXF1aXJlZD10aGlzLnJlcXVpcmVkfSxzZXRQYXJlbnRQbGFjZWhvbGRlcjpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyLmhhc1BsYWNlaG9sZGVyPSEhdGhpcy5wbGFjZWhvbGRlcn0sc2V0UGFyZW50VXBkYXRlVmFsdWU6ZnVuY3Rpb24odCl7dGhpcy5zZXRQYXJlbnRWYWx1ZSh0KSx0aGlzLnVwZGF0ZVZhbHVlcyh0KX0sc2V0U2VhcmNoQnV0dG9uOmZ1bmN0aW9uKCl7dGhpcy5zZWFyY2hCdXR0b249dGhpcy5wYXJlbnRDb250YWluZXIuJGVsLnF1ZXJ5U2VsZWN0b3IoXCJbbWQtYXV0b2NvbXBsZXRlLXNlYXJjaF1cIiksdGhpcy5zZWFyY2hCdXR0b24mJnRoaXMuc2VhcmNoQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMubWFrZUZldGNoUmVxdWVzdCl9LHVwZGF0ZTpmdW5jdGlvbigpe2lmKCF0aGlzLnF1ZXJ5JiYhdGhpcy5saXN0Lmxlbmd0aClyZXR1cm4gdGhpcy5yZXNldCgpO2lmKCEodGhpcy5taW5DaGFycyYmdGhpcy5xdWVyeS5sZW5ndGg8dGhpcy5taW5DaGFycykpe3RoaXMubG9hZGluZz0hMDt2YXIgdD0oMCxhLmRlZmF1bHQpKHt9LHRoaXMucXVlcnlQYXJhbSx0aGlzLnF1ZXJ5KTtyZXR1cm4gdGhpcy5tYWtlRmV0Y2hSZXF1ZXN0KHQpfX0sdG9nZ2xlTWVudTpmdW5jdGlvbigpe3RoaXMuaXRlbXMubGVuZ3RoJiZ0aGlzLiRyZWZzLm1lbnUudG9nZ2xlKCl9LHVwZGF0ZVZhbHVlczpmdW5jdGlvbih0KXt2YXIgZT10fHx0aGlzLiRyZWZzLmlucHV0LnZhbHVlfHx0aGlzLnZhbHVlO3RoaXMuc2V0UGFyZW50VmFsdWUoZSksdGhpcy5wYXJlbnRDb250YWluZXIuaW5wdXRMZW5ndGg9ZT9lLmxlbmd0aDowfX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMuc2VhcmNoQnV0dG9uJiZ0aGlzLnNlYXJjaEJ1dHRvbi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLm1ha2VGZXRjaFJlcXVlc3QpfSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXt0LnBhcmVudENvbnRhaW5lcj0oMCxmLmRlZmF1bHQpKHQuJHBhcmVudCxcIm1kLWlucHV0LWNvbnRhaW5lclwiKSx0Lmxpc3RJc0VtcHR5fHwodC5pdGVtcz0oMCxzLmRlZmF1bHQpKFtdLHQubGlzdCkpLHQucXVlcnk9dC52YWx1ZSx0LnZlcmlmeVByb3BzKCksdC5zZXRTZWFyY2hCdXR0b24oKSx0LnNldFBhcmVudERpc2FibGVkKCksdC5zZXRQYXJlbnRSZXF1aXJlZCgpLHQuc2V0UGFyZW50UGxhY2Vob2xkZXIoKSx0LmhhbmRsZU1heExlbmd0aCgpLHQudXBkYXRlVmFsdWVzKCl9KSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDU4KSxhPWkobykscj1uKDEwKSxzPWkocik7ZS5kZWZhdWx0PXtuYW1lOlwibWQtaW5wdXRcIixwcm9wczp7dHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInRleHRcIn19LG1peGluczpbYS5kZWZhdWx0XSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXtpZih0LnBhcmVudENvbnRhaW5lcj0oMCxzLmRlZmF1bHQpKHQuJHBhcmVudCxcIm1kLWlucHV0LWNvbnRhaW5lclwiKSwhdC5wYXJlbnRDb250YWluZXIpdGhyb3cgdC4kZGVzdHJveSgpLG5ldyBFcnJvcihcIllvdSBzaG91bGQgd3JhcCB0aGUgbWQtaW5wdXQgaW4gYSBtZC1pbnB1dC1jb250YWluZXJcIik7dC5wYXJlbnRDb250YWluZXIuaW5wdXRJbnN0YW5jZT10LHQuc2V0UGFyZW50RGlzYWJsZWQoKSx0LnNldFBhcmVudFJlcXVpcmVkKCksdC5zZXRQYXJlbnRQbGFjZWhvbGRlcigpLHQuaGFuZGxlTWF4TGVuZ3RoKCksdC51cGRhdGVWYWx1ZXMoKX0pKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pLHI9big2Nikscz1pKHIpO2UuZGVmYXVsdD17bmFtZTpcIm1kLWlucHV0LWNvbnRhaW5lclwiLHByb3BzOnttZElubGluZTpCb29sZWFuLG1kSGFzUGFzc3dvcmQ6Qm9vbGVhbixtZENsZWFyYWJsZTpCb29sZWFufSxtaXhpbnM6W2EuZGVmYXVsdF0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt2YWx1ZTpcIlwiLGlucHV0OiExLGlucHV0SW5zdGFuY2U6bnVsbCxzaG93UGFzc3dvcmQ6ITEsZW5hYmxlQ291bnRlcjohMSxoYXNTZWxlY3Q6ITEsaGFzUGxhY2Vob2xkZXI6ITEsaGFzRmlsZTohMSxpc0Rpc2FibGVkOiExLGlzUmVxdWlyZWQ6ITEsaXNGb2N1c2VkOiExLGNvdW50ZXJMZW5ndGg6MCxpbnB1dExlbmd0aDowfX0sY29tcHV0ZWQ6e2hhc1ZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuKDAscy5kZWZhdWx0KSh0aGlzLnZhbHVlKT90aGlzLnZhbHVlLmxlbmd0aD4wOkJvb2xlYW4odGhpcy52YWx1ZSl9LGNsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1pbnB1dC1pbmxpbmVcIjp0aGlzLm1kSW5saW5lLFwibWQtaGFzLXBhc3N3b3JkXCI6dGhpcy5tZEhhc1Bhc3N3b3JkLFwibWQtY2xlYXJhYmxlXCI6dGhpcy5tZENsZWFyYWJsZSxcIm1kLWhhcy1zZWxlY3RcIjp0aGlzLmhhc1NlbGVjdCxcIm1kLWhhcy1maWxlXCI6dGhpcy5oYXNGaWxlLFwibWQtaGFzLXZhbHVlXCI6dGhpcy5oYXNWYWx1ZSxcIm1kLWlucHV0LXBsYWNlaG9sZGVyXCI6dGhpcy5oYXNQbGFjZWhvbGRlcixcIm1kLWlucHV0LWRpc2FibGVkXCI6dGhpcy5pc0Rpc2FibGVkLFwibWQtaW5wdXQtcmVxdWlyZWRcIjp0aGlzLmlzUmVxdWlyZWQsXCJtZC1pbnB1dC1mb2N1c2VkXCI6dGhpcy5pc0ZvY3VzZWR9fX0sbWV0aG9kczp7aXNJbnB1dDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlucHV0JiZcImlucHV0XCI9PT10aGlzLmlucHV0LnRhZ05hbWUudG9Mb3dlckNhc2UoKX0sdG9nZ2xlUGFzc3dvcmRUeXBlOmZ1bmN0aW9uKCl7dGhpcy5pc0lucHV0KCkmJihcInBhc3N3b3JkXCI9PT10aGlzLmlucHV0LnR5cGU/KHRoaXMuaW5wdXQudHlwZT1cInRleHRcIix0aGlzLnNob3dQYXNzd29yZD0hMCk6KHRoaXMuaW5wdXQudHlwZT1cInBhc3N3b3JkXCIsdGhpcy5zaG93UGFzc3dvcmQ9ITEpLHRoaXMuaW5wdXQuZm9jdXMoKSl9LGNsZWFySW5wdXQ6ZnVuY3Rpb24oKXt0aGlzLmlucHV0SW5zdGFuY2UuJGVsLnZhbHVlPVwiXCIsdGhpcy5pbnB1dEluc3RhbmNlLiRlbWl0KFwiaW5wdXRcIixcIlwiKSx0aGlzLnNldFZhbHVlKFwiXCIpfSxzZXRWYWx1ZTpmdW5jdGlvbih0KXt0aGlzLnZhbHVlPXR9fSxtb3VudGVkOmZ1bmN0aW9uKCl7aWYodGhpcy5pbnB1dD10aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIC5tZC1maWxlXCIpWzBdLCF0aGlzLmlucHV0KXRocm93IHRoaXMuJGRlc3Ryb3koKSxuZXcgRXJyb3IoXCJNaXNzaW5nIGlucHV0L3NlbGVjdC90ZXh0YXJlYSBpbnNpZGUgbWQtaW5wdXQtY29udGFpbmVyXCIpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxMTUpLGE9aShvKSxyPW4oNTgpLHM9aShyKSxkPW4oMTApLGw9aShkKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC10ZXh0YXJlYVwiLG1peGluczpbcy5kZWZhdWx0XSx3YXRjaDp7dmFsdWU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe3JldHVybiBhLmRlZmF1bHQudXBkYXRlKHQuJGVsKX0pKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe2lmKHQucGFyZW50Q29udGFpbmVyPSgwLGwuZGVmYXVsdCkodC4kcGFyZW50LFwibWQtaW5wdXQtY29udGFpbmVyXCIpLCF0LnBhcmVudENvbnRhaW5lcil0aHJvdyB0LiRkZXN0cm95KCksbmV3IEVycm9yKFwiWW91IHNob3VsZCB3cmFwIHRoZSBtZC10ZXh0YXJlYSBpbiBhIG1kLWlucHV0LWNvbnRhaW5lclwiKTt0LnBhcmVudENvbnRhaW5lci5pbnB1dEluc3RhbmNlPXQsdC5zZXRQYXJlbnREaXNhYmxlZCgpLHQuc2V0UGFyZW50UmVxdWlyZWQoKSx0LnNldFBhcmVudFBsYWNlaG9sZGVyKCksdC5oYW5kbGVNYXhMZW5ndGgoKSx0LnVwZGF0ZVZhbHVlcygpLHQuJGVsLmdldEF0dHJpYnV0ZShcInJvd3NcIil8fHQuJGVsLnNldEF0dHJpYnV0ZShcInJvd3NcIixcIjFcIiksKDAsYS5kZWZhdWx0KSh0LiRlbCksc2V0VGltZW91dCgoZnVuY3Rpb24oKXtyZXR1cm4gYS5kZWZhdWx0LnVwZGF0ZSh0LiRlbCl9KSwyMDApfSkpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7YS5kZWZhdWx0LmRlc3Ryb3kodGhpcy4kZWwpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtbGF5b3V0XCIscHJvcHM6e21kVGFnOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZGl2XCJ9LG1kUm93OkJvb2xlYW4sbWRSb3dYc21hbGw6Qm9vbGVhbixtZFJvd1NtYWxsOkJvb2xlYW4sbWRSb3dNZWRpdW06Qm9vbGVhbixtZFJvd0xhcmdlOkJvb2xlYW4sbWRSb3dYbGFyZ2U6Qm9vbGVhbixtZENvbHVtbjpCb29sZWFuLG1kQ29sdW1uWHNtYWxsOkJvb2xlYW4sbWRDb2x1bW5TbWFsbDpCb29sZWFuLG1kQ29sdW1uTWVkaXVtOkJvb2xlYW4sbWRDb2x1bW5MYXJnZTpCb29sZWFuLG1kQ29sdW1uWGxhcmdlOkJvb2xlYW4sbWRIaWRlWHNtYWxsOkJvb2xlYW4sbWRIaWRlU21hbGw6Qm9vbGVhbixtZEhpZGVNZWRpdW06Qm9vbGVhbixtZEhpZGVMYXJnZTpCb29sZWFuLG1kSGlkZVhsYXJnZTpCb29sZWFuLG1kSGlkZVhzbWFsbEFuZFVwOkJvb2xlYW4sbWRIaWRlU21hbGxBbmRVcDpCb29sZWFuLG1kSGlkZU1lZGl1bUFuZFVwOkJvb2xlYW4sbWRIaWRlTGFyZ2VBbmRVcDpCb29sZWFuLG1kSGlkZVhsYXJnZUFuZFVwOkJvb2xlYW4sbWRHdXR0ZXI6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRBbGlnbjpTdHJpbmcsbWRBbGlnblhzbWFsbDpTdHJpbmcsbWRBbGlnblNtYWxsOlN0cmluZyxtZEFsaWduTWVkaXVtOlN0cmluZyxtZEFsaWduTGFyZ2U6U3RyaW5nLG1kQWxpZ25YbGFyZ2U6U3RyaW5nLG1kVmVydGljYWxBbGlnbjpTdHJpbmcsbWRWZXJ0aWNhbEFsaWduWHNtYWxsOlN0cmluZyxtZFZlcnRpY2FsQWxpZ25TbWFsbDpTdHJpbmcsbWRWZXJ0aWNhbEFsaWduTWVkaXVtOlN0cmluZyxtZFZlcnRpY2FsQWxpZ25MYXJnZTpTdHJpbmcsbWRWZXJ0aWNhbEFsaWduWGxhcmdlOlN0cmluZyxtZEZsZXg6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4WHNtYWxsOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleFNtYWxsOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleE1lZGl1bTpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhMYXJnZTpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhYbGFyZ2U6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4T2Zmc2V0OltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dLG1kRmxleE9mZnNldFhzbWFsbDpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhPZmZzZXRTbWFsbDpbU3RyaW5nLE51bWJlcixCb29sZWFuXSxtZEZsZXhPZmZzZXRNZWRpdW06W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4T2Zmc2V0TGFyZ2U6W1N0cmluZyxOdW1iZXIsQm9vbGVhbl0sbWRGbGV4T2Zmc2V0WGxhcmdlOltTdHJpbmcsTnVtYmVyLEJvb2xlYW5dfSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbiB0KCl7dmFyIHQ9e1wibWQtcm93XCI6dGhpcy5tZFJvdyxcIm1kLXJvdy14c21hbGxcIjp0aGlzLm1kUm93WHNtYWxsLFwibWQtcm93LXNtYWxsXCI6dGhpcy5tZFJvd1NtYWxsLFwibWQtcm93LW1lZGl1bVwiOnRoaXMubWRSb3dNZWRpdW0sXCJtZC1yb3ctbGFyZ2VcIjp0aGlzLm1kUm93TGFyZ2UsXCJtZC1yb3cteGxhcmdlXCI6dGhpcy5tZFJvd1hsYXJnZSxcIm1kLWNvbHVtblwiOnRoaXMubWRDb2x1bW4sXCJtZC1jb2x1bW4teHNtYWxsXCI6dGhpcy5tZENvbHVtblhzbWFsbCxcIm1kLWNvbHVtbi1zbWFsbFwiOnRoaXMubWRDb2x1bW5TbWFsbCxcIm1kLWNvbHVtbi1tZWRpdW1cIjp0aGlzLm1kQ29sdW1uTWVkaXVtLFwibWQtY29sdW1uLWxhcmdlXCI6dGhpcy5tZENvbHVtbkxhcmdlLFwibWQtY29sdW1uLXhsYXJnZVwiOnRoaXMubWRDb2x1bW5YbGFyZ2UsXCJtZC1oaWRlLXhzbWFsbFwiOnRoaXMubWRIaWRlWHNtYWxsLFwibWQtaGlkZS1zbWFsbFwiOnRoaXMubWRIaWRlU21hbGwsXCJtZC1oaWRlLW1lZGl1bVwiOnRoaXMubWRIaWRlTWVkaXVtLFwibWQtaGlkZS1sYXJnZVwiOnRoaXMubWRIaWRlTGFyZ2UsXCJtZC1oaWRlLXhsYXJnZVwiOnRoaXMubWRIaWRlWGxhcmdlLFwibWQtaGlkZS14c21hbGwtYW5kLXVwXCI6dGhpcy5tZEhpZGVYc21hbGxBbmRVcCxcIm1kLWhpZGUtc21hbGwtYW5kLXVwXCI6dGhpcy5tZEhpZGVTbWFsbEFuZFVwLFwibWQtaGlkZS1tZWRpdW0tYW5kLXVwXCI6dGhpcy5tZEhpZGVNZWRpdW1BbmRVcCxcIm1kLWhpZGUtbGFyZ2UtYW5kLXVwXCI6dGhpcy5tZEhpZGVMYXJnZUFuZFVwLFwibWQtaGlkZS14bGFyZ2UtYW5kLXVwXCI6dGhpcy5tZEhpZGVYbGFyZ2VBbmRVcH07cmV0dXJuIHRoaXMubWRHdXR0ZXImJihcImJvb2xlYW5cIj09dHlwZW9mIHRoaXMubWRHdXR0ZXI/dFtcIm1kLWd1dHRlclwiXT0hMDp0aGlzLm1kR3V0dGVyJiYodFtcIm1kLWd1dHRlci1cIit0aGlzLm1kR3V0dGVyXT0hMCkpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXhcIixcIlwiLFwibWRGbGV4XCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleFwiLFwieHNtYWxsXCIsXCJtZEZsZXhYc21hbGxcIix0KSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4XCIsXCJzbWFsbFwiLFwibWRGbGV4U21hbGxcIix0KSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4XCIsXCJtZWRpdW1cIixcIm1kRmxleE1lZGl1bVwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXhcIixcImxhcmdlXCIsXCJtZEZsZXhMYXJnZVwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXhcIixcInhsYXJnZVwiLFwibWRGbGV4WGxhcmdlXCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleC1vZmZzZXRcIixcIlwiLFwibWRGbGV4T2Zmc2V0XCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleC1vZmZzZXRcIixcInhzbWFsbFwiLFwibWRGbGV4T2Zmc2V0WHNtYWxsXCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtZmxleC1vZmZzZXRcIixcInNtYWxsXCIsXCJtZEZsZXhPZmZzZXRTbWFsbFwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXgtb2Zmc2V0XCIsXCJtZWRpdW1cIixcIm1kRmxleE9mZnNldE1lZGl1bVwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWZsZXgtb2Zmc2V0XCIsXCJsYXJnZVwiLFwibWRGbGV4T2Zmc2V0TGFyZ2VcIix0KSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1mbGV4LW9mZnNldFwiLFwieGxhcmdlXCIsXCJtZEZsZXhPZmZzZXRYbGFyZ2VcIix0KSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC1hbGlnblwiLFwiXCIsXCJtZEFsaWduXCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtYWxpZ25cIixcInhzbWFsbFwiLFwibWRBbGlnblhzbWFsbFwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWFsaWduXCIsXCJzbWFsbFwiLFwibWRBbGlnblNtYWxsXCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtYWxpZ25cIixcIm1lZGl1bVwiLFwibWRBbGlnbk1lZGl1bVwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLWFsaWduXCIsXCJsYXJnZVwiLFwibWRBbGlnbkxhcmdlXCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtYWxpZ25cIixcInhsYXJnZVwiLFwibWRBbGlnblhsYXJnZVwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLXZlcnRpY2FsLWFsaWduXCIsXCJcIixcIm1kVmVydGljYWxBbGlnblwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLXZlcnRpY2FsLWFsaWduXCIsXCJ4c21hbGxcIixcIm1kVmVydGljYWxBbGlnblhzbWFsbFwiLHQpLHRoaXMuZ2VuZXJhdGVQcm9wQ2xhc3NlcyhcIm1kLXZlcnRpY2FsLWFsaWduXCIsXCJzbWFsbFwiLFwibWRWZXJ0aWNhbEFsaWduU21hbGxcIix0KSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC12ZXJ0aWNhbC1hbGlnblwiLFwibWVkaXVtXCIsXCJtZFZlcnRpY2FsQWxpZ25NZWRpdW1cIix0KSx0aGlzLmdlbmVyYXRlUHJvcENsYXNzZXMoXCJtZC12ZXJ0aWNhbC1hbGlnblwiLFwibGFyZ2VcIixcIm1kVmVydGljYWxBbGlnbkxhcmdlXCIsdCksdGhpcy5nZW5lcmF0ZVByb3BDbGFzc2VzKFwibWQtdmVydGljYWwtYWxpZ25cIixcInhsYXJnZVwiLFwibWRWZXJ0aWNhbEFsaWduWGxhcmdlXCIsdCksdH19LG1ldGhvZHM6e2dlbmVyYXRlUHJvcENsYXNzZXM6ZnVuY3Rpb24odCxlLG4saSl7ZSYmKGU9XCItXCIrZSksdGhpc1tuXSYmKFwiYm9vbGVhblwiPT10eXBlb2YgdGhpc1tuXT90aGlzW25dP2lbdCtlXT0hMDppW3QrZStcIi1ub25lXCJdPSEwOmlbdCtlK1wiLVwiK3RoaXNbbl1dPSEwKX19LHJlbmRlcjpmdW5jdGlvbih0KXtyZXR1cm4gdCh0aGlzLm1kVGFnLHtzdGF0aWNDbGFzczpcIm1kLWxheW91dFwiLGNsYXNzOnRoaXMuY2xhc3Nlc30sdGhpcy4kc2xvdHMuZGVmYXVsdCl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLGE9aShvKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1saXN0XCIsbWl4aW5zOlthLmRlZmF1bHRdfSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1saXN0LWV4cGFuZFwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1saXN0LWl0ZW1cIixwcm9wczp7ZGlzYWJsZWQ6Qm9vbGVhbn0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1kaXNhYmxlZFwiOnRoaXMuZGlzYWJsZWR9fX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLWxpc3QtaXRlbVwifSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEwKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtbGlzdC1pdGVtXCIscHJvcHM6e2Rpc2FibGVkOkJvb2xlYW4sbWRFeHBhbmRNdWx0aXBsZTpCb29sZWFufSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3BhcmVudExpc3Q6ITEsYWN0aXZlOiExLGhlaWdodDowLGNvbnRlbnRPYnNlcnZlcjpudWxsLHRyYW5zaXRpb25PZmY6ITB9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWRpc2FibGVkXCI6dGhpcy5kaXNhYmxlZCxcIm1kLWFjdGl2ZVwiOnRoaXMuYWN0aXZlfX0sZXhwYW5kQ2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLXRyYW5zaXRpb24tb2ZmXCI6dGhpcy50cmFuc2l0aW9uT2ZmfX0sZXhwYW5kU3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWFyZ2luLWJvdHRvbVwiOnRoaXMuaGVpZ2h0fX19LG1ldGhvZHM6e3Jlc2V0U2libGluZ3M6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMucGFyZW50TGlzdC4kY2hpbGRyZW4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS4kZWwhPT10LiRlbCYmZS4kZWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwibWQtbGlzdC1pdGVtLWV4cGFuZFwiKSYmKGUuYWN0aXZlPSExKX0pKX0sY2FsY3VsYXRlUGFkZGluZzpmdW5jdGlvbigpe3ZhciB0PXRoaXM7d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoZnVuY3Rpb24oKXt0LmhlaWdodD0tdC4kZWwuc2Nyb2xsSGVpZ2h0K1wicHhcIix3aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LnRyYW5zaXRpb25PZmY9ITF9KSl9KSl9LHRvZ2dsZUV4cGFuZExpc3Q6ZnVuY3Rpb24odCl7dGhpcy5tZEV4cGFuZE11bHRpcGxlfHx0aGlzLnJlc2V0U2libGluZ3MoKSx0aGlzLmNhbGN1bGF0ZVBhZGRpbmcoKSx0aGlzLmFjdGl2ZT0hdGhpcy5hY3RpdmUsdGhpcy4kZW1pdChcImNsaWNrXCIsdCl9LHJlY2FsY3VsYXRlQWZ0ZXJDaGFuZ2U6ZnVuY3Rpb24oKXt0aGlzLnRyYW5zaXRpb25PZmY9ITAsdGhpcy5jYWxjdWxhdGVQYWRkaW5nKCl9LG9ic2VydmVDaGlsZENoYW5nZXM6ZnVuY3Rpb24oKXt0aGlzLmNvbnRlbnRPYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLnJlY2FsY3VsYXRlQWZ0ZXJDaGFuZ2UpLHRoaXMuY29udGVudE9ic2VydmVyLm9ic2VydmUodGhpcy4kcmVmcy5leHBhbmQse2NoaWxkTGlzdDohMCxjaGFyYWN0ZXJEYXRhOiEwLHN1YnRyZWU6ITB9KX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe3QucGFyZW50TGlzdD0oMCxhLmRlZmF1bHQpKHQuJHBhcmVudCxcIm1kLWxpc3RcIiksdC5jYWxjdWxhdGVQYWRkaW5nKCksdC5vYnNlcnZlQ2hpbGRDaGFuZ2VzKCksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0LnJlY2FsY3VsYXRlQWZ0ZXJDaGFuZ2UpfSkpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5jb250ZW50T2JzZXJ2ZXImJnRoaXMuY29udGVudE9ic2VydmVyLmRpc2Nvbm5lY3QoKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMucmVjYWxjdWxhdGVBZnRlckNoYW5nZSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1saXN0LWl0ZW1cIixwcm9wczp7aHJlZjpTdHJpbmcsdGFyZ2V0OlN0cmluZyxkaXNhYmxlZDpCb29sZWFufSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWRpc2FibGVkXCI6dGhpcy5kaXNhYmxlZH19fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtbGlzdC1pdGVtXCIscHJvcHM6e2Rpc2FibGVkOkJvb2xlYW59LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtZGlzYWJsZWRcIjp0aGlzLmRpc2FibGVkfX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDQxKSxhPWkobykscj1uKDEyNSkscz1pKHIpO2UuZGVmYXVsdD17bmFtZTpcIm1kLW1lbnVcIixwcm9wczp7bWRTaXplOnt0eXBlOltOdW1iZXIsU3RyaW5nXSxkZWZhdWx0OjB9LG1kRGlyZWN0aW9uOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiYm90dG9tIHJpZ2h0XCJ9LG1kQWxpZ25UcmlnZ2VyOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX0sbWRPZmZzZXRYOnt0eXBlOltOdW1iZXIsU3RyaW5nXSxkZWZhdWx0OjB9LG1kT2Zmc2V0WTp7dHlwZTpbTnVtYmVyLFN0cmluZ10sZGVmYXVsdDowfSxtZENsb3NlT25TZWxlY3Q6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnthY3RpdmU6ITF9fSx3YXRjaDp7bWRTaXplOmZ1bmN0aW9uKHQsZSl7dD49MSYmdDw9NyYmKHRoaXMucmVtb3ZlTGFzdFNpemVNZW51Q29udGVudENsYXNzKGUpLHRoaXMuYWRkTmV3U2l6ZU1lbnVDb250ZW50Q2xhc3ModCkpfSxtZERpcmVjdGlvbjpmdW5jdGlvbih0LGUpe3RoaXMucmVtb3ZlTGFzdERpcmVjdGlvbk1lbnVDb250ZW50Q2xhc3MoZSksdGhpcy5hZGROZXdEaXJlY3Rpb25NZW51Q29udGVudENsYXNzKHQpfSxtZEFsaWduVHJpZ2dlcjpmdW5jdGlvbih0KXt0aGlzLmhhbmRsZUFsaWduVHJpZ2dlckNsYXNzKHQpfX0sbWV0aG9kczp7dmFsaWRhdGVNZW51OmZ1bmN0aW9uKCl7aWYoIXRoaXMubWVudUNvbnRlbnQpdGhyb3cgdGhpcy4kZGVzdHJveSgpLG5ldyBFcnJvcihcIllvdSBtdXN0IGhhdmUgYSBtZC1tZW51LWNvbnRlbnQgaW5zaWRlIHlvdXIgbWVudS5cIik7aWYoIXRoaXMubWVudVRyaWdnZXIpdGhyb3cgdGhpcy4kZGVzdHJveSgpLG5ldyBFcnJvcihcIllvdSBtdXN0IGhhdmUgYW4gZWxlbWVudCB3aXRoIGEgbWQtbWVudS10cmlnZ2VyIGF0dHJpYnV0ZSBpbnNpZGUgeW91ciBtZW51LlwiKX0scmVtb3ZlTGFzdFNpemVNZW51Q29udGVudENsYXNzOmZ1bmN0aW9uKHQpe3RoaXMubWVudUNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1kLXNpemUtXCIrdCl9LHJlbW92ZUxhc3REaXJlY3Rpb25NZW51Q29udGVudENsYXNzOmZ1bmN0aW9uKHQpe3RoaXMubWVudUNvbnRlbnQuY2xhc3NMaXN0LnJlbW92ZShcIm1kLWRpcmVjdGlvbi1cIit0LnJlcGxhY2UoLyAvZyxcIi1cIikpfSxhZGROZXdTaXplTWVudUNvbnRlbnRDbGFzczpmdW5jdGlvbih0KXt0aGlzLm1lbnVDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJtZC1zaXplLVwiK3QpfSxhZGROZXdEaXJlY3Rpb25NZW51Q29udGVudENsYXNzOmZ1bmN0aW9uKHQpe3RoaXMubWVudUNvbnRlbnQuY2xhc3NMaXN0LmFkZChcIm1kLWRpcmVjdGlvbi1cIit0LnJlcGxhY2UoLyAvZyxcIi1cIikpfSxoYW5kbGVBbGlnblRyaWdnZXJDbGFzczpmdW5jdGlvbih0KXt0JiZ0aGlzLm1lbnVDb250ZW50LmNsYXNzTGlzdC5hZGQoXCJtZC1hbGlnbi10cmlnZ2VyXCIpfSxnZXRQb3NpdGlvbjpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMubWVudVRyaWdnZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksaT1cInRvcFwiPT09dD9uLnRvcCtuLmhlaWdodC10aGlzLm1lbnVDb250ZW50Lm9mZnNldEhlaWdodDpuLnRvcCxvPVwibGVmdFwiPT09ZT9uLmxlZnQtdGhpcy5tZW51Q29udGVudC5vZmZzZXRXaWR0aCtuLndpZHRoOm4ubGVmdDtyZXR1cm4gaSs9cGFyc2VJbnQodGhpcy5tZE9mZnNldFksMTApLG8rPXBhcnNlSW50KHRoaXMubWRPZmZzZXRYLDEwKSx0aGlzLm1kQWxpZ25UcmlnZ2VyJiYoXCJ0b3BcIj09PXQ/aS09bi5oZWlnaHQrMTE6aSs9bi5oZWlnaHQrMTEpLHt0b3A6aSxsZWZ0Om99fSxjYWxjdWxhdGVNZW51Q29udGVudFBvczpmdW5jdGlvbigpe3ZhciB0PXZvaWQgMDt0PXRoaXMubWREaXJlY3Rpb24/dGhpcy5nZXRQb3NpdGlvbi5hcHBseSh0aGlzLHRoaXMubWREaXJlY3Rpb24udHJpbSgpLnNwbGl0KFwiIFwiKSk6dGhpcy5nZXRQb3NpdGlvbihcImJvdHRvbVwiLFwicmlnaHRcIiksdD0oMCxzLmRlZmF1bHQpKHRoaXMubWVudUNvbnRlbnQsdCksdGhpcy5tZW51Q29udGVudC5zdHlsZS50b3A9dC50b3Ard2luZG93LnBhZ2VZT2Zmc2V0K1wicHhcIix0aGlzLm1lbnVDb250ZW50LnN0eWxlLmxlZnQ9dC5sZWZ0K3dpbmRvdy5wYWdlWE9mZnNldCtcInB4XCJ9LHJlY2FsY3VsYXRlT25SZXNpemU6ZnVuY3Rpb24oKXt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuY2FsY3VsYXRlTWVudUNvbnRlbnRQb3MpfSxvcGVuOmZ1bmN0aW9uKCl7ZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLm1lbnVDb250ZW50KSYmZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLm1lbnVDb250ZW50KSxkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMubWVudUNvbnRlbnQpLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5iYWNrZHJvcEVsZW1lbnQpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5yZWNhbGN1bGF0ZU9uUmVzaXplKSx0aGlzLmNhbGN1bGF0ZU1lbnVDb250ZW50UG9zKCksZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLm1lbnVDb250ZW50KS50b3AsdGhpcy5tZW51Q29udGVudC5jbGFzc0xpc3QuYWRkKFwibWQtYWN0aXZlXCIpLHRoaXMubWVudUNvbnRlbnQuZm9jdXMoKSx0aGlzLmFjdGl2ZT0hMCx0aGlzLiRlbWl0KFwib3BlblwiKX0sY2xvc2U6ZnVuY3Rpb24gdCgpe3ZhciBlPXRoaXMsdD1mdW5jdGlvbiB0KG4pe2lmKGUubWVudUNvbnRlbnQmJm4udGFyZ2V0PT09ZS5tZW51Q29udGVudCl7dmFyIGk9ZS5tZW51Q29udGVudC5xdWVyeVNlbGVjdG9yKFwiLm1kLXJpcHBsZS5tZC1hY3RpdmVcIik7ZS5tZW51Q29udGVudC5yZW1vdmVFdmVudExpc3RlbmVyKGEuZGVmYXVsdCx0KSxlLm1lbnVUcmlnZ2VyLmZvY3VzKCksZS5hY3RpdmU9ITEsaSYmaS5jbGFzc0xpc3QucmVtb3ZlKFwibWQtYWN0aXZlXCIpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZS5tZW51Q29udGVudCksZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlLmJhY2tkcm9wRWxlbWVudCksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIixlLnJlY2FsY3VsYXRlT25SZXNpemUpfX07dGhpcy5tZW51Q29udGVudC5hZGRFdmVudExpc3RlbmVyKGEuZGVmYXVsdCx0KSx0aGlzLm1lbnVDb250ZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJtZC1hY3RpdmVcIiksdGhpcy4kZW1pdChcImNsb3NlXCIpfSx0b2dnbGU6ZnVuY3Rpb24oKXt0aGlzLmFjdGl2ZT90aGlzLmNsb3NlKCk6dGhpcy5vcGVuKCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXt0Lm1lbnVUcmlnZ2VyPXQuJGVsLnF1ZXJ5U2VsZWN0b3IoXCJbbWQtbWVudS10cmlnZ2VyXVwiKSx0Lm1lbnVDb250ZW50PXQuJGVsLnF1ZXJ5U2VsZWN0b3IoXCIubWQtbWVudS1jb250ZW50XCIpLHQuYmFja2Ryb3BFbGVtZW50PXQuJHJlZnMuYmFja2Ryb3AuJGVsLHQudmFsaWRhdGVNZW51KCksdC5oYW5kbGVBbGlnblRyaWdnZXJDbGFzcyh0Lm1kQWxpZ25UcmlnZ2VyKSx0LmFkZE5ld1NpemVNZW51Q29udGVudENsYXNzKHQubWRTaXplKSx0LmFkZE5ld0RpcmVjdGlvbk1lbnVDb250ZW50Q2xhc3ModC5tZERpcmVjdGlvbiksdC4kZWwucmVtb3ZlQ2hpbGQodC4kcmVmcy5iYWNrZHJvcC4kZWwpLHQubWVudUNvbnRlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0Lm1lbnVDb250ZW50KSx0Lm1lbnVUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQudG9nZ2xlKX0pKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5tZW51Q29udGVudCkmJihkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHRoaXMubWVudUNvbnRlbnQpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5iYWNrZHJvcEVsZW1lbnQpKSx0aGlzLm1lbnVUcmlnZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHRoaXMudG9nZ2xlKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMucmVjYWxjdWxhdGVPblJlc2l6ZSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1tZW51LWNvbnRlbnRcIixkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue29sZEhpZ2hsaWdodDohMSxoaWdobGlnaHRlZDohMSxpdGVtc0Ftb3VudDowfX0sbWV0aG9kczp7Y2xvc2U6ZnVuY3Rpb24oKXt0aGlzLmhpZ2hsaWdodGVkPSExLHRoaXMuJHBhcmVudC5jbG9zZSgpfSxoaWdobGlnaHRJdGVtOmZ1bmN0aW9uKHQpe3RoaXMub2xkSGlnaGxpZ2h0PXRoaXMuaGlnaGxpZ2h0ZWQsXCJ1cFwiPT09dCYmKDE9PT10aGlzLmhpZ2hsaWdodGVkP3RoaXMuaGlnaGxpZ2h0ZWQ9dGhpcy5pdGVtc0Ftb3VudDp0aGlzLmhpZ2hsaWdodGVkLS0pLFwiZG93blwiPT09dCYmKHRoaXMuaGlnaGxpZ2h0ZWQ9PT10aGlzLml0ZW1zQW1vdW50P3RoaXMuaGlnaGxpZ2h0ZWQ9MTp0aGlzLmhpZ2hsaWdodGVkKyspfSxmaXJlQ2xpY2s6ZnVuY3Rpb24oKXt0aGlzLmhpZ2hsaWdodGVkPjAmJnRoaXMuZ2V0T3B0aW9ucygpW3RoaXMuaGlnaGxpZ2h0ZWQtMV0uJGVsLmNsaWNrKCl9LGdldE9wdGlvbnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kY2hpbGRyZW5bMF0uJGNoaWxkcmVuLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuJGVsLmNsYXNzTGlzdC5jb250YWlucyhcIm1kLW9wdGlvblwiKX0pKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXtpZighdGhpcy4kcGFyZW50LiRlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJtZC1tZW51XCIpKXRocm93IHRoaXMuJGRlc3Ryb3koKSxuZXcgRXJyb3IoXCJZb3UgbXVzdCB3cmFwIHRoZSBtZC1tZW51LWNvbnRlbnQgaW4gYSBtZC1tZW51XCIpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxMCksYT1pKG8pO24oMjI4KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC1tZW51LWl0ZW1cIixwcm9wczp7aHJlZjpTdHJpbmcsdGFyZ2V0OlN0cmluZyxkaXNhYmxlZDpCb29sZWFufSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3BhcmVudENvbnRlbnQ6e30saW5kZXg6MH19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtaGlnaGxpZ2h0ZWRcIjp0aGlzLmhpZ2hsaWdodGVkfX0saGlnaGxpZ2h0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmRleD09PXRoaXMucGFyZW50Q29udGVudC5oaWdobGlnaHRlZCYmKHRoaXMuZGlzYWJsZWQmJih0aGlzLnBhcmVudENvbnRlbnQub2xkSGlnaGxpZ2h0PnRoaXMucGFyZW50Q29udGVudC5oaWdobGlnaHRlZD90aGlzLnBhcmVudENvbnRlbnQuaGlnaGxpZ2h0ZWQtLTp0aGlzLnBhcmVudENvbnRlbnQuaGlnaGxpZ2h0ZWQrKyksMT09PXRoaXMuaW5kZXg/dGhpcy5wYXJlbnRDb250ZW50LiRlbC5zY3JvbGxUb3A9MDp0aGlzLmluZGV4PT09dGhpcy5wYXJlbnRDb250ZW50Lml0ZW1zQW1vdW50P3RoaXMucGFyZW50Q29udGVudC4kZWwuc2Nyb2xsVG9wPXRoaXMucGFyZW50Q29udGVudC4kZWwuc2Nyb2xsSGVpZ2h0OnRoaXMuJGVsLnNjcm9sbEludG9WaWV3SWZOZWVkZWQoITEpLCEwKX19LG1ldGhvZHM6e2Nsb3NlOmZ1bmN0aW9uKHQpe3RoaXMuZGlzYWJsZWR8fCh0aGlzLnBhcmVudE1lbnUubWRDbG9zZU9uU2VsZWN0JiZ0aGlzLnBhcmVudENvbnRlbnQuY2xvc2UoKSx0aGlzLiRlbWl0KFwiY2xpY2tcIix0KSx0aGlzLiRlbWl0KFwic2VsZWN0ZWRcIix0KSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7aWYodGhpcy5wYXJlbnRDb250ZW50PSgwLGEuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtbWVudS1jb250ZW50XCIpLHRoaXMucGFyZW50TWVudT0oMCxhLmRlZmF1bHQpKHRoaXMuJHBhcmVudCxcIm1kLW1lbnVcIiksIXRoaXMucGFyZW50Q29udGVudCl0aHJvdyB0aGlzLiRkZXN0cm95KCksbmV3IEVycm9yKFwiWW91IG11c3Qgd3JhcCB0aGUgbWQtbWVudS1pdGVtIGluIGEgbWQtbWVudS1jb250ZW50XCIpO3RoaXMucGFyZW50Q29udGVudC5pdGVtc0Ftb3VudCsrLHRoaXMuaW5kZXg9dGhpcy5wYXJlbnRDb250ZW50Lml0ZW1zQW1vdW50fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigzNiksYT1pKG8pLHI9bigxMCkscz1pKHIpO2UuZGVmYXVsdD17cHJvcHM6e2lkOltTdHJpbmcsTnVtYmVyXSxtZExhYmVsOltTdHJpbmcsTnVtYmVyXSxtZEljb246U3RyaW5nLG1kQWN0aXZlOkJvb2xlYW4sbWREaXNhYmxlZDpCb29sZWFuLG1kVG9vbHRpcDpTdHJpbmcsbWRUb29sdGlwRGVsYXk6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIwXCJ9LG1kVG9vbHRpcERpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJvdHRvbVwifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnttb3VudGVkOiExLGJvYXJkSWQ6dGhpcy5pZHx8XCJib2FyZC1cIisoMCxhLmRlZmF1bHQpKCksd2lkdGg6XCIwcHhcIixsZWZ0OlwiMHB4XCJ9fSx3YXRjaDp7bWRBY3RpdmU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZUJvYXJkRGF0YSgpfSxtZERpc2FibGVkOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVCb2FyZERhdGEoKX0sbWRJY29uOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVCb2FyZERhdGEoKX0sbWRMYWJlbDpmdW5jdGlvbigpe3RoaXMudXBkYXRlQm9hcmREYXRhKCl9LG1kVG9vbHRpcDpmdW5jdGlvbigpe3RoaXMudXBkYXRlQm9hcmREYXRhKCl9LG1kVG9vbHRpcERlbGF5OmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVCb2FyZERhdGEoKX0sbWRUb29sdGlwRGlyZWN0aW9uOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVCb2FyZERhdGEoKX19LGNvbXB1dGVkOntzdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm57d2lkdGg6dGhpcy53aWR0aCxsZWZ0OnRoaXMubGVmdH19fSxtZXRob2RzOntnZXRCb2FyZERhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aWQ6dGhpcy5ib2FyZElkLGxhYmVsOnRoaXMubWRMYWJlbCxpY29uOnRoaXMubWRJY29uLGFjdGl2ZTp0aGlzLm1kQWN0aXZlLGRpc2FibGVkOnRoaXMubWREaXNhYmxlZCx0b29sdGlwOnRoaXMubWRUb29sdGlwLHRvb2x0aXBEZWxheTp0aGlzLm1kVG9vbHRpcERlbGF5LHRvb2x0aXBEaXJlY3Rpb246dGhpcy5tZFRvb2x0aXBEaXJlY3Rpb24scmVmOnRoaXN9fSx1cGRhdGVCb2FyZERhdGE6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudEJvYXJkcy51cGRhdGVCb2FyZCh0aGlzLmdldEJvYXJkRGF0YSgpKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldEJvYXJkRGF0YSgpO2lmKHRoaXMucGFyZW50Qm9hcmRzPSgwLHMuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtYm9hcmRzXCIpLCF0aGlzLnBhcmVudEJvYXJkcyl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCB3cmFwIHRoZSBtZC1ib2FyZCBpbiBhIG1kLWJvYXJkc1wiKTt0aGlzLm1vdW50ZWQ9ITAsdGhpcy5wYXJlbnRCb2FyZHMudXBkYXRlQm9hcmQodCksdGhpcy5tZEFjdGl2ZSYmdGhpcy5wYXJlbnRCb2FyZHMuc2V0QWN0aXZlQm9hcmQodCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudEJvYXJkcy51bnJlZ2lzdGVyQm9hcmQodGhpcy5nZXRCb2FyZERhdGEoKSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDM4KSxhPWkobykscj1uKDEpLHM9aShyKSxkPW4oNTApLGw9aShkKTtlLmRlZmF1bHQ9e3Byb3BzOnttZEZpeGVkOkJvb2xlYW4sbWRDZW50ZXJlZDpCb29sZWFuLG1kUmlnaHQ6Qm9vbGVhbixtZER5bmFtaWNIZWlnaHQ6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtZEVsZXZhdGlvbjp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDowfSxtZEF1dG86e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxtZER1cmF0aW9uOnt0eXBlOk51bWJlcixkZWZhdWx0OjVlM30sbWRDb250cm9sczp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITF9LG1kSW5maW5pdGU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxtZFN3aXBlYWJsZTpCb29sZWFuLG1kU3dpcGVEaXN0YW5jZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDoxMDB9fSxtaXhpbnM6W3MuZGVmYXVsdF0sZGF0YTpmdW5jdGlvbigpe3JldHVybntib2FyZExpc3Q6e30sYWN0aXZlQm9hcmQ6bnVsbCxhY3RpdmVCb2FyZE51bWJlcjowLGhhc0ljb25zOiExLGhhc0xhYmVsOiExLHRyYW5zaXRpb25Db250cm9sOm51bGwsdHJhbnNpdGlvbk9mZjohMSxjb250ZW50SGVpZ2h0OlwiMHB4XCIsY29udGVudFdpZHRoOlwiMHB4XCIsYXV0b1RyYW5zaXRpb246bnVsbH19LGNvbXB1dGVkOntib2FyZENsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1keW5hbWljLWhlaWdodFwiOnRoaXMubWREeW5hbWljSGVpZ2h0LFwibWQtdHJhbnNpdGlvbi1vZmZcIjp0aGlzLnRyYW5zaXRpb25PZmZ9fSxuYXZpZ2F0aW9uQ2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWhhcy1pY29uXCI6dGhpcy5oYXNJY29ucyxcIm1kLWhhcy1sYWJlbFwiOnRoaXMuaGFzTGFiZWwsXCJtZC1maXhlZFwiOnRoaXMubWRGaXhlZCxcIm1kLXJpZ2h0XCI6IXRoaXMubWRDZW50ZXJlZCYmdGhpcy5tZFJpZ2h0LFwibWQtY2VudGVyZWRcIjp0aGlzLm1kQ2VudGVyZWR8fHRoaXMubWRGaXhlZH19LGluZGljYXRvckNsYXNzZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxhc3RJbmRpY2F0b3JOdW1iZXI+dGhpcy5hY3RpdmVCb2FyZE51bWJlcjtyZXR1cm4gdGhpcy5sYXN0SW5kaWNhdG9yTnVtYmVyPXRoaXMuYWN0aXZlQm9hcmROdW1iZXIse1wibWQtdHJhbnNpdGlvbi1vZmZcIjp0aGlzLnRyYW5zaXRpb25PZmYsXCJtZC10by1yaWdodFwiOiF0LFwibWQtdG8tbGVmdFwiOnR9fX0sbWV0aG9kczp7Z2V0SGVhZGVyQ2xhc3M6ZnVuY3Rpb24odCl7cmV0dXJue1wibWQtYWN0aXZlXCI6dGhpcy5hY3RpdmVCb2FyZD09PXQuaWQsXCJtZC1kaXNhYmxlZFwiOnQuZGlzYWJsZWR9fSxyZWdpc3RlckJvYXJkOmZ1bmN0aW9uKHQpe3RoaXMuYm9hcmRMaXN0W3QuaWRdPXR9LHVucmVnaXN0ZXJCb2FyZDpmdW5jdGlvbih0KXtkZWxldGUgdGhpcy5ib2FyZExpc3RbdC5pZF19LHVwZGF0ZUJvYXJkOmZ1bmN0aW9uKHQpe2lmKHRoaXMucmVnaXN0ZXJCb2FyZCh0KSx0LmFjdGl2ZSlpZih0LmRpc2FibGVkKXtpZigoMCxhLmRlZmF1bHQpKHRoaXMuYm9hcmRMaXN0KS5sZW5ndGgpe3ZhciBlPSgwLGEuZGVmYXVsdCkodGhpcy5ib2FyZExpc3QpLG49ZS5pbmRleE9mKHQuaWQpKzEsaT1lW25dO2k/dGhpcy5zZXRBY3RpdmVCb2FyZCh0aGlzLmJvYXJkTGlzdFtpXSk6dGhpcy5zZXRBY3RpdmVCb2FyZCh0aGlzLmJvYXJkTGlzdFswXSl9fWVsc2UgdGhpcy5zZXRBY3RpdmVCb2FyZCh0KX0sb2JzZXJ2ZUVsZW1lbnRDaGFuZ2VzOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRPYnNlcnZlcj1uZXcgTXV0YXRpb25PYnNlcnZlcigoMCxsLmRlZmF1bHQpKHRoaXMuY2FsY3VsYXRlT25XYXRjaCw1MCkpLHRoaXMucGFyZW50T2JzZXJ2ZXIub2JzZXJ2ZSh0aGlzLiRyZWZzLmJvYXJkc0NvbnRlbnQse2NoaWxkTGlzdDohMCxhdHRyaWJ1dGVzOiEwLHN1YnRyZWU6ITB9KX0sZ2V0Qm9hcmRJbmRleDpmdW5jdGlvbih0KXt2YXIgZT0oMCxhLmRlZmF1bHQpKHRoaXMuYm9hcmRMaXN0KTtyZXR1cm4gZS5pbmRleE9mKHQpfSxjYWxjdWxhdGVJbmRpY2F0b3JQb3M6ZnVuY3Rpb24oKXtpZih0aGlzLiRyZWZzLmJvYXJkSGVhZGVyJiZ0aGlzLiRyZWZzLmJvYXJkSGVhZGVyW3RoaXMuYWN0aXZlQm9hcmROdW1iZXJdKXt2YXIgdD10aGlzLiRlbC5vZmZzZXRXaWR0aCxlPXRoaXMuJHJlZnMuYm9hcmRIZWFkZXJbdGhpcy5hY3RpdmVCb2FyZE51bWJlcl0sbj1lLm9mZnNldExlZnQsaT10LW4tZS5vZmZzZXRXaWR0aDt0aGlzLiRyZWZzLmluZGljYXRvci5zdHlsZS5sZWZ0PW4rXCJweFwiLHRoaXMuJHJlZnMuaW5kaWNhdG9yLnN0eWxlLnJpZ2h0PWkrXCJweFwifX0sY2FsY3VsYXRlQm9hcmRzV2lkdGhBbmRQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJGVsLm9mZnNldFdpZHRoLGU9MDt0aGlzLmNvbnRlbnRXaWR0aD10KnRoaXMuYWN0aXZlQm9hcmROdW1iZXIrXCJweFwiO2Zvcih2YXIgbiBpbiB0aGlzLmJvYXJkTGlzdCl7dmFyIGk9dGhpcy5ib2FyZExpc3Rbbl07aS5yZWYud2lkdGg9dCtcInB4XCIsaS5yZWYubGVmdD10KmUrXCJweFwiLGUrK319LGNhbGN1bGF0ZUNvbnRlbnRIZWlnaHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe2lmKCgwLGEuZGVmYXVsdCkodC5ib2FyZExpc3QpLmxlbmd0aCl7dmFyIGU9dC5ib2FyZExpc3RbdC5hY3RpdmVCb2FyZF0ucmVmLiRlbC5vZmZzZXRIZWlnaHQ7dC5jb250ZW50SGVpZ2h0PWUrXCJweFwifX0pKX0sY2FsY3VsYXRlUG9zaXRpb246ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7dC5jYWxjdWxhdGVJbmRpY2F0b3JQb3MoKSx0LmNhbGN1bGF0ZUJvYXJkc1dpZHRoQW5kUG9zaXRpb24oKSx0LmNhbGN1bGF0ZUNvbnRlbnRIZWlnaHQoKX0pKX0sZGVib3VuY2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudHJhbnNpdGlvbkNvbnRyb2wpLHRoaXMudHJhbnNpdGlvbkNvbnRyb2w9d2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5jYWxjdWxhdGVQb3NpdGlvbigpLHQudHJhbnNpdGlvbk9mZj0hMX0pLDIwMCl9LGNhbGN1bGF0ZU9uV2F0Y2g6ZnVuY3Rpb24oKXt0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKCksdGhpcy5kZWJvdW5jZVRyYW5zaXRpb24oKX0sY2FsY3VsYXRlT25SZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnRyYW5zaXRpb25PZmY9ITAsdGhpcy5jYWxjdWxhdGVPbldhdGNoKCl9LHN0YXJ0OmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmF1dG9UcmFuc2l0aW9uJiZ3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLmF1dG9UcmFuc2l0aW9uKSx0aGlzLmF1dG9UcmFuc2l0aW9uPXdpbmRvdy5zZXRJbnRlcnZhbCgoZnVuY3Rpb24oKXt0Lm1vdmVOZXh0Qm9hcmQoKX0pLHRoaXMubWREdXJhdGlvbil9LHNldEFjdGl2ZUJvYXJkOmZ1bmN0aW9uKHQsZSl7dGhpcy5tZEF1dG8mJmUmJnRoaXMuc3RhcnQoKSx0aGlzLmhhc0ljb25zPSEhdC5pY29uLHRoaXMuaGFzTGFiZWw9ISF0LmxhYmVsLHRoaXMuYWN0aXZlQm9hcmQ9dC5pZCx0aGlzLmFjdGl2ZUJvYXJkTnVtYmVyPXRoaXMuZ2V0Qm9hcmRJbmRleCh0aGlzLmFjdGl2ZUJvYXJkKSx0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKCksdGhpcy4kZW1pdChcImNoYW5nZVwiLHRoaXMuYWN0aXZlQm9hcmROdW1iZXIpfSxtb3ZlUHJldkJvYXJkOmZ1bmN0aW9uKCl7dmFyIHQ9KDAsYS5kZWZhdWx0KSh0aGlzLmJvYXJkTGlzdCksZT10LmluZGV4T2YodGhpcy5hY3RpdmVCb2FyZCktMSxuPXRbZV07aWYobil0aGlzLnNldEFjdGl2ZUJvYXJkKHRoaXMuYm9hcmRMaXN0W25dLCEwKTtlbHNlIGlmKHRoaXMubWRJbmZpbml0ZSl7dmFyIGk9KDAsYS5kZWZhdWx0KSh0aGlzLmJvYXJkTGlzdClbKDAsYS5kZWZhdWx0KSh0aGlzLmJvYXJkTGlzdCkubGVuZ3RoLTFdO3RoaXMuc2V0QWN0aXZlQm9hcmQodGhpcy5ib2FyZExpc3RbaV0sITApfX0sbW92ZU5leHRCb2FyZDpmdW5jdGlvbigpe3ZhciB0PSgwLGEuZGVmYXVsdCkodGhpcy5ib2FyZExpc3QpLGU9dC5pbmRleE9mKHRoaXMuYWN0aXZlQm9hcmQpKzEsbj10W2VdO2lmKG4pdGhpcy5zZXRBY3RpdmVCb2FyZCh0aGlzLmJvYXJkTGlzdFtuXSwhMCk7ZWxzZSBpZih0aGlzLm1kSW5maW5pdGUpe3ZhciBpPSgwLGEuZGVmYXVsdCkodGhpcy5ib2FyZExpc3QpWzBdO3RoaXMuc2V0QWN0aXZlQm9hcmQodGhpcy5ib2FyZExpc3RbaV0sITApfX0saXNIb3Jpem9udGFsbHlJbnNpZGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ+dGhpcy5tb3VudGVkUmVjdC5sZWZ0JiZ0PHRoaXMubW91bnRlZFJlY3QubGVmdCt0aGlzLm1vdW50ZWRSZWN0LndpZHRofSxpc1ZlcnRpY2FsbHlJbnNpZGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ+dGhpcy5tb3VudGVkUmVjdC50b3AmJnQ8dGhpcy5tb3VudGVkUmVjdC50b3ArdGhpcy5tb3VudGVkUmVjdC5oZWlnaHR9LGhhbmRsZVRvdWNoU3RhcnQ6ZnVuY3Rpb24odCl7dGhpcy5tb3VudGVkUmVjdD10aGlzLiRyZWZzLmJvYXJkc0NvbnRlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dmFyIGU9dC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLG49dC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRZO3RoaXMuaXNIb3Jpem9udGFsbHlJbnNpZGUoZSkmJnRoaXMuaXNWZXJ0aWNhbGx5SW5zaWRlKG4pJiYodGhpcy5pbml0aWFsVG91Y2hQb3NpdGlvbj1lLHRoaXMuY2FuTW92ZT0hMCl9LGhhbmRsZVRvdWNoRW5kOmZ1bmN0aW9uKHQpe2lmKHRoaXMuY2FuTW92ZSl7dmFyIGU9dC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLG49dGhpcy5pbml0aWFsVG91Y2hQb3NpdGlvbi1lLGk9bj4wP1wibW92ZU5leHRCb2FyZFwiOlwibW92ZVByZXZCb2FyZFwiO01hdGguYWJzKG4pPnRoaXMubWRTd2lwZURpc3RhbmNlJiZ0aGlzW2ldKCksdGhpcy5jYW5Nb3ZlPSExLHRoaXMuaW5pdGlhbFRvdWNoUG9zaXRpb249bnVsbH19fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXtpZih0Lm9ic2VydmVFbGVtZW50Q2hhbmdlcygpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdC5jYWxjdWxhdGVPblJlc2l6ZSksKDAsYS5kZWZhdWx0KSh0LmJvYXJkTGlzdCkubGVuZ3RoJiYhdC5hY3RpdmVCb2FyZCl7dmFyIGU9KDAsYS5kZWZhdWx0KSh0LmJvYXJkTGlzdClbMF07dC5zZXRBY3RpdmVCb2FyZCh0LmJvYXJkTGlzdFtlXSl9dC5tZFN3aXBlYWJsZSYmKHQubW91bnRlZFJlY3Q9dC4kcmVmcy5ib2FyZHNDb250ZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHQuaW5pdGlhbFRvdWNoUG9zaXRpb249bnVsbCx0LmNhbk1vdmU9ITEsZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIix0LmhhbmRsZVRvdWNoU3RhcnQpLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLHQuaGFuZGxlVG91Y2hFbmQpKSx0Lm1kQXV0byYmdC5zdGFydCgpfSkpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRPYnNlcnZlciYmdGhpcy5wYXJlbnRPYnNlcnZlci5kaXNjb25uZWN0KCksdGhpcy5hdXRvVHJhbnNpdGlvbiYmd2luZG93LmNsZWFyVGltZW91dCh0aGlzLmF1dG9UcmFuc2l0aW9uKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMuY2FsY3VsYXRlT25SZXNpemUpLHRoaXMubWRTd2lwZWFibGUmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHRoaXMuaGFuZGxlVG91Y2hTdGFydCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVUb3VjaEVuZCkpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtcHJvZ3Jlc3NcIixwcm9wczp7bWRJbmRldGVybWluYXRlOkJvb2xlYW4sbWRQcm9ncmVzczp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfX0sbWl4aW5zOlthLmRlZmF1bHRdLGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtaW5kZXRlcm1pbmF0ZVwiOnRoaXMubWRJbmRldGVybWluYXRlfX0sc3R5bGVzOmZ1bmN0aW9uKCl7aWYoIXRoaXMubWRJbmRldGVybWluYXRlKXJldHVybnt3aWR0aDp0aGlzLm1kUHJvZ3Jlc3MrXCIlXCJ9fX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLXJhZGlvXCIscHJvcHM6e25hbWU6U3RyaW5nLGlkOlN0cmluZyx2YWx1ZTpbU3RyaW5nLEJvb2xlYW4sTnVtYmVyXSxtZFZhbHVlOnt0eXBlOltTdHJpbmcsQm9vbGVhbixOdW1iZXJdLHJlcXVpcmVkOiEwfSxkaXNhYmxlZDpCb29sZWFufSxtaXhpbnM6W2EuZGVmYXVsdF0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1jaGVja2VkXCI6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHRoaXMudmFsdWUmJm51bGwhPT10aGlzLnZhbHVlJiZ0aGlzLm1kVmFsdWUudG9TdHJpbmcoKT09PXRoaXMudmFsdWUudG9TdHJpbmcoKSxcIm1kLWRpc2FibGVkXCI6dGhpcy5kaXNhYmxlZH19fSxtZXRob2RzOnt0b2dnbGVDaGVjazpmdW5jdGlvbih0KXt0aGlzLmRpc2FibGVkfHwodGhpcy4kZW1pdChcImNoYW5nZVwiLHRoaXMubWRWYWx1ZSx0KSx0aGlzLiRlbWl0KFwiaW5wdXRcIix0aGlzLm1kVmFsdWUsdCkpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pLHI9MjQ7ZS5kZWZhdWx0PXtwcm9wczp7bWRNYXhSYXRpbmc6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6NX0sZGlzYWJsZWQ6Qm9vbGVhbix2YWx1ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDowfSxtZEljb25TaXplOnt0eXBlOk51bWJlcixkZWZhdWx0OjF9LG1kRnVsbEljb25zZXQ6U3RyaW5nLG1kRW1wdHlJY29uc2V0OlN0cmluZyxtZEZ1bGxJY29uOnt0eXBlOlN0cmluZyxkZWZhdWx0Olwic3RhclwifSxtZEVtcHR5SWNvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInN0YXJcIn19LG1peGluczpbYS5kZWZhdWx0XSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3NyY0Z1bGxJY29uOm51bGwsc3JjRW1wdHlJY29uOm51bGwscmF0aW5nOnRoaXMudmFsdWV9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5zcmNGdWxsSWNvbj10aGlzLmNoZWNrU3JjKHRoaXMubWRGdWxsSWNvbiksdGhpcy5zcmNFbXB0eUljb249dGhpcy5jaGVja1NyYyh0aGlzLm1kRW1wdHlJY29uKX0sY29tcHV0ZWQ6e2VtcHR5SWNvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1kRW1wdHlJY29uc2V0P1wiXCI6dGhpcy5tZEVtcHR5SWNvbn0sZnVsbEljb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tZEZ1bGxJY29uc2V0P1wiXCI6dGhpcy5tZEZ1bGxJY29ufSxpY29uQ2xhc3NlczpmdW5jdGlvbigpe3ZhciB0PXt9O3JldHVybiB0aGlzLm1kSWNvblNpemUmJih0W1wibWQtc2l6ZS1cIit0aGlzLm1kSWNvblNpemUrXCJ4XCJdPSEwKSx0fSxmdWxsSWNvblN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJue3dpZHRoOjEwMC90aGlzLm1kTWF4UmF0aW5nKnRoaXMucmF0aW5nK1wiJVwiLFwibWFyZ2luLWxlZnRcIjotcip0aGlzLm1kSWNvblNpemUqdGhpcy5tZE1heFJhdGluZytcInB4XCJ9fX0sd2F0Y2g6e21kRnVsbEljb246ZnVuY3Rpb24oKXt0aGlzLnNyY0Z1bGxJY29uPXRoaXMuY2hlY2tTcmModGhpcy5tZEZ1bGxJY29uKX0sbWRFbXB0eUljb246ZnVuY3Rpb24oKXt0aGlzLnNyY0VtcHR5SWNvbj10aGlzLmNoZWNrU3JjKHRoaXMubWRFbXB0eUljb24pfSx2YWx1ZTpmdW5jdGlvbigpe3RoaXMucmF0aW5nPXRoaXMudmFsdWV9fSxtZXRob2RzOntob3ZlclN0YXJzOmZ1bmN0aW9uKHQpe3RoaXMuZGlzYWJsZWR8fCh0aGlzLnJhdGluZz10aGlzLmdldEljb25JbmRleCh0LmN1cnJlbnRUYXJnZXQpLHRoaXMuJGVtaXQoXCJob3ZlclwiLHRoaXMucmF0aW5nKSl9LGNsaWNrU3RhcnM6ZnVuY3Rpb24odCl7aWYoIXRoaXMuZGlzYWJsZWQpe3ZhciBlPXRoaXMuZ2V0SWNvbkluZGV4KHQuY3VycmVudFRhcmdldCk7dGhpcy4kZW1pdChcImlucHV0XCIsZSksdGhpcy4kZW1pdChcImNoYW5nZVwiLGUpfX0sZ2V0SWNvbkluZGV4OmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLiRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1kLWVtcHR5LWljb24gPiAubWQtaWNvbiwgLm1kLWZ1bGwtaWNvbiA+IC5tZC1pY29uXCIpLGk9LTE7cmV0dXJuIG49QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwobiksbi5zb21lKChmdW5jdGlvbihuLG8pe2lmKG49PT10KXJldHVybiBpPShvKzEpJWUubWRNYXhSYXRpbmcsaT1pP2k6ZS5tZE1heFJhdGluZywhMH0pKSxpfSxjaGVja1NyYzpmdW5jdGlvbih0KXtyZXR1cm4gdCYmLy4rXFwuKHN2Z3xwbmcpLy50ZXN0KHQpP3Q6bnVsbH0sb25Nb3VzZU91dDpmdW5jdGlvbigpe3RoaXMucmF0aW5nPXRoaXMudmFsdWV9fX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxMCksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLW9wdGlvblwiLHByb3BzOnt2YWx1ZTpbU3RyaW5nLEJvb2xlYW4sTnVtYmVyLE9iamVjdF19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cGFyZW50U2VsZWN0Ont9LGNoZWNrOiExLGluZGV4OjB9fSxjb21wdXRlZDp7aXNTZWxlY3RlZDpmdW5jdGlvbigpe2lmKHRoaXMudmFsdWUmJnRoaXMucGFyZW50U2VsZWN0LnZhbHVlKXt2YXIgdD10aGlzLnZhbHVlLnRvU3RyaW5nKCk7cmV0dXJuIHRoaXMucGFyZW50U2VsZWN0Lm11bHRpcGxlP3RoaXMucGFyZW50U2VsZWN0LnZhbHVlLmluZGV4T2YodCk+PTA6dGhpcy52YWx1ZSYmdGhpcy5wYXJlbnRTZWxlY3QudmFsdWUmJnQ9PT10aGlzLnBhcmVudFNlbGVjdC52YWx1ZS50b1N0cmluZygpfXJldHVybiExfSxjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtc2VsZWN0ZWRcIjp0aGlzLmlzU2VsZWN0ZWQsXCJtZC1jaGVja2VkXCI6dGhpcy5jaGVja319fSxtZXRob2RzOntpc011bHRpcGxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50U2VsZWN0Lm11bHRpcGxlfSxzZXRQYXJlbnRPcHRpb246ZnVuY3Rpb24oKXt0aGlzLmlzTXVsdGlwbGUoKT90aGlzLmNoZWNrPSF0aGlzLmNoZWNrOnRoaXMucGFyZW50U2VsZWN0LnNlbGVjdE9wdGlvbih0aGlzLnZhbHVlLHRoaXMuJHJlZnMuaXRlbS50ZXh0Q29udGVudCx0aGlzLiRlbCl9LHNlbGVjdE9wdGlvbjpmdW5jdGlvbih0KXt0aGlzLmRpc2FibGVkfHwodGhpcy5zZXRQYXJlbnRPcHRpb24oKSx0aGlzLiRlbWl0KFwic2VsZWN0ZWRcIix0KSl9fSx3YXRjaDp7aXNTZWxlY3RlZDpmdW5jdGlvbih0KXt0aGlzLmlzTXVsdGlwbGUoKSYmKHRoaXMuY2hlY2s9dCl9LGNoZWNrOmZ1bmN0aW9uKHQpe3Q/dGhpcy5wYXJlbnRTZWxlY3Quc2VsZWN0TXVsdGlwbGUodGhpcy5pbmRleCx0aGlzLnZhbHVlLHRoaXMuJHJlZnMuaXRlbS50ZXh0Q29udGVudCk6dGhpcy5wYXJlbnRTZWxlY3Quc2VsZWN0TXVsdGlwbGUodGhpcy5pbmRleCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7aWYodGhpcy5wYXJlbnRTZWxlY3Q9KDAsYS5kZWZhdWx0KSh0aGlzLiRwYXJlbnQsXCJtZC1zZWxlY3RcIiksdGhpcy5wYXJlbnRDb250ZW50PSgwLGEuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtbWVudS1jb250ZW50XCIpLCF0aGlzLnBhcmVudFNlbGVjdCl0aHJvdyBuZXcgRXJyb3IoXCJZb3UgbXVzdCB3cmFwIHRoZSBtZC1vcHRpb24gaW4gYSBtZC1zZWxlY3RcIik7dGhpcy5wYXJlbnRTZWxlY3Qub3B0aW9uc0Ftb3VudCsrLHRoaXMuaW5kZXg9dGhpcy5wYXJlbnRTZWxlY3Qub3B0aW9uc0Ftb3VudCx0aGlzLnBhcmVudFNlbGVjdC5tdWx0aXBsZU9wdGlvbnNbdGhpcy5pbmRleF09e30sdGhpcy5wYXJlbnRTZWxlY3Qub3B0aW9uc1t0aGlzLmluZGV4XT10aGlzLCh0aGlzLmlzTXVsdGlwbGUoKSYmdGhpcy5wYXJlbnRTZWxlY3QudmFsdWUuaW5kZXhPZih0aGlzLnZhbHVlKT49MHx8dGhpcy5wYXJlbnRTZWxlY3QudmFsdWU9PT10aGlzLnZhbHVlKSYmdGhpcy5zZXRQYXJlbnRPcHRpb24oKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMucGFyZW50U2VsZWN0JiYoZGVsZXRlIHRoaXMucGFyZW50U2VsZWN0Lm9wdGlvbnNbdGhpcy5pbmRleF0sZGVsZXRlIHRoaXMucGFyZW50U2VsZWN0Lm11bHRpcGxlT3B0aW9uc1t0aGlzLmluZGV4XSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDM4KSxhPWkobykscj1uKDEpLHM9aShyKSxkPW4oMTApLGw9aShkKSxjPW4oNjYpLHU9aShjKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1zZWxlY3RcIixwcm9wczp7bmFtZTpTdHJpbmcsaWQ6U3RyaW5nLHJlcXVpcmVkOkJvb2xlYW4sbXVsdGlwbGU6Qm9vbGVhbix2YWx1ZTpbU3RyaW5nLE51bWJlcixBcnJheV0sZGlzYWJsZWQ6Qm9vbGVhbixwbGFjZWhvbGRlcjpTdHJpbmcsbWRNZW51Q2xhc3M6U3RyaW5nLG1kTWVudU9wdGlvbnM6T2JqZWN0fSxtaXhpbnM6W3MuZGVmYXVsdF0sZGF0YTpmdW5jdGlvbigpe3JldHVybntsYXN0U2VsZWN0ZWQ6bnVsbCxzZWxlY3RlZFZhbHVlOm51bGwsc2VsZWN0ZWRUZXh0Om51bGwsbXVsdGlwbGVPcHRpb25zOnt9LG9wdGlvbnM6e30sb3B0aW9uc0Ftb3VudDowfX0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1kaXNhYmxlZFwiOnRoaXMuZGlzYWJsZWQsXCJtZC1zZWxlY3QtaWNvblwiOnRoaXMuaGFzSWNvbn19LGNvbnRlbnRDbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubXVsdGlwbGU/XCJtZC1tdWx0aXBsZSBcIit0aGlzLm1kTWVudUNsYXNzOnRoaXMubWRNZW51Q2xhc3N9LGhhc0ljb246ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kc2xvdHMuaWNvbn0sdmFsdWVTdHlsZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLmhhc0ljb24/e2Rpc3BsYXk6XCJub25lXCJ9Ont9fX0sd2F0Y2g6e3ZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuc2V0VGV4dEFuZFZhbHVlKHQpLHRoaXMubXVsdGlwbGUmJnRoaXMuc2VsZWN0T3B0aW9ucyh0KX0sZGlzYWJsZWQ6ZnVuY3Rpb24oKXt0aGlzLnNldFBhcmVudERpc2FibGVkKCl9LHJlcXVpcmVkOmZ1bmN0aW9uKCl7XG50aGlzLnNldFBhcmVudFJlcXVpcmVkKCl9LHBsYWNlaG9sZGVyOmZ1bmN0aW9uKCl7dGhpcy5zZXRQYXJlbnRQbGFjZWhvbGRlcigpfX0sbWV0aG9kczp7b25PcGVuOmZ1bmN0aW9uKCl7dGhpcy5sYXN0U2VsZWN0ZWQmJnRoaXMubGFzdFNlbGVjdGVkLnNjcm9sbEludG9WaWV3SWZOZWVkZWQoITApLHRoaXMuJGVtaXQoXCJvcGVuZWRcIil9LHNldFBhcmVudERpc2FibGVkOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDb250YWluZXIuaXNEaXNhYmxlZD10aGlzLmRpc2FibGVkfSxzZXRQYXJlbnRSZXF1aXJlZDpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyLmlzUmVxdWlyZWQ9dGhpcy5yZXF1aXJlZH0sc2V0UGFyZW50UGxhY2Vob2xkZXI6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudENvbnRhaW5lci5oYXNQbGFjZWhvbGRlcj0hIXRoaXMucGxhY2Vob2xkZXJ9LHNlbGVjdE9wdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPSgwLGEuZGVmYXVsdCkodGhpcy5vcHRpb25zKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBlLm9wdGlvbnNbdF19KSk7biYmbi5sZW5ndGgmJm4uZmlsdGVyKChmdW5jdGlvbihlKXtyZXR1cm4gdC5pbmRleE9mKGUudmFsdWUpIT09LTF9KSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5jaGVjaz0hMH0pKX0sZ2V0U2luZ2xlVmFsdWU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXt9O3JldHVybigwLGEuZGVmYXVsdCkodGhpcy5vcHRpb25zKS5mb3JFYWNoKChmdW5jdGlvbihpKXt2YXIgbz1lLm9wdGlvbnNbaV07by52YWx1ZT09PXQmJihuLnZhbHVlPXQsbi50ZXh0PW8uJHJlZnMuaXRlbS50ZXh0Q29udGVudCxuLmVsPW8uJHJlZnMuaXRlbSl9KSksbn0sZ2V0TXVsdGlwbGVWYWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKCgwLHUuZGVmYXVsdCkodGhpcy52YWx1ZSkpe3ZhciBuPVtdO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpeygwLGEuZGVmYXVsdCkoZS5vcHRpb25zKS5mb3JFYWNoKChmdW5jdGlvbihpKXt2YXIgbz1lLm9wdGlvbnNbaV07aWYoby52YWx1ZT09PXQpe3ZhciBhPW8uJHJlZnMuaXRlbS50ZXh0Q29udGVudDtlLm11bHRpcGxlT3B0aW9uc1tpXT17dmFsdWU6dCx0ZXh0OmF9LG4ucHVzaChhKX19KSl9KSkse3ZhbHVlOnQsdGV4dDpuLmpvaW4oXCIsIFwiKX19cmV0dXJue319LHNldFRleHRBbmRWYWx1ZTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLm11bHRpcGxlP3RoaXMuZ2V0TXVsdGlwbGVWYWx1ZSh0KTp0aGlzLmdldFNpbmdsZVZhbHVlKHQpO3RoaXMuc2VsZWN0ZWRWYWx1ZT1lLnZhbHVlLHRoaXMuc2VsZWN0ZWRUZXh0PWUudGV4dCx0aGlzLmxhc3RTZWxlY3RlZD1lLmVsLHRoaXMucGFyZW50Q29udGFpbmVyJiZ0aGlzLnBhcmVudENvbnRhaW5lci5zZXRWYWx1ZSh0aGlzLnNlbGVjdGVkVGV4dCl9LGNoYW5nZVZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuJGVtaXQoXCJpbnB1dFwiLHQpLHRoaXMuJGVtaXQoXCJjaGFuZ2VcIix0KSx0aGlzLiRlbWl0KFwic2VsZWN0ZWRcIix0KX0sc2VsZWN0TXVsdGlwbGU6ZnVuY3Rpb24odCxlLG4pe3ZhciBpPVtdO3RoaXMubXVsdGlwbGVPcHRpb25zW3RdPXt2YWx1ZTplLHRleHQ6bn07Zm9yKHZhciBvIGluIHRoaXMubXVsdGlwbGVPcHRpb25zKXRoaXMubXVsdGlwbGVPcHRpb25zLmhhc093blByb3BlcnR5KG8pJiZ0aGlzLm11bHRpcGxlT3B0aW9uc1tvXS52YWx1ZSYmaS5wdXNoKHRoaXMubXVsdGlwbGVPcHRpb25zW29dLnZhbHVlKTt0aGlzLmNoYW5nZVZhbHVlKGkpfSxzZWxlY3RPcHRpb246ZnVuY3Rpb24odCxlLG4pe3RoaXMubGFzdFNlbGVjdGVkPW4sdGhpcy5zZWxlY3RlZFRleHQ9ZSx0aGlzLnNldFRleHRBbmRWYWx1ZSh0KSx0aGlzLmNoYW5nZVZhbHVlKHQpfX0sbW91bnRlZDpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyPSgwLGwuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtaW5wdXQtY29udGFpbmVyXCIpLHRoaXMucGFyZW50Q29udGFpbmVyJiYodGhpcy5zZXRQYXJlbnREaXNhYmxlZCgpLHRoaXMuc2V0UGFyZW50UmVxdWlyZWQoKSx0aGlzLnNldFBhcmVudFBsYWNlaG9sZGVyKCksdGhpcy5wYXJlbnRDb250YWluZXIuaGFzU2VsZWN0PSEwKSx0aGlzLnNldFRleHRBbmRWYWx1ZSh0aGlzLnZhbHVlKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMucGFyZW50Q29udGFpbmVyJiYodGhpcy5wYXJlbnRDb250YWluZXIuc2V0VmFsdWUoXCJcIiksdGhpcy5wYXJlbnRDb250YWluZXIuaGFzU2VsZWN0PSExKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLXNpZGVuYXZcIixkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue21kVmlzaWJsZTohMX19LG1peGluczpbYS5kZWZhdWx0XSxwcm9wczp7bWRTd2lwZWFibGU6Qm9vbGVhbixtZFN3aXBlVGhyZXNob2xkOnt0eXBlOk51bWJlcixkZWZhdWx0OjE1fSxtZFN3aXBlRGlzdGFuY2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6MTAwfX0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tZFZpc2libGUmJlwibWQtYWN0aXZlXCJ9fSxtZXRob2RzOntzaG93OmZ1bmN0aW9uKCl7dGhpcy5vcGVuKCl9LG9wZW46ZnVuY3Rpb24oKXt0aGlzLm1kVmlzaWJsZT0hMCx0aGlzLiRlbC5mb2N1cygpLHRoaXMuJGVtaXQoXCJvcGVuXCIpfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMubWRWaXNpYmxlPSExLHRoaXMuJGVsLmJsdXIoKSx0aGlzLiRlbWl0KFwiY2xvc2VcIil9LHRvZ2dsZTpmdW5jdGlvbigpe3RoaXMubWRWaXNpYmxlP3RoaXMuY2xvc2UoKTp0aGlzLm9wZW4oKX0saXNIb3Jpem9udGFsbHlJbnNpZGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQ+MCYmdDx0aGlzLm1vdW50ZWRSZWN0LmxlZnQrdGhpcy5tb3VudGVkUmVjdC53aWR0aH0saXNWZXJ0aWNhbGx5SW5zaWRlOmZ1bmN0aW9uKHQpe3JldHVybiB0PjAmJnQ8dGhpcy5tb3VudGVkUmVjdC50b3ArdGhpcy5tb3VudGVkUmVjdC5oZWlnaHR9LGlzRnJvbVN0YXJ0V2hlbkNsb3NlZDpmdW5jdGlvbih0KXtyZXR1cm4hIXRoaXMubWRWaXNpYmxlfHx0PHRoaXMubWRTd2lwZVRocmVzaG9sZH0saGFuZGxlVG91Y2hTdGFydDpmdW5jdGlvbih0KXt2YXIgZT10LnRvdWNoZXNbMF0uY2xpZW50WC10aGlzLm1vdW50ZWRSZWN0LmxlZnQsbj10LnRvdWNoZXNbMF0uY2xpZW50WS10aGlzLm1vdW50ZWRSZWN0LnRvcDt0aGlzLmlzSG9yaXpvbnRhbGx5SW5zaWRlKGUpJiZ0aGlzLmlzVmVydGljYWxseUluc2lkZShuKSYmdGhpcy5pc0Zyb21TdGFydFdoZW5DbG9zZWQoZSkmJih0aGlzLmluaXRpYWxUb3VjaFBvc2l0aW9uPWUsdGhpcy5jYW5Nb3ZlPSEwKX0saGFuZGxlVG91Y2hFbmQ6ZnVuY3Rpb24oKXt0aGlzLmNhbk1vdmU9ITEsdGhpcy5pbml0aWFsVG91Y2hQb3NpdGlvbj1udWxsfSxoYW5kbGVUb3VjaE1vdmU6ZnVuY3Rpb24odCl7aWYodGhpcy5jYW5Nb3ZlKXt2YXIgZT10LnRvdWNoZXNbMF0uY2xpZW50WCxuPXRoaXMubWRWaXNpYmxlP3RoaXMuaW5pdGlhbFRvdWNoUG9zaXRpb24tZTplLXRoaXMuaW5pdGlhbFRvdWNoUG9zaXRpb24saT10aGlzLm1kVmlzaWJsZT9cImNsb3NlXCI6XCJvcGVuXCI7bj50aGlzLm1kU3dpcGVEaXN0YW5jZSYmdGhpc1tpXSgpfX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLm1kU3dpcGVhYmxlJiYodGhpcy5tb3VudGVkUmVjdD10aGlzLiRyZWZzLmJhY2tkcm9wLiRlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSx0aGlzLmluaXRpYWxUb3VjaFBvc2l0aW9uPW51bGwsdGhpcy5jYW5Nb3ZlPSExLGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsdGhpcy5oYW5kbGVUb3VjaFN0YXJ0KSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIix0aGlzLmhhbmRsZVRvdWNoRW5kKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsdGhpcy5oYW5kbGVUb3VjaE1vdmUpKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMubWRTd2lwZWFibGUmJihkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLHRoaXMuaGFuZGxlVG91Y2hTdGFydCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsdGhpcy5oYW5kbGVUb3VjaEVuZCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLHRoaXMuaGFuZGxlVG91Y2hNb3ZlKSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDM2KSxhPWkobykscj1uKDQxKSxzPWkociksZD1uKDEpLGw9aShkKSxjPW4oMTE3KSx1PWkoYyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtc25hY2tiYXJcIixwcm9wczp7aWQ6W1N0cmluZyxOdW1iZXJdLG1kUG9zaXRpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b20gY2VudGVyXCJ9LG1kRHVyYXRpb246e3R5cGU6W1N0cmluZyxOdW1iZXJdLGRlZmF1bHQ6NGUzfX0sbWl4aW5zOltsLmRlZmF1bHRdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57c25hY2tiYXJJZDp0aGlzLmlkfHxcInNuYWNrYmFyLVwiKygwLGEuZGVmYXVsdCkoKSxhY3RpdmU6ITEscm9vdEVsZW1lbnQ6e30sc25hY2tiYXJFbGVtZW50Ont9LGRpcmVjdGlvbkNsYXNzOm51bGwsY2xvc2VUaW1lb3V0Om51bGx9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3ZhciB0PXtcIm1kLWFjdGl2ZVwiOnRoaXMuYWN0aXZlfTtyZXR1cm4gdGhpcy5kaXJlY3Rpb25DbGFzcz10aGlzLm1kUG9zaXRpb24ucmVwbGFjZSgvIC9nLFwiLVwiKSx0W1wibWQtcG9zaXRpb24tXCIrdGhpcy5kaXJlY3Rpb25DbGFzc109ITAsdH19LHdhdGNoOnthY3RpdmU6ZnVuY3Rpb24odCl7dmFyIGU9XCJtZC1oYXMtdG9hc3QtXCIrdGhpcy5kaXJlY3Rpb25DbGFzcyxuPVwibWQtaGFzLXRvYXN0XCI7dD8oZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGUpLGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChuKSk6KGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShlKSxkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUobikpfX0sbWV0aG9kczp7cmVtb3ZlRWxlbWVudDpmdW5jdGlvbigpe2lmKGRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy5zbmFja2JhckVsZW1lbnQpKXt2YXIgdD10aGlzLnNuYWNrYmFyRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLm1kLXJpcHBsZS5tZC1hY3RpdmVcIik7dCYmdC5jbGFzc0xpc3QucmVtb3ZlKFwibWQtYWN0aXZlXCIpLGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodGhpcy5zbmFja2JhckVsZW1lbnQpfX0sb3BlbjpmdW5jdGlvbigpe3UuZGVmYXVsdC5jdXJyZW50JiZ1LmRlZmF1bHQuY3VycmVudC5jbG9zZSgpLHUuZGVmYXVsdC5jdXJyZW50PXRoaXMsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLnNuYWNrYmFyRWxlbWVudCksd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy4kcmVmcy5jb250YWluZXIpLmJhY2tncm91bmRDb2xvcix0aGlzLmFjdGl2ZT0hMCx0aGlzLiRlbWl0KFwib3BlblwiKSx0aGlzLmNsb3NlVGltZW91dD13aW5kb3cuc2V0VGltZW91dCh0aGlzLmNsb3NlLHRoaXMubWREdXJhdGlvbiksdGhpcy50aW1lb3V0U3RhcnRlZEF0PURhdGUubm93KCl9LGNsb3NlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLiRyZWZzLmNvbnRhaW5lcil7dmFyIGU9ZnVuY3Rpb24gZSgpe3QuJHJlZnMuY29udGFpbmVyLnJlbW92ZUV2ZW50TGlzdGVuZXIocy5kZWZhdWx0LGUpLHQucmVtb3ZlRWxlbWVudCgpfTt1LmRlZmF1bHQuY3VycmVudD1udWxsLHRoaXMuYWN0aXZlPSExLHRoaXMuJGVtaXQoXCJjbG9zZVwiKSx0aGlzLiRyZWZzLmNvbnRhaW5lci5yZW1vdmVFdmVudExpc3RlbmVyKHMuZGVmYXVsdCxlKSx0aGlzLiRyZWZzLmNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKHMuZGVmYXVsdCxlKSx3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lb3V0KSx0aGlzLnBlbmRpbmdEdXJhdGlvbj10aGlzLm1kRHVyYXRpb259fSxwYXVzZVRpbWVvdXQ6ZnVuY3Rpb24oKXt0aGlzLnBlbmRpbmdEdXJhdGlvbj10aGlzLnBlbmRpbmdEdXJhdGlvbi0oRGF0ZS5ub3coKS10aGlzLnRpbWVvdXRTdGFydGVkQXQpLHRoaXMudGltZW91dFN0YXJ0ZWRBdD0wLHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5jbG9zZVRpbWVvdXQpfSxyZXN1bWVUaW1lb3V0OmZ1bmN0aW9uKCl7dGhpcy50aW1lb3V0U3RhcnRlZEF0PURhdGUubm93KCksdGhpcy5jbG9zZVRpbWVvdXQ9d2luZG93LnNldFRpbWVvdXQodGhpcy5jbG9zZSx0aGlzLnBlbmRpbmdEdXJhdGlvbil9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXt0LnNuYWNrYmFyRWxlbWVudD10LiRlbCx0LnNuYWNrYmFyRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQuc25hY2tiYXJFbGVtZW50KSx0LnRpbWVvdXRTdGFydGVkQXQ9MCx0LnBlbmRpbmdEdXJhdGlvbj10Lm1kRHVyYXRpb259KSl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VUaW1lb3V0KSx0aGlzLnJlbW92ZUVsZW1lbnQoKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLXNwZWVkLWRpYWxcIixwcm9wczp7bWRPcGVuOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiY2xpY2tcIn0sbWRNb2RlOnt0eXBlOlN0cmluZyxkZWZhdWx0OlwiZmxpbmdcIn0sbWREaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJ0b3BcIn19LG1peGluczpbYS5kZWZhdWx0XSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2ZhYlRyaWdnZXI6bnVsbCxhY3RpdmU6ITF9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbiB0KCl7dmFyIHQ9e1wibWQtYWN0aXZlXCI6dGhpcy5hY3RpdmV9O3JldHVybiB0W1wibWQtbW9kZS1cIit0aGlzLm1kTW9kZV09ITAsdFtcIm1kLWRpcmVjdGlvbi1cIit0aGlzLm1kRGlyZWN0aW9uXT0hMCx0fX0sbWV0aG9kczp7Y2xvc2VTcGVlZERpYWw6ZnVuY3Rpb24odCl7IXQudGFyZ2V0IT09dGhpcy5mYWJUcmlnZ2VyJiZ0aGlzLmZhYlRyaWdnZXIuY29udGFpbnModC50YXJnZXQpfHwodGhpcy5hY3RpdmU9ITEsZG9jdW1lbnQuYm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmNsb3NlU3BlZWREaWFsKSl9LHRvZ2dsZVNwZWVkRGlhbDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5hY3RpdmU9IXRoaXMuYWN0aXZlLHdpbmRvdy5zZXRUaW1lb3V0KChmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdC5jbG9zZVNwZWVkRGlhbCl9KSw1MCl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXt0LmZhYlRyaWdnZXI9dC4kZWwucXVlcnlTZWxlY3RvcihcIlttZC1mYWItdHJpZ2dlcl1cIiksXCJjbGlja1wiPT09dC5tZE9wZW4/dC5mYWJUcmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLHQudG9nZ2xlU3BlZWREaWFsKToodC4kZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIix0LnRvZ2dsZVNwZWVkRGlhbCksdC4kZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbGVhdmVcIix0LmNsb3NlU3BlZWREaWFsKSl9KSl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmZhYlRyaWdnZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy50b2dnbGVTcGVlZERpYWwpLGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5jbG9zZVNwZWVkRGlhbCl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLGE9aShvKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1zcGlubmVyXCIscHJvcHM6e21kU2l6ZTp7dHlwZTpOdW1iZXIsZGVmYXVsdDo1MH0sbWRTdHJva2U6e3R5cGU6TnVtYmVyLGRlZmF1bHQ6My41fSxtZEluZGV0ZXJtaW5hdGU6Qm9vbGVhbixtZFByb2dyZXNzOnt0eXBlOk51bWJlcixkZWZhdWx0OjB9fSxtaXhpbnM6W2EuZGVmYXVsdF0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1pbmRldGVybWluYXRlXCI6dGhpcy5tZEluZGV0ZXJtaW5hdGV9fSxzdHlsZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm1kU2l6ZStcInB4XCI7cmV0dXJue3dpZHRoOnQsaGVpZ2h0OnR9fSxkYXNoUHJvZ3Jlc3M6ZnVuY3Rpb24oKXt2YXIgdD0xMjUqdGhpcy5tZFByb2dyZXNzLzEwMDtyZXR1cm4hdGhpcy5tZEluZGV0ZXJtaW5hdGUmJih0Pj0xMjUmJih0PTEzMCksdCtcIiwgMjAwXCIpfX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMzYpLGE9aShvKSxyPW4oMTApLHM9aShyKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC1zdGVwXCIscHJvcHM6e2lkOltTdHJpbmcsTnVtYmVyXSxtZEFjdGl2ZTpCb29sZWFuLG1kQnV0dG9uQmFjazp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIkJBQ0tcIn0sbWRCdXR0b25Db250aW51ZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIkNPTlRJTlVFXCJ9LG1kQ29udGludWU6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiEwfSxtZERpc2FibGVkOkJvb2xlYW4sbWRFZGl0YWJsZTp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1kSWNvbjpTdHJpbmcsbWRMYWJlbDpbU3RyaW5nLE51bWJlcl0sbWRNZXNzYWdlOltTdHJpbmddLG1kVG9vbFRpcDpTdHJpbmcsbWRUb29sdGlwRGVsYXk6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCIwXCJ9LG1kVG9vbHRpcERpcmVjdGlvbjp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJvdHRvbVwifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybntpbmRleDowLGxlZnQ6XCIwcHhcIixtb3VudGVkOiExLHBhcmVudFN0ZXBwZXI6dm9pZCAwLHN0ZXBJZDp0aGlzLmlkfHxcInN0ZXAtXCIrKDAsYS5kZWZhdWx0KSgpLHZlcnRpY2FsOiExLHdpZHRoOlwiMHB4XCJ9fSx3YXRjaDp7bWRBY3RpdmU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVN0ZXBEYXRhKCl9LG1kQ29udGludWU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVN0ZXBEYXRhKCl9LG1kRWRpdGFibGU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVN0ZXBEYXRhKCl9LG1kRGlzYWJsZWQ6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVN0ZXBEYXRhKCl9LG1kSWNvbjpmdW5jdGlvbigpe3RoaXMudXBkYXRlU3RlcERhdGEoKX0sbWRMYWJlbDpmdW5jdGlvbigpe3RoaXMudXBkYXRlU3RlcERhdGEoKX0sbWRNZXNzYWdlOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVTdGVwRGF0YSgpfSxtZFRvb2xUaXA6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVN0ZXBEYXRhKCl9LG1kVG9vbHRpcERlbGF5OmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVTdGVwRGF0YSgpfSxtZFRvb2x0aXBEaXJlY3Rpb246ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVN0ZXBEYXRhKCl9fSxjb21wdXRlZDp7Y2FuR29CYWNrOmZ1bmN0aW9uKCl7aWYoMD09PXRoaXMuaW5kZXgpcmV0dXJuITE7aWYoIXRoaXMucGFyZW50U3RlcHBlcilyZXR1cm4hMTt2YXIgdD10aGlzLnBhcmVudFN0ZXBwZXIuZ2V0UHJldmlvdXNTdGVwKHRoaXMuc3RlcElkKTtyZXR1cm4hKHZvaWQgMCE9PXQmJiF0LmVkaXRhYmxlKX0sY29udGludWVUZXh0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucGFyZW50U3RlcHBlciYmdGhpcy5pbmRleCsxPT09dGhpcy5wYXJlbnRTdGVwcGVyLmdldFN0ZXBzQ291bnQoKSYmXCJDT05USU5VRVwiPT09dGhpcy5tZEJ1dHRvbkNvbnRpbnVlP1wiRklOSVNIXCI6dGhpcy5tZEJ1dHRvbkNvbnRpbnVlfSxpc0N1cnJlbnRTdGVwOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5kZXg9PT10aGlzLnBhcmVudFN0ZXBwZXIuYWN0aXZlU3RlcE51bWJlcn0sc3R5bGVzOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudmVydGljYWw/e306e3dpZHRoOnRoaXMud2lkdGgsbGVmdDp0aGlzLmxlZnR9fX0sbWV0aG9kczp7Z2V0U3RlcERhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aWQ6dGhpcy5zdGVwSWQsbGFiZWw6dGhpcy5tZExhYmVsLG1lc3NhZ2U6dGhpcy5tZE1lc3NhZ2UsaWNvbjp0aGlzLm1kSWNvbixhY3RpdmU6dGhpcy5tZEFjdGl2ZSxjb250aW51ZTp0aGlzLm1kQ29udGludWUsZWRpdGFibGU6dGhpcy5tZEVkaXRhYmxlLGRpc2FibGVkOnRoaXMubWREaXNhYmxlZCx0b29sVGlwOnRoaXMubWRUb29sVGlwLHRvb2x0aXBEZWxheTp0aGlzLm1kVG9vbHRpcERlbGF5LHRvb2x0aXBEaXJlY3Rpb246dGhpcy5tZFRvb2x0aXBEaXJlY3Rpb24scmVmOnRoaXN9fSxtb3ZlTmV4dFN0ZXA6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudFN0ZXBwZXIubW92ZU5leHRTdGVwKCl9LG1vdmVQcmV2aW91c1N0ZXA6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudFN0ZXBwZXIubW92ZVByZXZpb3VzU3RlcCgpfSxzZXRBY3RpdmVTdGVwOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRTdGVwcGVyLnNldEFjdGl2ZVN0ZXAodGhpcy5nZXRTdGVwRGF0YSgpKX0sdXBkYXRlU3RlcERhdGE6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudFN0ZXBwZXIudXBkYXRlU3RlcCh0aGlzLmdldFN0ZXBEYXRhKCkpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0U3RlcERhdGEoKTtpZih0aGlzLnBhcmVudFN0ZXBwZXI9KDAscy5kZWZhdWx0KSh0aGlzLiRwYXJlbnQsXCJtZC1zdGVwcGVyXCIpLCF0aGlzLnBhcmVudFN0ZXBwZXIpdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3Qgd3JhcCB0aGUgbWQtc3RlcCBpbiBhIG1kLXN0ZXBwZXJcIik7dGhpcy5tb3VudGVkPSEwLHRoaXMucGFyZW50U3RlcHBlci51cGRhdGVTdGVwKHQpLHRoaXMubWRBY3RpdmUmJnRoaXMucGFyZW50U3RlcHBlci5zZXRBY3RpdmVTdGVwKHQpLHRoaXMudmVydGljYWw9dGhpcy5wYXJlbnRTdGVwcGVyLm1kVmVydGljYWwsdGhpcy5pbmRleD10aGlzLnBhcmVudFN0ZXBwZXIuZ2V0U3RlcEluZGV4KHRoaXMuc3RlcElkKX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMucGFyZW50U3RlcHBlci51bnJlZ2lzdGVyU3RlcCh0aGlzLmdldFN0ZXBEYXRhKCkpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxMCksYT1pKG8pO2UuZGVmYXVsdD17cHJvcHM6e3N0ZXA6T2JqZWN0LG1kQWx0ZXJuYXRlTGFiZWxzOkJvb2xlYW59LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57aW5kZXg6TnVtYmVyLHBhcmVudFN0ZXBwZXI6e319fSxjb21wdXRlZDp7aXNDb21wbGV0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmRleDx0aGlzLnBhcmVudFN0ZXBwZXIuYWN0aXZlU3RlcE51bWJlcn0sZ2V0SGVhZGVyQ2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWFjdGl2ZVwiOnRoaXMucGFyZW50U3RlcHBlci5hY3RpdmVTdGVwPT09dGhpcy5zdGVwLmlkLFwibWQtYWx0ZXJuYXRlLWxhYmVsc1wiOnRoaXMubWRBbHRlcm5hdGVMYWJlbHMsXCJtZC1kaXNhYmxlZFwiOnRoaXMuc3RlcC5kaXNhYmxlZCxcIm1kLWhhcy1zdWItbWVzc2FnZVwiOnRoaXMuc3RlcC5tZXNzYWdlLFwibWQtcHJpbWFyeVwiOnRoaXMuaXNDb21wbGV0ZWR9fSxpY29uOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuc3RlcC5kaXNhYmxlZCYmdGhpcy5zdGVwLmVkaXRhYmxlJiZ0aGlzLmlzQ29tcGxldGVkP1wibW9kZV9lZGl0XCI6IXRoaXMuc3RlcC5kaXNhYmxlZCYmdGhpcy5pc0NvbXBsZXRlZD9cImNoZWNrXCI6dGhpcy5zdGVwLmljb259LHN0ZXBOdW1iZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbmRleCsxfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soKGZ1bmN0aW9uKCl7aWYodC5wYXJlbnRTdGVwcGVyPSgwLGEuZGVmYXVsdCkodC4kcGFyZW50LFwibWQtc3RlcHBlclwiKSwhdC5wYXJlbnRTdGVwcGVyKXRocm93IHQuJGRlc3Ryb3koKSxuZXcgRXJyb3IoXCJZb3Ugc2hvdWxkIHdyYXAgdGhlIG1kLXN0ZXAtaGVhZGVyIGluIGEgbWQtc3RlcHBlclwiKTt0LmluZGV4PXQucGFyZW50U3RlcHBlci5nZXRTdGVwSW5kZXgodC5zdGVwLmlkKX0pKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMzgpLGE9aShvKSxyPW4oMSkscz1pKHIpLGQ9big1MCksbD1pKGQpO2UuZGVmYXVsdD17bmFtZTpcIm1kLXN0ZXBwZXJcIixwcm9wczp7bWRBbHRlcm5hdGVMYWJlbHM6e3R5cGU6Qm9vbGVhbixkZWZhdWx0OiExfSxtZEVsZXZhdGlvbjp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDoxfSxtZFZlcnRpY2FsOnt0eXBlOkJvb2xlYW4sZGVmYXVsdDohMX19LG1peGluczpbcy5kZWZhdWx0XSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3N0ZXBMaXN0Ont9LGFjdGl2ZVN0ZXA6bnVsbCxhY3RpdmVTdGVwTnVtYmVyOjAsY29udGVudEhlaWdodDpcIjBweFwiLGNvbnRlbnRXaWR0aDpcIjBweFwifX0sY29tcHV0ZWQ6e25hdmlnYXRpb25DbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtYWx0ZXJuYXRlLWxhYmVsc1wiOnRoaXMubWRBbHRlcm5hdGVMYWJlbHN9fSxzdGVwc0NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1zdGVwcy12ZXJ0aWNhbFwiOnRoaXMubWRWZXJ0aWNhbH19fSxtZXRob2RzOntnZXROZXh0U3RlcDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldFN0ZXBJbmRleCh0KTtpZihlIT09dGhpcy5zdGVwTGlzdC5sZW5ndGgpe3ZhciBuPSgwLGEuZGVmYXVsdCkodGhpcy5zdGVwTGlzdClbZSsxXSxpPXRoaXMuc3RlcExpc3Rbbl07cmV0dXJuIGl9fSxnZXRQcmV2aW91c1N0ZXA6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRTdGVwSW5kZXgodCk7aWYoMCE9PWUpe3ZhciBuPSgwLGEuZGVmYXVsdCkodGhpcy5zdGVwTGlzdClbZS0xXSxpPXRoaXMuc3RlcExpc3Rbbl07cmV0dXJuIGl9fSxnZXRTdGVwc0NvdW50OmZ1bmN0aW9uKCl7dmFyIHQ9KDAsYS5kZWZhdWx0KSh0aGlzLnN0ZXBMaXN0KTtyZXR1cm4gdC5sZW5ndGh9LGdldFN0ZXBJbmRleDpmdW5jdGlvbih0KXt2YXIgZT0oMCxhLmRlZmF1bHQpKHRoaXMuc3RlcExpc3QpO3JldHVybiBlLmluZGV4T2YodCl9LHJlZ2lzdGVyU3RlcDpmdW5jdGlvbih0KXt0aGlzLiRzZXQodGhpcy5zdGVwTGlzdCx0LmlkLHQpfSxtb3ZlTmV4dFN0ZXA6ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZVN0ZXBOdW1iZXI8dGhpcy5nZXRTdGVwc0NvdW50KCktMSl7dmFyIHQ9dGhpcy5nZXROZXh0U3RlcCh0aGlzLmFjdGl2ZVN0ZXApO3RoaXMuc2V0QWN0aXZlU3RlcCh0KX1lbHNlIHRoaXMuJGVtaXQoXCJjb21wbGV0ZWRcIil9LG1vdmVQcmV2aW91c1N0ZXA6ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZVN0ZXBOdW1iZXI+MCYmdGhpcy5hY3RpdmVTdGVwTnVtYmVyPHRoaXMuZ2V0U3RlcHNDb3VudCgpKXt2YXIgdD10aGlzLmdldFByZXZpb3VzU3RlcCh0aGlzLmFjdGl2ZVN0ZXApO3RoaXMuc2V0QWN0aXZlU3RlcCh0KX19LHNldEFjdGl2ZVN0ZXA6ZnVuY3Rpb24odCl7dGhpcy5hY3RpdmVTdGVwTnVtYmVyPnRoaXMuZ2V0U3RlcEluZGV4KHQuaWQpJiYhdC5lZGl0YWJsZXx8KHRoaXMuYWN0aXZlU3RlcD10LmlkLHRoaXMuYWN0aXZlU3RlcE51bWJlcj10aGlzLmdldFN0ZXBJbmRleCh0aGlzLmFjdGl2ZVN0ZXApLHRoaXMuY2FsY3VsYXRlUG9zaXRpb24oKSx0aGlzLiRlbWl0KFwiY2hhbmdlXCIsdGhpcy5hY3RpdmVTdGVwTnVtYmVyKSl9LHVucmVnaXN0ZXJTdGVwOmZ1bmN0aW9uKHQpe3RoaXMuJGRlbGV0ZSh0aGlzLnN0ZXBMaXN0LHQuaWQpfSx1cGRhdGVTdGVwOmZ1bmN0aW9uKHQpe2lmKHRoaXMucmVnaXN0ZXJTdGVwKHQpLHQuYWN0aXZlKWlmKHQuZGlzYWJsZWQpe2lmKCgwLGEuZGVmYXVsdCkodGhpcy5zdGVwTGlzdCkubGVuZ3RoKXt2YXIgZT0oMCxhLmRlZmF1bHQpKHRoaXMuc3RlcExpc3QpLG49ZS5pbmRleE9mKHQuaWQpKzEsaT1lW25dO2k/dGhpcy5zZXRBY3RpdmVTdGVwKHRoaXMuc3RlcExpc3RbaV0pOnRoaXMuc2V0QWN0aXZlU3RlcCh0aGlzLnN0ZXBMaXN0WzBdKX19ZWxzZSB0aGlzLnNldEFjdGl2ZVN0ZXAodCl9LG9ic2VydmVFbGVtZW50Q2hhbmdlczpmdW5jdGlvbigpe3RoaXMucGFyZW50T2JzZXJ2ZXI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKDAsbC5kZWZhdWx0KSh0aGlzLmNhbGN1bGF0ZU9uV2F0Y2gsNTApKSx0aGlzLnBhcmVudE9ic2VydmVyLm9ic2VydmUodGhpcy4kcmVmcy5zdGVwQ29udGVudCx7Y2hpbGRMaXN0OiEwLGF0dHJpYnV0ZXM6ITAsc3VidHJlZTohMH0pfSxjYWxjdWxhdGVTdGVwc1dpZHRoQW5kUG9zaXRpb246ZnVuY3Rpb24oKXtpZih0aGlzLm1kVmVydGljYWwpdGhpcy5jb250ZW50V2lkdGg9XCJpbml0aWFsXCI7ZWxzZXt2YXIgdD10aGlzLiRlbC5vZmZzZXRXaWR0aCxlPTA7dGhpcy5jb250ZW50V2lkdGg9dCp0aGlzLmFjdGl2ZVN0ZXBOdW1iZXIrXCJweFwiO2Zvcih2YXIgbiBpbiB0aGlzLnN0ZXBMaXN0KXt2YXIgaT10aGlzLnN0ZXBMaXN0W25dO2kucmVmLndpZHRoPXQrXCJweFwiLGkucmVmLmxlZnQ9dCplK1wicHhcIixlKyt9fX0sY2FsY3VsYXRlQ29udGVudEhlaWdodDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soKGZ1bmN0aW9uKCl7aWYoIXQubWRWZXJ0aWNhbCYmKDAsYS5kZWZhdWx0KSh0LnN0ZXBMaXN0KS5sZW5ndGgpe3ZhciBlPXQuc3RlcExpc3RbdC5hY3RpdmVTdGVwXS5yZWYuJGVsLm9mZnNldEhlaWdodDt0LmNvbnRlbnRIZWlnaHQ9ZStcInB4XCJ9ZWxzZSB0LmNvbnRlbnRIZWlnaHQ9XCJpbml0aWFsXCJ9KSl9LGNhbGN1bGF0ZVBvc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKChmdW5jdGlvbigpe3QuY2FsY3VsYXRlU3RlcHNXaWR0aEFuZFBvc2l0aW9uKCksdC5jYWxjdWxhdGVDb250ZW50SGVpZ2h0KCl9KSl9LGRlYm91bmNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXM7d2luZG93LmNsZWFyVGltZW91dCh0aGlzLnRyYW5zaXRpb25Db250cm9sKSx0aGlzLnRyYW5zaXRpb25Db250cm9sPXdpbmRvdy5zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuY2FsY3VsYXRlUG9zaXRpb24oKSx0LnRyYW5zaXRpb25PZmY9ITF9KSwyMDApfSxjYWxjdWxhdGVPbldhdGNoOmZ1bmN0aW9uKCl7dGhpcy5jYWxjdWxhdGVQb3NpdGlvbigpLHRoaXMuZGVib3VuY2VUcmFuc2l0aW9uKCl9LGNhbGN1bGF0ZU9uUmVzaXplOmZ1bmN0aW9uKCl7dGhpcy50cmFuc2l0aW9uT2ZmPSEwLHRoaXMuY2FsY3VsYXRlT25XYXRjaCgpfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kbmV4dFRpY2soKGZ1bmN0aW9uKCl7aWYodC5vYnNlcnZlRWxlbWVudENoYW5nZXMoKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHQuY2FsY3VsYXRlT25SZXNpemUpLCgwLGEuZGVmYXVsdCkodC5zdGVwTGlzdCkubGVuZ3RoJiYhdC5hY3RpdmVTdGVwKXt2YXIgZT0oMCxhLmRlZmF1bHQpKHQuc3RlcExpc3QpWzBdO3Quc2V0QWN0aXZlU3RlcCh0LnN0ZXBMaXN0W2VdKX19KSl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudE9ic2VydmVyJiZ0aGlzLnBhcmVudE9ic2VydmVyLmRpc2Nvbm5lY3QoKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMuY2FsY3VsYXRlT25SZXNpemUpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtc3ViaGVhZGVyXCIsbWl4aW5zOlthLmRlZmF1bHRdfSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEpLGE9aShvKSxyPTc1LHM9XCItMXB4XCI7ZS5kZWZhdWx0PXtuYW1lOlwibWQtc3dpdGNoXCIscHJvcHM6e25hbWU6U3RyaW5nLHZhbHVlOkJvb2xlYW4saWQ6U3RyaW5nLGRpc2FibGVkOkJvb2xlYW4sdHlwZTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImJ1dHRvblwifX0sbWl4aW5zOlthLmRlZmF1bHRdLGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57bGVmdFBvczpzLGNoZWNrZWQ6Qm9vbGVhbih0aGlzLnZhbHVlKX19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtY2hlY2tlZFwiOnRoaXMuY2hlY2tlZCxcIm1kLWRpc2FibGVkXCI6dGhpcy5kaXNhYmxlZH19LHN0eWxlczpmdW5jdGlvbigpe3JldHVybnt0cmFuc2Zvcm06XCJ0cmFuc2xhdGUzRChcIit0aGlzLmxlZnRQb3MrXCIsIC01MCUsIDApXCJ9fX0sd2F0Y2g6e2NoZWNrZWQ6ZnVuY3Rpb24oKXt0aGlzLnNldFBvc2l0aW9uKCl9LHZhbHVlOmZ1bmN0aW9uKHQpe3RoaXMuY2hhbmdlU3RhdGUodCl9fSxtZXRob2RzOntzZXRQb3NpdGlvbjpmdW5jdGlvbigpe3RoaXMubGVmdFBvcz10aGlzLmNoZWNrZWQ/citcIiVcIjpzfSxjaGFuZ2VTdGF0ZTpmdW5jdGlvbih0LGUpe1widW5kZWZpbmVkXCIhPXR5cGVvZiBlPyh0aGlzLiRlbWl0KFwiY2hhbmdlXCIsdCxlKSxlLmRlZmF1bHRQcmV2ZW50ZWR8fCh0aGlzLmNoZWNrZWQ9dCksdGhpcy4kZW1pdChcImlucHV0XCIsdGhpcy5jaGVja2VkLGUpKTp0aGlzLmNoZWNrZWQ9dH0sdG9nZ2xlOmZ1bmN0aW9uKHQpe3RoaXMuZGlzYWJsZWR8fHRoaXMuY2hhbmdlU3RhdGUoIXRoaXMuY2hlY2tlZCx0KX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLiRuZXh0VGljayh0aGlzLnNldFBvc2l0aW9uKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oNTEpLGE9aShvKSxyPW4oMSkscz1pKHIpLGQ9bigxMCksbD1pKGQpO2UuZGVmYXVsdD17bmFtZTpcIm1kLXRhYmxlXCIscHJvcHM6e21kU29ydFR5cGU6U3RyaW5nLG1kU29ydDpTdHJpbmd9LG1peGluczpbcy5kZWZhdWx0XSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue3NvcnRUeXBlOnRoaXMubWRTb3J0VHlwZSxzb3J0Qnk6dGhpcy5tZFNvcnQsaGFzUm93U2VsZWN0aW9uOiExLGRhdGE6W10sc2VsZWN0ZWRSb3dzOltdfX0sY29tcHV0ZWQ6e251bWJlck9mUm93czpmdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGE/dGhpcy5kYXRhLmxlbmd0aDowfSxudW1iZXJPZlNlbGVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc2VsZWN0ZWRSb3dzP3RoaXMuc2VsZWN0ZWRSb3dzLmxlbmd0aDowfX0sbWV0aG9kczp7ZW1pdFNvcnQ6ZnVuY3Rpb24odCl7dGhpcy5zb3J0Qnk9dCx0aGlzLiRlbWl0KFwic29ydFwiLHtuYW1lOnQsdHlwZTp0aGlzLnNvcnRUeXBlfSl9LGVtaXRTZWxlY3Rpb246ZnVuY3Rpb24oKXt0aGlzLiRlbWl0KFwic2VsZWN0XCIsdGhpcy5zZWxlY3RlZFJvd3MpfSxyZW1vdmVSb3c6ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGwsbj1lfHx0aGlzLmRhdGEsaT1uLmluZGV4T2YodCk7aSE9PS0xJiZuLnNwbGljZShpLDEpfSxzZXRSb3dTZWxlY3Rpb246ZnVuY3Rpb24odCxlKXtyZXR1cm4gdD92b2lkIHRoaXMuc2VsZWN0ZWRSb3dzLnB1c2goZSk6dm9pZCB0aGlzLnJlbW92ZVJvdyhlLHRoaXMuc2VsZWN0ZWRSb3dzKX0sc2V0TXVsdGlwbGVSb3dTZWxlY3Rpb246ZnVuY3Rpb24odCl7dGhpcy5zZWxlY3RlZFJvd3M9dD8oMCxhLmRlZmF1bHQpKFtdLHRoaXMuZGF0YSk6W119fSx3YXRjaDp7bWRTb3J0OmZ1bmN0aW9uKCl7dGhpcy5zb3J0Qnk9dGhpcy5tZFNvcnQsdGhpcy4kZW1pdChcInNvcnRJbnB1dFwiKX0sbWRTb3J0VHlwZTpmdW5jdGlvbigpe3RoaXMuc29ydFR5cGU9dGhpcy5tZFNvcnRUeXBlLHRoaXMuJGVtaXQoXCJzb3J0SW5wdXRcIil9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRDYXJkPSgwLGwuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtdGFibGUtY2FyZFwiKSx0aGlzLnBhcmVudENhcmQmJih0aGlzLnBhcmVudENhcmQudGFibGVJbnN0YW5jZT10aGlzKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMSksYT1pKG8pLHI9bigxMCkscz1pKHIpO2UuZGVmYXVsdD17bmFtZTpcIm1kLXRhYmxlLWFsdGVybmF0ZS1oZWFkZXJcIixtaXhpbnM6W2EuZGVmYXVsdF0scHJvcHM6e21kU2VsZWN0ZWRMYWJlbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcInNlbGVjdGVkXCJ9fSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2NsYXNzZXM6e30sdGFibGVJbnN0YW5jZTp7fX19LGNvbXB1dGVkOntudW1iZXJPZlNlbGVjdGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGFibGVJbnN0YW5jZS5udW1iZXJPZlNlbGVjdGVkfHwwfX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5wYXJlbnRDYXJkPSgwLHMuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtdGFibGUtY2FyZFwiKSx0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXt0LnRhYmxlSW5zdGFuY2U9dC5wYXJlbnRDYXJkLnRhYmxlSW5zdGFuY2UsdC4kd2F0Y2goXCJ0YWJsZUluc3RhbmNlLm51bWJlck9mU2VsZWN0ZWRcIiwoZnVuY3Rpb24oKXt0LiRyZWZzLmNvdW50ZXIudGV4dENvbnRlbnQ9dC50YWJsZUluc3RhbmNlLm51bWJlck9mU2VsZWN0ZWQsdC5jbGFzc2VzPXtcIm1kLWFjdGl2ZVwiOnQudGFibGVJbnN0YW5jZS5udW1iZXJPZlNlbGVjdGVkPjB9fSkpfSkpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtdGFibGUtY2FyZFwiLG1peGluczpbYS5kZWZhdWx0XX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtdGFibGUtY2VsbFwiLHByb3BzOnttZE51bWVyaWM6Qm9vbGVhbn0sZGF0YTpmdW5jdGlvbigpe3JldHVybntoYXNBY3Rpb246ITF9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLW51bWVyaWNcIjp0aGlzLm1kTnVtZXJpYyxcIm1kLWhhcy1hY3Rpb25cIjp0aGlzLmhhc0FjdGlvbn19fSxtb3VudGVkOmZ1bmN0aW9uKCl7dGhpcy4kY2hpbGRyZW4ubGVuZ3RoPjAmJih0aGlzLmhhc0FjdGlvbj0hMCl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxlLmRlZmF1bHQ9e25hbWU6XCJtZC10YWJsZS1lZGl0XCIscHJvcHM6e3ZhbHVlOltTdHJpbmcsTnVtYmVyXSxtZExhcmdlOkJvb2xlYW4sbWRJZDpTdHJpbmcsbWROYW1lOlN0cmluZyxtZFBsYWNlaG9sZGVyOlN0cmluZyxtZE1heGxlbmd0aDpbTnVtYmVyLFN0cmluZ119LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57YWN0aXZlOiExfX0sY29tcHV0ZWQ6e3RyaWdnZXJDbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtZWRpdGVkXCI6dGhpcy52YWx1ZX19LGRpYWxvZ0NsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1hY3RpdmVcIjp0aGlzLmFjdGl2ZSxcIm1kLWxhcmdlXCI6dGhpcy5tZExhcmdlfX0scmVhbFZhbHVlOmZ1bmN0aW9uKCl7Y29uc29sZS5sb2codGhpcy52YWx1ZSl9fSxtZXRob2RzOntvcGVuRGlhbG9nOmZ1bmN0aW9uKCl7dGhpcy5hY3RpdmU9ITAsdGhpcy4kcmVmcy5pbnB1dC4kZWwuZm9jdXMoKSxkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLmNsb3NlRGlhbG9nT25PZmZDbGljayl9LGNsb3NlRGlhbG9nOmZ1bmN0aW9uKCl7dGhpcy5hY3RpdmUmJih0aGlzLmFjdGl2ZT0hMSx0aGlzLiRyZWZzLmlucHV0LiRlbC5ibHVyKCksZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5jbG9zZURpYWxvZ09uT2ZmQ2xpY2spKX0sY2xvc2VEaWFsb2dPbk9mZkNsaWNrOmZ1bmN0aW9uKHQpe3RoaXMuJHJlZnMuZGlhbG9nLmNvbnRhaW5zKHQudGFyZ2V0KXx8dGhpcy5jbG9zZURpYWxvZygpfSxjb25maXJtRGlhbG9nOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy4kcmVmcy5pbnB1dC4kZWwudmFsdWU7dGhpcy5jbG9zZURpYWxvZygpLHRoaXMuJGVtaXQoXCJpbnB1dFwiLHQpLHRoaXMuJGVtaXQoXCJlZGl0ZWRcIix0KX19fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDEwKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtdGFibGUtaGVhZFwiLHByb3BzOnttZE51bWVyaWM6Qm9vbGVhbixtZFNvcnRCeTpTdHJpbmcsbWRUb29sdGlwOlN0cmluZ30sZGF0YTpmdW5jdGlvbigpe3JldHVybntzb3J0VHlwZTpudWxsLHNvcnRlZDohMSxwYXJlbnRUYWJsZTp7fX19LGNvbXB1dGVkOntjbGFzc2VzOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5oYXNNYXRjaFNvcnQoKTtyZXR1cm4gdHx8KHRoaXMuc29ydGVkPSExKSx7XCJtZC1udW1lcmljXCI6dGhpcy5tZE51bWVyaWMsXCJtZC1zb3J0YWJsZVwiOnRoaXMubWRTb3J0QnksXCJtZC1zb3J0ZWRcIjp0JiZ0aGlzLnNvcnRlZCxcIm1kLXNvcnRlZC1kZXNjZW5kaW5nXCI6dCYmXCJkZXNjXCI9PT10aGlzLnNvcnRUeXBlfX19LG1ldGhvZHM6e2hhc01hdGNoU29ydDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnBhcmVudFRhYmxlLnNvcnRCeT09PXRoaXMubWRTb3J0Qnl9LGNoYW5nZVNvcnQ6ZnVuY3Rpb24oKXt0aGlzLm1kU29ydEJ5JiYoXCJhc2NcIj09PXRoaXMuc29ydFR5cGUmJnRoaXMuc29ydGVkP3RoaXMuc29ydFR5cGU9XCJkZXNjXCI6dGhpcy5zb3J0VHlwZT1cImFzY1wiLHRoaXMuc29ydGVkPSEwLHRoaXMucGFyZW50VGFibGUuc29ydFR5cGU9dGhpcy5zb3J0VHlwZSx0aGlzLnBhcmVudFRhYmxlLmVtaXRTb3J0KHRoaXMubWRTb3J0QnkpKX0saW5pdFNvcnQ6ZnVuY3Rpb24oKXt0aGlzLmhhc01hdGNoU29ydCgpJiYodGhpcy5zb3J0ZWQ9ITAsdGhpcy5zb3J0VHlwZT10aGlzLnBhcmVudFRhYmxlLnNvcnRUeXBlfHxcImFzY1wiKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMucGFyZW50VGFibGU9KDAsYS5kZWZhdWx0KSh0aGlzLiRwYXJlbnQsXCJtZC10YWJsZVwiKSx0aGlzLmluaXRTb3J0KCksdGhpcy5wYXJlbnRUYWJsZS4kb24oXCJzb3J0SW5wdXRcIiwoZnVuY3Rpb24oKXt0LmluaXRTb3J0KCl9KSl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDIwMyksYT1pKG8pO2UuZGVmYXVsdD17bmFtZTpcIm1kLXRhYmxlLXBhZ2luYXRpb25cIixwcm9wczp7bWRTaXplOnt0eXBlOltOdW1iZXIsU3RyaW5nXSxkZWZhdWx0OjEwfSxtZFBhZ2VPcHRpb25zOnt0eXBlOltBcnJheSxCb29sZWFuXSxkZWZhdWx0OmZ1bmN0aW9uKCl7cmV0dXJuWzEwLDI1LDUwLDEwMF19fSxtZFBhZ2U6e3R5cGU6W051bWJlcixTdHJpbmddLGRlZmF1bHQ6MX0sbWRUb3RhbDp7dHlwZTpbTnVtYmVyLFN0cmluZ10sZGVmYXVsdDpcIk1hbnlcIn0sbWRMYWJlbDp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIlJvd3MgcGVyIHBhZ2VcIn0sbWRTZXBhcmF0b3I6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJvZlwifX0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0b3RhbEl0ZW1zOjAsY3VycmVudFBhZ2U6MSxjdXJyZW50U2l6ZTpwYXJzZUludCh0aGlzLm1kU2l6ZSwxMCl9fSx3YXRjaDp7bWRUb3RhbDpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmN1cnJlbnRQYWdlKnRoaXMuY3VycmVudFNpemU7dGhpcy5zdWJUb3RhbD1lPnQ/dDplLHRoaXMudG90YWxJdGVtcz1pc05hTih0KT9hLmRlZmF1bHQ6cGFyc2VJbnQodCwxMCl9LG1kU2l6ZTpmdW5jdGlvbih0KXt0aGlzLmN1cnJlbnRTaXplPXBhcnNlSW50KHQsMTApfSxtZFBhZ2U6ZnVuY3Rpb24odCl7dGhpcy5jdXJyZW50UGFnZT1wYXJzZUludCh0LDEwKX19LGNvbXB1dGVkOntsYXN0UGFnZTpmdW5jdGlvbigpe3JldHVybiExfSxzaG91bGREaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY3VycmVudFNpemUqdGhpcy5jdXJyZW50UGFnZT49dGhpcy50b3RhbEl0ZW1zfSxzdWJUb3RhbDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuY3VycmVudFBhZ2UqdGhpcy5jdXJyZW50U2l6ZTtyZXR1cm4gdD50aGlzLm1kVG90YWw/dGhpcy5tZFRvdGFsOnR9fSxtZXRob2RzOntlbWl0UGFnaW5hdGlvbkV2ZW50OmZ1bmN0aW9uKCl7dGhpcy5jYW5GaXJlRXZlbnRzJiZ0aGlzLiRlbWl0KFwicGFnaW5hdGlvblwiLHtzaXplOnRoaXMuY3VycmVudFNpemUscGFnZTp0aGlzLmN1cnJlbnRQYWdlfSl9LGNoYW5nZVNpemU6ZnVuY3Rpb24oKXt0aGlzLmNhbkZpcmVFdmVudHMmJih0aGlzLiRlbWl0KFwic2l6ZVwiLHRoaXMuY3VycmVudFNpemUpLHRoaXMuZW1pdFBhZ2luYXRpb25FdmVudCgpKX0scHJldmlvdXNQYWdlOmZ1bmN0aW9uKCl7dGhpcy5jYW5GaXJlRXZlbnRzJiYodGhpcy5jdXJyZW50UGFnZS0tLHRoaXMuJGVtaXQoXCJwYWdlXCIsdGhpcy5jdXJyZW50UGFnZSksdGhpcy5lbWl0UGFnaW5hdGlvbkV2ZW50KCkpfSxuZXh0UGFnZTpmdW5jdGlvbigpe3RoaXMuY2FuRmlyZUV2ZW50cyYmKHRoaXMuY3VycmVudFBhZ2UrKyx0aGlzLiRlbWl0KFwicGFnZVwiLHRoaXMuY3VycmVudFBhZ2UpLHRoaXMuZW1pdFBhZ2luYXRpb25FdmVudCgpKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe3QubWRQYWdlT3B0aW9ucz90LmN1cnJlbnRTaXplPXQubWRQYWdlT3B0aW9ucy5pbmNsdWRlcyh0LmN1cnJlbnRTaXplKT90LmN1cnJlbnRTaXplOnQubWRQYWdlT3B0aW9uc1swXTp0LmN1cnJlbnRTaXplPTAsdC5jYW5GaXJlRXZlbnRzPSEwfSkpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxMCksYT1pKG8pLHI9bigzNikscz1pKHIpLGQ9XCJtZC10cmFuc2l0aW9uLW9mZlwiO2UuZGVmYXVsdD17bmFtZTpcIm1kLXRhYmxlLXJvd1wiLHByb3BzOnttZEF1dG9TZWxlY3Q6Qm9vbGVhbixtZFNlbGVjdGlvbjpCb29sZWFuLG1kSXRlbTpPYmplY3R9LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57cGFyZW50VGFibGU6e30saGVhZFJvdzohMSxjaGVja2JveDohMSxpbmRleDowLHV1aWQ6XCJtZHJvd191dWlkX1wiKygwLHMuZGVmYXVsdCkoKX19LGNvbXB1dGVkOntpc0Rpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMubWRTZWxlY3Rpb24mJiF0aGlzLmhlYWRSb3d9LGhhc1NlbGVjdGlvbjpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1kU2VsZWN0aW9ufHx0aGlzLmhlYWRSb3cmJnRoaXMucGFyZW50VGFibGUuaGFzUm93U2VsZWN0aW9ufSxjbGFzc2VzOmZ1bmN0aW9uKCl7cmV0dXJue1wibWQtc2VsZWN0ZWRcIjp0aGlzLmNoZWNrYm94fX19LHdhdGNoOnttZEl0ZW06ZnVuY3Rpb24odCxlKXt0aGlzLnBhcmVudFRhYmxlLmRhdGFbdGhpcy5pbmRleF09dGhpcy5tZEl0ZW0sdGhpcy5oYW5kbGVNdWx0aXBsZVNlbGVjdGlvbih0PT09ZSl9fSxtZXRob2RzOntzZXRSb3dTZWxlY3Rpb246ZnVuY3Rpb24odCxlKXt0aGlzLnBhcmVudFRhYmxlLnNldFJvd1NlbGVjdGlvbih0LGUpfSxoYW5kbGVTaW5nbGVTZWxlY3Rpb246ZnVuY3Rpb24odCl7dGhpcy5wYXJlbnRUYWJsZS5zZXRSb3dTZWxlY3Rpb24odCx0aGlzLm1kSXRlbSksdGhpcy5wYXJlbnRUYWJsZS4kY2hpbGRyZW5bMF0uY2hlY2tib3g9dGhpcy5wYXJlbnRUYWJsZS5udW1iZXJPZlNlbGVjdGVkPT09dGhpcy5wYXJlbnRUYWJsZS5udW1iZXJPZlJvd3N9LGhhbmRsZU11bHRpcGxlU2VsZWN0aW9uOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5wYXJlbnRUYWJsZS5udW1iZXJPZlJvd3M+MjUmJnRoaXMucGFyZW50VGFibGUuJGVsLmNsYXNzTGlzdC5hZGQoZCksdGhpcy5wYXJlbnRUYWJsZS4kY2hpbGRyZW4uZm9yRWFjaCgoZnVuY3Rpb24oZSl7ZS5jaGVja2JveD10fSkpLHRoaXMucGFyZW50VGFibGUuc2V0TXVsdGlwbGVSb3dTZWxlY3Rpb24odCksd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7cmV0dXJuIGUucGFyZW50VGFibGUuJGVsLmNsYXNzTGlzdC5yZW1vdmUoZCl9KSwxMDApfSxzZWxlY3Q6ZnVuY3Rpb24odCl7dGhpcy5oYXNTZWxlY3Rpb24mJih0aGlzLmhlYWRSb3c/dGhpcy5oYW5kbGVNdWx0aXBsZVNlbGVjdGlvbih0KTp0aGlzLmhhbmRsZVNpbmdsZVNlbGVjdGlvbih0KSx0aGlzLnBhcmVudFRhYmxlLmVtaXRTZWxlY3Rpb24oKSx0aGlzLiRlbWl0KHQ/XCJzZWxlY3RlZFwiOlwiZGVzZWxlY3RlZFwiLHQpKX0sYXV0b1NlbGVjdDpmdW5jdGlvbigpe3RoaXMubWRBdXRvU2VsZWN0JiZ0aGlzLmhhc1NlbGVjdGlvbiYmKHRoaXMuY2hlY2tib3g9IXRoaXMuY2hlY2tib3gsdGhpcy5oYW5kbGVTaW5nbGVTZWxlY3Rpb24odGhpcy5jaGVja2JveCksdGhpcy5wYXJlbnRUYWJsZS5lbWl0U2VsZWN0aW9uKCkpfSxzdGFydFRhYmxlUm93OmZ1bmN0aW9uKCl7aWYodGhpcy5wYXJlbnRUYWJsZT0oMCxhLmRlZmF1bHQpKHRoaXMuJHBhcmVudCxcIm1kLXRhYmxlXCIpLFwidGhlYWRcIj09PXRoaXMuJGVsLnBhcmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKXRoaXMuaGVhZFJvdz0hMDtlbHNle2lmKCF0aGlzLm1kSXRlbSYmdGhpcy5tZFNlbGVjdGlvbil0aHJvdyBuZXcgRXJyb3IoJ1lvdSBzaG91bGQgc2V0IHRoZSBtZC1pdGVtIHByb3BlcnR5IHdoZW4gdXNpbmcgbWRTZWxlY3Rpb24uIEV4YW1wbGU6IDxtZC10YWJsZS1yb3cgbWQtc2VsZWN0aW9uIDptZC1pdGVtPVwiSVRFTVwiIC4uLj4nKTt0aGlzLm1kU2VsZWN0aW9uJiYodGhpcy5wYXJlbnRUYWJsZS5oYXNSb3dTZWxlY3Rpb249ITApLHRoaXMucGFyZW50VGFibGUuZGF0YS5wdXNoKHRoaXMubWRJdGVtKX19fSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudFRhYmxlLnJlbW92ZVJvdyh0aGlzLm1kSXRlbSl9LG1vdW50ZWQ6ZnVuY3Rpb24oKXt0aGlzLnN0YXJ0VGFibGVSb3coKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMzYpLGE9aShvKSxyPW4oMTApLHM9aShyKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC10YWJcIixwcm9wczp7aWQ6W1N0cmluZyxOdW1iZXJdLG1kTGFiZWw6W1N0cmluZyxOdW1iZXJdLG1kSWNvbjpTdHJpbmcsbWRJY29uc2V0OlN0cmluZyxtZEFjdGl2ZTpCb29sZWFuLG1kRGlzYWJsZWQ6Qm9vbGVhbixtZE9wdGlvbnM6e2RlZmF1bHQ6dm9pZCAwfSxtZFRvb2x0aXA6U3RyaW5nLG1kVG9vbHRpcERlbGF5Ont0eXBlOlN0cmluZyxkZWZhdWx0OlwiMFwifSxtZFRvb2x0aXBEaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b21cIn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57bW91bnRlZDohMSx0YWJJZDp0aGlzLmlkfHxcInRhYi1cIisoMCxhLmRlZmF1bHQpKCksd2lkdGg6XCIwcHhcIixsZWZ0OlwiMHB4XCJ9fSx3YXRjaDp7bWRBY3RpdmU6ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVRhYkRhdGEoKX0sbWREaXNhYmxlZDpmdW5jdGlvbigpe3RoaXMudXBkYXRlVGFiRGF0YSgpfSxtZEljb246ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVRhYkRhdGEoKX0sbWRJY29uc2V0OmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVUYWJEYXRhKCl9LG1kT3B0aW9uczp7ZGVlcDohMCxoYW5kbGVyOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVUYWJEYXRhKCl9fSxtZExhYmVsOmZ1bmN0aW9uKCl7dGhpcy51cGRhdGVUYWJEYXRhKCl9LG1kVG9vbHRpcDpmdW5jdGlvbigpe3RoaXMudXBkYXRlVGFiRGF0YSgpfSxtZFRvb2x0aXBEZWxheTpmdW5jdGlvbigpe3RoaXMudXBkYXRlVGFiRGF0YSgpfSxtZFRvb2x0aXBEaXJlY3Rpb246ZnVuY3Rpb24oKXt0aGlzLnVwZGF0ZVRhYkRhdGEoKX19LGNvbXB1dGVkOntzdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm57d2lkdGg6dGhpcy53aWR0aCxsZWZ0OnRoaXMubGVmdH19fSxtZXRob2RzOntnZXRUYWJEYXRhOmZ1bmN0aW9uKCl7cmV0dXJue2lkOnRoaXMudGFiSWQsbGFiZWw6dGhpcy5tZExhYmVsLGljb246dGhpcy5tZEljb24saWNvbnNldDp0aGlzLm1kSWNvbnNldCxvcHRpb25zOnRoaXMubWRPcHRpb25zLGFjdGl2ZTp0aGlzLm1kQWN0aXZlLGRpc2FibGVkOnRoaXMubWREaXNhYmxlZCx0b29sdGlwOnRoaXMubWRUb29sdGlwLHRvb2x0aXBEZWxheTp0aGlzLm1kVG9vbHRpcERlbGF5LHRvb2x0aXBEaXJlY3Rpb246dGhpcy5tZFRvb2x0aXBEaXJlY3Rpb24scmVmOnRoaXN9fSx1cGRhdGVUYWJEYXRhOmZ1bmN0aW9uKCl7dGhpcy5wYXJlbnRUYWJzLnVwZGF0ZVRhYih0aGlzLmdldFRhYkRhdGEoKSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5nZXRUYWJEYXRhKCk7aWYodGhpcy5wYXJlbnRUYWJzPSgwLHMuZGVmYXVsdCkodGhpcy4kcGFyZW50LFwibWQtdGFic1wiKSwhdGhpcy5wYXJlbnRUYWJzKXRocm93IG5ldyBFcnJvcihcIllvdSBtdXN0IHdyYXAgdGhlIG1kLXRhYiBpbiBhIG1kLXRhYnNcIik7dGhpcy5tb3VudGVkPSEwLHRoaXMucGFyZW50VGFicy51cGRhdGVUYWIodCksdGhpcy5tZEFjdGl2ZSYmdGhpcy5wYXJlbnRUYWJzLnNldEFjdGl2ZVRhYih0KX0sYmVmb3JlRGVzdHJveTpmdW5jdGlvbigpe3RoaXMucGFyZW50VGFicy51bnJlZ2lzdGVyVGFiKHRoaXMuZ2V0VGFiRGF0YSgpKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkodCl7cmV0dXJuIHQmJnQuX19lc01vZHVsZT90OntkZWZhdWx0OnR9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBvPW4oMzgpLGE9aShvKSxyPW4oMjAyKSxzPWkociksZD1uKDEpLGw9aShkKSxjPW4oNTApLHU9aShjKTtlLmRlZmF1bHQ9e25hbWU6XCJtZC10YWJzXCIscHJvcHM6e21kRml4ZWQ6Qm9vbGVhbixtZENlbnRlcmVkOkJvb2xlYW4sbWRSaWdodDpCb29sZWFuLG1kTmF2aWdhdGlvbjp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1kRHluYW1pY0hlaWdodDp7dHlwZTpCb29sZWFuLGRlZmF1bHQ6ITB9LG1kRWxldmF0aW9uOnt0eXBlOltTdHJpbmcsTnVtYmVyXSxkZWZhdWx0OjB9fSxtaXhpbnM6W2wuZGVmYXVsdF0sZGF0YTpmdW5jdGlvbigpe3JldHVybnt0YWJMaXN0Ont9LGFjdGl2ZVRhYjpudWxsLGFjdGl2ZVRhYk51bWJlcjowLGhhc0ljb25zOiExLGhhc0xhYmVsOiExLGhhc05hdmlnYXRpb25TY3JvbGw6ITEsaXNOYXZpZ2F0aW9uT25TdGFydDohMCxpc05hdmlnYXRpb25PbkVuZDohMSx0cmFuc2l0aW9uQ29udHJvbDpudWxsLHRyYW5zaXRpb25PZmY6ITEsY29udGVudEhlaWdodDpcIjBweFwiLGNvbnRlbnRXaWR0aDpcIjBweFwifX0sY29tcHV0ZWQ6e3RhYkNsYXNzZXM6ZnVuY3Rpb24oKXtyZXR1cm57XCJtZC1keW5hbWljLWhlaWdodFwiOnRoaXMubWREeW5hbWljSGVpZ2h0LFwibWQtdHJhbnNpdGlvbi1vZmZcIjp0aGlzLnRyYW5zaXRpb25PZmZ9fSxuYXZpZ2F0aW9uQ2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWhhcy1pY29uXCI6dGhpcy5oYXNJY29ucyxcIm1kLWhhcy1sYWJlbFwiOnRoaXMuaGFzTGFiZWwsXCJtZC1maXhlZFwiOnRoaXMubWRGaXhlZCxcIm1kLXJpZ2h0XCI6IXRoaXMubWRDZW50ZXJlZCYmdGhpcy5tZFJpZ2h0LFwibWQtY2VudGVyZWRcIjp0aGlzLm1kQ2VudGVyZWR8fHRoaXMubWRGaXhlZCxcIm1kLWhhcy1uYXZpZ2F0aW9uLXNjcm9sbFwiOnRoaXMuaGFzTmF2aWdhdGlvblNjcm9sbH19LGluZGljYXRvckNsYXNzZXM6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmxhc3RJbmRpY2F0b3JOdW1iZXI+dGhpcy5hY3RpdmVUYWJOdW1iZXI7cmV0dXJuIHRoaXMubGFzdEluZGljYXRvck51bWJlcj10aGlzLmFjdGl2ZVRhYk51bWJlcix7XCJtZC10cmFuc2l0aW9uLW9mZlwiOnRoaXMudHJhbnNpdGlvbk9mZixcIm1kLXRvLXJpZ2h0XCI6IXQsXCJtZC10by1sZWZ0XCI6dH19LG5hdmlnYXRpb25MZWZ0QnV0dG9uQ2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWRpc2FibGVkXCI6dGhpcy5pc05hdmlnYXRpb25PblN0YXJ0fX0sbmF2aWdhdGlvblJpZ2h0QnV0dG9uQ2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWRpc2FibGVkXCI6dGhpcy5pc05hdmlnYXRpb25PbkVuZH19fSxtZXRob2RzOntnZXRIZWFkZXJDbGFzczpmdW5jdGlvbih0KXtyZXR1cm57XCJtZC1hY3RpdmVcIjp0aGlzLmFjdGl2ZVRhYj09PXQuaWQsXCJtZC1kaXNhYmxlZFwiOnQuZGlzYWJsZWR9fSxyZWdpc3RlclRhYjpmdW5jdGlvbih0KXt2YXIgZT0hMSxuPSEwLGk9ITEsbz12b2lkIDA7dHJ5e2Zvcih2YXIgcixkPSgwLHMuZGVmYXVsdCkoKDAsYS5kZWZhdWx0KSh0aGlzLnRhYkxpc3QpKTshKG49KHI9ZC5uZXh0KCkpLmRvbmUpO249ITApe3ZhciBsPXIudmFsdWU7aWYodGhpcy50YWJMaXN0W2xdLmFjdGl2ZSl7ZT0hMDticmVha319fWNhdGNoKHQpe2k9ITAsbz10fWZpbmFsbHl7dHJ5eyFuJiZkLnJldHVybiYmZC5yZXR1cm4oKX1maW5hbGx5e2lmKGkpdGhyb3cgb319dGhpcy4kc2V0KHRoaXMudGFiTGlzdCx0LmlkLHQpLGV8fCh0aGlzLnRhYkxpc3RbdC5pZF0uYWN0aXZlPSEwKX0sdW5yZWdpc3RlclRhYjpmdW5jdGlvbih0KXt0aGlzLiRkZWxldGUodGhpcy50YWJMaXN0LHQuaWQpfSx1cGRhdGVUYWI6ZnVuY3Rpb24odCl7aWYodGhpcy5yZWdpc3RlclRhYih0KSx0LmFjdGl2ZSlpZih0LmRpc2FibGVkKXtpZigoMCxhLmRlZmF1bHQpKHRoaXMudGFiTGlzdCkubGVuZ3RoKXt2YXIgZT0oMCxhLmRlZmF1bHQpKHRoaXMudGFiTGlzdCksbj1lLmluZGV4T2YodC5pZCkrMSxpPWVbbl07aT90aGlzLnNldEFjdGl2ZVRhYih0aGlzLnRhYkxpc3RbaV0pOnRoaXMuc2V0QWN0aXZlVGFiKHRoaXMudGFiTGlzdFswXSl9fWVsc2UgdGhpcy5zZXRBY3RpdmVUYWIodCl9LG9ic2VydmVFbGVtZW50Q2hhbmdlczpmdW5jdGlvbigpe3RoaXMucGFyZW50T2JzZXJ2ZXI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIoKDAsdS5kZWZhdWx0KSh0aGlzLmNhbGN1bGF0ZU9uV2F0Y2gsNTApKSx0aGlzLnBhcmVudE9ic2VydmVyLm9ic2VydmUodGhpcy4kcmVmcy50YWJDb250ZW50LHtjaGlsZExpc3Q6ITAsYXR0cmlidXRlczohMCxzdWJ0cmVlOiEwfSl9LGdldFRhYkluZGV4OmZ1bmN0aW9uKHQpe3ZhciBlPSgwLGEuZGVmYXVsdCkodGhpcy50YWJMaXN0KTtyZXR1cm4gZS5pbmRleE9mKHQpfSxjYWxjdWxhdGVJbmRpY2F0b3JQb3M6ZnVuY3Rpb24oKXtpZih0aGlzLiRyZWZzLnRhYkhlYWRlciYmdGhpcy4kcmVmcy50YWJIZWFkZXJbdGhpcy5hY3RpdmVUYWJOdW1iZXJdKXt2YXIgdD10aGlzLiRlbC5vZmZzZXRXaWR0aCxlPXRoaXMuJHJlZnMudGFiSGVhZGVyW3RoaXMuYWN0aXZlVGFiTnVtYmVyXSxuPWUub2Zmc2V0TGVmdC10aGlzLiRyZWZzLnRhYnNDb250YWluZXIuc2Nyb2xsTGVmdCxpPXQtbi1lLm9mZnNldFdpZHRoO3RoaXMuJHJlZnMuaW5kaWNhdG9yLnN0eWxlLmxlZnQ9bitcInB4XCIsdGhpcy4kcmVmcy5pbmRpY2F0b3Iuc3R5bGUucmlnaHQ9aStcInB4XCJ9fSxjYWxjdWxhdGVUYWJzV2lkdGhBbmRQb3NpdGlvbjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJGVsLm9mZnNldFdpZHRoLGU9MDt0aGlzLmNvbnRlbnRXaWR0aD10KnRoaXMuYWN0aXZlVGFiTnVtYmVyK1wicHhcIjtmb3IodmFyIG4gaW4gdGhpcy50YWJMaXN0KXt2YXIgaT10aGlzLnRhYkxpc3Rbbl07aS5yZWYud2lkdGg9dCtcInB4XCIsaS5yZWYubGVmdD10KmUrXCJweFwiLGUrK319LGNhbGN1bGF0ZUNvbnRlbnRIZWlnaHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe2lmKCgwLGEuZGVmYXVsdCkodC50YWJMaXN0KS5sZW5ndGgpe3ZhciBlPXQudGFiTGlzdFt0LmFjdGl2ZVRhYl0ucmVmLiRlbC5vZmZzZXRIZWlnaHQ7dC5jb250ZW50SGVpZ2h0PWUrXCJweFwifX0pKX0sY2FsY3VsYXRlUG9zaXRpb246ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7dC5jYWxjdWxhdGVJbmRpY2F0b3JQb3MoKSx0LmNhbGN1bGF0ZVRhYnNXaWR0aEFuZFBvc2l0aW9uKCksdC5jYWxjdWxhdGVDb250ZW50SGVpZ2h0KCksdC5jaGVja05hdmlnYXRpb25TY3JvbGwoKX0pKX0sZGVib3VuY2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt3aW5kb3cuY2xlYXJUaW1lb3V0KHRoaXMudHJhbnNpdGlvbkNvbnRyb2wpLHRoaXMudHJhbnNpdGlvbkNvbnRyb2w9d2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC5jYWxjdWxhdGVQb3NpdGlvbigpLHQudHJhbnNpdGlvbk9mZj0hMX0pLDIwMCl9LGNhbGN1bGF0ZU9uV2F0Y2g6ZnVuY3Rpb24oKXt0aGlzLmNhbGN1bGF0ZVBvc2l0aW9uKCksdGhpcy5kZWJvdW5jZVRyYW5zaXRpb24oKX0sY2FsY3VsYXRlT25SZXNpemU6ZnVuY3Rpb24oKXt0aGlzLnRyYW5zaXRpb25PZmY9ITAsdGhpcy5jYWxjdWxhdGVPbldhdGNoKCl9LGNhbGN1bGF0ZVNjcm9sbFBvczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHJlZnMudGFic0NvbnRhaW5lcixlPXQuc2Nyb2xsTGVmdCxuPXQuc2Nyb2xsV2lkdGgsaT10LmNsaWVudFdpZHRoO3RoaXMuaXNOYXZpZ2F0aW9uT25TdGFydD1lPDMyLHRoaXMuaXNOYXZpZ2F0aW9uT25FbmQ9bi1lLTMyPGl9LGhhbmRsZU5hdmlnYXRpb25TY3JvbGw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKGZ1bmN0aW9uKCl7dC5jYWxjdWxhdGVJbmRpY2F0b3JQb3MoKSx0LmNhbGN1bGF0ZVNjcm9sbFBvcygpfSkpfSxjaGVja05hdmlnYXRpb25TY3JvbGw6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRyZWZzLnRhYnNDb250YWluZXIsZT10LnNjcm9sbFdpZHRoLG49dC5jbGllbnRXaWR0aDtcbnRoaXMuaGFzTmF2aWdhdGlvblNjcm9sbD1lPm59LHNldEFjdGl2ZVRhYjpmdW5jdGlvbih0KXt0aGlzLmhhc0ljb25zPSEhdC5pY29ufHwhIXQuaWNvbnNldCx0aGlzLmhhc0xhYmVsPSEhdC5sYWJlbCx0aGlzLmFjdGl2ZVRhYj10LmlkLHRoaXMuYWN0aXZlVGFiTnVtYmVyPXRoaXMuZ2V0VGFiSW5kZXgodGhpcy5hY3RpdmVUYWIpLHRoaXMuY2FsY3VsYXRlUG9zaXRpb24oKSx0aGlzLiRlbWl0KFwiY2hhbmdlXCIsdGhpcy5hY3RpdmVUYWJOdW1iZXIpfSxuYXZpZ2F0aW9uU2Nyb2xsTGVmdDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHJlZnMudGFic0NvbnRhaW5lcixlPXQuc2Nyb2xsTGVmdCxuPXQuY2xpZW50V2lkdGg7dGhpcy4kcmVmcy50YWJzQ29udGFpbmVyLnNjcm9sbExlZnQ9TWF0aC5tYXgoMCxlLW4pfSxuYXZpZ2F0aW9uU2Nyb2xsUmlnaHQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLiRyZWZzLnRhYnNDb250YWluZXIsZT10LnNjcm9sbExlZnQsbj10LmNsaWVudFdpZHRoLGk9dC5zY3JvbGxXaWR0aDt0aGlzLiRyZWZzLnRhYnNDb250YWluZXIuc2Nyb2xsTGVmdD1NYXRoLm1pbihpLGUrbil9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLiRuZXh0VGljaygoZnVuY3Rpb24oKXtpZih0Lm9ic2VydmVFbGVtZW50Q2hhbmdlcygpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdC5jYWxjdWxhdGVPblJlc2l6ZSksKDAsYS5kZWZhdWx0KSh0LnRhYkxpc3QpLmxlbmd0aCYmIXQuYWN0aXZlVGFiKXt2YXIgZT0oMCxhLmRlZmF1bHQpKHQudGFiTGlzdClbMF07dC5zZXRBY3RpdmVUYWIodC50YWJMaXN0W2VdKX19KSl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnBhcmVudE9ic2VydmVyJiZ0aGlzLnBhcmVudE9ic2VydmVyLmRpc2Nvbm5lY3QoKSx3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLHRoaXMuY2FsY3VsYXRlT25SZXNpemUpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89bigxKSxhPWkobyk7ZS5kZWZhdWx0PXtuYW1lOlwibWQtdG9vbGJhclwiLG1peGluczpbYS5kZWZhdWx0XX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSk7dmFyIG89big2NyksYT1pKG8pLHI9big0MSkscz1pKHIpO2UuZGVmYXVsdD17bmFtZTpcIm1kLXRvb2x0aXBcIixwcm9wczp7bWREaXJlY3Rpb246e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJib3R0b21cIn0sbWREZWxheTp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcIjBcIn19LGRhdGE6ZnVuY3Rpb24oKXtyZXR1cm57YWN0aXZlOiExLHBhcmVudENsYXNzOm51bGwsdHJhbnNpdGlvbk9mZjohMSx0b3BQb3NpdGlvbjohMSxsZWZ0UG9zaXRpb246ITF9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3ZhciB0PXtcIm1kLWFjdGl2ZVwiOnRoaXMuYWN0aXZlLFwibWQtdHJhbnNpdGlvbi1vZmZcIjp0aGlzLnRyYW5zaXRpb25PZmYsXCJtZC10b29sdGlwLXRvcFwiOlwidG9wXCI9PT10aGlzLm1kRGlyZWN0aW9uLFwibWQtdG9vbHRpcC1yaWdodFwiOlwicmlnaHRcIj09PXRoaXMubWREaXJlY3Rpb24sXCJtZC10b29sdGlwLWJvdHRvbVwiOlwiYm90dG9tXCI9PT10aGlzLm1kRGlyZWN0aW9uLFwibWQtdG9vbHRpcC1sZWZ0XCI6XCJsZWZ0XCI9PT10aGlzLm1kRGlyZWN0aW9ufTtyZXR1cm4gdGhpcy5wYXJlbnRDbGFzcyYmKHRbdGhpcy5wYXJlbnRDbGFzc109ITApLHR9LHN0eWxlOmZ1bmN0aW9uKCl7cmV0dXJue1widHJhbnNpdGlvbi1kZWxheVwiOnRoaXMubWREZWxheStcIm1zXCIsdG9wOnRoaXMudG9wUG9zaXRpb24rXCJweFwiLGxlZnQ6dGhpcy5sZWZ0UG9zaXRpb24rXCJweFwifX19LHdhdGNoOnttZERpcmVjdGlvbjpmdW5jdGlvbigpe3RoaXMuY2FsY3VsYXRlVG9vbHRpcFBvc2l0aW9uKCl9fSxtZXRob2RzOntyZW1vdmVUb29sdGlwczpmdW5jdGlvbigpe3RoaXMudG9vbHRpcEVsZW1lbnQucGFyZW50Tm9kZSYmKHRoaXMudG9vbHRpcEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLmRlZmF1bHQsdGhpcy5yZW1vdmVUb29sdGlwcyksdGhpcy50b29sdGlwRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMudG9vbHRpcEVsZW1lbnQpKX0sY2FsY3VsYXRlVG9vbHRpcFBvc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLGU9e307c3dpdGNoKHRoaXMubWREaXJlY3Rpb24pe2Nhc2VcInRvcFwiOmUudG9wPXQudG9wLXRoaXMuJGVsLm9mZnNldEhlaWdodCxlLmxlZnQ9dC5sZWZ0K3Qud2lkdGgvMjticmVhaztjYXNlXCJyaWdodFwiOmUudG9wPXQudG9wLGUubGVmdD10LmxlZnQrdC53aWR0aDticmVhaztjYXNlXCJib3R0b21cIjplLnRvcD10LmJvdHRvbSxlLmxlZnQ9dC5sZWZ0K3Qud2lkdGgvMjticmVhaztjYXNlXCJsZWZ0XCI6ZS50b3A9dC50b3AsZS5sZWZ0PXQubGVmdC10aGlzLiRlbC5vZmZzZXRXaWR0aDticmVhaztkZWZhdWx0OmNvbnNvbGUud2FybihcIkludmFsaWQgXCIrdGhpcy5tZERpcmVjdGlvbitcIiBvcHRpb24gdG8gbWQtZGlyZWN0aW9uIG9wdGlvblwiKX10aGlzLnRvcFBvc2l0aW9uPWUudG9wLHRoaXMubGVmdFBvc2l0aW9uPWUubGVmdH0sZ2VuZXJhdGVUb29sdGlwQ2xhc3NlczpmdW5jdGlvbigpe3ZhciB0PVtdO1tdLmNvbmNhdCgoMCxhLmRlZmF1bHQpKHRoaXMucGFyZW50RWxlbWVudC5jbGFzc0xpc3QpKS5mb3JFYWNoKChmdW5jdGlvbihlKXtlLmluZGV4T2YoXCJtZC1cIik+PTAmJlwibWQtYWN0aXZlXCIhPT1lJiZ0LnB1c2goZStcIi10b29sdGlwXCIpfSkpLHRoaXMucGFyZW50Q2xhc3M9dC5qb2luKFwiIFwiKX0sb3BlbjpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5yZW1vdmVUb29sdGlwcygpLHRoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe2RvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodC50b29sdGlwRWxlbWVudCksZ2V0Q29tcHV0ZWRTdHlsZSh0LnRvb2x0aXBFbGVtZW50KS50b3AsdC50cmFuc2l0aW9uT2ZmPSEwLHQuZ2VuZXJhdGVUb29sdGlwQ2xhc3NlcygpLHQuY2FsY3VsYXRlVG9vbHRpcFBvc2l0aW9uKCksd2luZG93LnNldFRpbWVvdXQoKGZ1bmN0aW9uKCl7dC50cmFuc2l0aW9uT2ZmPSExLHQuYWN0aXZlPSEwfSksMTApfSkpfSxjbG9zZTpmdW5jdGlvbigpe3RoaXMuYWN0aXZlPSExLHRoaXMudG9vbHRpcEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLmRlZmF1bHQsdGhpcy5yZW1vdmVUb29sdGlwcyksdGhpcy50b29sdGlwRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHMuZGVmYXVsdCx0aGlzLnJlbW92ZVRvb2x0aXBzKX19LG1vdW50ZWQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe3QudG9vbHRpcEVsZW1lbnQ9dC4kZWwsdC5wYXJlbnRFbGVtZW50PXQudG9vbHRpcEVsZW1lbnQucGFyZW50Tm9kZSx0LiRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQuJGVsKSx0LnBhcmVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZW50ZXJcIix0Lm9wZW4pLHQucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIix0Lm9wZW4pLHQucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLHQuY2xvc2UpLHQucGFyZW50RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLHQuY2xvc2UpfSkpfSxiZWZvcmVEZXN0cm95OmZ1bmN0aW9uKCl7dGhpcy5hY3RpdmU9ITEsdGhpcy5yZW1vdmVUb29sdGlwcygpLHRoaXMucGFyZW50RWxlbWVudCYmKHRoaXMucGFyZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2VlbnRlclwiLHRoaXMub3BlbiksdGhpcy5wYXJlbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLHRoaXMub3BlbiksdGhpcy5wYXJlbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWxlYXZlXCIsdGhpcy5jbG9zZSksdGhpcy5wYXJlbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJibHVyXCIsdGhpcy5jbG9zZSkpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZS5kZWZhdWx0PXtuYW1lOlwibWQtd2hpdGVmcmFtZVwiLHByb3BzOnttZEVsZXZhdGlvbjp7dHlwZTpbU3RyaW5nLE51bWJlcl0sZGVmYXVsdDoxfSxtZFRhZzp7dHlwZTpTdHJpbmcsZGVmYXVsdDpcImRpdlwifX0sY29tcHV0ZWQ6e2NsYXNzZXM6ZnVuY3Rpb24oKXt2YXIgdD1wYXJzZUludCh0aGlzLm1kRWxldmF0aW9uLDEwKSxlPVwibWQtd2hpdGVmcmFtZS1cIjtyZXR1cm4gaXNOYU4odCl8fFwibnVtYmVyXCIhPXR5cGVvZiB0P3RoaXMubWRFbGV2YXRpb24uaW5kZXhPZihcImRwXCIpPi0xJiYoZSs9dGhpcy5tZEVsZXZhdGlvbik6KGUrPXQsZSs9XCJkcFwiKSxlfX0scmVuZGVyOmZ1bmN0aW9uKHQpe3JldHVybiB0KHRoaXMubWRUYWcse3N0YXRpY0NsYXNzOlwibWQtd2hpdGVmcmFtZVwiLGNsYXNzOnRoaXMuY2xhc3Nlc30sdGhpcy4kc2xvdHMuZGVmYXVsdCl9fSx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgaT1mdW5jdGlvbih0LGUsbil7XCJzdGFydFwiPT09ZT8odC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsbiksdC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLG4pKToodC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLG4pLHQuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsbikpfSxvPWZ1bmN0aW9uKHQsZSxuKXtcInN0YXJ0XCI9PT1lPyh0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIixuKSx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsbikpOih0LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsbiksdC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIixuKSl9O2UuZGVmYXVsdD17bmFtZTpcIm1kLWluay1yaXBwbGVcIixwcm9wczp7bWREaXNhYmxlZDpCb29sZWFufSxkYXRhOmZ1bmN0aW9uKCl7cmV0dXJue21vdW50ZWQ6ITEscmlwcGxlRWxlbWVudDpudWxsLHBhcmVudEVsZW1lbnQ6bnVsbCxwYXJlbnREaW1lbnNpb25zOnt3aWR0aDpudWxsLGhlaWdodDpudWxsLHRvcDpudWxsLGxlZnQ6bnVsbH0sYXdhaXRpbmdDb21wbGV0ZTohMSxoYXNDb21wbGV0ZWQ6ITEsZmFkZU91dDohMSxhY3RpdmU6ITF9fSxjb21wdXRlZDp7Y2xhc3NlczpmdW5jdGlvbigpe3JldHVybntcIm1kLWZhZGVvdXRcIjp0aGlzLmZhZGVPdXQsXCJtZC1hY3RpdmVcIjp0aGlzLmFjdGl2ZX19LHN0eWxlczpmdW5jdGlvbigpe3JldHVybnt3aWR0aDp0aGlzLnBhcmVudERpbWVuc2lvbnMud2lkdGgsaGVpZ2h0OnRoaXMucGFyZW50RGltZW5zaW9ucy5oZWlnaHQsdG9wOnRoaXMucGFyZW50RGltZW5zaW9ucy50b3AsbGVmdDp0aGlzLnBhcmVudERpbWVuc2lvbnMubGVmdH19LGRpc2FibGVkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWREaXNhYmxlZHx8IXRoaXMuJG1hdGVyaWFsLmlua1JpcHBsZX19LHdhdGNoOntkaXNhYmxlZDpmdW5jdGlvbih0KXt0P3RoaXMuZGVzdHJveSgpOnRoaXMuaW5pdCgpfX0sbWV0aG9kczp7Y2hlY2tBdmFpbGFibGVQb3NpdGlvbnM6ZnVuY3Rpb24odCl7dmFyIGU9W1wicmVsYXRpdmVcIixcImFic29sdXRlXCIsXCJmaXhlZFwiXTtyZXR1cm4gZS5pbmRleE9mKGdldENvbXB1dGVkU3R5bGUodCkucG9zaXRpb24pPi0xfSxnZXRDbG9zZXN0UG9zaXRpb25lZFBhcmVudDpmdW5jdGlvbih0KXt2YXIgZT10JiZ0LnBhcmVudE5vZGU7cmV0dXJuISghZXx8XCJib2R5XCI9PT1lLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkmJih0aGlzLmNoZWNrQXZhaWxhYmxlUG9zaXRpb25zKHQpP3Q6dGhpcy5nZXRDbG9zZXN0UG9zaXRpb25lZFBhcmVudChlKSl9LGdldFBhcmVudFNpemU6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLnBhcmVudEVsZW1lbnQ7cmV0dXJuIE1hdGgucm91bmQoTWF0aC5tYXgodC5vZmZzZXRXaWR0aCx0Lm9mZnNldEhlaWdodCkpK1wicHhcIn0sZ2V0Q2xpY2tQb3NpdGlvbjpmdW5jdGlvbih0KXtpZih0aGlzLiRyZWZzLnJpcHBsZSl7dmFyIGU9dGhpcy5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49dC5wYWdlWSxpPXQucGFnZVg7cmV0dXJuXCJ0b3VjaHN0YXJ0XCI9PT10LnR5cGUmJihuPXQuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVksaT10LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VYKSx7dG9wOm4tZS50b3AtdGhpcy4kcmVmcy5yaXBwbGUub2Zmc2V0SGVpZ2h0LzItZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ArXCJweFwiLGxlZnQ6aS1lLmxlZnQtdGhpcy4kcmVmcy5yaXBwbGUub2Zmc2V0V2lkdGgvMi1kb2N1bWVudC5ib2R5LnNjcm9sbExlZnQrXCJweFwifX1yZXR1cm4hMX0sc2V0RGltZW5zaW9uczpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZ2V0UGFyZW50U2l6ZSgpO3RoaXMucGFyZW50RGltZW5zaW9ucy53aWR0aD10LHRoaXMucGFyZW50RGltZW5zaW9ucy5oZWlnaHQ9dH0sc2V0UG9zaXRpb25zOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0Q2xpY2tQb3NpdGlvbih0KTtlJiYodGhpcy5wYXJlbnREaW1lbnNpb25zLnRvcD1lLnRvcCx0aGlzLnBhcmVudERpbWVuc2lvbnMubGVmdD1lLmxlZnQpfSxjbGVhclN0YXRlOmZ1bmN0aW9uKCl7dGhpcy5hY3RpdmU9ITEsdGhpcy5mYWRlT3V0PSExLHRoaXMuaGFzQ29tcGxldGVkPSExLHRoaXMuc2V0RGltZW5zaW9ucygpLHdpbmRvdy5jbGVhclRpbWVvdXQodGhpcy5hd2FpdGluZ0NvbXBsZXRlKSxvKGRvY3VtZW50LmJvZHksXCJlbmRcIix0aGlzLmVuZFJpcHBsZSl9LHN0YXJ0UmlwcGxlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7XCJ0b3VjaHN0YXJ0XCI9PT10LnR5cGU/dGhpcy5wcmV2aW91cy5wdXNoKFwidG91Y2hcIik6dGhpcy5wcmV2aW91cy5wdXNoKFwibW91c2VcIiksdGhpcy5wcmV2aW91cz10aGlzLnByZXZpb3VzLnNwbGljZSh0aGlzLnByZXZpb3VzLmxlbmd0aC0yLHRoaXMucHJldmlvdXMubGVuZ3RoKSx0aGlzLnByZXZpb3VzLmxlbmd0aD49MiYmXCJ0b3VjaFwiPT09dGhpcy5wcmV2aW91c1sxXSYmXCJtb3VzZVwiPT09dGhpcy5wcmV2aW91c1swXXx8KHRoaXMuY2xlYXJTdGF0ZSgpLHRoaXMuYXdhaXRpbmdDb21wbGV0ZT13aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXtlLmhhc0NvbXBsZXRlZD0hMH0pLDQwMCksaShkb2N1bWVudC5ib2R5LFwiZW5kXCIsdGhpcy5lbmRSaXBwbGUpLHRoaXMuJG5leHRUaWNrKChmdW5jdGlvbigpe2Uuc2V0UG9zaXRpb25zKHQpLGUuYWN0aXZlPSEwfSkpKX0sZW5kUmlwcGxlOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmhhc0NvbXBsZXRlZD90aGlzLmZhZGVPdXQ9ITA6dGhpcy5hd2FpdGluZ0NvbXBsZXRlPXdpbmRvdy5zZXRUaW1lb3V0KChmdW5jdGlvbigpe3QuZmFkZU91dD0hMH0pLDIwMCksbyhkb2N1bWVudC5ib2R5LFwiZW5kXCIsdGhpcy5lbmRSaXBwbGUpfSxyZWdpc3RlclRyaWdnZXJFdmVudDpmdW5jdGlvbigpe2kodGhpcy5wYXJlbnRFbGVtZW50LFwic3RhcnRcIix0aGlzLnN0YXJ0UmlwcGxlKX0sdW5yZWdpc3RlclRyaWdnZXJFdmVudDpmdW5jdGlvbigpe3RoaXMucGFyZW50RWxlbWVudCYmbyh0aGlzLnBhcmVudEVsZW1lbnQsXCJzdGFydFwiLHRoaXMuc3RhcnRSaXBwbGUpfSxpbml0OmZ1bmN0aW9uKCl7dGhpcy5yaXBwbGVFbGVtZW50PXRoaXMuJGVsLHRoaXMucGFyZW50RWxlbWVudD10aGlzLmdldENsb3Nlc3RQb3NpdGlvbmVkUGFyZW50KHRoaXMuJGVsLnBhcmVudE5vZGUpLHRoaXMucHJldmlvdXM9W1wibW91c2VcIl0sdGhpcy5wYXJlbnRFbGVtZW50Pyh0aGlzLnJpcHBsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnJpcHBsZUVsZW1lbnQpLHRoaXMucGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiLm1kLWluay1yaXBwbGVcIikubGVuZ3RoPjA/dGhpcy4kZGVzdHJveSgpOih0aGlzLnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5yaXBwbGVFbGVtZW50KSx0aGlzLnJlZ2lzdGVyVHJpZ2dlckV2ZW50KCksdGhpcy5zZXREaW1lbnNpb25zKCkpKTp0aGlzLiRkZXN0cm95KCl9LGRlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLnJpcHBsZUVsZW1lbnQmJnRoaXMucmlwcGxlRWxlbWVudC5wYXJlbnROb2RlJiYodGhpcy51bnJlZ2lzdGVyVHJpZ2dlckV2ZW50KCksdGhpcy5yaXBwbGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5yaXBwbGVFbGVtZW50KSl9fSxtb3VudGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt3aW5kb3cuc2V0VGltZW91dCgoZnVuY3Rpb24oKXt0LmRpc2FibGVkP3QuZGVzdHJveSgpOnQuaW5pdCgpLHQuJG5leHRUaWNrKChmdW5jdGlvbigpe3QubW91bnRlZD0hMH0pKX0pLDEwMCl9LGJlZm9yZURlc3Ryb3k6ZnVuY3Rpb24oKXt0aGlzLmRlc3Ryb3koKX19LHQuZXhwb3J0cz1lLmRlZmF1bHR9KSwoZnVuY3Rpb24odCxlLG4pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGUuZGVmYXVsdD17bmFtZTpcIm1kLXRoZW1lXCIscHJvcHM6e21kVGFnOlN0cmluZyxtZE5hbWU6e3R5cGU6U3RyaW5nLGRlZmF1bHQ6XCJkZWZhdWx0XCJ9fSxyZW5kZXI6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMubWRUYWd8fHRoaXMuJHNsb3RzLmRlZmF1bHQubGVuZ3RoPjE/dCh0aGlzLm1kVGFnfHxcImRpdlwiLHtzdGF0aWNDbGFzczp0aGlzLiRtYXRlcmlhbC5wcmVmaXgrdGhpcy5tZE5hbWV9LHRoaXMuJHNsb3RzLmRlZmF1bHQpOnRoaXMuJHNsb3RzLmRlZmF1bHRbMF19LHdhdGNoOnttZE5hbWU6ZnVuY3Rpb24odCl7dGhpcy4kbWF0ZXJpYWwudXNlVGhlbWUodCl9fSxiZWZvcmVNb3VudDpmdW5jdGlvbigpe3ZhciB0PXRoaXMubWROYW1lO3QmJnRoaXMuJG1hdGVyaWFsLnVzZVRoZW1lKHQpfX0sdC5leHBvcnRzPWUuZGVmYXVsdH0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oMjEwKSxfX2VzTW9kdWxlOiEwfX0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oMjExKSxfX2VzTW9kdWxlOiEwfX0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oMjEyKSxfX2VzTW9kdWxlOiEwfX0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oMjEzKSxfX2VzTW9kdWxlOiEwfX0pLChmdW5jdGlvbih0LGUsbil7dC5leHBvcnRzPXtkZWZhdWx0Om4oMjE0KSxfX2VzTW9kdWxlOiEwfX0pLChmdW5jdGlvbih0LGUsbil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0KXtyZXR1cm4gdCYmdC5fX2VzTW9kdWxlP3Q6e2RlZmF1bHQ6dH19ZS5fX2VzTW9kdWxlPSEwO3ZhciBvPW4oMjA0KSxhPWkobyk7ZS5kZWZhdWx0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSBpbiB0PygwLGEuZGVmYXVsdCkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6dFtlXT1uLHR9fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lLl9fZXNNb2R1bGU9ITA7dmFyIG89big1MSksYT1pKG8pO2UuZGVmYXVsdD1hLmRlZmF1bHR8fGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPWFyZ3VtZW50c1tlXTtmb3IodmFyIGkgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixpKSYmKHRbaV09bltpXSl9cmV0dXJuIHR9fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1lLl9fZXNNb2R1bGU9ITA7dmFyIG89bigyMDYpLGE9aShvKSxyPW4oMjA1KSxzPWkociksZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzLmRlZmF1bHQmJlwic3ltYm9sXCI9PXR5cGVvZiBhLmRlZmF1bHQ/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2Ygcy5kZWZhdWx0JiZ0LmNvbnN0cnVjdG9yPT09cy5kZWZhdWx0JiZ0IT09cy5kZWZhdWx0LnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fTtlLmRlZmF1bHQ9XCJmdW5jdGlvblwiPT10eXBlb2Ygcy5kZWZhdWx0JiZcInN5bWJvbFwiPT09ZChhLmRlZmF1bHQpP2Z1bmN0aW9uKHQpe3JldHVyblwidW5kZWZpbmVkXCI9PXR5cGVvZiB0P1widW5kZWZpbmVkXCI6ZCh0KX06ZnVuY3Rpb24odCl7cmV0dXJuIHQmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHMuZGVmYXVsdCYmdC5jb25zdHJ1Y3Rvcj09PXMuZGVmYXVsdCYmdCE9PXMuZGVmYXVsdC5wcm90b3R5cGU/XCJzeW1ib2xcIjpcInVuZGVmaW5lZFwiPT10eXBlb2YgdD9cInVuZGVmaW5lZFwiOmQodCl9fSksKGZ1bmN0aW9uKHQsZSxuKXtuKDY4KSxuKDQ5KSx0LmV4cG9ydHM9bigyMjEpfSksKGZ1bmN0aW9uKHQsZSxuKXtuKDIyMiksdC5leHBvcnRzPTkwMDcxOTkyNTQ3NDA5OTF9KSwoZnVuY3Rpb24odCxlLG4pe24oMjIzKTt2YXIgaT1uKDQpLk9iamVjdDt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBpLmRlZmluZVByb3BlcnR5KHQsZSxuKX19KSwoZnVuY3Rpb24odCxlLG4pe24oMjI1KSxuKDIyNCksbigyMjYpLG4oMjI3KSx0LmV4cG9ydHM9big0KS5TeW1ib2x9KSwoZnVuY3Rpb24odCxlLG4pe24oNDkpLG4oNjgpLHQuZXhwb3J0cz1uKDYzKS5mKFwiaXRlcmF0b3JcIil9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMTgpLG89big0NSksYT1uKDQwKTt0LmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9aSh0KSxuPW8uZjtpZihuKWZvcih2YXIgcixzPW4odCksZD1hLmYsbD0wO3MubGVuZ3RoPmw7KWQuY2FsbCh0LHI9c1tsKytdKSYmZS5wdXNoKHIpO3JldHVybiBlfX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigyNCk7dC5leHBvcnRzPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKHQpe3JldHVyblwiQXJyYXlcIj09aSh0KX19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMTgpLG89big3KTt0LmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG4sYT1vKHQpLHI9aShhKSxzPXIubGVuZ3RoLGQ9MDtzPmQ7KWlmKGFbbj1yW2QrK11dPT09ZSlyZXR1cm4gbn19KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMjApKFwibWV0YVwiKSxvPW4oNiksYT1uKDgpLHI9big5KS5mLHM9MCxkPU9iamVjdC5pc0V4dGVuc2libGV8fGZ1bmN0aW9uKCl7cmV0dXJuITB9LGw9IW4oNSkoKGZ1bmN0aW9uKCl7cmV0dXJuIGQoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSl9KSksYz1mdW5jdGlvbih0KXtyKHQsaSx7dmFsdWU6e2k6XCJPXCIrICsrcyx3Ont9fX0pfSx1PWZ1bmN0aW9uKHQsZSl7aWYoIW8odCkpcmV0dXJuXCJzeW1ib2xcIj09dHlwZW9mIHQ/dDooXCJzdHJpbmdcIj09dHlwZW9mIHQ/XCJTXCI6XCJQXCIpK3Q7aWYoIWEodCxpKSl7aWYoIWQodCkpcmV0dXJuXCJGXCI7aWYoIWUpcmV0dXJuXCJFXCI7Yyh0KX1yZXR1cm4gdFtpXS5pfSxtPWZ1bmN0aW9uKHQsZSl7aWYoIWEodCxpKSl7aWYoIWQodCkpcmV0dXJuITA7aWYoIWUpcmV0dXJuITE7Yyh0KX1yZXR1cm4gdFtpXS53fSxmPWZ1bmN0aW9uKHQpe3JldHVybiBsJiZwLk5FRUQmJmQodCkmJiFhKHQsaSkmJmModCksdH0scD10LmV4cG9ydHM9e0tFWTppLE5FRUQ6ITEsZmFzdEtleTp1LGdldFdlYWs6bSxvbkZyZWV6ZTpmfX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9big0MCksbz1uKDE3KSxhPW4oNykscj1uKDI3KSxzPW4oOCksZD1uKDMwKSxsPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7ZS5mPW4oMyk/bDpmdW5jdGlvbih0LGUpe2lmKHQ9YSh0KSxlPXIoZSwhMCksZCl0cnl7cmV0dXJuIGwodCxlKX1jYXRjaCh0KXt9aWYocyh0LGUpKXJldHVybiBvKCFpLmYuY2FsbCh0LGUpLHRbZV0pfX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9big3KSxvPW4oNzcpLmYsYT17fS50b1N0cmluZyxyPVwib2JqZWN0XCI9PXR5cGVvZiB3aW5kb3cmJndpbmRvdyYmT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM/T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KTpbXSxzPWZ1bmN0aW9uKHQpe3RyeXtyZXR1cm4gbyh0KX1jYXRjaCh0KXtyZXR1cm4gci5zbGljZSgpfX07dC5leHBvcnRzLmY9ZnVuY3Rpb24odCl7cmV0dXJuIHImJlwiW29iamVjdCBXaW5kb3ddXCI9PWEuY2FsbCh0KT9zKHQpOm8oaSh0KSl9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDEzKSxvPW4oNTcpO3QuZXhwb3J0cz1uKDQpLmdldEl0ZXJhdG9yPWZ1bmN0aW9uKHQpe3ZhciBlPW8odCk7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSl0aHJvdyBUeXBlRXJyb3IodCtcIiBpcyBub3QgaXRlcmFibGUhXCIpO3JldHVybiBpKGUuY2FsbCh0KSl9fSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDE2KTtpKGkuUyxcIk51bWJlclwiLHtNQVhfU0FGRV9JTlRFR0VSOjkwMDcxOTkyNTQ3NDA5OTF9KX0pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigxNik7aShpLlMraS5GKiFuKDMpLFwiT2JqZWN0XCIse2RlZmluZVByb3BlcnR5Om4oOSkuZn0pfSksKGZ1bmN0aW9uKHQsZSl7fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1uKDIpLG89big4KSxhPW4oMykscj1uKDE2KSxzPW4oNDcpLGQ9bigyMTgpLktFWSxsPW4oNSksYz1uKDIyKSx1PW4oMzcpLG09bigyMCksZj1uKDEyKSxwPW4oNjMpLGg9big2MiksYj1uKDIxNyksdj1uKDIxNSksRT1uKDIxNiksZz1uKDEzKSxfPW4oNyksQz1uKDI3KSxNPW4oMTcpLFQ9big0NCksQT1uKDIyMCkseD1uKDIxOSksTj1uKDkpLHk9bigxOCksTz14LmYsUz1OLmYsUj1BLmYsdz1pLlN5bWJvbCxrPWkuSlNPTixQPWsmJmsuc3RyaW5naWZ5LEg9XCJwcm90b3R5cGVcIixMPWYoXCJfaGlkZGVuXCIpLCQ9ZihcInRvUHJpbWl0aXZlXCIpLEk9e30ucHJvcGVydHlJc0VudW1lcmFibGUsQj1jKFwic3ltYm9sLXJlZ2lzdHJ5XCIpLEQ9YyhcInN5bWJvbHNcIiksRj1jKFwib3Atc3ltYm9sc1wiKSxqPU9iamVjdFtIXSxXPVwiZnVuY3Rpb25cIj09dHlwZW9mIHcsWT1pLlFPYmplY3QsVj0hWXx8IVlbSF18fCFZW0hdLmZpbmRDaGlsZCxVPWEmJmwoKGZ1bmN0aW9uKCl7cmV0dXJuIDchPVQoUyh7fSxcImFcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIFModGhpcyxcImFcIix7dmFsdWU6N30pLmF9fSkpLmF9KSk/ZnVuY3Rpb24odCxlLG4pe3ZhciBpPU8oaixlKTtpJiZkZWxldGUgaltlXSxTKHQsZSxuKSxpJiZ0IT09aiYmUyhqLGUsaSl9OlMsej1mdW5jdGlvbih0KXt2YXIgZT1EW3RdPVQod1tIXSk7cmV0dXJuIGUuX2s9dCxlfSxHPVcmJlwic3ltYm9sXCI9PXR5cGVvZiB3Lml0ZXJhdG9yP2Z1bmN0aW9uKHQpe3JldHVyblwic3ltYm9sXCI9PXR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHd9LHE9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0PT09aiYmcShGLGUsbiksZyh0KSxlPUMoZSwhMCksZyhuKSxvKEQsZSk/KG4uZW51bWVyYWJsZT8obyh0LEwpJiZ0W0xdW2VdJiYodFtMXVtlXT0hMSksbj1UKG4se2VudW1lcmFibGU6TSgwLCExKX0pKToobyh0LEwpfHxTKHQsTCxNKDEse30pKSx0W0xdW2VdPSEwKSxVKHQsZSxuKSk6Uyh0LGUsbil9LEs9ZnVuY3Rpb24odCxlKXtnKHQpO2Zvcih2YXIgbixpPXYoZT1fKGUpKSxvPTAsYT1pLmxlbmd0aDthPm87KXEodCxuPWlbbysrXSxlW25dKTtyZXR1cm4gdH0sWD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lP1QodCk6SyhUKHQpLGUpfSxKPWZ1bmN0aW9uKHQpe3ZhciBlPUkuY2FsbCh0aGlzLHQ9Qyh0LCEwKSk7cmV0dXJuISh0aGlzPT09aiYmbyhELHQpJiYhbyhGLHQpKSYmKCEoZXx8IW8odGhpcyx0KXx8IW8oRCx0KXx8byh0aGlzLEwpJiZ0aGlzW0xdW3RdKXx8ZSl9LFE9ZnVuY3Rpb24odCxlKXtpZih0PV8odCksZT1DKGUsITApLHQhPT1qfHwhbyhELGUpfHxvKEYsZSkpe3ZhciBuPU8odCxlKTtyZXR1cm4hbnx8IW8oRCxlKXx8byh0LEwpJiZ0W0xdW2VdfHwobi5lbnVtZXJhYmxlPSEwKSxufX0sWj1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj1SKF8odCkpLGk9W10sYT0wO24ubGVuZ3RoPmE7KW8oRCxlPW5bYSsrXSl8fGU9PUx8fGU9PWR8fGkucHVzaChlKTtyZXR1cm4gaX0sdHQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBlLG49dD09PWosaT1SKG4/RjpfKHQpKSxhPVtdLHI9MDtpLmxlbmd0aD5yOykhbyhELGU9aVtyKytdKXx8biYmIW8oaixlKXx8YS5wdXNoKERbZV0pO3JldHVybiBhfTtXfHwodz1mdW5jdGlvbigpe2lmKHRoaXMgaW5zdGFuY2VvZiB3KXRocm93IFR5cGVFcnJvcihcIlN5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciFcIik7dmFyIHQ9bShhcmd1bWVudHMubGVuZ3RoPjA/YXJndW1lbnRzWzBdOnZvaWQgMCksZT1mdW5jdGlvbihuKXt0aGlzPT09aiYmZS5jYWxsKEYsbiksbyh0aGlzLEwpJiZvKHRoaXNbTF0sdCkmJih0aGlzW0xdW3RdPSExKSxVKHRoaXMsdCxNKDEsbikpfTtyZXR1cm4gYSYmViYmVShqLHQse2NvbmZpZ3VyYWJsZTohMCxzZXQ6ZX0pLHoodCl9LHMod1tIXSxcInRvU3RyaW5nXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2t9KSkseC5mPVEsTi5mPXEsbig3NykuZj1BLmY9WixuKDQwKS5mPUosbig0NSkuZj10dCxhJiYhbigzOSkmJnMoaixcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsSiwhMCkscC5mPWZ1bmN0aW9uKHQpe3JldHVybiB6KGYodCkpfSkscihyLkcrci5XK3IuRiohVyx7U3ltYm9sOnd9KTtmb3IodmFyIGV0PVwiaGFzSW5zdGFuY2UsaXNDb25jYXRTcHJlYWRhYmxlLGl0ZXJhdG9yLG1hdGNoLHJlcGxhY2Usc2VhcmNoLHNwZWNpZXMsc3BsaXQsdG9QcmltaXRpdmUsdG9TdHJpbmdUYWcsdW5zY29wYWJsZXNcIi5zcGxpdChcIixcIiksbnQ9MDtldC5sZW5ndGg+bnQ7KWYoZXRbbnQrK10pO2Zvcih2YXIgZXQ9eShmLnN0b3JlKSxudD0wO2V0Lmxlbmd0aD5udDspaChldFtudCsrXSk7cihyLlMrci5GKiFXLFwiU3ltYm9sXCIse2ZvcjpmdW5jdGlvbih0KXtyZXR1cm4gbyhCLHQrPVwiXCIpP0JbdF06Qlt0XT13KHQpfSxrZXlGb3I6ZnVuY3Rpb24odCl7aWYoRyh0KSlyZXR1cm4gYihCLHQpO3Rocm93IFR5cGVFcnJvcih0K1wiIGlzIG5vdCBhIHN5bWJvbCFcIil9LHVzZVNldHRlcjpmdW5jdGlvbigpe1Y9ITB9LHVzZVNpbXBsZTpmdW5jdGlvbigpe1Y9ITF9fSkscihyLlMrci5GKiFXLFwiT2JqZWN0XCIse2NyZWF0ZTpYLGRlZmluZVByb3BlcnR5OnEsZGVmaW5lUHJvcGVydGllczpLLGdldE93blByb3BlcnR5RGVzY3JpcHRvcjpRLGdldE93blByb3BlcnR5TmFtZXM6WixnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6dHR9KSxrJiZyKHIuUytyLkYqKCFXfHxsKChmdW5jdGlvbigpe3ZhciB0PXcoKTtyZXR1cm5cIltudWxsXVwiIT1QKFt0XSl8fFwie31cIiE9UCh7YTp0fSl8fFwie31cIiE9UChPYmplY3QodCkpfSkpKSxcIkpTT05cIix7c3RyaW5naWZ5OmZ1bmN0aW9uKHQpe2lmKHZvaWQgMCE9PXQmJiFHKHQpKXtmb3IodmFyIGUsbixpPVt0XSxvPTE7YXJndW1lbnRzLmxlbmd0aD5vOylpLnB1c2goYXJndW1lbnRzW28rK10pO3JldHVybiBlPWlbMV0sXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKG49ZSksIW4mJkUoZSl8fChlPWZ1bmN0aW9uKHQsZSl7aWYobiYmKGU9bi5jYWxsKHRoaXMsdCxlKSksIUcoZSkpcmV0dXJuIGV9KSxpWzFdPWUsUC5hcHBseShrLGkpfX19KSx3W0hdWyRdfHxuKDExKSh3W0hdLCQsd1tIXS52YWx1ZU9mKSx1KHcsXCJTeW1ib2xcIiksdShNYXRoLFwiTWF0aFwiLCEwKSx1KGkuSlNPTixcIkpTT05cIiwhMCl9KSwoZnVuY3Rpb24odCxlLG4pe24oNjIpKFwiYXN5bmNJdGVyYXRvclwiKX0pLChmdW5jdGlvbih0LGUsbil7big2MikoXCJvYnNlcnZhYmxlXCIpfSksKGZ1bmN0aW9uKHQsZSl7RWxlbWVudC5wcm90b3R5cGUuc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZHx8KEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQ9ZnVuY3Rpb24odCl7dD0wPT09YXJndW1lbnRzLmxlbmd0aHx8ISF0O3ZhciBlPXRoaXMucGFyZW50Tm9kZSxuPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCksaT1wYXJzZUludChuLmdldFByb3BlcnR5VmFsdWUoXCJib3JkZXItdG9wLXdpZHRoXCIpKSxvPXBhcnNlSW50KG4uZ2V0UHJvcGVydHlWYWx1ZShcImJvcmRlci1sZWZ0LXdpZHRoXCIpKSxhPXRoaXMub2Zmc2V0VG9wLWUub2Zmc2V0VG9wPGUuc2Nyb2xsVG9wLHI9dGhpcy5vZmZzZXRUb3AtZS5vZmZzZXRUb3ArdGhpcy5jbGllbnRIZWlnaHQtaT5lLnNjcm9sbFRvcCtlLmNsaWVudEhlaWdodCxzPXRoaXMub2Zmc2V0TGVmdC1lLm9mZnNldExlZnQ8ZS5zY3JvbGxMZWZ0LGQ9dGhpcy5vZmZzZXRMZWZ0LWUub2Zmc2V0TGVmdCt0aGlzLmNsaWVudFdpZHRoLW8+ZS5zY3JvbGxMZWZ0K2UuY2xpZW50V2lkdGgsbD1hJiYhcjsoYXx8cikmJnQmJihlLnNjcm9sbFRvcD10aGlzLm9mZnNldFRvcC1lLm9mZnNldFRvcC1lLmNsaWVudEhlaWdodC8yLWkrdGhpcy5jbGllbnRIZWlnaHQvMiksKHN8fGQpJiZ0JiYoZS5zY3JvbGxMZWZ0PXRoaXMub2Zmc2V0TGVmdC1lLm9mZnNldExlZnQtZS5jbGllbnRXaWR0aC8yLW8rdGhpcy5jbGllbnRXaWR0aC8yKSwoYXx8cnx8c3x8ZCkmJiF0JiZ0aGlzLnNjcm9sbEludG9WaWV3KGwpfSl9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1hdmF0YXIubWQtcHJpbWFyeS5tZC1hdmF0YXItaWNvbntiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtYXZhdGFyLm1kLXByaW1hcnkubWQtYXZhdGFyLWljb24gLm1kLWljb257Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjk5OTk5fS5USEVNRV9OQU1FLm1kLWF2YXRhci5tZC1hY2NlbnQubWQtYXZhdGFyLWljb257YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtYXZhdGFyLm1kLWFjY2VudC5tZC1hdmF0YXItaWNvbiAubWQtaWNvbntjb2xvcjpBQ0NFTlQtQ09OVFJBU1QtMC45OTk5OX0uVEhFTUVfTkFNRS5tZC1hdmF0YXIubWQtd2Fybi5tZC1hdmF0YXItaWNvbntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1J9LlRIRU1FX05BTUUubWQtYXZhdGFyLm1kLXdhcm4ubWQtYXZhdGFyLWljb24gLm1kLWljb257Y29sb3I6V0FSTi1DT05UUkFTVC0wLjk5OTk5fVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1maXhlZHtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1J9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1maXhlZCAubWQtYm90dG9tLWJhci1pdGVte2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC41NH0uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLWZpeGVkIC5tZC1ib3R0b20tYmFyLWl0ZW06aG92ZXI6bm90KFtkaXNhYmxlZF0pOm5vdCgubWQtYWN0aXZlKXtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuODd9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1maXhlZCAubWQtYm90dG9tLWJhci1pdGVtLm1kLWFjdGl2ZXtjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtZml4ZWQubWQtYWNjZW50IC5tZC1ib3R0b20tYmFyLWl0ZW0ubWQtYWN0aXZle2NvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLWZpeGVkLm1kLXdhcm4gLm1kLWJvdHRvbS1iYXItaXRlbS5tZC1hY3RpdmV7Y29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLWZpeGVkLm1kLXRyYW5zcGFyZW50IC5tZC1ib3R0b20tYmFyLWl0ZW0ubWQtYWN0aXZle2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1zaGlmdHtiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1I7Y29sb3I6UFJJTUFSWS1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLXNoaWZ0IC5tZC1ib3R0b20tYmFyLWl0ZW17Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtc2hpZnQgLm1kLWJvdHRvbS1iYXItaXRlbTpob3Zlcjpub3QoW2Rpc2FibGVkXSk6bm90KC5tZC1hY3RpdmUpe2NvbG9yOlBSSU1BUlktQ09OVFJBU1QtMC44N30uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLXNoaWZ0IC5tZC1ib3R0b20tYmFyLWl0ZW0ubWQtYWN0aXZle2NvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1zaGlmdC5tZC1hY2NlbnR7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1zaGlmdC5tZC1hY2NlbnQgLm1kLWJvdHRvbS1iYXItaXRlbXtjb2xvcjpBQ0NFTlQtQ09OVFJBU1QtMC41NH0uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLXNoaWZ0Lm1kLWFjY2VudCAubWQtYm90dG9tLWJhci1pdGVtOmhvdmVyOm5vdChbZGlzYWJsZWRdKTpub3QoLm1kLWFjdGl2ZSl7Y29sb3I6QUNDRU5ULUNPTlRSQVNULTAuODd9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1zaGlmdC5tZC1hY2NlbnQgLm1kLWJvdHRvbS1iYXItaXRlbS5tZC1hY3RpdmV7Y29sb3I6QUNDRU5ULUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtc2hpZnQubWQtd2FybntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1J9LlRIRU1FX05BTUUubWQtYm90dG9tLWJhci5tZC1zaGlmdC5tZC13YXJuIC5tZC1ib3R0b20tYmFyLWl0ZW17Y29sb3I6V0FSTi1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtc2hpZnQubWQtd2FybiAubWQtYm90dG9tLWJhci1pdGVtOmhvdmVyOm5vdChbZGlzYWJsZWRdKTpub3QoLm1kLWFjdGl2ZSl7Y29sb3I6V0FSTi1DT05UUkFTVC0wLjg3fS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtc2hpZnQubWQtd2FybiAubWQtYm90dG9tLWJhci1pdGVtLm1kLWFjdGl2ZXtjb2xvcjpXQVJOLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtc2hpZnQubWQtdHJhbnNwYXJlbnR7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLXNoaWZ0Lm1kLXRyYW5zcGFyZW50IC5tZC1ib3R0b20tYmFyLWl0ZW17Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLWJvdHRvbS1iYXIubWQtc2hpZnQubWQtdHJhbnNwYXJlbnQgLm1kLWJvdHRvbS1iYXItaXRlbTpob3Zlcjpub3QoW2Rpc2FibGVkXSk6bm90KC5tZC1hY3RpdmUpe2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC44N30uVEhFTUVfTkFNRS5tZC1ib3R0b20tYmFyLm1kLXNoaWZ0Lm1kLXRyYW5zcGFyZW50IC5tZC1ib3R0b20tYmFyLWl0ZW0ubWQtYWN0aXZle2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1R9XFxuXCJ9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXJhaXNlZDpub3QoLm1kLWljb24tYnV0dG9uKXtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNUO2JhY2tncm91bmQtY29sb3I6QkFDS0dST1VORC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXJhaXNlZDpub3QoLm1kLWljb24tYnV0dG9uKTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1ItMjAwfS5USEVNRV9OQU1FLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSkubWQtcmFpc2VkLm1kLWljb24tYnV0dG9uOm5vdCgubWQtcmFpc2VkKXtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSkubWQtZmFie2NvbG9yOkFDQ0VOVC1DT05UUkFTVDtiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLWZhYjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUi02MDB9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC1mYWIubWQtY2xlYW57Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVDtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1J9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC1mYWIubWQtY2xlYW46aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTE9SLTIwMH0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnk6bm90KC5tZC1pY29uLWJ1dHRvbil7Y29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtcmFpc2VkLC5USEVNRV9OQU1FLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSkubWQtcHJpbWFyeS5tZC1mYWJ7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTE9SO2NvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLXJhaXNlZDpob3ZlciwuVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXByaW1hcnkubWQtZmFiOmhvdmVye2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUi02MDB9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC1wcmltYXJ5Lm1kLWljb24tYnV0dG9uOm5vdCgubWQtcmFpc2VkKXtjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSkubWQtYWNjZW50Om5vdCgubWQtaWNvbi1idXR0b24pe2NvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLWFjY2VudC5tZC1yYWlzZWR7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1I7Y29sb3I6QUNDRU5ULUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSkubWQtYWNjZW50Lm1kLXJhaXNlZDpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUi02MDB9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC1hY2NlbnQubWQtaWNvbi1idXR0b246bm90KC5tZC1yYWlzZWQpe2NvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXdhcm46bm90KC5tZC1pY29uLWJ1dHRvbil7Y29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtcmFpc2VkLC5USEVNRV9OQU1FLm1kLWJ1dHRvbjpub3QoW2Rpc2FibGVkXSkubWQtd2Fybi5tZC1mYWJ7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SO2NvbG9yOldBUk4tQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuLm1kLXJhaXNlZDpob3ZlciwuVEhFTUVfTkFNRS5tZC1idXR0b246bm90KFtkaXNhYmxlZF0pLm1kLXdhcm4ubWQtZmFiOmhvdmVye2JhY2tncm91bmQtY29sb3I6V0FSTi1DT0xPUi02MDB9LlRIRU1FX05BTUUubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKS5tZC13YXJuLm1kLWljb24tYnV0dG9uOm5vdCgubWQtcmFpc2VkKXtjb2xvcjpXQVJOLUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPScuVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlIC5tZC1idXR0b246YWZ0ZXJ7d2lkdGg6MXB4O3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6MDtjb250ZW50OlwiIFwifS5USEVNRV9OQU1FLm1kLWJ1dHRvbi10b2dnbGUgLm1kLXRvZ2dsZXtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTQ7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuMjZ9LlRIRU1FX05BTUUubWQtYnV0dG9uLXRvZ2dsZSAubWQtdG9nZ2xlOmhvdmVyOm5vdChbZGlzYWJsZWRdKXtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4zOH0uVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlIC5tZC10b2dnbGUrLm1kLXRvZ2dsZTphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4xMn0uVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlLm1kLXByaW1hcnkgLm1kLXRvZ2dsZXtjb2xvcjpQUklNQVJZLUNPTlRSQVNUO2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlLm1kLXByaW1hcnkgLm1kLXRvZ2dsZTpob3Zlcjpub3QoW2Rpc2FibGVkXSl7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWJ1dHRvbi10b2dnbGUubWQtcHJpbWFyeSAubWQtdG9nZ2xlKy5tZC10b2dnbGU6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTE9SLTYwMH0uVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlLm1kLWFjY2VudCAubWQtdG9nZ2xle2NvbG9yOkFDQ0VOVC1DT05UUkFTVDtiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlLm1kLWFjY2VudCAubWQtdG9nZ2xlOmhvdmVyOm5vdChbZGlzYWJsZWRdKXtiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1idXR0b24tdG9nZ2xlLm1kLWFjY2VudCAubWQtdG9nZ2xlKy5tZC10b2dnbGU6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1ItNjAwfS5USEVNRV9OQU1FLm1kLWJ1dHRvbi10b2dnbGUubWQtd2FybiAubWQtdG9nZ2xle2NvbG9yOldBUk4tQ09OVFJBU1Q7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLWJ1dHRvbi10b2dnbGUubWQtd2FybiAubWQtdG9nZ2xlOmhvdmVyOm5vdChbZGlzYWJsZWRdKXtiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1J9LlRIRU1FX05BTUUubWQtYnV0dG9uLXRvZ2dsZS5tZC13YXJuIC5tZC10b2dnbGUrLm1kLXRvZ2dsZTphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1ItNjAwfS5USEVNRV9OQU1FLm1kLWJ1dHRvbi10b2dnbGUgW2Rpc2FibGVkXXtjb2xvcjpyZ2JhKDAsMCwwLDAuMjYpfS5USEVNRV9OQU1FLm1kLWJ1dHRvbi10b2dnbGUgW2Rpc2FibGVkXS5tZC10b2dnbGV7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjI7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuMjYpfVxcbid9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1jYXJke2JhY2tncm91bmQtY29sb3I6QkFDS0dST1VORC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnl7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTE9SO2NvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2FyZC5tZC1wcmltYXJ5IC5tZC1jYXJkLWhlYWRlciAubWQtaWNvbi1idXR0b246bm90KC5tZC1wcmltYXJ5KTpub3QoLm1kLXdhcm4pOm5vdCgubWQtYWNjZW50KSAubWQtaWNvbiwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnkgLm1kLWNhcmQtYWN0aW9ucyAubWQtaWNvbi1idXR0b246bm90KC5tZC1wcmltYXJ5KTpub3QoLm1kLXdhcm4pOm5vdCgubWQtYWNjZW50KSAubWQtaWNvbntjb2xvcjpQUklNQVJZLUNPTlRSQVNULTAuODd9LlRIRU1FX05BTUUubWQtY2FyZC5tZC1wcmltYXJ5IC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCBpbnB1dCwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnkgLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIHRleHRhcmVhe2NvbG9yOlBSSU1BUlktQ09OVFJBU1Q7dGV4dC1zaGFkb3c6MCAwIDAgUFJJTUFSWS1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnkgLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIGxhYmVsLC5USEVNRV9OQU1FLm1kLWNhcmQubWQtcHJpbWFyeSAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6UFJJTUFSWS1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnkgLm1kLWlucHV0LWNvbnRhaW5lcjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2FyZC5tZC1wcmltYXJ5IC5tZC1pbnB1dC1jb250YWluZXIgaW5wdXQsLlRIRU1FX05BTUUubWQtY2FyZC5tZC1wcmltYXJ5IC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWF7Y29sb3I6UFJJTUFSWS1DT05UUkFTVDt0ZXh0LXNoYWRvdzowIDAgMCBQUklNQVJZLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWNhcmQubWQtcHJpbWFyeSAubWQtaW5wdXQtY29udGFpbmVyIGlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLC5USEVNRV9OQU1FLm1kLWNhcmQubWQtcHJpbWFyeSAubWQtaW5wdXQtY29udGFpbmVyIHRleHRhcmVhOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOlBSSU1BUlktQ09OVFJBU1QtMC41NH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnkgLm1kLWlucHV0LWNvbnRhaW5lciBsYWJlbCwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXByaW1hcnkgLm1kLWlucHV0LWNvbnRhaW5lciAubWQtaWNvbjpub3QoLm1kLWljb24tZGVsZXRlKXtjb2xvcjpQUklNQVJZLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWNhcmQubWQtYWNjZW50e2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SO2NvbG9yOkFDQ0VOVC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLWFjY2VudCAubWQtY2FyZC1oZWFkZXIgLm1kLWljb24tYnV0dG9uOm5vdCgubWQtcHJpbWFyeSk6bm90KC5tZC13YXJuKTpub3QoLm1kLWFjY2VudCkgLm1kLWljb24sLlRIRU1FX05BTUUubWQtY2FyZC5tZC1hY2NlbnQgLm1kLWNhcmQtYWN0aW9ucyAubWQtaWNvbi1idXR0b246bm90KC5tZC1wcmltYXJ5KTpub3QoLm1kLXdhcm4pOm5vdCgubWQtYWNjZW50KSAubWQtaWNvbntjb2xvcjpBQ0NFTlQtQ09OVFJBU1QtMC44N30uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgaW5wdXQsLlRIRU1FX05BTUUubWQtY2FyZC5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIHRleHRhcmVhe2NvbG9yOkFDQ0VOVC1DT05UUkFTVDt0ZXh0LXNoYWRvdzowIDAgMCBBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2FyZC5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIGxhYmVsLC5USEVNRV9OQU1FLm1kLWNhcmQubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCAubWQtaWNvbjpub3QoLm1kLWljb24tZGVsZXRlKXtjb2xvcjpBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2FyZC5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lcjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyIGlucHV0LC5USEVNRV9OQU1FLm1kLWNhcmQubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWF7Y29sb3I6QUNDRU5ULUNPTlRSQVNUO3RleHQtc2hhZG93OjAgMCAwIEFDQ0VOVC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyIGlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLC5USEVNRV9OQU1FLm1kLWNhcmQubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWE6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6QUNDRU5ULUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtY2FyZC5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lciBsYWJlbCwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyIC5tZC1pY29uOm5vdCgubWQtaWNvbi1kZWxldGUpe2NvbG9yOkFDQ0VOVC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm57YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SO2NvbG9yOldBUk4tQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2FyZC5tZC13YXJuIC5tZC1jYXJkLWhlYWRlciAubWQtaWNvbi1idXR0b246bm90KC5tZC1wcmltYXJ5KTpub3QoLm1kLXdhcm4pOm5vdCgubWQtYWNjZW50KSAubWQtaWNvbiwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm4gLm1kLWNhcmQtYWN0aW9ucyAubWQtaWNvbi1idXR0b246bm90KC5tZC1wcmltYXJ5KTpub3QoLm1kLXdhcm4pOm5vdCgubWQtYWNjZW50KSAubWQtaWNvbntjb2xvcjpXQVJOLUNPTlRSQVNULTAuODd9LlRIRU1FX05BTUUubWQtY2FyZC5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCBpbnB1dCwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIHRleHRhcmVhe2NvbG9yOldBUk4tQ09OVFJBU1Q7dGV4dC1zaGFkb3c6MCAwIDAgV0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIGxhYmVsLC5USEVNRV9OQU1FLm1kLWNhcmQubWQtd2FybiAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6V0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lcjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2FyZC5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIgaW5wdXQsLlRIRU1FX05BTUUubWQtY2FyZC5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWF7Y29sb3I6V0FSTi1DT05UUkFTVDt0ZXh0LXNoYWRvdzowIDAgMCBXQVJOLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWNhcmQubWQtd2FybiAubWQtaW5wdXQtY29udGFpbmVyIGlucHV0Ojotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyLC5USEVNRV9OQU1FLm1kLWNhcmQubWQtd2FybiAubWQtaW5wdXQtY29udGFpbmVyIHRleHRhcmVhOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOldBUk4tQ09OVFJBU1QtMC41NH0uVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lciBsYWJlbCwuVEhFTUVfTkFNRS5tZC1jYXJkLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lciAubWQtaWNvbjpub3QoLm1kLWljb24tZGVsZXRlKXtjb2xvcjpXQVJOLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWNhcmQgLm1kLWNhcmQtaGVhZGVyIC5tZC1pY29uLWJ1dHRvbjpub3QoLm1kLXByaW1hcnkpOm5vdCgubWQtd2Fybik6bm90KC5tZC1hY2NlbnQpIC5tZC1pY29uLC5USEVNRV9OQU1FLm1kLWNhcmQgLm1kLWNhcmQtYWN0aW9ucyAubWQtaWNvbi1idXR0b246bm90KC5tZC1wcmltYXJ5KTpub3QoLm1kLXdhcm4pOm5vdCgubWQtYWNjZW50KSAubWQtaWNvbntjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtY2FyZD4ubWQtY2FyZC1hcmVhOmFmdGVye2JhY2tncm91bmQtY29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjEyfS5USEVNRV9OQU1FLm1kLWNhcmQgLm1kLWNhcmQtbWVkaWEtY292ZXIubWQtdGV4dC1zY3JpbSAubWQtYmFja2Ryb3B7YmFja2dyb3VuZDpsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCBCQUNLR1JPVU5ELUNPTlRSQVNULTAuMCAyMCUsIEJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4yNzUgNjYlLCBCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTUgMTAwJSl9LlRIRU1FX05BTUUubWQtY2FyZCAubWQtY2FyZC1tZWRpYS1jb3Zlci5tZC1zb2xpZCAubWQtY2FyZC1hcmVhe2JhY2tncm91bmQtY29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjR9LlRIRU1FX05BTUUubWQtY2FyZCAubWQtY2FyZC1tZWRpYS1jb3ZlciAubWQtY2FyZC1oZWFkZXIgLm1kLWljb24tYnV0dG9uOm5vdCgubWQtcHJpbWFyeSk6bm90KC5tZC13YXJuKTpub3QoLm1kLWFjY2VudCkgLm1kLWljb24sLlRIRU1FX05BTUUubWQtY2FyZCAubWQtY2FyZC1tZWRpYS1jb3ZlciAubWQtY2FyZC1hY3Rpb25zIC5tZC1pY29uLWJ1dHRvbjpub3QoLm1kLXByaW1hcnkpOm5vdCgubWQtd2Fybik6bm90KC5tZC1hY2NlbnQpIC5tZC1pY29ue2NvbG9yOiNmZmZ9LlRIRU1FX05BTUUubWQtY2FyZCAubWQtY2FyZC1leHBhbmQgLm1kLWNhcmQtYWN0aW9uc3tiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1J9XFxuXCJ9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1jaGVja2JveC5tZC1jaGVja2VkIC5tZC1jaGVja2JveC1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1I7Ym9yZGVyLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1jaGVja2JveC5tZC1jaGVja2VkIC5tZC1jaGVja2JveC1jb250YWluZXI6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOkFDQ0VOVC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jaGVja2JveCAubWQtaW5rLXJpcHBsZXtjb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtY2hlY2tib3ggLm1kLXJpcHBsZXtvcGFjaXR5Oi4yNn0uVEhFTUVfTkFNRS5tZC1jaGVja2JveC5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLWNoZWNrYm94LWNvbnRhaW5lcntiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1I7Ym9yZGVyLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtY2hlY2tib3gubWQtcHJpbWFyeS5tZC1jaGVja2VkIC5tZC1jaGVja2JveC1jb250YWluZXI6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtY2hlY2tib3gubWQtcHJpbWFyeSAubWQtaW5rLXJpcHBsZXtjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWNoZWNrYm94Lm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtY2hlY2tib3gtY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6V0FSTi1DT0xPUjtib3JkZXItY29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1jaGVja2JveC5tZC13YXJuLm1kLWNoZWNrZWQgLm1kLWNoZWNrYm94LWNvbnRhaW5lcjphZnRlcntib3JkZXItY29sb3I6V0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1jaGVja2JveC5tZC13YXJuIC5tZC1pbmstcmlwcGxle2NvbG9yOldBUk4tQ09MT1J9LlRIRU1FX05BTUUubWQtY2hlY2tib3gubWQtZGlzYWJsZWQubWQtY2hlY2tlZCAubWQtY2hlY2tib3gtY29udGFpbmVye2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjI2KTtib3JkZXItY29sb3I6dHJhbnNwYXJlbnR9LlRIRU1FX05BTUUubWQtY2hlY2tib3gubWQtZGlzYWJsZWQ6bm90KC5tZC1jaGVja2VkKSAubWQtY2hlY2tib3gtY29udGFpbmVye2JvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLDAuMjYpfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtY2hpcHtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4xMn0uVEhFTUVfTkFNRS5tZC1jaGlwLm1kLWRlbGV0YWJsZTpob3ZlciwuVEhFTUVfTkFNRS5tZC1jaGlwLm1kLWRlbGV0YWJsZTpmb2N1cywuVEhFTUVfTkFNRS5tZC1jaGlwLm1kLWVkaXRhYmxlOmhvdmVyLC5USEVNRV9OQU1FLm1kLWNoaXAubWQtZWRpdGFibGU6Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTQ7Y29sb3I6QkFDS0dST1VORC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1jaGlwLm1kLWRlbGV0YWJsZTpob3ZlciAubWQtZGVsZXRlLC5USEVNRV9OQU1FLm1kLWNoaXAubWQtZGVsZXRhYmxlOmZvY3VzIC5tZC1kZWxldGUsLlRIRU1FX05BTUUubWQtY2hpcC5tZC1lZGl0YWJsZTpob3ZlciAubWQtZGVsZXRlLC5USEVNRV9OQU1FLm1kLWNoaXAubWQtZWRpdGFibGU6Zm9jdXMgLm1kLWRlbGV0ZXtjb2xvcjpCQUNLR1JPVU5ELUNPTE9SfS5USEVNRV9OQU1FLm1kLWNoaXAgLm1kLWRlbGV0ZXtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuMzh9LlRIRU1FX05BTUUubWQtY2hpcCAubWQtZGVsZXRlIC5tZC1yaXBwbGV7Y29sb3I6QkFDS0dST1VORC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1jaGlwLm1kLXByaW1hcnl7Y29sb3I6UFJJTUFSWS1DT05UUkFTVDtiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtY2hpcC5tZC1hY2NlbnR7Y29sb3I6QUNDRU5ULUNPTlRSQVNUO2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FLm1kLWNoaXAubWQtd2Fybntjb2xvcjpXQVJOLUNPTlRSQVNUO2JhY2tncm91bmQtY29sb3I6V0FSTi1DT0xPUn1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FLm1kLWRpYWxvZy1jb250YWluZXIgLm1kLWRpYWxvZ3tiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1I7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIlwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtaWNvbi5tZC1wcmltYXJ5e2NvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtaWNvbi5tZC1hY2NlbnR7Y29sb3I6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FLm1kLWljb24ubWQtd2Fybntjb2xvcjpXQVJOLUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiXCJ9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtaW52YWxpZDphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1J9LlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWludmFsaWQgbGFiZWwsLlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWludmFsaWQgaW5wdXQsLlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWludmFsaWQgdGV4dGFyZWEsLlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWludmFsaWQgLm1kLWVycm9yLC5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1pbnZhbGlkIC5tZC1jb3VudCwuVEhFTUVfTkFNRS5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtaW52YWxpZCAubWQtaWNvbjpub3QoLm1kLWljb24tZGVsZXRlKXtjb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkLm1kLWlucHV0LWlubGluZSBsYWJlbHtjb2xvcjpyZ2JhKDAsMCwwLDAuNTQpfS5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkLm1kLWlucHV0LXJlcXVpcmVkIGxhYmVsOmFmdGVye2NvbG9yOldBUk4tQ09MT1J9LlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQ6YWZ0ZXJ7aGVpZ2h0OjJweDtiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgaW5wdXQsLlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgdGV4dGFyZWF7Y29sb3I6UFJJTUFSWS1DT0xPUjt0ZXh0LXNoYWRvdzowIDAgMCBCQUNLR1JPVU5ELUNPTlRSQVNUOy13ZWJraXQtdGV4dC1maWxsLWNvbG9yOnRyYW5zcGFyZW50fS5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIGxhYmVsLC5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIC5tZC1pY29uOm5vdCgubWQtaWNvbi1kZWxldGUpe2NvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWRpc2FibGVkIGxhYmVsLC5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1kaXNhYmxlZCBpbnB1dCwuVEhFTUVfTkFNRS5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZGlzYWJsZWQgdGV4dGFyZWEsLlRIRU1FX05BTUUubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWRpc2FibGVkIC5tZC1lcnJvciwuVEhFTUVfTkFNRS5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZGlzYWJsZWQgLm1kLWNvdW50LC5USEVNRV9OQU1FLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1kaXNhYmxlZCAubWQtaWNvbjpub3QoLm1kLWljb24tZGVsZXRlKSwuVEhFTUVfTkFNRS5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZGlzYWJsZWQgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4zOH1cXG5cIjtcbn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FLm1kLWxpc3R7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTE9SO2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtbGlzdC5tZC10cmFuc3BhcmVudHtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2NvbG9yOmluaGVyaXR9LlRIRU1FX05BTUUubWQtbGlzdCAubWQtbGlzdC1pdGVtIC5yb3V0ZXItbGluay1hY3RpdmUubWQtbGlzdC1pdGVtLWNvbnRhaW5lcntjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWxpc3QgLm1kLWxpc3QtaXRlbSAucm91dGVyLWxpbmstYWN0aXZlLm1kLWxpc3QtaXRlbS1jb250YWluZXI+Lm1kLWljb257Y29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1saXN0IC5tZC1saXN0LWl0ZW0ubWQtcHJpbWFyeSAubWQtbGlzdC1pdGVtLWNvbnRhaW5lcntjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWxpc3QgLm1kLWxpc3QtaXRlbS5tZC1wcmltYXJ5IC5tZC1saXN0LWl0ZW0tY29udGFpbmVyPi5tZC1pY29ue2NvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtbGlzdCAubWQtbGlzdC1pdGVtLm1kLWFjY2VudCAubWQtbGlzdC1pdGVtLWNvbnRhaW5lcntjb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtbGlzdCAubWQtbGlzdC1pdGVtLm1kLWFjY2VudCAubWQtbGlzdC1pdGVtLWNvbnRhaW5lcj4ubWQtaWNvbntjb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtbGlzdCAubWQtbGlzdC1pdGVtLm1kLXdhcm4gLm1kLWxpc3QtaXRlbS1jb250YWluZXJ7Y29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1saXN0IC5tZC1saXN0LWl0ZW0ubWQtd2FybiAubWQtbGlzdC1pdGVtLWNvbnRhaW5lcj4ubWQtaWNvbntjb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLWxpc3QgLm1kLWxpc3QtaXRlbS1leHBhbmQgLm1kLWxpc3QtaXRlbS1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTE9SfS5USEVNRV9OQU1FLm1kLWxpc3QgLm1kLWxpc3QtaXRlbS1leHBhbmQgLm1kLWxpc3QtaXRlbS1jb250YWluZXI6aG92ZXIsLlRIRU1FX05BTUUubWQtbGlzdCAubWQtbGlzdC1pdGVtLWV4cGFuZCAubWQtbGlzdC1pdGVtLWNvbnRhaW5lcjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMTUzLDE1MywxNTMsMC4yKX1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FLm1kLW1lbnUtY29udGVudCAubWQtbGlzdHtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1I7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1tZW51LWNvbnRlbnQgLm1kLWxpc3QgLm1kLW1lbnUtaXRlbTpob3ZlciAubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwuVEhFTUVfTkFNRS5tZC1tZW51LWNvbnRlbnQgLm1kLWxpc3QgLm1kLW1lbnUtaXRlbTpmb2N1cyAubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKSwuVEhFTUVfTkFNRS5tZC1tZW51LWNvbnRlbnQgLm1kLWxpc3QgLm1kLW1lbnUtaXRlbS5tZC1oaWdobGlnaHRlZCAubWQtYnV0dG9uOm5vdChbZGlzYWJsZWRdKXtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4xMn0uVEhFTUVfTkFNRS5tZC1tZW51LWNvbnRlbnQgLm1kLWxpc3QgLm1kLW1lbnUtaXRlbVtkaXNhYmxlZF17Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjM4fVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtYm9hcmRzPi5tZC1ib2FyZHMtbmF2aWdhdGlvbntiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fS5USEVNRV9OQU1FLm1kLWJvYXJkcz4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJvYXJkLWhlYWRlcntjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtYm9hcmRzPi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyLm1kLWFjdGl2ZSwuVEhFTUVfTkFNRS5tZC1ib2FyZHM+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1ib2FyZC1oZWFkZXI6Zm9jdXN7Y29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1ib2FyZHM+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1ib2FyZC1oZWFkZXIubWQtZGlzYWJsZWR7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjI2fS5USEVNRV9OQU1FLm1kLWJvYXJkcz4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJ1dHRvbntjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC10cmFuc3BhcmVudD4ubWQtYm9hcmRzLW5hdmlnYXRpb257YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0uVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtdHJhbnNwYXJlbnQ+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1ib2FyZC1oZWFkZXJ7Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC10cmFuc3BhcmVudD4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJvYXJkLWhlYWRlci5tZC1hY3RpdmUsLlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLXRyYW5zcGFyZW50Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyOmZvY3Vze2NvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLXRyYW5zcGFyZW50Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyLm1kLWRpc2FibGVke2NvbG9yOlBSSU1BUlktQ09OVFJBU1QtMC4yNn0uVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtdHJhbnNwYXJlbnQ+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1idXR0b257Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC1wcmltYXJ5Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbntiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLXByaW1hcnk+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1ib2FyZC1oZWFkZXJ7Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC1wcmltYXJ5Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyLm1kLWFjdGl2ZSwuVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtcHJpbWFyeT4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJvYXJkLWhlYWRlcjpmb2N1c3tjb2xvcjpQUklNQVJZLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC1wcmltYXJ5Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyLm1kLWRpc2FibGVke2NvbG9yOlBSSU1BUlktQ09OVFJBU1QtMC4yNn0uVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtcHJpbWFyeT4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJ1dHRvbntjb2xvcjpQUklNQVJZLUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLWFjY2VudD4ubWQtYm9hcmRzLW5hdmlnYXRpb257YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLWFjY2VudD4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJvYXJkLWhlYWRlcntjb2xvcjpBQ0NFTlQtQ09OVFJBU1QtMC41NH0uVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtYWNjZW50Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyLm1kLWFjdGl2ZSwuVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtYWNjZW50Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyOmZvY3Vze2NvbG9yOkFDQ0VOVC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtYWNjZW50Pi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyLm1kLWRpc2FibGVke2NvbG9yOkFDQ0VOVC1DT05UUkFTVC0wLjI2fS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC1hY2NlbnQ+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1idXR0b257Y29sb3I6QUNDRU5ULUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLXdhcm4+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9ue2JhY2tncm91bmQtY29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1ib2FyZHMubWQtd2Fybj4ubWQtYm9hcmRzLW5hdmlnYXRpb24gLm1kLWJvYXJkLWhlYWRlcntjb2xvcjpXQVJOLUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLXdhcm4+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1ib2FyZC1oZWFkZXIubWQtYWN0aXZlLC5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC13YXJuPi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYm9hcmQtaGVhZGVyOmZvY3Vze2NvbG9yOldBUk4tQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtYm9hcmRzLm1kLXdhcm4+Lm1kLWJvYXJkcy1uYXZpZ2F0aW9uIC5tZC1ib2FyZC1oZWFkZXIubWQtZGlzYWJsZWR7Y29sb3I6V0FSTi1DT05UUkFTVC0wLjI2fS5USEVNRV9OQU1FLm1kLWJvYXJkcy5tZC13YXJuPi5tZC1ib2FyZHMtbmF2aWdhdGlvbiAubWQtYnV0dG9ue2NvbG9yOldBUk4tQ09OVFJBU1QtMC41NH1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FLm1kLXByb2dyZXNze2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUi0wLjM4fS5USEVNRV9OQU1FLm1kLXByb2dyZXNzOm5vdCgubWQtaW5kZXRlcm1pbmF0ZSkgLm1kLXByb2dyZXNzLXRyYWNre2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1wcm9ncmVzcyAubWQtcHJvZ3Jlc3MtdHJhY2s6YWZ0ZXIsLlRIRU1FX05BTUUubWQtcHJvZ3Jlc3MgLm1kLXByb2dyZXNzLXRyYWNrOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtcHJvZ3Jlc3MubWQtYWNjZW50e2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SLTAuMzh9LlRIRU1FX05BTUUubWQtcHJvZ3Jlc3MubWQtYWNjZW50Om5vdCgubWQtaW5kZXRlcm1pbmF0ZSkgLm1kLXByb2dyZXNzLXRyYWNre2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FLm1kLXByb2dyZXNzLm1kLWFjY2VudCAubWQtcHJvZ3Jlc3MtdHJhY2s6YWZ0ZXIsLlRIRU1FX05BTUUubWQtcHJvZ3Jlc3MubWQtYWNjZW50IC5tZC1wcm9ncmVzcy10cmFjazpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtcHJvZ3Jlc3MubWQtd2FybntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1ItMC4zOH0uVEhFTUVfTkFNRS5tZC1wcm9ncmVzcy5tZC13YXJuOm5vdCgubWQtaW5kZXRlcm1pbmF0ZSkgLm1kLXByb2dyZXNzLXRyYWNre2JhY2tncm91bmQtY29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1wcm9ncmVzcy5tZC13YXJuIC5tZC1wcm9ncmVzcy10cmFjazphZnRlciwuVEhFTUVfTkFNRS5tZC1wcm9ncmVzcy5tZC13YXJuIC5tZC1wcm9ncmVzcy10cmFjazpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtcmFkaW8gLm1kLXJhZGlvLWNvbnRhaW5lcjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1yYWRpby5tZC1jaGVja2VkIC5tZC1yYWRpby1jb250YWluZXJ7Ym9yZGVyLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1yYWRpby5tZC1jaGVja2VkIC5tZC1pbmstcmlwcGxle2NvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1yYWRpby5tZC1jaGVja2VkIC5tZC1yaXBwbGV7b3BhY2l0eTouMzh9LlRIRU1FX05BTUUubWQtcmFkaW8ubWQtcHJpbWFyeSAubWQtcmFkaW8tY29udGFpbmVyOmFmdGVye2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1yYWRpby5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLXJhZGlvLWNvbnRhaW5lcntib3JkZXItY29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1yYWRpby5tZC1wcmltYXJ5Lm1kLWNoZWNrZWQgLm1kLWluay1yaXBwbGV7Y29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1yYWRpby5tZC13YXJuIC5tZC1yYWRpby1jb250YWluZXI6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLXJhZGlvLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtcmFkaW8tY29udGFpbmVye2JvcmRlci1jb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLXJhZGlvLm1kLXdhcm4ubWQtY2hlY2tlZCAubWQtaW5rLXJpcHBsZXtjb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLXJhZGlvLm1kLWRpc2FibGVkIC5tZC1yYWRpby1jb250YWluZXJ7Ym9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsMC4yNil9LlRIRU1FX05BTUUubWQtcmFkaW8ubWQtZGlzYWJsZWQgLm1kLXJhZGlvLWNvbnRhaW5lcjphZnRlcntiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMC4yNil9LlRIRU1FX05BTUUubWQtcmFkaW8ubWQtZGlzYWJsZWQubWQtY2hlY2tlZCAubWQtcmFkaW8tY29udGFpbmVye2JvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLDAuMjYpfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtcmF0aW5nLWJhcj4ubWQtZW1wdHktaWNvbiAubWQtaWNvbntjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuMjZ9LlRIRU1FX05BTUUubWQtcmF0aW5nLWJhcj4ubWQtZnVsbC1pY29uIC5tZC1pY29ue2NvbG9yOkJBQ0tHUk9VTkQtQ09OVFJBU1QtMC4zOH0uVEhFTUVfTkFNRS5tZC1yYXRpbmctYmFyLm1kLXByaW1hcnk+Lm1kLWZ1bGwtaWNvbiAubWQtaWNvbntjb2xvcjpQUklNQVJZLUNPTE9SfS5USEVNRV9OQU1FLm1kLXJhdGluZy1iYXIubWQtYWNjZW50Pi5tZC1mdWxsLWljb24gLm1kLWljb257Y29sb3I6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FLm1kLXJhdGluZy1iYXIubWQtd2Fybj4ubWQtZnVsbC1pY29uIC5tZC1pY29ue2NvbG9yOldBUk4tQ09MT1J9XFxuXCJ9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1zZWxlY3Q6YWZ0ZXJ7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLXNlbGVjdDphZnRlcntjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuMzh9LlRIRU1FX05BTUUubWQtc2VsZWN0LWNvbnRlbnQgLm1kLW1lbnUtaXRlbS5tZC1zZWxlY3RlZCwuVEhFTUVfTkFNRS5tZC1zZWxlY3QtY29udGVudCAubWQtbWVudS1pdGVtLm1kLWNoZWNrZWR7Y29sb3I6UFJJTUFSWS1DT0xPUn1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FLm1kLXNpZGVuYXYgLm1kLXNpZGVuYXYtY29udGVudHtiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1I7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FIC5tZC1zbmFja2JhciAubWQtaW5rLXJpcHBsZSwuVEhFTUVfTkFNRS5tZC1zbmFja2JhciAubWQtaW5rLXJpcHBsZXtjb2xvcjojZmZmfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiXCJ9KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9XCIuVEhFTUVfTkFNRS5tZC1zcGlubmVyIC5tZC1zcGlubmVyLXBhdGh7c3Ryb2tlOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtc3Bpbm5lci5tZC1hY2NlbnQgLm1kLXNwaW5uZXItcGF0aHtzdHJva2U6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FLm1kLXNwaW5uZXIubWQtd2FybiAubWQtc3Bpbm5lci1wYXRoe3N0cm9rZTpXQVJOLUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtc3RlcHBlciAubWQtc3RlcC1oZWFkZXIgLm1kLXN0ZXAtaWNvbiwuVEhFTUVfTkFNRS5tZC1zdGVwcGVyIC5tZC1zdGVwLWhlYWRlciAubWQtc3RlcC1udW1iZXJ7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVDtiYWNrZ3JvdW5kLWNvbG9yOiNiZGJkYmR9LlRIRU1FX05BTUUubWQtc3RlcHBlciAubWQtc3RlcC1oZWFkZXIubWQtcHJpbWFyeSAubWQtc3RlcC1pY29uLC5USEVNRV9OQU1FLm1kLXN0ZXBwZXIgLm1kLXN0ZXAtaGVhZGVyLm1kLXByaW1hcnkgLm1kLXN0ZXAtbnVtYmVyLC5USEVNRV9OQU1FLm1kLXN0ZXBwZXIgLm1kLXN0ZXAtaGVhZGVyLm1kLWFjdGl2ZSAubWQtc3RlcC1pY29uLC5USEVNRV9OQU1FLm1kLXN0ZXBwZXIgLm1kLXN0ZXAtaGVhZGVyLm1kLWFjdGl2ZSAubWQtc3RlcC1udW1iZXJ7Y29sb3I6UFJJTUFSWS1DT05UUkFTVDtiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtc3RlcHBlciAubWQtc3RlcC1oZWFkZXIubWQtYWNjZW50IC5tZC1zdGVwLWljb24sLlRIRU1FX05BTUUubWQtc3RlcHBlciAubWQtc3RlcC1oZWFkZXIubWQtYWNjZW50IC5tZC1zdGVwLW51bWJlcntjb2xvcjpBQ0NFTlQtQ09OVFJBU1Q7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtc3RlcHBlciAubWQtc3RlcC1oZWFkZXIubWQtd2FybiAubWQtc3RlcC1pY29uLC5USEVNRV9OQU1FLm1kLXN0ZXBwZXIgLm1kLXN0ZXAtaGVhZGVyLm1kLXdhcm4gLm1kLXN0ZXAtbnVtYmVye2NvbG9yOldBUk4tQ09OVFJBU1Q7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLXN0ZXBwZXIgLm1kLXN0ZXAtaGVhZGVyLm1kLWRpc2FibGVke2NvbG9yOiNiZGJkYmR9LlRIRU1FX05BTUUubWQtc3RlcHBlciAubWQtc3RlcC1oZWFkZXIubWQtZGlzYWJsZWQgLm1kLXN0ZXAtaWNvbiwuVEhFTUVfTkFNRS5tZC1zdGVwcGVyIC5tZC1zdGVwLWhlYWRlci5tZC1kaXNhYmxlZCAubWQtc3RlcC1udW1iZXJ7Y29sb3I6d2hpdGU7YmFja2dyb3VuZC1jb2xvcjojYmRiZGJkfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtc3ViaGVhZGVyLm1kLXByaW1hcnl7Y29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1zdWJoZWFkZXIubWQtYWNjZW50e2NvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1zdWJoZWFkZXIubWQtd2Fybntjb2xvcjpXQVJOLUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtc3dpdGNoLm1kLWNoZWNrZWQgLm1kLXN3aXRjaC1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1ItNTAwLTAuNX0uVEhFTUVfTkFNRS5tZC1zd2l0Y2gubWQtY2hlY2tlZCAubWQtc3dpdGNoLXRodW1ie2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FLm1kLXN3aXRjaC5tZC1jaGVja2VkIC5tZC1pbmstcmlwcGxle2NvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC1zd2l0Y2gubWQtY2hlY2tlZCAubWQtcmlwcGxle29wYWNpdHk6LjM4fS5USEVNRV9OQU1FLm1kLXN3aXRjaC5tZC1jaGVja2VkLm1kLXByaW1hcnkgLm1kLXN3aXRjaC1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTE9SLTUwMC0wLjV9LlRIRU1FX05BTUUubWQtc3dpdGNoLm1kLWNoZWNrZWQubWQtcHJpbWFyeSAubWQtc3dpdGNoLXRodW1ie2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC1zd2l0Y2gubWQtY2hlY2tlZC5tZC1wcmltYXJ5IC5tZC1pbmstcmlwcGxle2NvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtc3dpdGNoLm1kLWNoZWNrZWQubWQtd2FybiAubWQtc3dpdGNoLWNvbnRhaW5lcntiYWNrZ3JvdW5kLWNvbG9yOldBUk4tQ09MT1ItNTAwLTAuNX0uVEhFTUVfTkFNRS5tZC1zd2l0Y2gubWQtY2hlY2tlZC5tZC13YXJuIC5tZC1zd2l0Y2gtdGh1bWJ7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLXN3aXRjaC5tZC1jaGVja2VkLm1kLXdhcm4gLm1kLWluay1yaXBwbGV7Y29sb3I6V0FSTi1DT0xPUn0uVEhFTUVfTkFNRS5tZC1zd2l0Y2gubWQtZGlzYWJsZWQgLm1kLXN3aXRjaC1jb250YWluZXIsLlRIRU1FX05BTUUubWQtc3dpdGNoLm1kLWRpc2FibGVkLm1kLWNoZWNrZWQgLm1kLXN3aXRjaC1jb250YWluZXJ7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLDAuMTIpfS5USEVNRV9OQU1FLm1kLXN3aXRjaC5tZC1kaXNhYmxlZCAubWQtc3dpdGNoLXRodW1iLC5USEVNRV9OQU1FLm1kLXN3aXRjaC5tZC1kaXNhYmxlZC5tZC1jaGVja2VkIC5tZC1zd2l0Y2gtdGh1bWJ7YmFja2dyb3VuZC1jb2xvcjojYmRiZGJkfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtdGFibGUtY2FyZCAubWQtdG9vbGJhcntiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1I7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10YWJsZS1hbHRlcm5hdGUtaGVhZGVye2JhY2tncm91bmQtY29sb3I6QkFDS0dST1VORC1DT0xPUn0uVEhFTUVfTkFNRS5tZC10YWJsZS1hbHRlcm5hdGUtaGVhZGVyIC5tZC10b29sYmFye2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SLUExMDAtMC4yO2NvbG9yOkFDQ0VOVC1DT05UUkFTVC1BMTAwfS5USEVNRV9OQU1FLm1kLXRhYmxlLWFsdGVybmF0ZS1oZWFkZXIgLm1kLWNvdW50ZXJ7Y29sb3I6QUNDRU5ULUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtdGFicz4ubWQtdGFicy1uYXZpZ2F0aW9ue2JhY2tncm91bmQtY29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC10YWJzPi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXJ7Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLXRhYnM+Lm1kLXRhYnMtbmF2aWdhdGlvbiAubWQtdGFiLWhlYWRlci5tZC1hY3RpdmUsLlRIRU1FX05BTUUubWQtdGFicz4ubWQtdGFicy1uYXZpZ2F0aW9uIC5tZC10YWItaGVhZGVyOmZvY3Vze2NvbG9yOlBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdGFicz4ubWQtdGFicy1uYXZpZ2F0aW9uIC5tZC10YWItaGVhZGVyLm1kLWRpc2FibGVke2NvbG9yOlBSSU1BUlktQ09OVFJBU1QtMC4yNn0uVEhFTUVfTkFNRS5tZC10YWJzPi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1pbmRpY2F0b3J7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09MT1J9LlRIRU1FX05BTUUubWQtdGFicz4ubWQtdGFicy1uYXZpZ2F0aW9uIC5tZC10YWItaGVhZGVyLW5hdmlnYXRpb24tYnV0dG9ue2NvbG9yOlBSSU1BUlktQ09OVFJBU1QtMC41NDtiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtdGFicy5tZC10cmFuc3BhcmVudD4ubWQtdGFicy1uYXZpZ2F0aW9ue2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgQkFDS0dST1VORC1DT05UUkFTVC0wLjEyfS5USEVNRV9OQU1FLm1kLXRhYnMubWQtdHJhbnNwYXJlbnQ+Lm1kLXRhYnMtbmF2aWdhdGlvbiAubWQtdGFiLWhlYWRlcntjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtdGFicy5tZC10cmFuc3BhcmVudD4ubWQtdGFicy1uYXZpZ2F0aW9uIC5tZC10YWItaGVhZGVyLm1kLWFjdGl2ZSwuVEhFTUVfTkFNRS5tZC10YWJzLm1kLXRyYW5zcGFyZW50Pi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXI6Zm9jdXN7Y29sb3I6UFJJTUFSWS1DT0xPUn0uVEhFTUVfTkFNRS5tZC10YWJzLm1kLXRyYW5zcGFyZW50Pi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXIubWQtZGlzYWJsZWR7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjI2fS5USEVNRV9OQU1FLm1kLXRhYnMubWQtdHJhbnNwYXJlbnQ+Lm1kLXRhYnMtbmF2aWdhdGlvbiAubWQtdGFiLWluZGljYXRvcntiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1J9LlRIRU1FX05BTUUubWQtdGFicy5tZC1hY2NlbnQ+Lm1kLXRhYnMtbmF2aWdhdGlvbntiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUn0uVEhFTUVfTkFNRS5tZC10YWJzLm1kLWFjY2VudD4ubWQtdGFicy1uYXZpZ2F0aW9uIC5tZC10YWItaGVhZGVye2NvbG9yOkFDQ0VOVC1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLXRhYnMubWQtYWNjZW50Pi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXIubWQtYWN0aXZlLC5USEVNRV9OQU1FLm1kLXRhYnMubWQtYWNjZW50Pi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXI6Zm9jdXN7Y29sb3I6QUNDRU5ULUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRhYnMubWQtYWNjZW50Pi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXIubWQtZGlzYWJsZWR7Y29sb3I6QUNDRU5ULUNPTlRSQVNULTAuMjZ9LlRIRU1FX05BTUUubWQtdGFicy5tZC1hY2NlbnQ+Lm1kLXRhYnMtbmF2aWdhdGlvbiAubWQtdGFiLWluZGljYXRvcntiYWNrZ3JvdW5kLWNvbG9yOkJBQ0tHUk9VTkQtQ09MT1J9LlRIRU1FX05BTUUubWQtdGFicy5tZC13YXJuPi5tZC10YWJzLW5hdmlnYXRpb257YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTE9SfS5USEVNRV9OQU1FLm1kLXRhYnMubWQtd2Fybj4ubWQtdGFicy1uYXZpZ2F0aW9uIC5tZC10YWItaGVhZGVye2NvbG9yOldBUk4tQ09OVFJBU1QtMC41NH0uVEhFTUVfTkFNRS5tZC10YWJzLm1kLXdhcm4+Lm1kLXRhYnMtbmF2aWdhdGlvbiAubWQtdGFiLWhlYWRlci5tZC1hY3RpdmUsLlRIRU1FX05BTUUubWQtdGFicy5tZC13YXJuPi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1oZWFkZXI6Zm9jdXN7Y29sb3I6V0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10YWJzLm1kLXdhcm4+Lm1kLXRhYnMtbmF2aWdhdGlvbiAubWQtdGFiLWhlYWRlci5tZC1kaXNhYmxlZHtjb2xvcjpXQVJOLUNPTlRSQVNULTAuMjZ9LlRIRU1FX05BTUUubWQtdGFicy5tZC13YXJuPi5tZC10YWJzLW5hdmlnYXRpb24gLm1kLXRhYi1pbmRpY2F0b3J7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTE9SfVxcblwifSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPVwiLlRIRU1FX05BTUUubWQtdG9vbGJhcntiYWNrZ3JvdW5kLWNvbG9yOlBSSU1BUlktQ09MT1I7Y29sb3I6UFJJTUFSWS1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyIC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCBpbnB1dCwuVEhFTUVfTkFNRS5tZC10b29sYmFyIC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCB0ZXh0YXJlYXtjb2xvcjpQUklNQVJZLUNPTlRSQVNUO3RleHQtc2hhZG93OjAgMCAwIFBSSU1BUlktQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhciAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgbGFiZWwsLlRIRU1FX05BTUUubWQtdG9vbGJhciAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6UFJJTUFSWS1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyIC5tZC1pbnB1dC1jb250YWluZXI6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpQUklNQVJZLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIgLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dCwuVEhFTUVfTkFNRS5tZC10b29sYmFyIC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWF7Y29sb3I6UFJJTUFSWS1DT05UUkFTVDt0ZXh0LXNoYWRvdzowIDAgMCBQUklNQVJZLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIgLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwuVEhFTUVfTkFNRS5tZC10b29sYmFyIC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWE6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6UFJJTUFSWS1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLXRvb2xiYXIgLm1kLWlucHV0LWNvbnRhaW5lciBsYWJlbCwuVEhFTUVfTkFNRS5tZC10b29sYmFyIC5tZC1pbnB1dC1jb250YWluZXIgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6UFJJTUFSWS1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLWFjY2VudHtiYWNrZ3JvdW5kLWNvbG9yOkFDQ0VOVC1DT0xPUjtjb2xvcjpBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIGlucHV0LC5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCB0ZXh0YXJlYXtjb2xvcjpBQ0NFTlQtQ09OVFJBU1Q7dGV4dC1zaGFkb3c6MCAwIDAgQUNDRU5ULUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCBsYWJlbCwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6QUNDRU5ULUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXI6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dCwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyIHRleHRhcmVhe2NvbG9yOkFDQ0VOVC1DT05UUkFTVDt0ZXh0LXNoYWRvdzowIDAgMCBBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLWFjY2VudCAubWQtaW5wdXQtY29udGFpbmVyIHRleHRhcmVhOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOkFDQ0VOVC1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtYWNjZW50IC5tZC1pbnB1dC1jb250YWluZXIgbGFiZWwsLlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC1hY2NlbnQgLm1kLWlucHV0LWNvbnRhaW5lciAubWQtaWNvbjpub3QoLm1kLWljb24tZGVsZXRlKXtjb2xvcjpBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC13YXJue2JhY2tncm91bmQtY29sb3I6V0FSTi1DT0xPUjtjb2xvcjpXQVJOLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtd2FybiAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgaW5wdXQsLlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCB0ZXh0YXJlYXtjb2xvcjpXQVJOLUNPTlRSQVNUO3RleHQtc2hhZG93OjAgMCAwIFdBUk4tQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCBsYWJlbCwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lci5tZC1pbnB1dC1mb2N1c2VkIC5tZC1pY29uOm5vdCgubWQtaWNvbi1kZWxldGUpe2NvbG9yOldBUk4tQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXI6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpXQVJOLUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtd2FybiAubWQtaW5wdXQtY29udGFpbmVyIGlucHV0LC5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtd2FybiAubWQtaW5wdXQtY29udGFpbmVyIHRleHRhcmVhe2NvbG9yOldBUk4tQ09OVFJBU1Q7dGV4dC1zaGFkb3c6MCAwIDAgV0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXdhcm4gLm1kLWlucHV0LWNvbnRhaW5lciB0ZXh0YXJlYTo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpXQVJOLUNPTlRSQVNULTAuNTR9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIgbGFiZWwsLlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC13YXJuIC5tZC1pbnB1dC1jb250YWluZXIgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6V0FSTi1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50e2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50IC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCBpbnB1dCwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50IC5tZC1pbnB1dC1jb250YWluZXIubWQtaW5wdXQtZm9jdXNlZCB0ZXh0YXJlYXtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNUO3RleHQtc2hhZG93OjAgMCAwIEJBQ0tHUk9VTkQtQ09OVFJBU1R9LlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC10cmFuc3BhcmVudCAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgbGFiZWwsLlRIRU1FX05BTUUubWQtdG9vbGJhci5tZC10cmFuc3BhcmVudCAubWQtaW5wdXQtY29udGFpbmVyLm1kLWlucHV0LWZvY3VzZWQgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH0uVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50IC5tZC1pbnB1dC1jb250YWluZXI6YWZ0ZXJ7YmFja2dyb3VuZC1jb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtdHJhbnNwYXJlbnQgLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dCwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50IC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWF7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVDt0ZXh0LXNoYWRvdzowIDAgMCBCQUNLR1JPVU5ELUNPTlRSQVNUfS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtdHJhbnNwYXJlbnQgLm1kLWlucHV0LWNvbnRhaW5lciBpbnB1dDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlciwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50IC5tZC1pbnB1dC1jb250YWluZXIgdGV4dGFyZWE6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVC0wLjU0fS5USEVNRV9OQU1FLm1kLXRvb2xiYXIubWQtdHJhbnNwYXJlbnQgLm1kLWlucHV0LWNvbnRhaW5lciBsYWJlbCwuVEhFTUVfTkFNRS5tZC10b29sYmFyLm1kLXRyYW5zcGFyZW50IC5tZC1pbnB1dC1jb250YWluZXIgLm1kLWljb246bm90KC5tZC1pY29uLWRlbGV0ZSl7Y29sb3I6QkFDS0dST1VORC1DT05UUkFTVH1cXG5cIn0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz1cIi5USEVNRV9OQU1FIDpub3QoaW5wdXQpOm5vdCh0ZXh0YXJlYSk6OnNlbGVjdGlvbntiYWNrZ3JvdW5kOkFDQ0VOVC1DT0xPUjtjb2xvcjpBQ0NFTlQtQ09OVFJBU1R9LlRIRU1FX05BTUUgYTpub3QoLm1kLWJ1dHRvbil7Y29sb3I6QUNDRU5ULUNPTE9SfS5USEVNRV9OQU1FIGE6bm90KC5tZC1idXR0b24pOmhvdmVye2NvbG9yOkFDQ0VOVC1DT0xPUi04MDB9Ym9keS5USEVNRV9OQU1Fe2JhY2tncm91bmQtY29sb3I6QkFDS0dST1VORC1DT0xPUjtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuODd9LlRIRU1FX05BTUUgLm1kLWNhcHRpb24sLlRIRU1FX05BTUUgLm1kLWRpc3BsYXktMSwuVEhFTUVfTkFNRSAubWQtZGlzcGxheS0yLC5USEVNRV9OQU1FIC5tZC1kaXNwbGF5LTMsLlRIRU1FX05BTUUgLm1kLWRpc3BsYXktNHtjb2xvcjpCQUNLR1JPVU5ELUNPTlRSQVNULTAuNTd9LlRIRU1FX05BTUUgY29kZTpub3QoLmhsanMpe2JhY2tncm91bmQtY29sb3I6QUNDRU5ULUNPTE9SLUExMDAtMC4yO2NvbG9yOkFDQ0VOVC1DT0xPUi04MDB9XFxuXCJ9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDYpfXZhciBvPW4oMCkobigxMjYpLG4oNDExKSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI2NCl9dmFyIG89bigwKShuKDEyNyksbig0NDIpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjM0KX12YXIgbz1uKDApKG4oMTI4KSxuKDM4NSksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxMjkpLG4oMzg3KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI1NCl9dmFyIG89bigwKShuKDEzMCksbig0MjkpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjMxKX12YXIgbz1uKDApKG4oMTMxKSxuKDM3NyksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyMzUpfXZhciBvPW4oMCkobigxMzIpLG4oMzg4KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDEzMyksbigzOTkpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTM0KSxuKDM4MyksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxMzUpLG4oNDI4KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDEzNiksbigzNzYpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTM3KSxuKDQyMSksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxMzgpLG4oNDE1KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDEzOSksbigzODEpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTQwKSxuKDM3MiksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNDEpLG4oMzc5KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI1Nyl9dmFyIG89bigwKShuKDE0Miksbig0MzUpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTQzKSxuKDM5NSksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNTApfXZhciBvPW4oMCkobigxNDQpLG4oNDE3KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDIzOSl9dmFyIG89bigwKShuKDE0NSksbigzOTgpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTQ2KSxuKDQzMyksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNDcpLG4oNDAzKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE0OCksbigzOTYpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTQ5KSxuKDQxOCksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNTApLG4oNDQxKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE1MSksbigzOTQpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjUxKX12YXIgbz1uKDApKG4oMTUyKSxuKDQxOSksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDgpfXZhciBvPW4oMCkobigxNTMpLG4oNDEzKSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDIzNil9dmFyIG89bigwKShuKDE1NCksbigzOTApLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjYxKX12YXIgbz1uKDApKG4oMTU1KSxuKDQzOCksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNTYpLG4oMzkxKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE1NyksbigzODkpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjM3KX12YXIgbz1uKDApKG4oMTU4KSxuKDM5MiksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNTkpLG4oNDI0KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI1OSl9dmFyIG89bigwKShuKDE2MCksbnVsbCxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI0MCl9dmFyIG89bigwKShuKDE2MSksbig0MDApLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTYyKSxuKDQ0MyksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNjMpLG4oMzgwKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE2NCksbig0MTApLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTY1KSxuKDM4NiksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNjYpLG4oNDA1KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE2NyksbigzOTcpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjYzKX12YXIgbz1uKDApKG4oMTY4KSxuKDQ0MCksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxNjkpLG4oNDMyKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE3MCksbigzODQpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTcxKSxuKDQwNyksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNTYpfXZhciBvPW4oMCkobigxNzIpLG4oNDM0KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDIzOCl9dmFyIG89bigwKShuKDE3MyksbigzOTMpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjMwKX12YXIgbz1uKDApKG4oMTc0KSxuKDM3NCksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDUpfXZhciBvPW4oMCkobigxNzUpLG4oNDA5KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE3Niksbig0MjIpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjU4KX12YXIgbz1uKDApKG4oMTc3KSxuKDQzNiksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDkpfXZhciBvPW4oMCkobigxNzgpLG4oNDE0KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI2Mil9dmFyIG89bigwKShuKDE3OSksbig0MzkpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjQ3KX12YXIgbz1uKDApKG4oMTgwKSxuKDQxMiksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyMzMpfXZhciBvPW4oMCkobigxODEpLG4oMzgyKSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE4Miksbig0MTYpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTgzKSxuKDQwNiksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDIpfXZhciBvPW4oMCkobigxODQpLG4oNDAyKSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI1Myl9dmFyIG89bigwKShuKDE4NSksbig0MjcpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjU1KX12YXIgbz1uKDApKG4oMTg2KSxuKDQzMSksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyMzIpfXZhciBvPW4oMCkobigxODcpLG4oMzc4KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE4OCksbig0MjMpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTg5KSxuKDM3MyksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxOTApLG4oNDIwKSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE5MSksbig0MjYpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTkyKSxuKDQzMCksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe3ZhciBpPW4oMCkobigxOTMpLG4oMzc1KSxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDE5NCksbig0MDgpLG51bGwsbnVsbCxudWxsKTt0LmV4cG9ydHM9aS5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXt2YXIgaT1uKDApKG4oMTk1KSxuKDM3MSksbnVsbCxudWxsLG51bGwpO3QuZXhwb3J0cz1pLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDEpfXZhciBvPW4oMCkobigxOTYpLG4oNDAxKSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gaSh0KXtuKDI0Myl9dmFyIG89bigwKShuKDE5Nyksbig0MDQpLGksbnVsbCxudWxsKTt0LmV4cG9ydHM9by5leHBvcnRzfSksKGZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiBpKHQpe24oMjYwKX12YXIgbz1uKDApKG4oMTk4KSxuKDQzNyksaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNDQpfXZhciBvPW4oMCkobigxOTkpLG51bGwsaSxudWxsLG51bGwpO3QuZXhwb3J0cz1vLmV4cG9ydHN9KSwoZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIGkodCl7bigyNTIpfXZhciBvPW4oMCkobigyMDApLG4oNDI1KSxpLG51bGwsbnVsbCk7dC5leHBvcnRzPW8uZXhwb3J0c30pLChmdW5jdGlvbih0LGUsbil7dmFyIGk9bigwKShuKDIwMSksbnVsbCxudWxsLG51bGwsbnVsbCk7dC5leHBvcnRzPWkuZXhwb3J0c30pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtdGFiXCIsc3R5bGU6dC5zdHlsZXMsYXR0cnM6e2lkOnQudGFiSWR9fSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1jYXJkLW1lZGlhLWFjdGlvbnNcIn0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwibWQtY2FyZFwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLWNhcmRcIixjbGFzczpbdC50aGVtZUNsYXNzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtcmFkaW9cIixjbGFzczpbdC50aGVtZUNsYXNzLHQuY2xhc3Nlc119LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtcmFkaW8tY29udGFpbmVyXCIsb246e2NsaWNrOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdC50b2dnbGVDaGVjayhlKX19fSxbbihcImlucHV0XCIse2F0dHJzOnt0eXBlOlwicmFkaW9cIixuYW1lOnQubmFtZSxpZDp0LmlkLGRpc2FibGVkOnQuZGlzYWJsZWR9LGRvbVByb3BzOnt2YWx1ZTp0LnZhbHVlfX0pLHQuX3YoXCIgXCIpLG4oXCJtZC1pbmstcmlwcGxlXCIse2F0dHJzOntcIm1kLWRpc2FibGVkXCI6dC5kaXNhYmxlZH19KV0sMSksdC5fdihcIiBcIiksdC4kc2xvdHMuZGVmYXVsdD9uKFwibGFiZWxcIix7c3RhdGljQ2xhc3M6XCJtZC1yYWRpby1sYWJlbFwiLGF0dHJzOntmb3I6dC5pZHx8dC5uYW1lfSxvbjp7Y2xpY2s6dC50b2dnbGVDaGVja319LFt0Ll90KFwiZGVmYXVsdFwiKV0sMik6dC5fZSgpXSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLXBhZ2luYXRpb25cIn0sW24oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwibWQtdGFibGUtcGFnaW5hdGlvbi1sYWJlbFwifSxbdC5fdih0Ll9zKHQubWRMYWJlbCkrXCI6XCIpXSksdC5fdihcIiBcIiksdC5tZFBhZ2VPcHRpb25zIT09ITE/bihcIm1kLXNlbGVjdFwiLHthdHRyczp7XCJtZC1tZW51LWNsYXNzXCI6XCJtZC1wYWdpbmF0aW9uLXNlbGVjdFwifSxvbjp7Y2hhbmdlOnQuY2hhbmdlU2l6ZX0sbW9kZWw6e3ZhbHVlOnQuY3VycmVudFNpemUsY2FsbGJhY2s6ZnVuY3Rpb24oZSl7dC5jdXJyZW50U2l6ZT1lfSxleHByZXNzaW9uOlwiY3VycmVudFNpemVcIn19LHQuX2wodC5tZFBhZ2VPcHRpb25zLChmdW5jdGlvbihlKXtyZXR1cm4gbihcIm1kLW9wdGlvblwiLHtrZXk6ZSxhdHRyczp7dmFsdWU6ZX19LFt0Ll92KHQuX3MoZSkpXSl9KSkpOnQuX2UoKSx0Ll92KFwiIFwiKSxuKFwic3BhblwiLFt0Ll92KHQuX3MoKHQuY3VycmVudFBhZ2UtMSkqdC5jdXJyZW50U2l6ZSsxKStcIi1cIit0Ll9zKHQuc3ViVG90YWwpK1wiIFwiK3QuX3ModC5tZFNlcGFyYXRvcikrXCIgXCIrdC5fcyh0Lm1kVG90YWwpKV0pLHQuX3YoXCIgXCIpLG4oXCJtZC1idXR0b25cIix7c3RhdGljQ2xhc3M6XCJtZC1pY29uLWJ1dHRvbiBtZC10YWJsZS1wYWdpbmF0aW9uLXByZXZpb3VzXCIsYXR0cnM6e2Rpc2FibGVkOjE9PT10LmN1cnJlbnRQYWdlfSxvbjp7Y2xpY2s6dC5wcmV2aW91c1BhZ2V9fSxbbihcIm1kLWljb25cIixbdC5fdihcImtleWJvYXJkX2Fycm93X2xlZnRcIildKV0sMSksdC5fdihcIiBcIiksbihcIm1kLWJ1dHRvblwiLHtzdGF0aWNDbGFzczpcIm1kLWljb24tYnV0dG9uIG1kLXRhYmxlLXBhZ2luYXRpb24tbmV4dFwiLGF0dHJzOntkaXNhYmxlZDp0LnNob3VsZERpc2FibGV9LG9uOntjbGljazp0Lm5leHRQYWdlfX0sW24oXCJtZC1pY29uXCIsW3QuX3YoXCJrZXlib2FyZF9hcnJvd19yaWdodFwiKV0pXSwxKV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtyZWY6XCJleHBhbmRcIixzdGF0aWNDbGFzczpcIm1kLWNhcmQtZXhwYW5kXCJ9LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWJ1dHRvbi10b2dnbGVcIixjbGFzczpbdC50aGVtZUNsYXNzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtdGFibGVcIixjbGFzczpbdC50aGVtZUNsYXNzXX0sW24oXCJ0YWJsZVwiLFt0Ll90KFwiZGVmYXVsdFwiKV0sMildKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtY2FyZC1tZWRpYS1jb3ZlclwiLGNsYXNzOnQuY2xhc3Nlc30sW3QuX3QoXCJkZWZhdWx0XCIpLHQuX3YoXCIgXCIpLHQubWRUZXh0U2NyaW0/bihcImRpdlwiLHtyZWY6XCJiYWNrZHJvcFwiLHN0YXRpY0NsYXNzOlwibWQtY2FyZC1iYWNrZHJvcFwiLHN0eWxlOnQuc3R5bGVzfSk6dC5fZSgpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwibGlcIix7c3RhdGljQ2xhc3M6XCJtZC1saXN0LWl0ZW1cIixjbGFzczp0LmNsYXNzZXN9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtbGlzdC1pdGVtLWNvbnRhaW5lciBtZC1idXR0b25cIn0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKSx0Ll92KFwiIFwiKSxuKFwibWQtYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtYnV0dG9uLWdob3N0XCIsYXR0cnM6e3R5cGU6XCJidXR0b25cIixkaXNhYmxlZDp0LmRpc2FibGVkfSxvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7dC4kZW1pdChcImNsaWNrXCIsZSl9fX0pXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtY2FyZC1tZWRpYVwiLGNsYXNzOnQuY2xhc3Nlc30sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwidHJhbnNpdGlvblwiLHthdHRyczp7bmFtZTpcIm1kLXNwaW5uZXJcIixhcHBlYXI6XCJcIn19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3Bpbm5lclwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXSxzdHlsZTp0LnN0eWxlc30sW24oXCJzdmdcIix7c3RhdGljQ2xhc3M6XCJtZC1zcGlubmVyLWRyYXdcIixhdHRyczp7dmlld0JveDpcIjI1IDI1IDUwIDUwXCJ9fSxbbihcImNpcmNsZVwiLHtzdGF0aWNDbGFzczpcIm1kLXNwaW5uZXItcGF0aFwiLGF0dHJzOntjeDpcIjUwXCIsY3k6XCI1MFwiLHI6XCIyMFwiLFwic3Ryb2tlLXdpZHRoXCI6dC5tZFN0cm9rZSxcInN0cm9rZS1kYXNoYXJyYXlcIjp0LmRhc2hQcm9ncmVzc319KV0pXSldKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtY2FyZC1hcmVhXCIsY2xhc3M6dC5jbGFzc2VzfSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJtZC1saXN0LWl0ZW1cIix7c3RhdGljQ2xhc3M6XCJtZC1tZW51LWl0ZW1cIixjbGFzczp0LmNsYXNzZXMsYXR0cnM6e2hyZWY6dC5ocmVmLHRhcmdldDp0LnRhcmdldCxkaXNhYmxlZDp0LmRpc2FibGVkfSxvbjp7Y2xpY2s6dC5jbG9zZX19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWJvdHRvbS1iYXJcIixjbGFzczpbdC50aGVtZUNsYXNzLHQuY2xhc3Nlc119LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImxpXCIse3N0YXRpY0NsYXNzOlwibWQtbGlzdC1pdGVtIG1kLWxpc3QtaXRlbS1leHBhbmRcIixjbGFzczp0LmNsYXNzZXN9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtbGlzdC1pdGVtLWNvbnRhaW5lciBtZC1idXR0b25cIn0sW3QuX3QoXCJkZWZhdWx0XCIpLHQuX3YoXCIgXCIpLG4oXCJtZC1pY29uXCIse3N0YXRpY0NsYXNzOlwibWQtbGlzdC1leHBhbmQtaW5kaWNhdG9yXCJ9LFt0Ll92KFwia2V5Ym9hcmRfYXJyb3dfZG93blwiKV0pXSwyKSx0Ll92KFwiIFwiKSxuKFwibWQtYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtYnV0dG9uLWdob3N0XCIsYXR0cnM6e3R5cGU6XCJidXR0b25cIixkaXNhYmxlZDp0LmRpc2FibGVkfSxvbjp7Y2xpY2s6dC50b2dnbGVFeHBhbmRMaXN0fX0pLHQuX3YoXCIgXCIpLG4oXCJkaXZcIix7cmVmOlwiZXhwYW5kXCIsc3RhdGljQ2xhc3M6XCJtZC1saXN0LWV4cGFuZFwiLGNsYXNzOnQuZXhwYW5kQ2xhc3NlcyxzdHlsZTp0LmV4cGFuZFN0eWxlc30sW3QuX3QoXCJleHBhbmRcIildLDIpXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiB0LmhyZWY/bihcImFcIix7c3RhdGljQ2xhc3M6XCJtZC1ib3R0b20tYmFyLWl0ZW1cIixjbGFzczp0LmNsYXNzZXMsYXR0cnM6e2hyZWY6dC5ocmVmLGRpc2FibGVkOnQuZGlzYWJsZWR9LG9uOntjbGljazpmdW5jdGlvbihlKXt0LnNldEFjdGl2ZSghMCxlKX19fSxbdC5tZEljb258fHQubWRJY29uU3JjfHx0Lm1kSWNvbnNldD9uKFwibWQtaWNvblwiLHthdHRyczp7XCJtZC1zcmNcIjp0Lm1kSWNvblNyYyxcIm1kLWljb25zZXRcIjp0Lm1kSWNvbnNldH19LFt0Ll92KHQuX3ModC5tZEljb24pKV0pOnQuX2UoKSx0Ll92KFwiIFwiKSxuKFwibWQtaW5rLXJpcHBsZVwiLHthdHRyczp7XCJtZC1kaXNhYmxlZFwiOnQuZGlzYWJsZWR9fSksdC5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljQ2xhc3M6XCJtZC10ZXh0XCJ9LFt0Ll90KFwiZGVmYXVsdFwiKV0sMildLDEpOm4oXCJidXR0b25cIix7c3RhdGljQ2xhc3M6XCJtZC1ib3R0b20tYmFyLWl0ZW1cIixjbGFzczp0LmNsYXNzZXMsYXR0cnM6e3R5cGU6XCJidXR0b25cIixkaXNhYmxlZDp0LmRpc2FibGVkfSxvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7dC5zZXRBY3RpdmUoITAsZSl9fX0sW3QubWRJY29ufHx0Lm1kSWNvblNyY3x8dC5tZEljb25zZXQ/bihcIm1kLWljb25cIix7YXR0cnM6e1wibWQtc3JjXCI6dC5tZEljb25TcmMsXCJtZC1pY29uc2V0XCI6dC5tZEljb25zZXR9fSxbdC5fdih0Ll9zKHQubWRJY29uKSldKTp0Ll9lKCksdC5fdihcIiBcIiksbihcIm1kLWluay1yaXBwbGVcIix7YXR0cnM6e1wibWQtZGlzYWJsZWRcIjp0LmRpc2FibGVkfX0pLHQuX3YoXCIgXCIpLG4oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwibWQtdGV4dFwifSxbdC5fdChcImRlZmF1bHRcIildLDIpXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtY2FyZFwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiaW5wdXRcIix7c3RhdGljQ2xhc3M6XCJtZC1pbnB1dFwiLGF0dHJzOnt0eXBlOnQudHlwZSxuYW1lOnQubmFtZSxkaXNhYmxlZDp0LmRpc2FibGVkLHJlcXVpcmVkOnQucmVxdWlyZWQscGxhY2Vob2xkZXI6dC5wbGFjZWhvbGRlcixtYXhsZW5ndGg6dC5tYXhsZW5ndGgscmVhZG9ubHk6dC5yZWFkb25seX0sZG9tUHJvcHM6e3ZhbHVlOnQudmFsdWV9LG9uOntmb2N1czp0Lm9uRm9jdXMsYmx1cjp0Lm9uQmx1cixpbnB1dDp0Lm9uSW5wdXQsa2V5ZG93bjpbZnVuY3Rpb24oZSl7cmV0dXJuXCJidXR0b25cImluIGV8fCF0Ll9rKGUua2V5Q29kZSxcInVwXCIsMzgpP3ZvaWQgdC5vbklucHV0KGUpOm51bGx9LGZ1bmN0aW9uKGUpe3JldHVyblwiYnV0dG9uXCJpbiBlfHwhdC5fayhlLmtleUNvZGUsXCJkb3duXCIsNDApP3ZvaWQgdC5vbklucHV0KGUpOm51bGx9XX19KX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiB0LnN2Z0NvbnRlbnQ/bihcImlcIix7c3RhdGljQ2xhc3M6XCJtZC1pY29uXCIsY2xhc3M6W3QudGhlbWVDbGFzc10sZG9tUHJvcHM6e2lubmVySFRNTDp0Ll9zKHQuc3ZnQ29udGVudCl9fSk6dC5pbWFnZVNyYz9uKFwibWQtaW1hZ2VcIix7c3RhdGljQ2xhc3M6XCJtZC1pY29uXCIsY2xhc3M6W3QudGhlbWVDbGFzc10sXG5hdHRyczp7XCJtZC1zcmNcIjp0LmltYWdlU3JjfX0pOm4oXCJpXCIse3N0YXRpY0NsYXNzOlwibWQtaWNvblwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5tZEljb25zZXRdLGF0dHJzOntcImFyaWEtaGlkZGVuXCI6ISF0Lm1kSWNvbnNldH19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWF1dG9jb21wbGV0ZVwiLG9uOntmb2N1czp0Lm9uRm9jdXMsYmx1cjp0Lm9uQmx1cn19LFtuKFwibWQtbWVudVwiLHtyZWY6XCJtZW51XCIsc3RhdGljQ2xhc3M6XCJtZC1hdXRvY29tcGxldGUtbWVudVwiLGF0dHJzOntcIm1kLW9mZnNldC14XCI6OCxcIm1kLW9mZnNldC15XCI6XCI0NVwifX0sW24oXCJzcGFuXCIse2F0dHJzOntcIm1kLW1lbnUtdHJpZ2dlclwiOlwiXCJ9fSksdC5fdihcIiBcIiksbihcImlucHV0XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwibW9kZWxcIixyYXdOYW1lOlwidi1tb2RlbFwiLHZhbHVlOnQucXVlcnksZXhwcmVzc2lvbjpcInF1ZXJ5XCJ9XSxyZWY6XCJpbnB1dFwiLHN0YXRpY0NsYXNzOlwibWQtaW5wdXRcIixhdHRyczp7dHlwZTpcInRleHRcIixkaXNhYmxlZDp0LmRpc2FibGVkLHJlcXVpcmVkOnQucmVxdWlyZWQscGxhY2Vob2xkZXI6dC5wbGFjZWhvbGRlcixtYXhsZW5ndGg6dC5tYXhsZW5ndGgsbmFtZTp0Lm5hbWV9LGRvbVByb3BzOnt2YWx1ZTp0LnF1ZXJ5fSxvbjp7Zm9jdXM6dC5vbkZvY3VzLGJsdXI6dC5vbkJsdXIsaW5wdXQ6W2Z1bmN0aW9uKGUpe2UudGFyZ2V0LmNvbXBvc2luZ3x8KHQucXVlcnk9ZS50YXJnZXQudmFsdWUpfSx0LmRlYm91bmNlVXBkYXRlXX19KSx0Ll92KFwiIFwiKSxuKFwibWQtbWVudS1jb250ZW50XCIsdC5fbCh0Lml0ZW1zLChmdW5jdGlvbihlKXtyZXR1cm4gdC5pdGVtcy5sZW5ndGg/bihcIm1kLW1lbnUtaXRlbVwiLHtrZXk6ZSxvbjp7a2V5dXA6ZnVuY3Rpb24obil7cmV0dXJuXCJidXR0b25cImluIG58fCF0Ll9rKG4ua2V5Q29kZSxcImVudGVyXCIsMTMpP3ZvaWQgdC5oaXQoZSk6bnVsbH0sY2xpY2s6ZnVuY3Rpb24obil7dC5oaXQoZSl9fX0sW3QuX3YoXCJcXG4gICAgICAgIFwiK3QuX3MoZVt0LnByaW50QXR0cmlidXRlXSkrXCJcXG4gICAgICBcIildKTp0Ll9lKCl9KSkpXSwxKV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWlucHV0LWNvbnRhaW5lclwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXX0sW3QuX3QoXCJkZWZhdWx0XCIpLHQuX3YoXCIgXCIpLHQuZW5hYmxlQ291bnRlcj9uKFwic3BhblwiLHtzdGF0aWNDbGFzczpcIm1kLWNvdW50XCJ9LFt0Ll92KHQuX3ModC5pbnB1dExlbmd0aCkrXCIgLyBcIit0Ll9zKHQuY291bnRlckxlbmd0aCkpXSk6dC5fZSgpLHQuX3YoXCIgXCIpLHQubWRIYXNQYXNzd29yZD9uKFwibWQtYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtaWNvbi1idXR0b24gbWQtdG9nZ2xlLXBhc3N3b3JkXCIsYXR0cnM6e3RhYmluZGV4OlwiLTFcIn0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LnRvZ2dsZVBhc3N3b3JkVHlwZShlKX19fSxbbihcIm1kLWljb25cIixbdC5fdih0Ll9zKHQuc2hvd1Bhc3N3b3JkP1widmlzaWJpbGl0eV9vZmZcIjpcInZpc2liaWxpdHlcIikpXSldLDEpOnQuX2UoKSx0Ll92KFwiIFwiKSx0Lm1kQ2xlYXJhYmxlJiZ0Lmhhc1ZhbHVlP24oXCJtZC1idXR0b25cIix7c3RhdGljQ2xhc3M6XCJtZC1pY29uLWJ1dHRvbiBtZC1jbGVhci1pbnB1dFwiLGF0dHJzOnt0YWJpbmRleDpcIi0xXCJ9LG9uOntjbGljazp0LmNsZWFySW5wdXR9fSxbbihcIm1kLWljb25cIixbdC5fdihcImNsZWFyXCIpXSldLDEpOnQuX2UoKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcInRyYW5zaXRpb25cIix7YXR0cnM6e25hbWU6XCJtZC1wcm9ncmVzc1wiLGFwcGVhcjpcIlwifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1wcm9ncmVzc1wiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1wcm9ncmVzcy10cmFja1wiLHN0eWxlOnQuc3R5bGVzfSldKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJtZC1kaWFsb2dcIix7cmVmOlwiZGlhbG9nXCIsc3RhdGljQ2xhc3M6XCJtZC1kaWFsb2ctcHJvbXB0XCIsb246e2Nsb3NlOmZ1bmN0aW9uKGUpe3QuZmlyZUNsb3NlRXZlbnQoXCJjYW5jZWxcIil9fX0sW3QubWRUaXRsZT9uKFwibWQtZGlhbG9nLXRpdGxlXCIsW3QuX3YodC5fcyh0Lm1kVGl0bGUpKV0pOnQuX2UoKSx0Ll92KFwiIFwiKSx0Lm1kQ29udGVudEh0bWw/bihcIm1kLWRpYWxvZy1jb250ZW50XCIse2RvbVByb3BzOntpbm5lckhUTUw6dC5fcyh0Lm1kQ29udGVudEh0bWwpfX0pOnQuX2UoKSx0Ll92KFwiIFwiKSx0Lm1kQ29udGVudD9uKFwibWQtZGlhbG9nLWNvbnRlbnRcIixbdC5fdih0Ll9zKHQubWRDb250ZW50KSldKTp0Ll9lKCksdC5fdihcIiBcIiksbihcIm1kLWRpYWxvZy1jb250ZW50XCIsW24oXCJtZC1pbnB1dC1jb250YWluZXJcIixbbihcIm1kLWlucHV0XCIse3JlZjpcImlucHV0XCIsYXR0cnM6e2lkOnQubWRJbnB1dElkLG5hbWU6dC5tZElucHV0TmFtZSxtYXhsZW5ndGg6dC5tZElucHV0TWF4bGVuZ3RoLHBsYWNlaG9sZGVyOnQubWRJbnB1dFBsYWNlaG9sZGVyLHZhbHVlOnQudmFsdWV9LG5hdGl2ZU9uOntrZXlkb3duOmZ1bmN0aW9uKGUpe3JldHVyblwiYnV0dG9uXCJpbiBlfHwhdC5fayhlLmtleUNvZGUsXCJlbnRlclwiLDEzKT92b2lkIHQuY29uZmlybVZhbHVlKGUpOm51bGx9fX0pXSwxKV0sMSksdC5fdihcIiBcIiksbihcIm1kLWRpYWxvZy1hY3Rpb25zXCIsW24oXCJtZC1idXR0b25cIix7c3RhdGljQ2xhc3M6XCJtZC1wcmltYXJ5XCIsb246e2NsaWNrOmZ1bmN0aW9uKGUpe3QuY2xvc2UoXCJjYW5jZWxcIil9fX0sW3QuX3YodC5fcyh0Lm1kQ2FuY2VsVGV4dCkpXSksdC5fdihcIiBcIiksbihcIm1kLWJ1dHRvblwiLHtzdGF0aWNDbGFzczpcIm1kLXByaW1hcnlcIixvbjp7Y2xpY2s6dC5jb25maXJtVmFsdWV9fSxbdC5fdih0Ll9zKHQubWRPa1RleHQpKV0pXSwxKV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWNoaXBcIixjbGFzczpbdC50aGVtZUNsYXNzLHQuY2xhc3Nlc10sYXR0cnM6e3RhYmluZGV4OlwiMFwifX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1jaGlwLWNvbnRhaW5lclwiLG9uOntjbGljazpmdW5jdGlvbihlKXshdC5kaXNhYmxlZCYmdC5tZEVkaXRhYmxlJiZ0LiRlbWl0KFwiZWRpdFwiKX19fSxbdC5fdChcImRlZmF1bHRcIildLDIpLHQuX3YoXCIgXCIpLHQubWREZWxldGFibGU/bihcIm1kLWJ1dHRvblwiLHtzdGF0aWNDbGFzczpcIm1kLWljb24tYnV0dG9uIG1kLWRlbnNlIG1kLWRlbGV0ZVwiLGF0dHJzOnt0YWJpbmRleDpcIi0xXCJ9LG9uOntjbGljazpmdW5jdGlvbihlKXshdC5kaXNhYmxlZCYmdC4kZW1pdChcImRlbGV0ZVwiKX19LG5hdGl2ZU9uOntrZXl1cDpmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwiZGVsZXRlXCIsWzgsNDZdKT92b2lkKCF0LmRpc2FibGVkJiZ0LiRlbWl0KFwiZGVsZXRlXCIpKTpudWxsfX19LFtuKFwibWQtaWNvblwiLHtzdGF0aWNDbGFzczpcIm1kLWljb24tZGVsZXRlXCJ9LFt0Ll92KFwiY2FuY2VsXCIpXSldLDEpOnQuX2UoKV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWRpYWxvZy10aXRsZSBtZC10aXRsZVwifSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJsaVwiLHtzdGF0aWNDbGFzczpcIm1kLWxpc3QtaXRlbVwiLGNsYXNzOnQuY2xhc3NlcyxhdHRyczp7ZGlzYWJsZWQ6dC5kaXNhYmxlZH19LFt0Ll90KFwiZGVmYXVsdFwiKSx0Ll92KFwiIFwiKSxuKFwibWQtaW5rLXJpcHBsZVwiLHthdHRyczp7ZGlzYWJsZWQ6dC5kaXNhYmxlZH19KV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWRpYWxvZy1jb250YWluZXJcIixjbGFzczpbdC50aGVtZUNsYXNzLHQuY2xhc3Nlc10sYXR0cnM6e3RhYmluZGV4OlwiMFwifSxvbjp7a2V5dXA6ZnVuY3Rpb24oZSl7cmV0dXJuXCJidXR0b25cImluIGV8fCF0Ll9rKGUua2V5Q29kZSxcImVzY1wiLDI3KT8oZS5zdG9wUHJvcGFnYXRpb24oKSx2b2lkIHQuY2xvc2VPbkVzYyhlKSk6bnVsbH19fSxbbihcImRpdlwiLHtyZWY6XCJkaWFsb2dcIixzdGF0aWNDbGFzczpcIm1kLWRpYWxvZ1wiLGNsYXNzOnQuZGlhbG9nQ2xhc3NlcyxzdHlsZTp0LnN0eWxlc30sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKSx0Ll92KFwiIFwiKSx0Lm1kQmFja2Ryb3A/bihcIm1kLWJhY2tkcm9wXCIse3JlZjpcImJhY2tkcm9wXCIsc3RhdGljQ2xhc3M6XCJtZC1kaWFsb2ctYmFja2Ryb3BcIixjbGFzczp0LmNsYXNzZXMsb246e2Nsb3NlOmZ1bmN0aW9uKGUpe3QubWRDbGlja091dHNpZGVUb0Nsb3NlJiZ0LmNsb3NlKCl9fX0pOnQuX2UoKV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWNhcmQtYWN0aW9uc1wifSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJ1bFwiLHtzdGF0aWNDbGFzczpcIm1kLWxpc3RcIixjbGFzczpbdC50aGVtZUNsYXNzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtdGFic1wiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC50YWJDbGFzc2VzXX0sW24oXCJtZC13aGl0ZWZyYW1lXCIse3JlZjpcInRhYk5hdmlnYXRpb25cIixzdGF0aWNDbGFzczpcIm1kLXRhYnMtbmF2aWdhdGlvblwiLGNsYXNzOnQubmF2aWdhdGlvbkNsYXNzZXMsYXR0cnM6e1wibWQtdGFnXCI6XCJuYXZcIixcIm1kLWVsZXZhdGlvblwiOnQubWRFbGV2YXRpb259fSxbbihcImRpdlwiLHtyZWY6XCJ0YWJzQ29udGFpbmVyXCIsc3RhdGljQ2xhc3M6XCJtZC10YWJzLW5hdmlnYXRpb24tY29udGFpbmVyXCIsb246e3Njcm9sbDp0LmhhbmRsZU5hdmlnYXRpb25TY3JvbGx9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYnMtbmF2aWdhdGlvbi1zY3JvbGwtY29udGFpbmVyXCJ9LFt0Ll9sKHQudGFiTGlzdCwoZnVuY3Rpb24oZSl7cmV0dXJuIG4oXCJidXR0b25cIix7a2V5OmUuaWQscmVmOlwidGFiSGVhZGVyXCIscmVmSW5Gb3I6ITAsc3RhdGljQ2xhc3M6XCJtZC10YWItaGVhZGVyXCIsY2xhc3M6dC5nZXRIZWFkZXJDbGFzcyhlKSxhdHRyczp7dHlwZTpcImJ1dHRvblwiLGRpc2FibGVkOmUuZGlzYWJsZWR9LG9uOntjbGljazpmdW5jdGlvbihuKXt0LnNldEFjdGl2ZVRhYihlKX19fSxbbihcIm1kLWluay1yaXBwbGVcIix7YXR0cnM6e1wibWQtZGlzYWJsZWRcIjplLmRpc2FibGVkfX0pLHQuX3YoXCIgXCIpLG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC10YWItaGVhZGVyLWNvbnRhaW5lclwifSxbZS5pY29uP24oXCJtZC1pY29uXCIsW3QuX3YodC5fcyhlLmljb24pKV0pOmUuaWNvbnNldD9uKFwibWQtaWNvblwiLHthdHRyczp7XCJtZC1pY29uc2V0XCI6ZS5pY29uc2V0fX0sW3QuX3YodC5fcyhlLmljb24pKV0pOnQuX2UoKSx0Ll92KFwiIFwiKSxlLmxhYmVsP24oXCJzcGFuXCIsW3QuX3YodC5fcyhlLmxhYmVsKSldKTp0Ll9lKCksdC5fdihcIiBcIiksZS50b29sdGlwP24oXCJtZC10b29sdGlwXCIse2F0dHJzOntcIm1kLWRpcmVjdGlvblwiOmUudG9vbHRpcERpcmVjdGlvbixcIm1kLWRlbGF5XCI6ZS50b29sdGlwRGVsYXl9fSxbdC5fdih0Ll9zKGUudG9vbHRpcCkpXSk6dC5fZSgpXSwxKV0sMSl9KSksdC5fdihcIiBcIiksbihcInNwYW5cIix7cmVmOlwiaW5kaWNhdG9yXCIsc3RhdGljQ2xhc3M6XCJtZC10YWItaW5kaWNhdG9yXCIsY2xhc3M6dC5pbmRpY2F0b3JDbGFzc2VzfSldLDIpXSksdC5fdihcIiBcIiksdC5tZE5hdmlnYXRpb24mJnQuaGFzTmF2aWdhdGlvblNjcm9sbD9uKFwiYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtdGFiLWhlYWRlci1uYXZpZ2F0aW9uLWJ1dHRvbiBtZC1sZWZ0XCIsY2xhc3M6dC5uYXZpZ2F0aW9uTGVmdEJ1dHRvbkNsYXNzZXMsb246e2NsaWNrOnQubmF2aWdhdGlvblNjcm9sbExlZnR9fSxbbihcIm1kLWljb25cIixbdC5fdihcImtleWJvYXJkX2Fycm93X2xlZnRcIildKV0sMSk6dC5fZSgpLHQuX3YoXCIgXCIpLHQubWROYXZpZ2F0aW9uJiZ0Lmhhc05hdmlnYXRpb25TY3JvbGw/bihcImJ1dHRvblwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYi1oZWFkZXItbmF2aWdhdGlvbi1idXR0b24gbWQtcmlnaHRcIixjbGFzczp0Lm5hdmlnYXRpb25SaWdodEJ1dHRvbkNsYXNzZXMsb246e2NsaWNrOnQubmF2aWdhdGlvblNjcm9sbFJpZ2h0fX0sW24oXCJtZC1pY29uXCIsW3QuX3YoXCJrZXlib2FyZF9hcnJvd19yaWdodFwiKV0pXSwxKTp0Ll9lKCldKSx0Ll92KFwiIFwiKSxuKFwiZGl2XCIse3JlZjpcInRhYkNvbnRlbnRcIixzdGF0aWNDbGFzczpcIm1kLXRhYnMtY29udGVudFwiLHN0eWxlOntoZWlnaHQ6dC5jb250ZW50SGVpZ2h0fX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC10YWJzLXdyYXBwZXJcIixzdHlsZTp7dHJhbnNmb3JtOlwidHJhbnNsYXRlM0QoLVwiK3QuY29udGVudFdpZHRoK1wiLCAwLCAwKVwifX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKV0pXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3RlcHBlclwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5zdGVwc0NsYXNzZXNdfSxbdC5tZFZlcnRpY2FsP3QuX2UoKTpuKFwibWQtd2hpdGVmcmFtZVwiLHtyZWY6XCJzdGVwTmF2aWdhdGlvblwiLHN0YXRpY0NsYXNzOlwibWQtc3RlcHMtbmF2aWdhdGlvblwiLGNsYXNzOnQubmF2aWdhdGlvbkNsYXNzZXMsYXR0cnM6e1wibWQtdGFnXCI6XCJuYXZcIixcIm1kLWVsZXZhdGlvblwiOnQubWRFbGV2YXRpb259fSxbbihcIm1kLXN0ZXAtaGVhZGVyLWNvbnRhaW5lclwiLHtyZWY6XCJzdGVwSGVhZGVyXCIsYXR0cnM6e1wibWQtdmVydGljYWxcIjp0Lm1kVmVydGljYWx9fSx0Ll9sKHQuc3RlcExpc3QsKGZ1bmN0aW9uKGUsaSl7cmV0dXJuIG4oXCJtZC1zdGVwLWhlYWRlclwiLHtrZXk6ZS5pZCxhdHRyczp7c3RlcDplLFwibWQtYWx0ZXJuYXRlLWxhYmVsc1wiOnQubWRBbHRlcm5hdGVMYWJlbHN9LG9uOntjbGljazpmdW5jdGlvbihuKXt0LnNldEFjdGl2ZVN0ZXAoZSl9fX0pfSkpKV0sMSksdC5fdihcIiBcIiksbihcIm1kLXdoaXRlZnJhbWVcIix7YXR0cnM6e1wibWQtZWxldmF0aW9uXCI6dC5tZEVsZXZhdGlvbn19LFt0Lm1kVmVydGljYWw/dC5fZSgpOm4oXCJkaXZcIix7cmVmOlwic3RlcENvbnRlbnRcIixzdGF0aWNDbGFzczpcIm1kLXN0ZXBzLWNvbnRhaW5lclwiLHN0eWxlOntoZWlnaHQ6dC5jb250ZW50SGVpZ2h0fX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwcy13cmFwcGVyXCIsc3R5bGU6e3RyYW5zZm9ybTpcInRyYW5zbGF0ZTNEKC1cIit0LmNvbnRlbnRXaWR0aCtcIiwgMCwgMClcIn19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMildKSx0Ll92KFwiIFwiKSx0Lm1kVmVydGljYWw/bihcImRpdlwiLHtyZWY6XCJzdGVwQ29udGVudFwiLHN0YXRpY0NsYXNzOlwibWQtc3RlcHMtdmVydGljYWwtY29udGFpbmVyXCJ9LFt0Ll90KFwiZGVmYXVsdFwiKV0sMik6dC5fZSgpXSldLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1kaWFsb2ctY29udGVudFwifSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC10b29sYmFyXCIsY2xhc3M6W3QudGhlbWVDbGFzc119LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImxpXCIse3N0YXRpY0NsYXNzOlwibWQtbGlzdC1pdGVtXCIsY2xhc3M6dC5jbGFzc2VzfSxbbihcImFcIix7c3RhdGljQ2xhc3M6XCJtZC1saXN0LWl0ZW0tY29udGFpbmVyIG1kLWJ1dHRvblwiLGF0dHJzOntocmVmOnQuaHJlZix0YXJnZXQ6dC50YXJnZXQsZGlzYWJsZWQ6dC5kaXNhYmxlZH0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe3QuJGVtaXQoXCJjbGlja1wiLGUpfX19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMiksdC5fdihcIiBcIiksbihcIm1kLWluay1yaXBwbGVcIix7YXR0cnM6e2Rpc2FibGVkOnQuZGlzYWJsZWR9fSldLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwLWhlYWRlclwiLGNsYXNzOnQuZ2V0SGVhZGVyQ2xhc3Nlc30sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwLWljb25zXCJ9LFt0Lmljb24/bihcIm1kLWljb25cIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwLWljb25cIn0sW3QuX3YodC5fcyh0Lmljb24pKV0pOnQuX2UoKSx0Ll92KFwiIFwiKSx0Lmljb24/dC5fZSgpOm4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwLW51bWJlclwifSxbbihcInNwYW5cIixbdC5fdih0Ll9zKHQuc3RlcE51bWJlcikpXSldKV0sMSksdC5fdihcIiBcIiksbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXN0ZXAtdGl0bGVzXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3RlcC10aXRsZVwifSxbdC5fdih0Ll9zKHQuc3RlcC5sYWJlbCkpXSksdC5fdihcIiBcIiksdC5zdGVwLm1lc3NhZ2U/bihcInNtYWxsXCIsW3QuX3YodC5fcyh0LnN0ZXAubWVzc2FnZSkpXSk6dC5fZSgpXSksdC5fdihcIiBcIiksdC5zdGVwLnRvb2xUaXA/bihcIm1kLXRvb2x0aXBcIix7YXR0cnM6e1wibWQtZGlyZWN0aW9uXCI6dC5zdGVwLnRvb2x0aXBEaXJlY3Rpb24sXCJtZC1kZWxheVwiOnQuc3RlcC50b29sdGlwRGVsYXl9fSxbdC5fdih0Ll9zKHQuc3RlcC50b29sVGlwKSldKTp0Ll9lKCldLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1ib2FyZFwiLHN0eWxlOnQuc3R5bGVzLGF0dHJzOntpZDp0LmJvYXJkSWR9fSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJ0clwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLXJvd1wiLGNsYXNzOnQuY2xhc3Nlcyxvbjp7Y2xpY2s6dC5hdXRvU2VsZWN0fSxuYXRpdmVPbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7dC5hdXRvU2VsZWN0KGUpfX19LFt0Lmhhc1NlbGVjdGlvbj9uKFwibWQtdGFibGUtY2VsbFwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLXNlbGVjdGlvblwifSxbbihcIm1kLWNoZWNrYm94XCIse2F0dHJzOntkaXNhYmxlZDp0LmlzRGlzYWJsZWR9LG9uOntjaGFuZ2U6dC5zZWxlY3R9LG5hdGl2ZU9uOntjaGFuZ2U6ZnVuY3Rpb24oZSl7dC5zZWxlY3QoZSl9fSxtb2RlbDp7dmFsdWU6dC5jaGVja2JveCxjYWxsYmFjazpmdW5jdGlvbihlKXt0LmNoZWNrYm94PWV9LGV4cHJlc3Npb246XCJjaGVja2JveFwifX0pXSwxKTp0Ll9lKCksdC5fdihcIiBcIiksdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1yYXRpbmctYmFyXCIsY2xhc3M6W3QudGhlbWVDbGFzc10sYXR0cnM6e2Rpc2FibGVkOnQuZGlzYWJsZWR9fSxbdC5zcmNFbXB0eUljb24/bihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWVtcHR5LWljb25cIn0sdC5fbCh0Lm1kTWF4UmF0aW5nLChmdW5jdGlvbihlKXtyZXR1cm4gdC5zcmNFbXB0eUljb24/bihcIm1kLWljb25cIix7a2V5OmUsY2xhc3M6W3QuaWNvbkNsYXNzZXNdLGF0dHJzOntcIm1kLXNyY1wiOnQuc3JjRW1wdHlJY29ufSxuYXRpdmVPbjp7bW91c2VvdmVyOmZ1bmN0aW9uKGUpe3QuaG92ZXJTdGFycyhlKX0sY2xpY2s6ZnVuY3Rpb24oZSl7dC5jbGlja1N0YXJzKGUpfSxtb3VzZW91dDpmdW5jdGlvbihlKXt0Lm9uTW91c2VPdXQoZSl9fX0pOnQuX2UoKX0pKSk6bihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWVtcHR5LWljb25cIn0sdC5fbCh0Lm1kTWF4UmF0aW5nLChmdW5jdGlvbihlKXtyZXR1cm4gbihcIm1kLWljb25cIix7a2V5OmUsY2xhc3M6W3QuaWNvbkNsYXNzZXNdLGF0dHJzOntcIm1kLWljb25zZXRcIjp0Lm1kRW1wdHlJY29uc2V0fSxkb21Qcm9wczp7aW5uZXJIVE1MOnQuX3ModC5lbXB0eUljb24pfSxuYXRpdmVPbjp7bW91c2VvdmVyOmZ1bmN0aW9uKGUpe3QuaG92ZXJTdGFycyhlKX0sY2xpY2s6ZnVuY3Rpb24oZSl7dC5jbGlja1N0YXJzKGUpfSxtb3VzZW91dDpmdW5jdGlvbihlKXt0Lm9uTW91c2VPdXQoZSl9fX0pfSkpKSx0Ll92KFwiIFwiKSx0LnNyY0Z1bGxJY29uP24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1mdWxsLWljb25cIixzdHlsZTp0LmZ1bGxJY29uU3R5bGV9LHQuX2wodC5tZE1heFJhdGluZywoZnVuY3Rpb24oZSl7cmV0dXJuIHQuc3JjRnVsbEljb24/bihcIm1kLWljb25cIix7a2V5OmUsY2xhc3M6W3QuaWNvbkNsYXNzZXNdLGF0dHJzOntcIm1kLXNyY1wiOnQuc3JjRnVsbEljb259LG5hdGl2ZU9uOnttb3VzZW92ZXI6ZnVuY3Rpb24oZSl7dC5ob3ZlclN0YXJzKGUpfSxjbGljazpmdW5jdGlvbihlKXt0LmNsaWNrU3RhcnMoZSl9LG1vdXNlb3V0OmZ1bmN0aW9uKGUpe3Qub25Nb3VzZU91dChlKX19fSk6dC5fZSgpfSkpKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtZnVsbC1pY29uXCIsc3R5bGU6dC5mdWxsSWNvblN0eWxlfSx0Ll9sKHQubWRNYXhSYXRpbmcsKGZ1bmN0aW9uKGUpe3JldHVybiBuKFwibWQtaWNvblwiLHtrZXk6ZSxjbGFzczpbdC5pY29uQ2xhc3Nlc10sYXR0cnM6e1wibWQtaWNvbnNldFwiOnQubWRGdWxsSWNvbnNldH0sZG9tUHJvcHM6e2lubmVySFRNTDp0Ll9zKHQuZnVsbEljb24pfSxuYXRpdmVPbjp7bW91c2VvdmVyOmZ1bmN0aW9uKGUpe3QuaG92ZXJTdGFycyhlKX0sY2xpY2s6ZnVuY3Rpb24oZSl7dC5jbGlja1N0YXJzKGUpfSxtb3VzZW91dDpmdW5jdGlvbihlKXt0Lm9uTW91c2VPdXQoZSl9fX0pfSkpKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJsaVwiLHtzdGF0aWNDbGFzczpcIm1kLWxpc3QtaXRlbVwifSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWxpc3QtaXRlbS1jb250YWluZXJcIn0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1hdmF0YXJcIixjbGFzczpbdC50aGVtZUNsYXNzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3BlZWQtZGlhbFwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtZmlsZVwiLG9uOntjbGljazp0Lm9wZW5QaWNrZXJ9fSxbbihcIm1kLWlucHV0XCIse3JlZjpcInRleHRJbnB1dFwiLGF0dHJzOntyZWFkb25seTpcIlwiLHJlcXVpcmVkOnQucmVxdWlyZWQscGxhY2Vob2xkZXI6dC5wbGFjZWhvbGRlcixkaXNhYmxlZDp0LmRpc2FibGVkfSxtb2RlbDp7dmFsdWU6dC5maWxlbmFtZSxjYWxsYmFjazpmdW5jdGlvbihlKXt0LmZpbGVuYW1lPWV9LGV4cHJlc3Npb246XCJmaWxlbmFtZVwifX0pLHQuX3YoXCIgXCIpLG4oXCJtZC1pY29uXCIsW3QuX3YoXCJhdHRhY2hfZmlsZVwiKV0pLHQuX3YoXCIgXCIpLG4oXCJpbnB1dFwiLHtyZWY6XCJmaWxlSW5wdXRcIixhdHRyczp7dHlwZTpcImZpbGVcIixpZDp0LmlkLG5hbWU6dC5uYW1lLGRpc2FibGVkOnQuZGlzYWJsZWQsbXVsdGlwbGU6dC5tdWx0aXBsZSxhY2NlcHQ6dC5hY2NlcHR9LG9uOntjaGFuZ2U6dC5vbkZpbGVTZWxlY3RlZH19KV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXNpZGVuYXZcIixjbGFzczpbdC50aGVtZUNsYXNzLHQuY2xhc3Nlc10sYXR0cnM6e3RhYmluZGV4OlwiMFwifSxvbjp7a2V5dXA6ZnVuY3Rpb24oZSl7cmV0dXJuXCJidXR0b25cImluIGV8fCF0Ll9rKGUua2V5Q29kZSxcImVzY1wiLDI3KT92b2lkIHQuY2xvc2UoZSk6bnVsbH19fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXNpZGVuYXYtY29udGVudFwifSxbdC5fdChcImRlZmF1bHRcIildLDIpLHQuX3YoXCIgXCIpLG4oXCJtZC1iYWNrZHJvcFwiLHtyZWY6XCJiYWNrZHJvcFwiLHN0YXRpY0NsYXNzOlwibWQtc2lkZW5hdi1iYWNrZHJvcFwiLG9uOntjbG9zZTp0LmNsb3NlfX0pXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtY2FyZC1oZWFkZXItdGV4dFwifSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwXCIsc3R5bGU6dC5zdHlsZXMsYXR0cnM6e2lkOnQuc3RlcElkfX0sW3QudmVydGljYWw/bihcIm1kLXN0ZXAtaGVhZGVyXCIse2F0dHJzOntzdGVwOnQuZ2V0U3RlcERhdGEoKX0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe3Quc2V0QWN0aXZlU3RlcCgpfX19KTp0Ll9lKCksdC5fdihcIiBcIiksIXQudmVydGljYWx8fHQudmVydGljYWwmJnQuaXNDdXJyZW50U3RlcD9uKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3RlcC1jb250ZW50XCJ9LFt0Ll90KFwiZGVmYXVsdFwiKSx0Ll92KFwiIFwiKSwhdC52ZXJ0aWNhbHx8dC52ZXJ0aWNhbCYmdC5pc0N1cnJlbnRTdGVwP24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zdGVwLWFjdGlvbnNcIn0sW24oXCJtZC1idXR0b25cIix7c3RhdGljQ2xhc3M6XCJtZC1yYWlzZWQgbWQtcHJpbWFyeVwiLGF0dHJzOntkaXNhYmxlZDohdC5tZENvbnRpbnVlfSxvbjp7Y2xpY2s6dC5tb3ZlTmV4dFN0ZXB9fSxbdC5fdih0Ll9zKHQuY29udGludWVUZXh0KSldKSx0Ll92KFwiIFwiKSxuKFwibWQtYnV0dG9uXCIse2F0dHJzOntkaXNhYmxlZDohdC5jYW5Hb0JhY2t9LG9uOntjbGljazp0Lm1vdmVQcmV2aW91c1N0ZXB9fSxbdC5fdih0Ll9zKHQubWRCdXR0b25CYWNrKSldKV0sMSk6dC5fZSgpXSwyKTp0Ll9lKCldLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJtZC1pbnB1dC1jb250YWluZXJcIix7c3RhdGljQ2xhc3M6XCJtZC1jaGlwc1wiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXSxvbjp7Y2xpY2s6dC5hcHBseUlucHV0Rm9jdXN9fSxbdC5fbCh0LnNlbGVjdGVkQ2hpcHMsKGZ1bmN0aW9uKGUpe3JldHVybiBuKFwibWQtY2hpcFwiLHtrZXk6ZSxhdHRyczp7XCJtZC1lZGl0YWJsZVwiOiF0Lm1kU3RhdGljLFwibWQtZGVsZXRhYmxlXCI6IXQubWRTdGF0aWMsZGlzYWJsZWQ6dC5kaXNhYmxlZH0sb246e2VkaXQ6ZnVuY3Rpb24obil7dC5lZGl0Q2hpcChlKX0sZGVsZXRlOmZ1bmN0aW9uKG4pe3QuZGVsZXRlQ2hpcChlKX19fSxbdC5fdChcImNoaXBcIixbdC5fdih0Ll9zKGUpKV0se3ZhbHVlOmV9KV0sMil9KSksdC5fdihcIiBcIiksbihcIm1kLWlucHV0XCIse2RpcmVjdGl2ZXM6W3tuYW1lOlwic2hvd1wiLHJhd05hbWU6XCJ2LXNob3dcIix2YWx1ZTohdC5tZFN0YXRpYyxleHByZXNzaW9uOlwiIW1kU3RhdGljXCJ9XSxyZWY6XCJpbnB1dFwiLGF0dHJzOnt0eXBlOnQubWRJbnB1dFR5cGUscGxhY2Vob2xkZXI6dC5tZElucHV0UGxhY2Vob2xkZXIsaWQ6dC5pbnB1dElkLG5hbWU6dC5tZElucHV0TmFtZSxkaXNhYmxlZDp0LmRpc2FibGVkLHRhYmluZGV4OlwiMFwiLGRlYm91bmNlOjB9LG5hdGl2ZU9uOntrZXlkb3duOltmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwiZGVsZXRlXCIsWzgsNDZdKT92b2lkIHQuZGVsZXRlTGFzdENoaXAoZSk6bnVsbH0sZnVuY3Rpb24oZSl7cmV0dXJuXCJidXR0b25cImluIGV8fCF0Ll9rKGUua2V5Q29kZSxcImVudGVyXCIsMTMpPyhlLnByZXZlbnREZWZhdWx0KCksdm9pZCB0LmFkZENoaXAoZSkpOm51bGx9LGZ1bmN0aW9uKGUpe3JldHVyblwiYnV0dG9uXCJpbiBlfHwxODY9PT1lLmtleUNvZGU/KGUucHJldmVudERlZmF1bHQoKSx2b2lkIHQuYWRkQ2hpcChlKSk6bnVsbH1dfSxtb2RlbDp7dmFsdWU6dC5jdXJyZW50Q2hpcCxjYWxsYmFjazpmdW5jdGlvbihlKXt0LmN1cnJlbnRDaGlwPWV9LGV4cHJlc3Npb246XCJjdXJyZW50Q2hpcFwifX0pLHQuX3YoXCIgXCIpLHQuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwibWQtZGlhbG9nXCIse3JlZjpcImRpYWxvZ1wiLHN0YXRpY0NsYXNzOlwibWQtZGlhbG9nLWFsZXJ0XCIsb246e2Nsb3NlOmZ1bmN0aW9uKGUpe3QuZmlyZUNsb3NlRXZlbnQoKX19fSxbdC5tZFRpdGxlP24oXCJtZC1kaWFsb2ctdGl0bGVcIixbdC5fdih0Ll9zKHQubWRUaXRsZSkpXSk6dC5fZSgpLHQuX3YoXCIgXCIpLHQubWRDb250ZW50SHRtbD9uKFwibWQtZGlhbG9nLWNvbnRlbnRcIix7ZG9tUHJvcHM6e2lubmVySFRNTDp0Ll9zKHQubWRDb250ZW50SHRtbCl9fSk6bihcIm1kLWRpYWxvZy1jb250ZW50XCIsW3QuX3YodC5fcyh0Lm1kQ29udGVudCkpXSksdC5fdihcIiBcIiksbihcIm1kLWRpYWxvZy1hY3Rpb25zXCIsW24oXCJtZC1idXR0b25cIix7c3RhdGljQ2xhc3M6XCJtZC1wcmltYXJ5XCIsb246e2NsaWNrOmZ1bmN0aW9uKGUpe3QuY2xvc2UoKX19fSxbdC5fdih0Ll9zKHQubWRPa1RleHQpKV0pXSwxKV0sMSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImhyXCIse3N0YXRpY0NsYXNzOlwibWQtZGl2aWRlclwifSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcInRkXCIse3N0YXRpY0NsYXNzOlwibWQtdGFibGUtY2VsbFwiLGNsYXNzOnQuY2xhc3Nlc30sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC10YWJsZS1jZWxsLWNvbnRhaW5lclwifSxbdC5fdChcImRlZmF1bHRcIildLDIpXSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWNhcmQtaGVhZGVyXCJ9LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcIm1kLW1lbnUtaXRlbVwiLHtzdGF0aWNDbGFzczpcIm1kLW9wdGlvblwiLGNsYXNzOnQuY2xhc3NlcyxhdHRyczp7dGFiaW5kZXg6XCItMVwifSxvbjp7Y2xpY2s6dC5zZWxlY3RPcHRpb259fSxbdC5wYXJlbnRTZWxlY3QubXVsdGlwbGU/bihcIm1kLWNoZWNrYm94XCIse3N0YXRpY0NsYXNzOlwibWQtcHJpbWFyeVwiLG1vZGVsOnt2YWx1ZTp0LmNoZWNrLGNhbGxiYWNrOmZ1bmN0aW9uKGUpe3QuY2hlY2s9ZX0sZXhwcmVzc2lvbjpcImNoZWNrXCJ9fSxbbihcInNwYW5cIix7cmVmOlwiaXRlbVwifSxbdC5fdChcImRlZmF1bHRcIildLDIpXSk6bihcInNwYW5cIix7cmVmOlwiaXRlbVwifSxbdC5fdChcImRlZmF1bHRcIildLDIpXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtdGFibGUtYWx0ZXJuYXRlLWhlYWRlclwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXX0sW24oXCJtZC10b29sYmFyXCIsW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1jb3VudGVyXCJ9LFtuKFwic3BhblwiLHtyZWY6XCJjb3VudGVyXCJ9LFt0Ll92KHQuX3ModC5udW1iZXJPZlNlbGVjdGVkKSldKSx0Ll92KFwiIFwiKSxuKFwic3BhblwiLFt0Ll92KHQuX3ModC5tZFNlbGVjdGVkTGFiZWwpKV0pXSksdC5fdihcIiBcIiksdC5fdChcImRlZmF1bHRcIildLDIpXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwidGV4dGFyZWFcIix7c3RhdGljQ2xhc3M6XCJtZC1pbnB1dFwiLGF0dHJzOntkaXNhYmxlZDp0LmRpc2FibGVkLHJlcXVpcmVkOnQucmVxdWlyZWQscGxhY2Vob2xkZXI6dC5wbGFjZWhvbGRlcixtYXhsZW5ndGg6dC5tYXhsZW5ndGgscmVhZG9ubHk6dC5yZWFkb25seX0sZG9tUHJvcHM6e3ZhbHVlOnQudmFsdWV9LG9uOntmb2N1czp0Lm9uRm9jdXMsYmx1cjp0Lm9uQmx1cixpbnB1dDp0Lm9uSW5wdXR9fSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gdC5tb3VudGVkfHwhdC5kaXNhYmxlZD9uKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtaW5rLXJpcHBsZVwifSxbbihcImRpdlwiLHtyZWY6XCJyaXBwbGVcIixzdGF0aWNDbGFzczpcIm1kLXJpcHBsZVwiLGNsYXNzOnQuY2xhc3NlcyxzdHlsZTp0LnN0eWxlc30pXSk6dC5fZSgpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC10YWJsZS1lZGl0XCIsb246e2tleWRvd246ZnVuY3Rpb24oZSl7cmV0dXJuXCJidXR0b25cImluIGV8fCF0Ll9rKGUua2V5Q29kZSxcImVzY1wiLDI3KT92b2lkIHQuY2xvc2VEaWFsb2coZSk6bnVsbH19fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLWVkaXQtdHJpZ2dlclwiLGNsYXNzOnQudHJpZ2dlckNsYXNzZXMsb246e2NsaWNrOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdC5vcGVuRGlhbG9nKGUpfX19LFt0Ll92KFwiXFxuICAgIFwiK3QuX3ModC52YWx1ZXx8dC5tZFBsYWNlaG9sZGVyKStcIlxcbiAgXCIpXSksdC5fdihcIiBcIiksbihcImRpdlwiLHtyZWY6XCJkaWFsb2dcIixzdGF0aWNDbGFzczpcIm1kLXRhYmxlLWRpYWxvZ1wiLGNsYXNzOnQuZGlhbG9nQ2xhc3Nlc30sW24oXCJtZC1pbnB1dC1jb250YWluZXJcIixbbihcIm1kLWlucHV0XCIse3JlZjpcImlucHV0XCIsYXR0cnM6e2lkOnQubWRJZCxuYW1lOnQubWROYW1lLG1heGxlbmd0aDp0Lm1kTWF4bGVuZ3RoLHZhbHVlOnQudmFsdWUscGxhY2Vob2xkZXI6dC5tZFBsYWNlaG9sZGVyfSxuYXRpdmVPbjp7a2V5ZG93bjpmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwiZW50ZXJcIiwxMyk/dm9pZCB0LmNvbmZpcm1EaWFsb2coZSk6bnVsbH19fSldLDEpXSwxKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuXCJtZC1saXN0XCI9PT10LiRwYXJlbnQuJG9wdGlvbnMuX2NvbXBvbmVudFRhZz9uKFwibGlcIix7c3RhdGljQ2xhc3M6XCJtZC1zdWJoZWFkZXJcIixjbGFzczpbdC50aGVtZUNsYXNzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKTpuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3ViaGVhZGVyXCIsY2xhc3M6W3QudGhlbWVDbGFzc119LFt0Ll90KFwiZGVmYXVsdFwiKV0sMil9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWNhcmQtY29udGVudFwifSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIHQuaHJlZj9uKFwiYVwiLHtzdGF0aWNDbGFzczpcIm1kLWJ1dHRvblwiLGNsYXNzOlt0LnRoZW1lQ2xhc3NdLGF0dHJzOntocmVmOnQuaHJlZixkaXNhYmxlZDp0LmRpc2FibGVkLHRhcmdldDp0LnRhcmdldCxyZWw6dC5uZXdSZWx9LG9uOntjbGljazpmdW5jdGlvbihlKXt0LiRlbWl0KFwiY2xpY2tcIixlKX19fSxbbihcIm1kLWluay1yaXBwbGVcIix7YXR0cnM6e1wibWQtZGlzYWJsZWRcIjp0LmRpc2FibGVkfX0pLHQuX3YoXCIgXCIpLHQuX3QoXCJkZWZhdWx0XCIpXSwyKTpuKFwiYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtYnV0dG9uXCIsY2xhc3M6W3QudGhlbWVDbGFzc10sYXR0cnM6e3R5cGU6dC50eXBlLGRpc2FibGVkOnQuZGlzYWJsZWR9LG9uOntjbGljazpmdW5jdGlvbihlKXt0LiRlbWl0KFwiY2xpY2tcIixlKX19fSxbbihcIm1kLWluay1yaXBwbGVcIix7YXR0cnM6e1wibWQtZGlzYWJsZWRcIjp0LmRpc2FibGVkfX0pLHQuX3YoXCIgXCIpLHQuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwidGhcIix7c3RhdGljQ2xhc3M6XCJtZC10YWJsZS1oZWFkXCIsY2xhc3M6dC5jbGFzc2VzLG9uOntjbGljazp0LmNoYW5nZVNvcnR9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXRhYmxlLWhlYWQtY29udGFpbmVyXCJ9LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtdGFibGUtaGVhZC10ZXh0IG1kLXRlc3RcIn0sW3QubWRTb3J0Qnk/bihcIm1kLWljb25cIix7c3RhdGljQ2xhc3M6XCJtZC1zb3J0YWJsZS1pY29uXCJ9LFt0Ll92KFwiYXJyb3dfdXB3YXJkXCIpXSk6dC5fZSgpLHQuX3YoXCIgXCIpLHQuX3QoXCJkZWZhdWx0XCIpLHQuX3YoXCIgXCIpLHQubWRUb29sdGlwP24oXCJtZC10b29sdGlwXCIsW3QuX3YodC5fcyh0Lm1kVG9vbHRpcCkpXSk6dC5fZSgpXSwyKSx0Ll92KFwiIFwiKSxuKFwibWQtaW5rLXJpcHBsZVwiLHthdHRyczp7XCJtZC1kaXNhYmxlZFwiOiF0Lm1kU29ydEJ5fX0pXSwxKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zd2l0Y2hcIixjbGFzczpbdC50aGVtZUNsYXNzLHQuY2xhc3Nlc119LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtc3dpdGNoLWNvbnRhaW5lclwiLG9uOntjbGljazpmdW5jdGlvbihlKXt0LnRvZ2dsZShlKX19fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXN3aXRjaC10aHVtYlwiLHN0eWxlOnQuc3R5bGVzfSxbbihcImlucHV0XCIse2F0dHJzOnt0eXBlOlwiY2hlY2tib3hcIixuYW1lOnQubmFtZSxpZDp0LmlkLGRpc2FibGVkOnQuZGlzYWJsZWQsdGFiaW5kZXg6XCItMVwifSxkb21Qcm9wczp7dmFsdWU6dC52YWx1ZX19KSx0Ll92KFwiIFwiKSxuKFwiYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtc3dpdGNoLWhvbGRlclwiLGF0dHJzOnt0eXBlOnQudHlwZX19KSx0Ll92KFwiIFwiKSxuKFwibWQtaW5rLXJpcHBsZVwiLHthdHRyczp7XCJtZC1kaXNhYmxlZFwiOnQuZGlzYWJsZWR9fSldLDEpXSksdC5fdihcIiBcIiksdC4kc2xvdHMuZGVmYXVsdD9uKFwibGFiZWxcIix7c3RhdGljQ2xhc3M6XCJtZC1zd2l0Y2gtbGFiZWxcIixhdHRyczp7Zm9yOnQuaWR8fHQubmFtZX19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMik6dC5fZSgpXSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLW1lbnUtY29udGVudFwiLGF0dHJzOnt0YWJpbmRleDpcIi0xXCJ9LG9uOntrZXlkb3duOltmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwiZXNjXCIsMjcpPyhlLnByZXZlbnREZWZhdWx0KCksdm9pZCB0LmNsb3NlKGUpKTpudWxsfSxmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwidGFiXCIsOSk/KGUucHJldmVudERlZmF1bHQoKSx2b2lkIHQuY2xvc2UoZSkpOm51bGx9LGZ1bmN0aW9uKGUpe3JldHVyblwiYnV0dG9uXCJpbiBlfHwhdC5fayhlLmtleUNvZGUsXCJ1cFwiLDM4KT8oZS5wcmV2ZW50RGVmYXVsdCgpLHZvaWQgdC5oaWdobGlnaHRJdGVtKFwidXBcIikpOm51bGx9LGZ1bmN0aW9uKGUpe3JldHVyblwiYnV0dG9uXCJpbiBlfHwhdC5fayhlLmtleUNvZGUsXCJkb3duXCIsNDApPyhlLnByZXZlbnREZWZhdWx0KCksdm9pZCB0LmhpZ2hsaWdodEl0ZW0oXCJkb3duXCIpKTpudWxsfSxmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwiZW50ZXJcIiwxMyk/dm9pZCB0LmZpcmVDbGljayhlKTpudWxsfSxmdW5jdGlvbihlKXtyZXR1cm5cImJ1dHRvblwiaW4gZXx8IXQuX2soZS5rZXlDb2RlLFwic3BhY2VcIiwzMik/dm9pZCB0LmZpcmVDbGljayhlKTpudWxsfV19fSxbbihcIm1kLWxpc3RcIixbdC5fdChcImRlZmF1bHRcIildLDIpXSwxKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtZGlhbG9nLWFjdGlvbnNcIn0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbih0LGUpe3QuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxlPXQuJGNyZWF0ZUVsZW1lbnQsbj10Ll9zZWxmLl9jfHxlO3JldHVybiBuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtYm9hcmRzXCIsY2xhc3M6W3QudGhlbWVDbGFzcyx0LmJvYXJkQ2xhc3Nlc119LFtuKFwiZGl2XCIse3JlZjpcImJvYXJkc0NvbnRlbnRcIixzdGF0aWNDbGFzczpcIm1kLWJvYXJkcy1jb250ZW50XCIsc3R5bGU6e2hlaWdodDp0LmNvbnRlbnRIZWlnaHR9fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWJvYXJkcy13cmFwcGVyXCIsc3R5bGU6e3RyYW5zZm9ybTpcInRyYW5zbGF0ZTNEKC1cIit0LmNvbnRlbnRXaWR0aCtcIiwgMCwgMClcIn19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMildKSx0Ll92KFwiIFwiKSxuKFwibmF2XCIse3JlZjpcImJvYXJkTmF2aWdhdGlvblwiLHN0YXRpY0NsYXNzOlwibWQtYm9hcmRzLW5hdmlnYXRpb25cIixjbGFzczp0Lm5hdmlnYXRpb25DbGFzc2VzfSxbdC5tZENvbnRyb2xzP3QuX2UoKTpuKFwic3BhblwiLHtzdGF0aWNTdHlsZTp7ZmxleDpcIjFcIn19KSx0Ll92KFwiIFwiKSx0Lm1kQ29udHJvbHM/bihcIm1kLWJ1dHRvblwiLHtvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7dC5tb3ZlUHJldkJvYXJkKCl9fX0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1ib2FyZC1oZWFkZXItY29udGFpbmVyXCJ9LFtuKFwibWQtaWNvblwiLHtzdGF0aWNDbGFzczpcIm1kLWNvbnRyb2xcIn0sW3QuX3YoXCJjaGV2cm9uX2xlZnRcIildKV0sMSldKTp0Ll9lKCksdC5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljU3R5bGU6e2ZsZXg6XCIxXCJ9fSksdC5fdihcIiBcIiksdC5fbCh0LmJvYXJkTGlzdCwoZnVuY3Rpb24oZSl7cmV0dXJuIG4oXCJidXR0b25cIix7a2V5OmUuaWQscmVmOlwiYm9hcmRIZWFkZXJcIixyZWZJbkZvcjohMCxzdGF0aWNDbGFzczpcIm1kLWJvYXJkLWhlYWRlclwiLGNsYXNzOnQuZ2V0SGVhZGVyQ2xhc3MoZSksYXR0cnM6e3R5cGU6XCJidXR0b25cIixkaXNhYmxlZDplLmRpc2FibGVkfSxvbjp7Y2xpY2s6ZnVuY3Rpb24obil7dC5zZXRBY3RpdmVCb2FyZChlLCEwKX19fSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWJvYXJkLWhlYWRlci1jb250YWluZXJcIn0sW24oXCJtZC1pY29uXCIsW3QuX3YoXCJmaWJlcl9tYW51YWxfcmVjb3JkXCIpXSldLDEpXSl9KSksdC5fdihcIiBcIiksbihcInNwYW5cIix7c3RhdGljU3R5bGU6e2ZsZXg6XCIxXCJ9fSksdC5fdihcIiBcIiksdC5tZENvbnRyb2xzP24oXCJtZC1idXR0b25cIix7b246e2NsaWNrOmZ1bmN0aW9uKGUpe3QubW92ZU5leHRCb2FyZCgpfX19LFtuKFwiZGl2XCIse3N0YXRpY0NsYXNzOlwibWQtYm9hcmQtaGVhZGVyLWNvbnRhaW5lclwifSxbbihcIm1kLWljb25cIix7c3RhdGljQ2xhc3M6XCJtZC1jb250cm9sXCJ9LFt0Ll92KFwiY2hldnJvbl9yaWdodFwiKV0pXSwxKV0pOnQuX2UoKSx0Ll92KFwiIFwiKSx0Lm1kQ29udHJvbHM/dC5fZSgpOm4oXCJzcGFuXCIse3N0YXRpY1N0eWxlOntmbGV4OlwiMVwifX0pLHQuX3YoXCIgXCIpLG4oXCJzcGFuXCIse3JlZjpcImluZGljYXRvclwifSldLDIpXSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWNoZWNrYm94XCIsY2xhc3M6W3QudGhlbWVDbGFzcyx0LmNsYXNzZXNdfSxbbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLWNoZWNrYm94LWNvbnRhaW5lclwiLGF0dHJzOnt0YWJpbmRleDpcIjBcIn0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCksdC50b2dnbGVDaGVjayhlKX19fSxbbihcImlucHV0XCIse2F0dHJzOnt0eXBlOlwiY2hlY2tib3hcIixuYW1lOnQubmFtZSxpZDp0LmlkLGRpc2FibGVkOnQuZGlzYWJsZWQsdGFiaW5kZXg6XCItMVwifSxkb21Qcm9wczp7dmFsdWU6dC52YWx1ZSxjaGVja2VkOnQuY2hlY2tlZH19KSx0Ll92KFwiIFwiKSxuKFwibWQtaW5rLXJpcHBsZVwiLHthdHRyczp7XCJtZC1kaXNhYmxlZFwiOnQuZGlzYWJsZWR9fSldLDEpLHQuX3YoXCIgXCIpLHQuJHNsb3RzLmRlZmF1bHQ/bihcImxhYmVsXCIse3N0YXRpY0NsYXNzOlwibWQtY2hlY2tib3gtbGFiZWxcIixhdHRyczp7Zm9yOnQuaWR8fHQubmFtZX0sb246e2NsaWNrOmZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSx0LnRvZ2dsZUNoZWNrKGUpfX19LFt0Ll90KFwiZGVmYXVsdFwiKV0sMik6dC5fZSgpXSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXNlbGVjdFwiLGNsYXNzOlt0LnRoZW1lQ2xhc3MsdC5jbGFzc2VzXX0sW24oXCJtZC1tZW51XCIsdC5fYih7YXR0cnM6e1wibWQtY2xvc2Utb24tc2VsZWN0XCI6IXQubXVsdGlwbGV9LG9uOntvcGVuZWQ6ZnVuY3Rpb24oZSl7dC4kZW1pdChcIm9wZW5cIil9LGNsb3NlZDpmdW5jdGlvbihlKXt0LiRlbWl0KFwiY2xvc2VcIil9fX0sXCJtZC1tZW51XCIsdC5tZE1lbnVPcHRpb25zKSxbdC5fdChcImljb25cIiksdC5fdihcIiBcIiksbihcInNwYW5cIix7cmVmOlwidmFsdWVcIixzdGF0aWNDbGFzczpcIm1kLXNlbGVjdC12YWx1ZVwiLHN0eWxlOnQudmFsdWVTdHlsZSxhdHRyczp7XCJtZC1tZW51LXRyaWdnZXJcIjpcIlwifX0sW3QuX3YodC5fcyh0LnNlbGVjdGVkVGV4dHx8dC5wbGFjZWhvbGRlcikpXSksdC5fdihcIiBcIiksbihcIm1kLW1lbnUtY29udGVudFwiLHtzdGF0aWNDbGFzczpcIm1kLXNlbGVjdC1jb250ZW50XCIsY2xhc3M6W3QudGhlbWVDbGFzcyx0LmNvbnRlbnRDbGFzc2VzXX0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKV0sMiksdC5fdihcIiBcIiksbihcInNlbGVjdFwiLHthdHRyczp7bmFtZTp0Lm5hbWUsaWQ6dC5pZCxyZXF1aXJlZDp0LnJlcXVpcmVkLGRpc2FibGVkOnQuZGlzYWJsZWQsdGFiaW5kZXg6XCItMVwifX0sW3QubXVsdGlwbGU/dC5fZSgpOm4oXCJvcHRpb25cIix7YXR0cnM6e3NlbGVjdGVkOlwidHJ1ZVwifSxkb21Qcm9wczp7dmFsdWU6dC5zZWxlY3RlZFZhbHVlfX0sW3QuX3YodC5fcyh0LnNlbGVjdGVkVGV4dCkpXSksdC5fdihcIiBcIiksdC5fbCh0Lm11bHRpcGxlT3B0aW9ucywoZnVuY3Rpb24oZSl7cmV0dXJuIGUudmFsdWU/bihcIm9wdGlvblwiLHthdHRyczp7c2VsZWN0ZWQ6XCJ0cnVlXCJ9LGRvbVByb3BzOnt2YWx1ZTplLnZhbHVlfX0sW3QuX3YodC5fcyhlLnRleHQpKV0pOnQuX2UoKX0pKV0sMildLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJzcGFuXCIse3N0YXRpY0NsYXNzOlwibWQtdG9vbHRpcFwiLGNsYXNzOnQuY2xhc3NlcyxzdHlsZTp0LnN0eWxlfSxbdC5fdChcImRlZmF1bHRcIildLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJpbWdcIix7c3RhdGljQ2xhc3M6XCJtZC1pbWFnZVwiLGNsYXNzOnQuY2xhc3NlcyxhdHRyczp7c3JjOnQubWRTcmN9fSl9LHN0YXRpY1JlbmRlckZuczpbXX19KSwoZnVuY3Rpb24odCxlKXt0LmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMsZT10LiRjcmVhdGVFbGVtZW50LG49dC5fc2VsZi5fY3x8ZTtyZXR1cm4gbihcImRpdlwiLHtzdGF0aWNDbGFzczpcIm1kLXNuYWNrYmFyXCIsY2xhc3M6W3QudGhlbWVDbGFzcyx0LmNsYXNzZXNdLGF0dHJzOntpZDp0LnNuYWNrYmFySWR9LG9uOnttb3VzZWVudGVyOnQucGF1c2VUaW1lb3V0LG1vdXNlbGVhdmU6dC5yZXN1bWVUaW1lb3V0fX0sW24oXCJkaXZcIix7cmVmOlwiY29udGFpbmVyXCIsc3RhdGljQ2xhc3M6XCJtZC1zbmFja2Jhci1jb250YWluZXJcIn0sW24oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1zbmFja2Jhci1jb250ZW50XCJ9LFt0Ll90KFwiZGVmYXVsdFwiKV0sMildKV0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1tZW51XCJ9LFt0Ll90KFwiZGVmYXVsdFwiKSx0Ll92KFwiIFwiKSxuKFwibWQtYmFja2Ryb3BcIix7cmVmOlwiYmFja2Ryb3BcIixzdGF0aWNDbGFzczpcIm1kLW1lbnUtYmFja2Ryb3AgbWQtdHJhbnNwYXJlbnQgbWQtYWN0aXZlXCIsb246e2Nsb3NlOnQuY2xvc2V9fSldLDIpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJtZC1kaWFsb2dcIix7cmVmOlwiZGlhbG9nXCIsc3RhdGljQ2xhc3M6XCJtZC1kaWFsb2ctY29uZmlybVwiLG9uOntjbG9zZTpmdW5jdGlvbihlKXt0LmZpcmVDbG9zZUV2ZW50KFwiY2FuY2VsXCIpfX19LFt0Lm1kVGl0bGU/bihcIm1kLWRpYWxvZy10aXRsZVwiLFt0Ll92KHQuX3ModC5tZFRpdGxlKSldKTp0Ll9lKCksdC5fdihcIiBcIiksdC5tZENvbnRlbnRIdG1sP24oXCJtZC1kaWFsb2ctY29udGVudFwiLHtkb21Qcm9wczp7aW5uZXJIVE1MOnQuX3ModC5tZENvbnRlbnRIdG1sKX19KTpuKFwibWQtZGlhbG9nLWNvbnRlbnRcIixbdC5fdih0Ll9zKHQubWRDb250ZW50KSldKSx0Ll92KFwiIFwiKSxuKFwibWQtZGlhbG9nLWFjdGlvbnNcIixbbihcIm1kLWJ1dHRvblwiLHtzdGF0aWNDbGFzczpcIm1kLXByaW1hcnlcIixvbjp7Y2xpY2s6ZnVuY3Rpb24oZSl7dC5jbG9zZShcImNhbmNlbFwiKX19fSxbdC5fdih0Ll9zKHQubWRDYW5jZWxUZXh0KSldKSx0Ll92KFwiIFwiKSxuKFwibWQtYnV0dG9uXCIse3N0YXRpY0NsYXNzOlwibWQtcHJpbWFyeVwiLG9uOntjbGljazpmdW5jdGlvbihlKXt0LmNsb3NlKFwib2tcIil9fX0sW3QuX3YodC5fcyh0Lm1kT2tUZXh0KSldKV0sMSldLDEpfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1iYWNrZHJvcFwiLG9uOntjbGljazp0LmNsb3NlLGtleXVwOmZ1bmN0aW9uKGUpe3JldHVyblwiYnV0dG9uXCJpbiBlfHwhdC5fayhlLmtleUNvZGUsXCJlc2NcIiwyNyk/dm9pZCB0LmNsb3NlKGUpOm51bGx9fX0pfSxzdGF0aWNSZW5kZXJGbnM6W119fSksKGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPXtyZW5kZXI6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dC4kY3JlYXRlRWxlbWVudCxuPXQuX3NlbGYuX2N8fGU7cmV0dXJuIG4oXCJkaXZcIix7c3RhdGljQ2xhc3M6XCJtZC1saXN0LWV4cGFuZC1jb250YWluZXJcIn0sW3QuX3QoXCJkZWZhdWx0XCIpXSwyKX0sc3RhdGljUmVuZGVyRm5zOltdfX0pLChmdW5jdGlvbihlLG4pe2UuZXhwb3J0cz10fSksKGZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZSxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgbz1uKDExNCksYT1pKG8pLHI9big4MCkscz1pKHIpLGQ9big4MSksbD1pKGQpLGM9big4MiksdT1pKGMpLG09big4MyksZj1pKG0pLHA9big4NCksaD1pKHApLGI9big4NSksdj1pKGIpLEU9big4NiksZz1pKEUpLF89big4NyksQz1pKF8pLE09big4OCksVD1pKE0pLEE9big4OSkseD1pKEEpLE49big5MCkseT1pKE4pLE89big5MSksUz1pKE8pLFI9big5Miksdz1pKFIpLGs9big5MyksUD1pKGspLEg9big5NCksTD1pKEgpLCQ9big5NSksST1pKCQpLEI9big5NiksRD1pKEIpLEY9big5Nyksaj1pKEYpLFc9big5OCksWT1pKFcpLFY9big5OSksVT1pKFYpLHo9bigxMDApLEc9aSh6KSxxPW4oMTAxKSxLPWkocSksWD1uKDEwMiksSj1pKFgpLFE9bigxMDMpLFo9aShRKSx0dD1uKDEwNCksZXQ9aSh0dCksbnQ9bigxMDUpLGl0PWkobnQpLG90PW4oMTA2KSxhdD1pKG90KSxydD1uKDEwNyksc3Q9aShydCksZHQ9bigxMDgpLGx0PWkoZHQpLGN0PW4oMTA5KSx1dD1pKGN0KSxtdD1uKDExMCksZnQ9aShtdCkscHQ9bigxMTEpLGh0PWkocHQpLGJ0PW4oMTEyKSx2dD1pKGJ0KSxFdD1uKDExMyksZ3Q9aShFdCksX3Q9e01kQ29yZTphLmRlZmF1bHQsTWRBdmF0YXI6cy5kZWZhdWx0LE1kQmFja2Ryb3A6bC5kZWZhdWx0LE1kQm90dG9tQmFyOnUuZGVmYXVsdCxNZEJ1dHRvbjpmLmRlZmF1bHQsTWRCdXR0b25Ub2dnbGU6aC5kZWZhdWx0LE1kQ2FyZDp2LmRlZmF1bHQsTWRDaGVja2JveDpnLmRlZmF1bHQsTWRDaGlwczpDLmRlZmF1bHQsTWREaWFsb2c6VC5kZWZhdWx0LE1kRGl2aWRlcjp4LmRlZmF1bHQsTWRGaWxlOnkuZGVmYXVsdCxNZEljb246Uy5kZWZhdWx0LE1kSW1hZ2U6dy5kZWZhdWx0LE1kSW5wdXRDb250YWluZXI6UC5kZWZhdWx0LE1kTGF5b3V0OkwuZGVmYXVsdCxNZExpc3Q6SS5kZWZhdWx0LE1kTWVudTpELmRlZmF1bHQsTWRPbmJvYXJkaW5nOmouZGVmYXVsdCxNZFByb2dyZXNzOlkuZGVmYXVsdCxNZFJhZGlvOlUuZGVmYXVsdCxNZFJhdGluZ0JhcjpHLmRlZmF1bHQsTWRTZWxlY3Q6Sy5kZWZhdWx0LE1kU2lkZW5hdjpKLmRlZmF1bHQsTWRTbmFja2JhcjpaLmRlZmF1bHQsTWRTcGVlZERpYWw6ZXQuZGVmYXVsdCxNZFNwaW5uZXI6aXQuZGVmYXVsdCxNZFN0ZXBwZXI6YXQuZGVmYXVsdCxNZFN1YmhlYWRlcjpzdC5kZWZhdWx0LE1kU3dpdGNoOmx0LmRlZmF1bHQsTWRUYWJsZTp1dC5kZWZhdWx0LE1kVGFiczpmdC5kZWZhdWx0LE1kVG9vbGJhcjpodC5kZWZhdWx0LE1kVG9vbHRpcDp2dC5kZWZhdWx0LE1kV2hpdGVmcmFtZTpndC5kZWZhdWx0fTtfdC5pbnN0YWxsPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSBpbiBfdCl7dmFyIG49X3RbZV07biYmXCJpbnN0YWxsXCIhPT1lJiZ0LnVzZShuKX19LGUuZGVmYXVsdD1fdCx0LmV4cG9ydHM9ZS5kZWZhdWx0fSksLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwsLCwoZnVuY3Rpb24odCxlLG4pe3QuZXhwb3J0cz1uKDQ0NSl9KV0pfSkpOyJdfQ==
},{"vue":50}],49:[function(require,module,exports){
(function (process){
/**
  * vue-router v2.7.0
  * (c) 2017 Evan You
  * @license MIT
  */
'use strict';

/*  */

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if (process.env.NODE_ENV !== 'production' && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

var View = {
  name: 'router-view',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data;

    data.routerView = true;

    // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots
    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {});

    // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.
    var depth = 0;
    var inactive = false;
    while (parent && parent._routerRoot !== parent) {
      if (parent.$vnode && parent.$vnode.data.routerView) {
        depth++;
      }
      if (parent._inactive) {
        inactive = true;
      }
      parent = parent.$parent;
    }
    data.routerViewDepth = depth;

    // render previous view if the tree is inactive and kept-alive
    if (inactive) {
      return h(cache[name], data, children);
    }

    var matched = route.matched[depth];
    // render empty node if no matched route
    if (!matched) {
      cache[name] = null;
      return h();
    }

    var component = cache[name] = matched.components[name];

    // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks
    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];
      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    }

    // also regiseter instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    };

    // resolve props
    data.props = resolveProps(route, matched.props && matched.props[name]);

    return h(component, data, children);
  }
};

function resolveProps(route, config) {
  switch (typeof config === 'undefined' ? 'undefined' : _typeof(config)) {
    case 'undefined':
      return;
    case 'object':
      return config;
    case 'function':
      return config(route);
    case 'boolean':
      return config ? route.params : undefined;
    default:
      if (process.env.NODE_ENV !== 'production') {
        warn(false, "props in \"" + route.path + "\" is a " + (typeof config === 'undefined' ? 'undefined' : _typeof(config)) + ", " + "expecting an object, function or boolean.");
      }
  }
}

/*  */

var encodeReserveRE = /[!'()*]/g;
var encodeReserveReplacer = function encodeReserveReplacer(c) {
  return '%' + c.charCodeAt(0).toString(16);
};
var commaRE = /%2C/g;

// fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas
var encode = function encode(str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

var decode = decodeURIComponent;

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};

  var parse = _parseQuery || parseQuery;
  var parsedQuery;
  try {
    parsedQuery = parse(query || '');
  } catch (e) {
    process.env.NODE_ENV !== 'production' && warn(false, e.message);
    parsedQuery = {};
  }
  for (var key in extraQuery) {
    var val = extraQuery[key];
    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;
  }
  return parsedQuery;
}

function parseQuery(query) {
  var res = {};

  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });

  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }
        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}

/*  */

var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery$$1 = router && router.options.stringifyQuery;
  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: location.query || {},
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery$$1),
    matched: record ? formatMatch(record) : []
  };
  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);
  }
  return Object.freeze(route);
}

// the starting route that represents the initial state
var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];
  while (record) {
    res.unshift(record);
    record = record.parent;
  }
  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;if (query === void 0) query = {};
  var hash = ref.hash;if (hash === void 0) hash = '';

  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {};

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false;
  }
  return aKeys.every(function (key) {
    var aVal = a[key];
    var bVal = b[key];
    // check nested equality
    if ((typeof aVal === 'undefined' ? 'undefined' : _typeof(aVal)) === 'object' && (typeof bVal === 'undefined' ? 'undefined' : _typeof(bVal)) === 'object') {
      return isObjectEqual(aVal, bVal);
    }
    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }
  return true;
}

/*  */

// work around weird flow bug
var toTypes = [String, Object];
var eventTypes = [String, Array];

var Link = {
  name: 'router-link',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;

    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;

    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass;
    // Support global empty active class
    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = location.path ? createRoute(null, location, null, router) : route;

    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);

    var handler = function handler(e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location);
        } else {
          router.push(location);
        }
      }
    };

    var on = { click: guardEvent };
    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = { href: href };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);
      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var extend = _Vue.util.extend;
        var aData = a.data = extend({}, a.data);
        aData.on = on;
        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  }
  // don't redirect when preventDefault called
  if (e.defaultPrevented) {
    return;
  }
  // don't redirect on right click
  if (e.button !== undefined && e.button !== 0) {
    return;
  }
  // don't redirect if `target="_blank"`
  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');
    if (/\b_blank\b/i.test(target)) {
      return;
    }
  }
  // this may be a Weex event which doesn't have this method
  if (e.preventDefault) {
    e.preventDefault();
  }
  return true;
}

function findAnchor(children) {
  if (children) {
    var child;
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      if (child.tag === 'a') {
        return child;
      }
      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed) {
    return;
  }
  install.installed = true;

  _Vue = Vue;

  var isDef = function isDef(v) {
    return v !== undefined;
  };

  var registerInstance = function registerInstance(vm, callVal) {
    var i = vm.$options._parentVnode;
    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;
        this._router.init(this);
        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }
      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });

  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });

  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });

  Vue.component('router-view', View);
  Vue.component('router-link', Link);

  var strats = Vue.config.optionMergeStrategies;
  // use the same hook merging strategy for route hooks
  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}

/*  */

var inBrowser = typeof window !== 'undefined';

/*  */

function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);
  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/');

  // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)
  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  }

  // resolve relative path
  var segments = relative.replace(/^\//, '').split('/');
  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];
    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  }

  // ensure leading slash
  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';

  var hashIndex = path.indexOf('#');
  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');
  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var index$1 = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/**
 * Expose `pathToRegexp`.
 */
var index = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)',
// Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index);
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path);
  }

  return tokens;
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile(str, options) {
  return tokensToFunction(parse(str, options));
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length);

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (_typeof(tokens[i]) === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (index$1(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags(options) {
  return options.sensitive ? '' : 'i';
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys);
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp(tokens, keys, options) {
  if (!index$1(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp(path, keys, options) {
  if (!index$1(keys)) {
    options = /** @type {!Object} */keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */keys);
  }

  if (index$1(path)) {
    return arrayToRegexp( /** @type {!Array} */path, /** @type {!Array} */keys, options);
  }

  return stringToRegexp( /** @type {string} */path, /** @type {!Array} */keys, options);
}

index.parse = parse_1;
index.compile = compile_1;
index.tokensToFunction = tokensToFunction_1;
index.tokensToRegExp = tokensToRegExp_1;

/*  */

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = index.compile(path));
    return filler(params || {}, { pretty: true });
  } catch (e) {
    if (process.env.NODE_ENV !== 'production') {
      warn(false, "missing param for " + routeMsg + ": " + e.message);
    }
    return '';
  }
}

/*  */

function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || [];
  var pathMap = oldPathMap || Object.create(null);
  var nameMap = oldNameMap || Object.create(null);

  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  });

  // ensure wildcard routes are always at the end
  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;
  if (process.env.NODE_ENV !== 'production') {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
  }

  var normalizedPath = normalizePath(path, parent);
  var pathToRegexpOptions = route.pathToRegexpOptions || {};

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || { default: route.component },
    instances: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : { default: route.props }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (process.env.NODE_ENV !== 'production') {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return (/^\/?$/.test(child.path)
        );
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }
    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];

    aliases.forEach(function (alias) {
      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = index(path, [], pathToRegexpOptions);
  if (process.env.NODE_ENV !== 'production') {
    var keys = {};
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }
  return regex;
}

function normalizePath(path, parent) {
  path = path.replace(/\/$/, '');
  if (path[0] === '/') {
    return path;
  }
  if (parent == null) {
    return path;
  }
  return cleanPath(parent.path + "/" + path);
}

/*  */

function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? { path: raw } : raw;
  // named target
  if (next.name || next._normalized) {
    return next;
  }

  // relative params
  if (!next.path && next.params && current) {
    next = assign({}, next);
    next._normalized = true;
    var params = assign(assign({}, current.params), next.params);
    if (current.name) {
      next.name = current.name;
      next.params = params;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params, "path " + current.path);
    } else if (process.env.NODE_ENV !== 'production') {
      warn(false, "relative params navigation requires a current route.");
    }
    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;

  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);

  var hash = next.hash || parsedPath.hash;
  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}

function assign(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }
  return a;
}

/*  */

function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];
      if (process.env.NODE_ENV !== 'production') {
        warn(record, "Route with name '" + name + "' does not exist");
      }
      if (!record) {
        return _createRoute(null, location);
      }
      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (_typeof(location.params) !== 'object') {
        location.params = {};
      }

      if (currentRoute && _typeof(currentRoute.params) === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      if (record) {
        location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
        return _createRoute(record, location, redirectedFrom);
      }
    } else if (location.path) {
      location.params = {};
      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];
        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    }
    // no match
    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = { path: redirect };
    }

    if (!redirect || (typeof redirect === 'undefined' ? 'undefined' : _typeof(redirect)) !== 'object') {
      if (process.env.NODE_ENV !== 'production') {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }
      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];
      if (process.env.NODE_ENV !== 'production') {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }
      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record);
      // 2. resolve params
      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\"");
      // 3. rematch with existing query and hash
      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (process.env.NODE_ENV !== 'production') {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }
      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });
    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }
    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }
    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }
    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];
    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];
    if (key) {
      params[key.name] = val;
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}

/*  */

var positionStore = Object.create(null);

function setupScroll() {
  window.addEventListener('popstate', function (e) {
    saveScrollPosition();
    if (e.state && e.state.key) {
      setStateKey(e.state.key);
    }
  });
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;
  if (!behavior) {
    return;
  }

  if (process.env.NODE_ENV !== 'production') {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  }

  // wait until re-render finishes before scrolling
  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior(to, from, isPop ? position : null);
    if (!shouldScroll) {
      return;
    }
    var isObject = (typeof shouldScroll === 'undefined' ? 'undefined' : _typeof(shouldScroll)) === 'object';
    if (isObject && typeof shouldScroll.selector === 'string') {
      var el = document.querySelector(shouldScroll.selector);
      if (el) {
        var offset = shouldScroll.offset && _typeof(shouldScroll.offset) === 'object' ? shouldScroll.offset : {};
        offset = normalizeOffset(offset);
        position = getElementPosition(el, offset);
      } else if (isValidPosition(shouldScroll)) {
        position = normalizePosition(shouldScroll);
      }
    } else if (isObject && isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }

    if (position) {
      window.scrollTo(position.x, position.y);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();
  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function getScrollPosition() {
  var key = getStateKey();
  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

/*  */

var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && 'pushState' in window.history;
}();

// use User Timing api (if present) for more accurate key precision
var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

var _key = genKey();

function genKey() {
  return Time.now().toFixed(3);
}

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  _key = key;
}

function pushState(url, replace) {
  saveScrollPosition();
  // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls
  var history = window.history;
  try {
    if (replace) {
      history.replaceState({ key: _key }, '', url);
    } else {
      _key = genKey();
      history.pushState({ key: _key }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}

/*  */

function runQueue(queue, fn, cb) {
  var step = function step(index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };
  step(0);
}

/*  */

function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;

    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;

        var resolve = once(function (resolvedDef) {
          if (resolvedDef.__esModule && resolvedDef.default) {
            resolvedDef = resolvedDef.default;
          }
          // save resolved on async factory in case it's used elsewhere
          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;
          if (pending <= 0) {
            next();
          }
        });

        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
          process.env.NODE_ENV !== 'production' && warn(false, msg);
          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });

        var res;
        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }
        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;
            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

// in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.
function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;
    while (len--) {
      args[len] = arguments[len];
    }if (called) {
      return;
    }
    called = true;
    return fn.apply(this, args);
  };
}

/*  */

var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base);
  // start with a route object that stands for "nowhere"
  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);
    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;

  var route = this.router.match(location, this.current);
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();

    // fire ready cbs once
    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }
    if (err && !this$1.ready) {
      this$1.ready = true;
      this$1.readyErrorCbs.forEach(function (cb) {
        cb(err);
      });
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;

  var current = this.current;
  var abort = function abort(err) {
    if (isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }
    onAbort && onAbort(err);
  };
  if (isSameRoute(route, current) &&
  // in the case the route map has been dynamically appended to
  route.matched.length === current.matched.length) {
    this.ensureURL();
    return abort();
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;

  var queue = [].concat(
  // in-component leave guards
  extractLeaveGuards(deactivated),
  // global before hooks
  this.router.beforeHooks,
  // in-component update hooks
  extractUpdateHooks(updated),
  // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }),
  // async components
  resolveAsyncComponents(activated));

  this.pending = route;
  var iterator = function iterator(hook, next) {
    if (this$1.pending !== route) {
      return abort();
    }
    try {
      hook(route, current, function (to) {
        if (to === false || isError(to)) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || (typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort();
          if ((typeof to === 'undefined' ? 'undefined' : _typeof(to)) === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    var postEnterCbs = [];
    var isValid = function isValid() {
      return this$1.current === route;
    };
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort();
      }
      this$1.pending = null;
      onComplete(route);
      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          postEnterCbs.forEach(function (cb) {
            cb();
          });
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  var prev = this.current;
  this.current = route;
  this.cb && this.cb(route);
  this.router.afterHooks.forEach(function (hook) {
    hook && hook(route, prev);
  });
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/';
      // strip full URL origin
      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  }
  // make sure there's the starting slash
  if (base.charAt(0) !== '/') {
    base = '/' + base;
  }
  // remove trailing slash
  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);
  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }
  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);
    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }
  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated, cbs, isValid) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key, cbs, isValid);
  });
}

function bindEnterGuard(guard, match, key, cbs, isValid) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      next(cb);
      if (typeof cb === 'function') {
        cbs.push(function () {
          // #750
          // if a router-view is wrapped with an out-in transition,
          // the instance may not have been registered at this time.
          // we will need to poll for registration until current route
          // is no longer valid.
          poll(cb, match.instances, key, isValid);
        });
      }
    });
  };
}

function poll(cb, // somehow flow cannot infer this is a function
instances, key, isValid) {
  if (instances[key]) {
    cb(instances[key]);
  } else if (isValid()) {
    setTimeout(function () {
      poll(cb, instances, key, isValid);
    }, 16);
  }
}

/*  */

var HTML5History = function (History$$1) {
  function HTML5History(router, base) {
    var this$1 = this;

    History$$1.call(this, router, base);

    var expectScroll = router.options.scrollBehavior;

    if (expectScroll) {
      setupScroll();
    }

    window.addEventListener('popstate', function (e) {
      var current = this$1.current;
      this$1.transitionTo(getLocation(this$1.base), function (route) {
        if (expectScroll) {
          handleScroll(router, route, current, true);
        }
      });
    });
  }

  if (History$$1) HTML5History.__proto__ = History$$1;
  HTML5History.prototype = Object.create(History$$1 && History$$1.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;

    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = window.location.pathname;
  if (base && path.indexOf(base) === 0) {
    path = path.slice(base.length);
  }
  return (path || '/') + window.location.search + window.location.hash;
}

/*  */

var HashHistory = function (History$$1) {
  function HashHistory(router, base, fallback) {
    History$$1.call(this, router, base);
    // check history fallback deeplinking
    if (fallback && checkFallback(this.base)) {
      return;
    }
    ensureSlash();
  }

  if (History$$1) HashHistory.__proto__ = History$$1;
  HashHistory.prototype = Object.create(History$$1 && History$$1.prototype);
  HashHistory.prototype.constructor = HashHistory;

  // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early
  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;

    window.addEventListener('hashchange', function () {
      if (!ensureSlash()) {
        return;
      }
      this$1.transitionTo(getHash(), function (route) {
        replaceHash(route.fullPath);
      });
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;
    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);
  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();
  if (path.charAt(0) === '/') {
    return true;
  }
  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#');
  return index === -1 ? '' : href.slice(index + 1);
}

function pushHash(path) {
  window.location.hash = path;
}

function replaceHash(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  window.location.replace(base + "#" + path);
}

/*  */

var AbstractHistory = function (History$$1) {
  function AbstractHistory(router, base) {
    History$$1.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History$$1) AbstractHistory.__proto__ = History$$1;
  AbstractHistory.prototype = Object.create(History$$1 && History$$1.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;

    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;

    var targetIndex = this.index + n;
    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }
    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      this$1.index = targetIndex;
      this$1.updateRoute(route);
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {
    // noop
  };

  return AbstractHistory;
}(History);

/*  */

var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};

  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);

  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;
  if (this.fallback) {
    mode = 'hash';
  }
  if (!inBrowser) {
    mode = 'abstract';
  }
  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;
    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;
    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;
    default:
      if (process.env.NODE_ENV !== 'production') {
        assert(false, "invalid mode: " + mode);
      }
  }
};

var prototypeAccessors = { currentRoute: {} };

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app /* Vue component instance */) {
  var this$1 = this;

  process.env.NODE_ENV !== 'production' && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");

  this.apps.push(app);

  // main app already initialized.
  if (this.app) {
    return;
  }

  this.app = app;

  var history = this.history;

  if (history instanceof HTML5History) {
    history.transitionTo(history.getCurrentLocation());
  } else if (history instanceof HashHistory) {
    var setupHashListener = function setupHashListener() {
      history.setupListeners();
    };
    history.transitionTo(history.getCurrentLocation(), setupHashListener, setupHashListener);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  this.history.push(location, onComplete, onAbort);
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  this.history.replace(location, onComplete, onAbort);
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;
  if (!route) {
    return [];
  }
  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  var location = normalizeLocation(to, current || this.history.current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);
  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);
    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '2.7.0';

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

module.exports = VueRouter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("XJF/FV"))
},{"XJF/FV":46}],50:[function(require,module,exports){
(function (process,global){
/*!
 * Vue.js v2.4.2
 * (c) 2014-2017 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

// these helpers produces better vm code in JS engines due to their
// explicitness and function inlining

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}

/**
 * Check if value is primitive
 */
function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject(obj) {
  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
}

var _toString = Object.prototype.toString;

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex(val) {
  var n = parseFloat(val);
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString(val) {
  return val == null ? '' : (typeof val === 'undefined' ? 'undefined' : _typeof(val)) === 'object' ? JSON.stringify(val, null, 2) : String(val);
}

/**
 * Convert a input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if a attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,is');

/**
 * Remove an item from an array
 */
function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}

/**
 * Check whether the object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}

/**
 * Create a cached version of a pure function.
 */
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /([^-])([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
});

/**
 * Simple bind, faster than native
 */
function bind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }
  // record original fn length
  boundFn._length = fn.length;
  return boundFn;
}

/**
 * Convert an Array-like object to a real Array.
 */
function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}

/**
 * Mix properties into target object.
 */
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)
 */
function noop(a, b, c) {}

/**
 * Always return false.
 */
var no = function no(a, b, c) {
  return false;
};

/**
 * Return same value
 */
var identity = function identity(_) {
  return _;
};

/**
 * Generate a static keys string from compiler modules.
 */

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual(a, b) {
  if (a === b) {
    return true;
  }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}

function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }
  return -1;
}

/**
 * Ensure a function is called only once.
 */
function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = ['component', 'directive', 'filter'];

var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated'];

/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: process.env.NODE_ENV !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: process.env.NODE_ENV !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};

/*  */

var emptyObject = Object.freeze({});

/**
 * Check if a string starts with $ or _
 */
function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}

/**
 * Define a property.
 */
function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = /[^\w.$]/;
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }
      obj = obj[segments[i]];
    }
    return obj;
  };
}

/*  */

var warn = noop;
var tip = noop;
var formatComponentName = null; // work around flow check

if (process.env.NODE_ENV !== 'production') {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }
    var name = typeof vm === 'string' ? vm : typeof vm === 'function' && vm.options ? vm.options.name : vm._isVue ? vm.$options.name || vm.$options._componentTag : vm.name;

    var file = vm._isVue && vm.$options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) {
        res += str;
      }
      if (n > 1) {
        str += str;
      }
      n >>= 1;
    }
    return res;
  };

  var generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}

/*  */

function handleError(err, vm, info) {
  if (config.errorHandler) {
    config.errorHandler.call(null, err, vm, info);
  } else {
    if (process.env.NODE_ENV !== 'production') {
      warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
    }
    /* istanbul ignore else */
    if (inBrowser && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err;
    }
  }
}

/*  */
/* globals MutationObserver */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0;
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;

// Firefix has a "watch" function on Object.prototype...
var nativeWatch = {}.watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer;
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

/**
 * Defer a task to execute it asynchronously.
 */
var nextTick = function () {
  var callbacks = [];
  var pending = false;
  var timerFunc;

  function nextTickHandler() {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // the nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore if */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    var logError = function logError(err) {
      console.error(err);
    };
    timerFunc = function timerFunc() {
      p.then(nextTickHandler).catch(logError);
      // in problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) {
        setTimeout(noop);
      }
    };
  } else if (typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]')) {
    // use MutationObserver where native Promise is not available,
    // e.g. PhantomJS IE11, iOS7, Android 4.4
    var counter = 1;
    var observer = new MutationObserver(nextTickHandler);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function timerFunc() {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
  } else {
    // fallback to setTimeout
    /* istanbul ignore next */
    timerFunc = function timerFunc() {
      setTimeout(nextTickHandler, 0);
    };
  }

  return function queueNextTick(cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve, reject) {
        _resolve = resolve;
      });
    }
  };
}();

var _Set;
/* istanbul ignore if */
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = function () {
    function Set() {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };
    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}

/*  */

var uid$1 = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep() {
  this.id = uid$1++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// the current target watcher being evaluated.
// this is globally unique because there could be only one
// watcher being evaluated at any time.
Dep.target = null;
var targetStack = [];

function pushTarget(_target) {
  if (Dep.target) {
    targetStack.push(Dep.target);
  }
  Dep.target = _target;
}

function popTarget() {
  Dep.target = targetStack.pop();
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;
    while (len--) {
      args[len] = arguments[len];
    }var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;
      case 'splice':
        inserted = args.slice(2);
        break;
    }
    if (inserted) {
      ob.observeArray(inserted);
    }
    // notify change
    ob.dep.notify();
    return result;
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * By default, when a reactive property is set, the new value is
 * also converted to become reactive. However when passing down props,
 * we don't want to force conversion because the value may be a nested value
 * under a frozen data structure. Converting it would defeat the optimization.
 */
var observerState = {
  shouldConvert: true
};

/**
 * Observer class that are attached to each observed
 * object. Once attached, the observer converts target
 * object's property keys into getter/setters that
 * collect dependencies and dispatches updates.
 */
var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    var augment = hasProto ? protoAugment : copyAugment;
    augment(value, arrayMethods, arrayKeys);
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through each property and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i], obj[keys[i]]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment an target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment(target, src, keys) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment an target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe(value, asRootData) {
  if (!isObject(value)) {
    return;
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (observerState.shouldConvert && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
        }
        if (Array.isArray(value)) {
          dependArray(value);
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter();
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set(target, key, val) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  if (hasOwn(target, key)) {
    target[key] = val;
    return val;
  }
  var ob = target.__ob__;
  if (target._isVue || ob && ob.vmCount) {
    process.env.NODE_ENV !== 'production' && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }
  if (!ob) {
    target[key] = val;
    return val;
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}

/**
 * Delete a property and trigger change if necessary.
 */
function del(target, key) {
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }
  var ob = target.__ob__;
  if (target._isVue || ob && ob.vmCount) {
    process.env.NODE_ENV !== 'production' && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }
  if (!hasOwn(target, key)) {
    return;
  }
  delete target[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
if (process.env.NODE_ENV !== 'production') {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }
    return defaultStrat(parent, child);
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData(to, from) {
  if (!from) {
    return to;
  }
  var key, toVal, fromVal;
  var keys = Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}

/**
 * Data
 */
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this) : childVal, typeof parentVal === 'function' ? parentVal.call(this) : parentVal);
    };
  } else if (parentVal || childVal) {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      process.env.NODE_ENV !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);

      return parentVal;
    }
    return mergeDataOrFn.call(this, parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook(parentVal, childVal) {
  return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets(parentVal, childVal) {
  var res = Object.create(parentVal || null);
  return childVal ? extend(res, childVal) : res;
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (parentVal, childVal) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }
  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */
  if (!childVal) {
    return Object.create(parentVal || null);
  }
  if (!parentVal) {
    return childVal;
  }
  var ret = {};
  extend(ret, parentVal);
  for (var key in childVal) {
    var parent = ret[key];
    var child = childVal[key];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }
  return ret;
};

/**
 * Other object hashes.
 */
strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal) {
  if (!parentVal) {
    return childVal;
  }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) {
    extend(ret, childVal);
  }
  return ret;
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};

/**
 * Validate component names
 */
function checkComponents(options) {
  for (var key in options.components) {
    var lower = key.toLowerCase();
    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {
      warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
    }
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps(options) {
  var props = options.props;
  if (!props) {
    return;
  }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else if (process.env.NODE_ENV !== 'production') {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : { type: val };
    }
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject(options) {
  var inject = options.inject;
  if (Array.isArray(inject)) {
    var normalized = options.inject = {};
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = inject[i];
    }
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives(options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def = dirs[key];
      if (typeof def === 'function') {
        dirs[key] = { bind: def, update: def };
      }
    }
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions(parent, child, vm) {
  if (process.env.NODE_ENV !== 'production') {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child);
  normalizeInject(child);
  normalizeDirectives(child);
  var extendsFrom = child.extends;
  if (extendsFrom) {
    parent = mergeOptions(parent, extendsFrom, vm);
  }
  if (child.mixins) {
    for (var i = 0, l = child.mixins.length; i < l; i++) {
      parent = mergeOptions(parent, child.mixins[i], vm);
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options;
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) {
    return assets[id];
  }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }
  return res;
}

/*  */

function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // handle boolean props
  if (isType(Boolean, prop.type)) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {
      value = true;
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldConvert = observerState.shouldConvert;
    observerState.shouldConvert = true;
    observe(value);
    observerState.shouldConvert = prevShouldConvert;
  }
  if (process.env.NODE_ENV !== 'production') {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}

/**
 * Assert whether a prop is valid.
 */
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }
  if (!valid) {
    warn('Invalid prop: type check failed for prop "' + name + '".' + ' Expected ' + expectedTypes.map(capitalize).join(', ') + ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.', vm);
    return;
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    valid = (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === expectedType.toLowerCase();
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  };
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isType(type, fn) {
  if (!Array.isArray(fn)) {
    return getType(fn) === getType(type);
  }
  for (var i = 0, len = fn.length; i < len; i++) {
    if (getType(fn[i]) === getType(type)) {
      return true;
    }
  }
  /* istanbul ignore next */
  return false;
}

/*  */

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

if (process.env.NODE_ENV !== 'production') {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + "referenced during render. Make sure to declare reactive data " + "properties in the data option.", target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && Proxy.toString().match(/native code/);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';
      if (!has && !isAllowed) {
        warnNonPresent(target, key);
      }
      return has || !isAllowed;
    }
  };

  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        warnNonPresent(target, key);
      }
      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

var mark;
var measure;

if (process.env.NODE_ENV !== 'production') {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };
    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      perf.clearMeasures(name);
    };
  }
}

/*  */

var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.functionalContext = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: {} };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children, vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.isCloned = true;
  return cloned;
}

function cloneVNodes(vnodes) {
  var len = vnodes.length;
  var res = new Array(len);
  for (var i = 0; i < len; i++) {
    res[i] = cloneVNode(vnodes[i]);
  }
  return res;
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns) {
  function invoker() {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        cloned[i].apply(null, arguments$1);
      }
    } else {
      // return handler return value for single handlers
      return fns.apply(null, arguments);
    }
  }
  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, vm) {
  var name, cur, old, event;
  for (name in on) {
    cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      process.env.NODE_ENV !== 'production' && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur);
      }
      add(event.name, cur, event.once, event.capture, event.passive);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook(def, hookKey, hook) {
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (process.env.NODE_ENV !== 'production') {
        var keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }
      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }
  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }
    last = res[res.length - 1];
    //  nested
    if (Array.isArray(c)) {
      res.push.apply(res, normalizeArrayChildren(c, (nestedIndex || '') + "_" + i));
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        last.text += String(c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[res.length - 1] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res;
}

/*  */

function ensureCtor(comp, base) {
  if (comp.__esModule && comp.default) {
    comp = comp.default;
  }
  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node;
}

function resolveAsyncComponent(factory, baseCtor, context) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (isDef(factory.contexts)) {
    // already pending
    factory.contexts.push(context);
  } else {
    var contexts = factory.contexts = [context];
    var sync = true;

    var forceRender = function forceRender() {
      for (var i = 0, l = contexts.length; i < l; i++) {
        contexts[i].$forceUpdate();
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender();
      }
    });

    var reject = once(function (reason) {
      process.env.NODE_ENV !== 'production' && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender();
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (typeof res.then === 'function') {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isDef(res.component) && typeof res.component.then === 'function') {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            setTimeout(function () {
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender();
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          setTimeout(function () {
            if (isUndef(factory.resolved)) {
              reject(process.env.NODE_ENV !== 'production' ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}

/*  */

function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && isDef(c.componentOptions)) {
        return c;
      }
    }
  }
}

/*  */

/*  */

function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn, once$$1) {
  if (once$$1) {
    target.$once(event, fn);
  } else {
    target.$on(event, fn);
  }
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var this$1 = this;

    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        this$1.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var this$1 = this;

    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        this$1.$off(event[i$1], fn);
      }
      return vm;
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (arguments.length === 1) {
      vm._events[event] = null;
      return vm;
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    if (process.env.NODE_ENV !== 'production') {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      for (var i = 0, l = cbs.length; i < l; i++) {
        try {
          cbs[i].apply(vm, args);
        } catch (e) {
          handleError(e, vm, "event handler for \"" + event + "\"");
        }
      }
    }
    return vm;
  };
}

/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots(children, context) {
  var slots = {};
  if (!children) {
    return slots;
  }
  var defaultSlot = [];
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.functionalContext === context) && child.data && child.data.slot != null) {
      var name = child.data.slot;
      var slot = slots[name] || (slots[name] = []);
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children);
      } else {
        slot.push(child);
      }
    } else {
      defaultSlot.push(child);
    }
  }
  // ignore whitespace
  if (!defaultSlot.every(isWhitespace)) {
    slots.default = defaultSlot;
  }
  return slots;
}

function isWhitespace(node) {
  return node.isComment || node.text === ' ';
}

function resolveScopedSlots(fns, // see flow/vnode
res) {
  res = res || {};
  for (var i = 0; i < fns.length; i++) {
    if (Array.isArray(fns[i])) {
      resolveScopedSlots(fns[i], res);
    } else {
      res[fns[i].key] = fns[i].fn;
    }
  }
  return res;
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function initLifecycle(vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    if (vm._isMounted) {
      callHook(vm, 'beforeUpdate');
    }
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */
      , vm.$options._parentElm, vm.$options._refElm);
      // no need for the ref nodes after initial patch
      // this prevents keeping a detached DOM tree in memory (#5851)
      vm.$options._parentElm = vm.$options._refElm = null;
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    activeInstance = prevActiveInstance;
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(name + " render", startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  }

  vm._watcher = new Watcher(vm, updateComponent, noop);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren
  var hasChildren = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  parentVnode.data.scopedSlots || // has new scoped slots
  vm.$scopedSlots !== emptyObject // has old scoped slots
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listensers hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data && parentVnode.data.attrs;
  vm.$listeners = listeners;

  // update props
  if (propsData && vm.$options.props) {
    observerState.shouldConvert = false;
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      props[key] = validateProp(key, vm.$options.props, propsData, vm);
    }
    observerState.shouldConvert = true;
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  if (listeners) {
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);
  }
  // resolve slots + force update if has children
  if (hasChildren) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (process.env.NODE_ENV !== 'production') {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }
  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  var handlers = vm.$options[hook];
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      try {
        handlers[i].call(vm);
      } catch (e) {
        handleError(e, vm, hook + " hook");
      }
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (process.env.NODE_ENV !== 'production') {
    circular = {};
  }
  waiting = flushing = false;
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue() {
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) {
    return a.id - b.id;
  });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher(watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */

var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher(vm, expOrFn, cb, options) {
  this.vm = vm;
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = process.env.NODE_ENV !== 'production' ? expOrFn.toString() : '';
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = function () {};
      process.env.NODE_ENV !== 'production' && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }
  this.value = this.lazy ? undefined : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value;
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    var dep = this$1.deps[i];
    if (!this$1.newDepIds.has(dep.id)) {
      dep.removeSub(this$1);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();
    if (value !== this.value ||
    // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend() {
  var this$1 = this;

  var i = this.deps.length;
  while (i--) {
    this$1.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown() {
  var this$1 = this;

  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this$1.deps[i].removeSub(this$1);
    }
    this.active = false;
  }
};

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
var seenObjects = new _Set();
function traverse(val) {
  seenObjects.clear();
  _traverse(val, seenObjects);
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if (!isA && !isObject(val) || !Object.isExtensible(val)) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) {
    initProps(vm, opts.props);
  }
  if (opts.methods) {
    initMethods(vm, opts.methods);
  }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) {
    initComputed(vm, opts.computed);
  }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function checkOptionType(vm, name) {
  var option = vm.$options[name];
  if (!isPlainObject(option)) {
    warn("component option \"" + name + "\" should be an object.", vm);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  observerState.shouldConvert = isRoot;
  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      if (isReservedAttribute(key) || config.isReservedAttr(key)) {
        warn("\"" + key + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }
      defineReactive$$1(props, key, value, function () {
        if (vm.$parent && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {
      defineReactive$$1(props, key, value);
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }observerState.shouldConvert = true;
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    process.env.NODE_ENV !== 'production' && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (process.env.NODE_ENV !== 'production') {
      if (methods && hasOwn(methods, key)) {
        warn("method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }
    if (props && hasOwn(props, key)) {
      process.env.NODE_ENV !== 'production' && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData(data, vm) {
  try {
    return data.call(vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed(vm, computed) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'computed');
  var watchers = vm._computedWatchers = Object.create(null);

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }
    // create internal watcher for the computed property.
    watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = createComputedGetter(key);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? userDef.cache !== false ? createComputedGetter(key) : userDef.get : noop;
    sharedPropertyDefinition.set = userDef.set ? userDef.set : noop;
  }
  if (process.env.NODE_ENV !== 'production' && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}

function initMethods(vm, methods) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'methods');
  var props = vm.$options.props;
  for (var key in methods) {
    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);
    if (process.env.NODE_ENV !== 'production') {
      if (methods[key] == null) {
        warn("method \"" + key + "\" has an undefined value in the component definition. " + "Did you reference the function correctly?", vm);
      }
      if (props && hasOwn(props, key)) {
        warn("method \"" + key + "\" has already been defined as a prop.", vm);
      }
    }
  }
}

function initWatch(vm, watch) {
  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'watch');
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, keyOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(keyOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function () {
    return this._props;
  };
  if (process.env.NODE_ENV !== 'production') {
    dataDef.set = function (newData) {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      cb.call(vm, watcher.value);
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}

/*  */

function initProvide(vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    observerState.shouldConvert = false;
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    observerState.shouldConvert = true;
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var provideKey = inject[key];
      var source = vm;
      while (source) {
        if (source._provided && provideKey in source._provided) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (process.env.NODE_ENV !== 'production' && !source) {
        warn("Injection \"" + key + "\" not found", vm);
      }
    }
    return result;
  }
}

/*  */

function createFunctionalComponent(Ctor, propsData, data, context, children) {
  var props = {};
  var propOptions = Ctor.options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || {});
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }
    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var _context = Object.create(context);
  var h = function h(a, b, c, d) {
    return createElement(_context, a, b, c, d, true);
  };
  var vnode = Ctor.options.render.call(null, h, {
    data: data,
    props: props,
    children: children,
    parent: context,
    listeners: data.on || {},
    injections: resolveInject(Ctor.options.inject, context),
    slots: function slots() {
      return resolveSlots(children, context);
    }
  });
  if (vnode instanceof VNode) {
    vnode.functionalContext = context;
    vnode.functionalOptions = Ctor.options;
    if (data.slot) {
      (vnode.data || (vnode.data = {})).slot = data.slot;
    }
  }
  return vnode;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

// hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init(vnode, hydrating, parentElm, refElm) {
    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance, parentElm, refElm);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    } else if (vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    }
  },

  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },

  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    if (process.env.NODE_ENV !== 'production') {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // merge component management hooks onto the placeholder node
  mergeHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent, // activeInstance in lifecycle state
parentElm, refElm) {
  var vnodeComponentOptions = vnode.componentOptions;
  var options = {
    _isComponent: true,
    parent: parent,
    propsData: vnodeComponentOptions.propsData,
    _componentTag: vnodeComponentOptions.tag,
    _parentVnode: vnode,
    _parentListeners: vnodeComponentOptions.listeners,
    _renderChildren: vnodeComponentOptions.children,
    _parentElm: parentElm || null,
    _refElm: refElm || null
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnodeComponentOptions.Ctor(options);
}

function mergeHooks(data) {
  if (!data.hook) {
    data.hook = {};
  }
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var fromParent = data.hook[key];
    var ours = componentVNodeHooks[key];
    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;
  }
}

function mergeHook$1(one, two) {
  return function (a, b, c, d) {
    one(a, b, c, d);
    two(a, b, c, d);
  };
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';(data.props || (data.props = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  if (isDef(on[event])) {
    on[event] = [data.model.callback].concat(on[event]);
  } else {
    on[event] = data.model.callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    process.env.NODE_ENV !== 'production' && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (isDef(vnode)) {
    if (ns) {
      applyNS(vnode, ns);
    }
    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    return;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && isUndef(child.ns)) {
        applyNS(child, ns);
      }
    }
  }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList(val, render) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    keys = Object.keys(val);
    ret = new Array(keys.length);
    for (i = 0, l = keys.length; i < l; i++) {
      key = keys[i];
      ret[i] = render(val[key], key, i);
    }
  }
  if (isDef(ret)) {
    ret._isVList = true;
  }
  return ret;
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  if (scopedSlotFn) {
    // scoped slot
    props = props || {};
    if (bindObject) {
      props = extend(extend({}, bindObject), props);
    }
    return scopedSlotFn(props) || fallback;
  } else {
    var slotNodes = this.$slots[name];
    // warn duplicate slot usage
    if (slotNodes && process.env.NODE_ENV !== 'production') {
      slotNodes._rendered && warn("Duplicate presence of slot \"" + name + "\" found in the same render tree " + "- this will likely cause render errors.", this);
      slotNodes._rendered = true;
    }
    return slotNodes || fallback;
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}

/*  */

/**
 * Runtime helper for checking keyCodes from config.
 */
function checkKeyCodes(eventKeyCode, key, builtInAlias) {
  var keyCodes = config.keyCodes[key] || builtInAlias;
  if (Array.isArray(keyCodes)) {
    return keyCodes.indexOf(eventKeyCode) === -1;
  } else {
    return keyCodes !== eventKeyCode;
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      process.env.NODE_ENV !== 'production' && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        if (!(key in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }
  return data;
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic(index, isInFor) {
  var tree = this._staticTrees[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree by doing a shallow clone.
  if (tree && !isInFor) {
    return Array.isArray(tree) ? cloneVNodes(tree) : cloneVNode(tree);
  }
  // otherwise, render a fresh tree.
  tree = this._staticTrees[index] = this.$options.staticRenderFns[index].call(this._renderProxy);
  markStatic(tree, "__static__" + index, false);
  return tree;
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      process.env.NODE_ENV !== 'production' && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(ours, existing) : ours;
      }
    }
  }
  return data;
}

/*  */

function initRender(vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null;
  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production') {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs, null, true);
    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners, null, true);
  }
}

function renderMixin(Vue) {
  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var staticRenderFns = ref.staticRenderFns;
    var _parentVnode = ref._parentVnode;

    if (vm._isMounted) {
      // clone slot nodes on re-renders
      for (var key in vm.$slots) {
        vm.$slots[key] = cloneVNodes(vm.$slots[key]);
      }
    }

    vm.$scopedSlots = _parentVnode && _parentVnode.data.scopedSlots || emptyObject;

    if (staticRenderFns && !vm._staticTrees) {
      vm._staticTrees = [];
    }
    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render function");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (process.env.NODE_ENV !== 'production') {
        vnode = vm.$options.renderError ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e) : vm._vnode;
      } else {
        vnode = vm._vnode;
      }
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode;
  };

  // internal render helpers.
  // these are exposed on the instance prototype to reduce generated render
  // code size.
  Vue.prototype._o = markOnce;
  Vue.prototype._n = toNumber;
  Vue.prototype._s = toString;
  Vue.prototype._l = renderList;
  Vue.prototype._t = renderSlot;
  Vue.prototype._q = looseEqual;
  Vue.prototype._i = looseIndexOf;
  Vue.prototype._m = renderStatic;
  Vue.prototype._f = resolveFilter;
  Vue.prototype._k = checkKeyCodes;
  Vue.prototype._b = bindObjectProps;
  Vue.prototype._v = createTextVNode;
  Vue.prototype._e = createEmptyVNode;
  Vue.prototype._u = resolveScopedSlots;
  Vue.prototype._g = bindObjectListeners;
}

/*  */

var uid = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      startTag = "vue-perf-init:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */
    if (process.env.NODE_ENV !== 'production') {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  opts.parent = options.parent;
  opts.propsData = options.propsData;
  opts._parentVnode = options._parentVnode;
  opts._parentListeners = options._parentListeners;
  opts._renderChildren = options._renderChildren;
  opts._componentTag = options._componentTag;
  opts._parentElm = options._parentElm;
  opts._refElm = options._refElm;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var extended = Ctor.extendOptions;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }
      modified[key] = dedupe(latest[key], extended[key], sealed[key]);
    }
  }
  return modified;
}

function dedupe(latest, extended, sealed) {
  // compare latest and sealed to ensure lifecycle hooks won't be duplicated
  // between merges
  if (Array.isArray(latest)) {
    var res = [];
    sealed = Array.isArray(sealed) ? sealed : [sealed];
    extended = Array.isArray(extended) ? extended : [extended];
    for (var i = 0; i < latest.length; i++) {
      // push original options and not sealed options to exclude duplicated options
      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {
        res.push(latest[i]);
      }
    }
    return res;
  } else {
    return latest;
  }
}

function Vue$3(options) {
  if (process.env.NODE_ENV !== 'production' && !(this instanceof Vue$3)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue$3);
stateMixin(Vue$3);
eventsMixin(Vue$3);
lifecycleMixin(Vue$3);
renderMixin(Vue$3);

/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}

/*  */

function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}

/*  */

function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;
    if (process.env.NODE_ENV !== 'production') {
      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characters and the hyphen, ' + 'and must start with a letter.');
      }
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if (process.env.NODE_ENV !== 'production') {
          if (type === 'component' && config.isReservedTag(id)) {
            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
          }
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}

/*  */

var patternTypes = [String, RegExp, Array];

function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */
  return false;
}

function pruneCache(cache, current, filter) {
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        if (cachedNode !== current) {
          pruneCacheEntry(cachedNode);
        }
        cache[key] = null;
      }
    }
  }
}

function pruneCacheEntry(vnode) {
  if (vnode) {
    vnode.componentInstance.$destroy();
  }
}

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes
  },

  created: function created() {
    this.cache = Object.create(null);
  },

  destroyed: function destroyed() {
    var this$1 = this;

    for (var key in this$1.cache) {
      pruneCacheEntry(this$1.cache[key]);
    }
  },

  watch: {
    include: function include(val) {
      pruneCache(this.cache, this._vnode, function (name) {
        return matches(val, name);
      });
    },
    exclude: function exclude(val) {
      pruneCache(this.cache, this._vnode, function (name) {
        return !matches(val, name);
      });
    }
  },

  render: function render() {
    var vnode = getFirstComponentChild(this.$slots.default);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      if (name && (this.include && !matches(this.include, name) || this.exclude && matches(this.exclude, name))) {
        return vnode;
      }
      var key = vnode.key == null
      // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;
      if (this.cache[key]) {
        vnode.componentInstance = this.cache[key].componentInstance;
      } else {
        this.cache[key] = vnode;
      }
      vnode.data.keepAlive = true;
    }
    return vnode;
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};
  configDef.get = function () {
    return config;
  };
  if (process.env.NODE_ENV !== 'production') {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue$3);

Object.defineProperty(Vue$3.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue$3.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
});

Vue$3.version = '2.4.2';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select');
var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};

/*  */

function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */
  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject(value)) {
    return stringifyObject(value);
  }
  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */
  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }
      res += stringified;
    }
  }
  return res;
}

function stringifyObject(value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }
      res += key;
    }
  }
  return res;
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot');

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag)) {
    return false;
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }
    return selected;
  } else {
    return el;
  }
}

/*  */

function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm;
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setAttribute(node, key, val) {
  node.setAttribute(key, val);
}

var nodeOps = Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setAttribute: setAttribute
});

/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!key) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *

/*
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

// Some browsers do not support dynamically changing type for <input>
// so they need to be treated as different nodes
function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB;
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) {
      map[key] = i;
    }
  }
  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  var inPre = 0;
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested) {
    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (process.env.NODE_ENV !== 'production') {
        if (data && data.pre) {
          inPre++;
        }
        if (!inPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) && config.isUnknownElement(tag)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (process.env.NODE_ENV !== 'production' && data && data.pre) {
        inPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */, parentElm, refElm);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (ref$$1.parentNode === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }
      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope(vnode) {
    var i;
    var ancestor = vnode;
    while (ancestor) {
      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
        nodeOps.setAttribute(vnode.elm, i, '');
      }
      ancestor = ancestor.parent;
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) && i !== vnode.context && isDef(i = i.$options._scopeId)) {
      nodeOps.setAttribute(vnode.elm, i, '');
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }
      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, elmToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : null;
        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
          newStartVnode = newCh[++newStartIdx];
        } else {
          elmToMove = oldCh[idxInOld];
          /* istanbul ignore if */
          if (process.env.NODE_ENV !== 'production' && !elmToMove) {
            warn('It seems there are duplicate keys that is causing an update error. ' + 'Make sure each v-for item has a unique key.');
          }
          if (sameVnode(elmToMove, newStartVnode)) {
            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);
            newStartVnode = newCh[++newStartIdx];
          }
        }
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }
      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var bailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate(elm, vnode, insertedVnodeQueue) {
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.elm = elm;
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    if (process.env.NODE_ENV !== 'production') {
      if (!assertNodeMatch(elm, vnode)) {
        return false;
      }
    }
    vnode.elm = elm;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true /* hydrating */);
      }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          var childrenMatch = true;
          var childNode = elm.firstChild;
          for (var i$1 = 0; i$1 < children.length; i$1++) {
            if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {
              childrenMatch = false;
              break;
            }
            childNode = childNode.nextSibling;
          }
          // if childNode is not null, it means the actual childNodes list is
          // longer than the virtual children list.
          if (!childrenMatch || childNode) {
            if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined' && !bailed) {
              bailed = true;
              console.warn('Parent: ', elm);
              console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
            }
            return false;
          }
        }
      }
      if (isDef(data)) {
        for (var key in data) {
          if (!isRenderedModule(key)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }

  function assertNodeMatch(node, vnode) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }
      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue, parentElm, refElm);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (process.env.NODE_ENV !== 'production') {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }
        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm$1 = nodeOps.parentNode(oldElm);
        createElm(vnode, insertedVnodeQueue,
        // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm$1, nodeOps.nextSibling(oldElm));

        if (isDef(vnode.parent)) {
          // component root element replaced.
          // update parent placeholder node element, recursively
          var ancestor = vnode.parent;
          while (ancestor) {
            ancestor.elm = vnode.elm;
            ancestor = ancestor.parent;
          }
          if (isPatchable(vnode)) {
            for (var i = 0; i < cbs.create.length; ++i) {
              cbs.create[i](emptyNode, vnode.parent);
            }
          }
        }

        if (isDef(parentElm$1)) {
          removeVnodes(parentElm$1, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);
  if (!dirs) {
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];

/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  /* istanbul ignore if */
  if (isIE9 && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, key);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, value);
    }
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function wrapFilter(exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return "_f(\"" + filter + "\")(" + exp + ")";
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return "_f(\"" + name + "\")(" + exp + "," + args;
  }
}

/*  */

/*  */

/**
 * Cross-platform code generation for component v-model
 */

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */

/**
 * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)
 *
 * for loop possible cases:
 *
 * - test
 * - test[idx]
 * - test[test1[idx]]
 * - test["a"][idx]
 * - xxx.test[a[a].test1[idx]]
 * - test.xxx.a["asa"][test1[idx]]
 *
 */

var str;
var index$1;

/*  */

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents(on) {
  var event;
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    // Chrome fires microtasks in between click/change, leads to #4521
    event = isChrome ? 'click' : 'change';
    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function add$1(event, _handler, once$$1, capture, passive) {
  if (once$$1) {
    var oldHandler = _handler;
    var _target = target$1; // save current target element in closure
    _handler = function handler(ev) {
      var res = arguments.length === 1 ? oldHandler(ev) : oldHandler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, _handler, capture, _target);
      }
    };
  }
  target$1.addEventListener(event, _handler, supportsPassive ? { capture: capture, passive: passive } : capture);
}

function remove$2(event, handler, capture, _target) {
  (_target || target$1).removeEventListener(event, handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, vnode.context);
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (isUndef(props[key])) {
      elm[key] = '';
    }
  }
  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }
      if (cur === oldProps[key]) {
        continue;
      }
    }

    if (key === 'value') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, vnode, strCur)) {
        elm.value = strCur;
      }
    } else {
      elm[key] = cur;
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, vnode, checkVal) {
  return !elm.composing && (vnode.tag === 'option' || isDirty(elm, checkVal) || isInputChanged(elm, checkVal));
}

function isDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}
  return notInFocus && elm.value !== checkVal;
}

function isInputChanged(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers) && modifiers.number) {
    return toNumber(value) !== toNumber(newVal);
  }
  if (isDef(modifiers) && modifiers.trim) {
    return value.trim() !== newVal.trim();
  }
  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle ? extend(data.staticStyle, style) : style;
}

// normalize possible array / string values into Object
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res;
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(name, val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likley wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(/\s+/).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */
  if ((typeof def$$1 === 'undefined' ? 'undefined' : _typeof(def$$1)) === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout;

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) {
    return cb();
  }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');
  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = styles[animationProp + 'Delay'].split(', ');
  var animationDurations = styles[animationProp + 'Duration'].split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}

function toMs(s) {
  return Number(s.slice(0, -1)) * 1000;
}

/*  */

function enter(vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    transitionNode = transitionNode.parent;
    context = transitionNode.context;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;

  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;

  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      addTransitionClass(el, toClass);
      removeTransitionClass(el, startClass);
      if (!cb.cancelled && !userWantsControl) {
        if (isValidDuration(explicitEnterDuration)) {
          setTimeout(cb, explicitEnterDuration);
        } else {
          whenTransitionEnds(el, type, cb);
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return rm();
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    }
    // record leaving element
    if (!vnode.data.show) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        addTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled && !userWantsControl) {
          if (isValidDuration(explicitLeaveDuration)) {
            setTimeout(cb, explicitLeaveDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [attrs, klass, events, domProps, style, transition];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var model$1 = {
  inserted: function inserted(el, binding, vnode) {
    if (vnode.tag === 'select') {
      var cb = function cb() {
        setSelected(el, binding, vnode.context);
      };
      cb();
      /* istanbul ignore if */
      if (isIE || isEdge) {
        setTimeout(cb, 0);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        if (!isAndroid) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
        }
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        trigger(el, 'change');
      }
    }
  }
};

function setSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    process.env.NODE_ENV !== 'production' && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (value === oldValue) {
      return;
    }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: model$1,
  show: show
};

/*  */

// Provides transition support for a single element/component.
// supports transition mode (out-in / in-out)

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render(h) {
    var this$1 = this;

    var children = this.$options._renderChildren;
    if (!children) {
      return;
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(function (c) {
      return c.tag || isAsyncPlaceholder(c);
    });
    /* istanbul ignore if */
    if (!children.length) {
      return;
    }

    // warn multiple elements
    if (process.env.NODE_ENV !== 'production' && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode;

    // warn invalid mode
    if (process.env.NODE_ENV !== 'production' && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(function (d) {
      return d.name === 'show';
    })) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild && (oldChild.data.transition = extend({}, data));
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }
        var delayedLeave;
        var performLeave = function performLeave() {
          delayedLeave();
        };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};

/*  */

// Provides transition support for list items.
// supports move transitions using the FLIP technique.

// Because the vdom's children update algorithm is "unstable" - i.e.
// it doesn't guarantee the relative positioning of removed elements,
// we force transition-group to update its children into two passes:
// in the first pass, we remove all nodes that need to be removed,
// triggering their leaving transition; in the second pass, we insert/move
// into the final desired state. This way in the second pass removed
// nodes will remain where they should be.

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;(c.data || (c.data = {})).transition = transitionData;
        } else if (process.env.NODE_ENV !== 'production') {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },

  beforeUpdate: function beforeUpdate() {
    // force removing pass
    this.__patch__(this._vnode, this.kept, false, // hydrating
    true // removeOnly (!important, avoids unnecessary moves)
    );
    this._vnode = this.kept;
  },

  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    var body = document.body;
    var f = body.offsetHeight; // eslint-disable-line

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove;
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue$3.config.mustUseProp = mustUseProp;
Vue$3.config.isReservedTag = isReservedTag;
Vue$3.config.isReservedAttr = isReservedAttr;
Vue$3.config.getTagNamespace = getTagNamespace;
Vue$3.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue$3.options.directives, platformDirectives);
extend(Vue$3.options.components, platformComponents);

// install platform patch function
Vue$3.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue$3.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
};

// devtools global hook
/* istanbul ignore next */
setTimeout(function () {
  if (config.devtools) {
    if (devtools) {
      devtools.emit('init', Vue$3);
    } else if (process.env.NODE_ENV !== 'production' && isChrome) {
      console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
    }
  }
  if (process.env.NODE_ENV !== 'production' && config.productionTip !== false && inBrowser && typeof console !== 'undefined') {
    console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
  }
}, 0);

/*  */

module.exports = Vue$3;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
}).call(this,require("XJF/FV"),typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"XJF/FV":46}],51:[function(require,module,exports){
'use strict';

var Vue; // late bind
var version;
var map = window.__VUE_HOT_MAP__ = Object.create(null);
var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) return;
  installed = true;

  Vue = vue.__esModule ? vue.default : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify;

  // compat with < 2.0.0-alpha.7
  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;
  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};

/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */

exports.createRecord = function (id, options) {
  var Ctor = null;
  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }
  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Vue.extend(options),
    instances: []
  };
};

/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */

function makeOptionsHot(id, options) {
  injectHook(options, initHookName, function () {
    map[id].instances.push(this);
  });
  injectHook(options, 'beforeDestroy', function () {
    var instances = map[id].instances;
    instances.splice(instances.indexOf(this), 1);
  });
}

/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */

function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];
  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate();
    });
    return;
  }
  if (typeof options === 'function') {
    options = options.options;
  }
  record.Ctor.options.render = options.render;
  record.Ctor.options.staticRenderFns = options.staticRenderFns;
  record.instances.slice().forEach(function (instance) {
    instance.$options.render = options.render;
    instance.$options.staticRenderFns = options.staticRenderFns;
    instance._staticTrees = []; // reset static trees
    instance.$forceUpdate();
  });
});

exports.reload = tryWrap(function (id, options) {
  var record = map[id];
  if (options) {
    if (typeof options === 'function') {
      options = options.options;
    }
    makeOptionsHot(id, options);
    if (version[1] < 2) {
      // preserve pre 2.2 behavior for global mixin handling
      record.Ctor.extendOptions = options;
    }
    var newCtor = record.Ctor.super.extend(options);
    record.Ctor.options = newCtor.options;
    record.Ctor.cid = newCtor.cid;
    record.Ctor.prototype = newCtor.prototype;
    if (newCtor.release) {
      // temporary global mixin strategy used in < 2.0.0-alpha.6
      newCtor.release();
    }
  }
  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIlZ1ZSIsInZlcnNpb24iLCJtYXAiLCJ3aW5kb3ciLCJfX1ZVRV9IT1RfTUFQX18iLCJPYmplY3QiLCJjcmVhdGUiLCJpbnN0YWxsZWQiLCJpc0Jyb3dzZXJpZnkiLCJpbml0SG9va05hbWUiLCJleHBvcnRzIiwiaW5zdGFsbCIsInZ1ZSIsImJyb3dzZXJpZnkiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsInNwbGl0IiwiTnVtYmVyIiwiY29uZmlnIiwiX2xpZmVjeWNsZUhvb2tzIiwiaW5kZXhPZiIsImNvbXBhdGlibGUiLCJjb25zb2xlIiwid2FybiIsImNyZWF0ZVJlY29yZCIsImlkIiwib3B0aW9ucyIsIkN0b3IiLCJtYWtlT3B0aW9uc0hvdCIsImV4dGVuZCIsImluc3RhbmNlcyIsImluamVjdEhvb2siLCJwdXNoIiwic3BsaWNlIiwibmFtZSIsImhvb2siLCJleGlzdGluZyIsIkFycmF5IiwiaXNBcnJheSIsImNvbmNhdCIsInRyeVdyYXAiLCJmbiIsImFyZyIsImUiLCJlcnJvciIsInJlcmVuZGVyIiwicmVjb3JkIiwic2xpY2UiLCJmb3JFYWNoIiwiaW5zdGFuY2UiLCIkZm9yY2VVcGRhdGUiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCIkb3B0aW9ucyIsIl9zdGF0aWNUcmVlcyIsInJlbG9hZCIsImV4dGVuZE9wdGlvbnMiLCJuZXdDdG9yIiwic3VwZXIiLCJjaWQiLCJwcm90b3R5cGUiLCJyZWxlYXNlIiwiJHZub2RlIiwiY29udGV4dCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxHQUFKLEMsQ0FBUTtBQUNSLElBQUlDLE9BQUo7QUFDQSxJQUFJQyxNQUFNQyxPQUFPQyxlQUFQLEdBQXlCQyxPQUFPQyxNQUFQLENBQWMsSUFBZCxDQUFuQztBQUNBLElBQUlDLFlBQVksS0FBaEI7QUFDQSxJQUFJQyxlQUFlLEtBQW5CO0FBQ0EsSUFBSUMsZUFBZSxjQUFuQjs7QUFFQUMsUUFBUUMsT0FBUixHQUFr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LE9BQTlCO0FBQ0FvQixXQUFPbkIsSUFBUCxDQUFZZ0MsR0FBWixHQUFrQkYsUUFBUUUsR0FBMUI7QUFDQWIsV0FBT25CLElBQVAsQ0FBWWlDLFNBQVosR0FBd0JILFFBQVFHLFNBQWhDO0FBQ0EsUUFBSUgsUUFBUUksT0FBWixFQUFxQjtBQUNuQjtBQUNBSixjQUFRSSxPQUFSO0FBQ0Q7QUFDRjtBQUNEZixTQUFPaEIsU0FBUCxDQUFpQmlCLEtBQWpCLEdBQXlCQyxPQUF6QixDQUFpQyxVQUFVQyxRQUFWLEVBQW9CO0FBQ25ELFFBQUlBLFNBQVNhLE1BQVQsSUFBbUJiLFNBQVNhLE1BQVQsQ0FBZ0JDLE9BQXZDLEVBQWdEO0FBQzlDZCxlQUFTYSxNQUFULENBQWdCQyxPQUFoQixDQUF3QmIsWUFBeEI7QUFDRCxLQUZELE1BRU87QUFDTDVCLGNBQVFDLElBQVIsQ0FBYSxtRUFBYjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBM0JnQixDQUFqQiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBWdWUgLy8gbGF0ZSBiaW5kXG52YXIgdmVyc2lvblxudmFyIG1hcCA9IHdpbmRvdy5fX1ZVRV9IT1RfTUFQX18gPSBPYmplY3QuY3JlYXRlKG51bGwpXG52YXIgaW5zdGFsbGVkID0gZmFsc2VcbnZhciBpc0Jyb3dzZXJpZnkgPSBmYWxzZVxudmFyIGluaXRIb29rTmFtZSA9ICdiZWZvcmVDcmVhdGUnXG5cbmV4cG9ydHMuaW5zdGFsbCA9IGZ1bmN0aW9uICh2dWUsIGJyb3dzZXJpZnkpIHtcbiAgaWYgKGluc3RhbGxlZCkgcmV0dXJuXG4gIGluc3RhbGxlZCA9IHRydWVcblxuICBWdWUgPSB2dWUuX19lc01vZHVsZSA/IHZ1ZS5kZWZhdWx0IDogdnVlXG4gIHZlcnNpb24gPSBWdWUudmVyc2lvbi5zcGxpdCgnLicpLm1hcChOdW1iZXIpXG4gIGlzQnJvd3NlcmlmeSA9IGJyb3dzZXJpZnlcblxuICAvLyBjb21wYXQgd2l0aCA8IDIuMC4wLWFscGhhLjdcbiAgaWYgKFZ1ZS5jb25maWcuX2xpZmVjeWNsZUhvb2tzLmluZGV4T2YoJ2luaXQnKSA+IC0xKSB7XG4gICAgaW5pdEhvb2tOYW1lID0gJ2luaXQnXG4gIH1cblxuICBleHBvcnRzLmNvbXBhdGlibGUgPSB2ZXJzaW9uWzBdID49IDJcbiAgaWYgKCFleHBvcnRzLmNvbXBhdGlibGUpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAnW0hNUl0gWW91IGFyZSB1c2luZyBhIHZlcnNpb24gb2YgdnVlLWhvdC1yZWxvYWQtYXBpIHRoYXQgaXMgJyArXG4gICAgICAnb25seSBjb21wYXRpYmxlIHdpdGggVnVlLmpzIGNvcmUgXjIuMC4wLidcbiAgICApXG4gICAgcmV0dXJuXG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSByZWNvcmQgZm9yIGEgaG90IG1vZHVsZSwgd2hpY2gga2VlcHMgdHJhY2sgb2YgaXRzIGNvbnN0cnVjdG9yXG4gKiBhbmQgaW5zdGFuY2VzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGlkXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5cbmV4cG9ydHMuY3JlYXRlUmVjb3JkID0gZnVuY3Rpb24gKGlkLCBvcHRpb25zKSB7XG4gIHZhciBDdG9yID0gbnVsbFxuICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBDdG9yID0gb3B0aW9uc1xuICAgIG9wdGlvbnMgPSBDdG9yLm9wdGlvbnNcbiAgfVxuICBtYWtlT3B0aW9uc0hvdChpZCwgb3B0aW9ucylcbiAgbWFwW2lkXSA9IHtcbiAgICBDdG9yOiBWdWUuZXh0ZW5kKG9wdGlvbnMpLFxuICAgIGluc3RhbmNlczogW11cbiAgfVxufVxuXG4vKipcbiAqIE1ha2UgYSBDb21wb25lbnQgb3B0aW9ucyBvYmplY3QgaG90LlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuXG5mdW5jdGlvbiBtYWtlT3B0aW9uc0hvdCAoaWQsIG9wdGlvbnMpIHtcbiAgaW5qZWN0SG9vayhvcHRpb25zLCBpbml0SG9va05hbWUsIGZ1bmN0aW9uICgpIHtcbiAgICBtYXBbaWRdLmluc3RhbmNlcy5wdXNoKHRoaXMpXG4gIH0pXG4gIGluamVjdEhvb2sob3B0aW9ucywgJ2JlZm9yZURlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluc3RhbmNlcyA9IG1hcFtpZF0uaW5zdGFuY2VzXG4gICAgaW5zdGFuY2VzLnNwbGljZShpbnN0YW5jZXMuaW5kZXhPZih0aGlzKSwgMSlcbiAgfSlcbn1cblxuLyoqXG4gKiBJbmplY3QgYSBob29rIHRvIGEgaG90IHJlbG9hZGFibGUgY29tcG9uZW50IHNvIHRoYXRcbiAqIHdlIGNhbiBrZWVwIHRyYWNrIG9mIGl0LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gaG9va1xuICovXG5cbmZ1bmN0aW9uIGluamVjdEhvb2sgKG9wdGlvbnMsIG5hbWUsIGhvb2spIHtcbiAgdmFyIGV4aXN0aW5nID0gb3B0aW9uc1tuYW1lXVxuICBvcHRpb25zW25hbWVdID0gZXhpc3RpbmdcbiAgICA/IEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICA/IGV4aXN0aW5nLmNvbmNhdChob29rKVxuICAgICAgOiBbZXhpc3RpbmcsIGhvb2tdXG4gICAgOiBbaG9va11cbn1cblxuZnVuY3Rpb24gdHJ5V3JhcCAoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpZCwgYXJnKSB7XG4gICAgdHJ5IHsgZm4oaWQsIGFyZykgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc29sZS5lcnJvcihlKVxuICAgICAgY29uc29sZS53YXJuKCdTb21ldGhpbmcgd2VudCB3cm9uZyBkdXJpbmcgVnVlIGNvbXBvbmVudCBob3QtcmVsb2FkLiBGdWxsIHJlbG9hZCByZXF1aXJlZC4nKVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnRzLnJlcmVuZGVyID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgcmVjb3JkLmluc3RhbmNlcy5zbGljZSgpLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7XG4gICAgICBpbnN0YW5jZS4kZm9yY2VVcGRhdGUoKVxuICAgIH0pXG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMub3B0aW9uc1xuICB9XG4gIHJlY29yZC5DdG9yLm9wdGlvbnMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXJcbiAgcmVjb3JkLkN0b3Iub3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZuc1xuICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpbnN0YW5jZS4kb3B0aW9ucy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgIGluc3RhbmNlLiRvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zXG4gICAgaW5zdGFuY2UuX3N0YXRpY1RyZWVzID0gW10gLy8gcmVzZXQgc3RhdGljIHRyZWVzXG4gICAgaW5zdGFuY2UuJGZvcmNlVXBkYXRlKClcbiAgfSlcbn0pXG5cbmV4cG9ydHMucmVsb2FkID0gdHJ5V3JhcChmdW5jdGlvbiAoaWQsIG9wdGlvbnMpIHtcbiAgdmFyIHJlY29yZCA9IG1hcFtpZF1cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zLm9wdGlvbnNcbiAgICB9XG4gICAgbWFrZU9wdGlvbnNIb3QoaWQsIG9wdGlvbnMpXG4gICAgaWYgKHZlcnNpb25bMV0gPCAyKSB7XG4gICAgICAvLyBwcmVzZXJ2ZSBwcmUgMi4yIGJlaGF2aW9yIGZvciBnbG9iYWwgbWl4aW4gaGFuZGxpbmdcbiAgICAgIHJlY29yZC5DdG9yLmV4dGVuZE9wdGlvbnMgPSBvcHRpb25zXG4gICAgfVxuICAgIHZhciBuZXdDdG9yID0gcmVjb3JkLkN0b3Iuc3VwZXIuZXh0ZW5kKG9wdGlvbnMpXG4gICAgcmVjb3JkLkN0b3Iub3B0aW9ucyA9IG5ld0N0b3Iub3B0aW9uc1xuICAgIHJlY29yZC5DdG9yLmNpZCA9IG5ld0N0b3IuY2lkXG4gICAgcmVjb3JkLkN0b3IucHJvdG90eXBlID0gbmV3Q3Rvci5wcm90b3R5cGVcbiAgICBpZiAobmV3Q3Rvci5yZWxlYXNlKSB7XG4gICAgICAvLyB0ZW1wb3JhcnkgZ2xvYmFsIG1peGluIHN0cmF0ZWd5IHVzZWQgaW4gPCAyLjAuMC1hbHBoYS42XG4gICAgICBuZXdDdG9yLnJlbGVhc2UoKVxuICAgIH1cbiAgfVxuICByZWNvcmQuaW5zdGFuY2VzLnNsaWNlKCkuZm9yRWFjaChmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICBpZiAoaW5zdGFuY2UuJHZub2RlICYmIGluc3RhbmNlLiR2bm9kZS5jb250ZXh0KSB7XG4gICAgICBpbnN0YW5jZS4kdm5vZGUuY29udGV4dC4kZm9yY2VVcGRhdGUoKVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1Jvb3Qgb3IgbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSBtb2RpZmllZC4gRnVsbCByZWxvYWQgcmVxdWlyZWQuJylcbiAgICB9XG4gIH0pXG59KVxuIl19
},{}]},{},[3])
//# sourceMappingURL=main.js.map
